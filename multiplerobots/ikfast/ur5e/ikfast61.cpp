/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-09-06 16:51:29.723912
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[5]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKsin(j[0]);
x9=IKsin(j[3]);
x10=IKcos(j[3]);
x11=IKsin(j[5]);
x12=((0.00062327921214441)*x8);
x13=((0.00158999799016431)*x7);
x14=((0.1)*x10);
x15=((0.999998735952397)*x6);
x16=((0.999998735952397)*x5);
x17=((0.00158999799016431)*x6);
x18=((0.00158999799016431)*x9);
x19=((0.099)*x8);
x20=((1.0)*x8);
x21=((0.00158999799016431)*x5);
x22=((1.0)*x7);
x23=((0.099)*x0);
x24=((0.00158999799016431)*x11);
x25=((0.999998735952397)*x10);
x26=((1.0)*x10);
x27=((0.999998735952397)*x11);
x28=((1.0)*x0);
x29=((0.391999504493339)*x0);
x30=((0.999998735952397)*x9);
x31=((0.00062327921214441)*x0);
x32=((0.1)*x9);
x33=((0.00158999799016431)*x10);
x34=(x2*x4);
x35=(x1*x8);
x36=(x1*x3);
x37=(x0*x7);
x38=(x1*x2);
x39=(x3*x4);
x40=(x7*x8);
x41=(x0*x1);
x42=(x20*x6);
x43=(x28*x36);
x44=(x20*x36);
x45=(x39+x38);
x46=((((-1.0)*x34))+(((1.0)*x36)));
x47=(x10*x45);
x48=(x46*x9);
x49=((((-1.0)*x44))+((x34*x8)));
x50=((((-1.0)*x43))+((x0*x34)));
x51=(x23*(((((-1.0)*x36))+x34)));
x52=(x19*(((((-1.0)*x36))+x34)));
x53=(x28*((x39+x38)));
x54=(x20*((x39+x38)));
x55=(x23*(((((-1.0)*x39))+(((-1.0)*x38)))));
x56=(x19*(((((-1.0)*x39))+(((-1.0)*x38)))));
x57=(x10*x50);
x58=(x51*x9);
x59=(x54*x9);
x60=(x53*x9);
x61=(((x10*x46))+((x9*(((((-1.0)*x39))+(((-1.0)*x38)))))));
x62=(x57+x60);
x63=(((x10*x49))+x59);
x64=(((x10*x54))+((x9*(((((-1.0)*x20*x34))+x44)))));
x65=(((x9*((x43+(((-1.0)*x28*x34))))))+((x10*x53)));
x66=((((-1.0)*x26*x50))+(((-1.0)*x60)));
x67=((((-1.0)*x26*x49))+(((-1.0)*x59)));
x68=((((-1.0)*x14*x50))+(((-1.0)*x32*x53)));
x69=((((-1.0)*x14*x49))+(((-1.0)*x32*x54)));
x70=((0.999998735952397)*x64);
x71=(x63*x7);
x72=(x6*x68);
x73=((((-1.0)*x42))+((x62*x7)));
x74=(((x0*x6))+x71);
x75=(x42+(((-1.0)*x22*x62)));
x76=((((-1.0)*x28*x6))+(((-1.0)*x22*x63)));
eerot[0]=((((-1.0)*x27*x65))+(((-1.0)*x21*x74))+(((-1.0)*x16*x73))+(((-1.0)*x24*x64)));
eerot[1]=((((-1.0)*x27*x75))+(((-1.0)*x21*x64))+(((-1.0)*x16*x65))+(((-1.0)*x24*x76)));
eerot[2]=((((0.999998735952397)*x40))+(((-1.0)*x0*x13))+(((-1.0)*x15*x66))+(((-1.0)*x17*x67)));
IkReal x77=((1.0)*x36);
eetrans[0]=((((-1.0)*x18*x52))+((x29*x34))+(((-1.0)*x12*x77))+(((-0.424999462779769)*x41))+(((-0.000158999799016431)*x37))+(((-1.0)*x30*x51))+((x12*x34))+(((-1.0)*x15*x68))+(((-1.0)*x17*x69))+(((-1.0)*x33*x56))+(((0.0999998735952397)*x40))+(((-1.0)*x29*x77))+(((-0.000675749145819832)*x35))+(((0.132999831881669)*x8))+(((-0.000211469732691853)*x0))+(((-1.0)*x25*x55)));
eerot[3]=(((x21*x73))+(((-1.0)*x27*x64))+((x24*x65))+(((-1.0)*x16*x74)));
eerot[4]=((((-1.0)*x27*x76))+(((-1.0)*x16*x64))+((x24*x75))+((x21*x65)));
eerot[5]=((((-0.999998735952397)*x37))+((x17*x66))+(((-1.0)*x15*x67))+(((-1.0)*x13*x8)));
eetrans[1]=((((-0.132999831881669)*x0))+(((-1.0)*x31*x34))+(((0.391999504493339)*x34*x8))+((x18*x51))+((x17*x68))+(((-0.424999462779769)*x35))+((x33*x55))+(((-1.0)*x30*x52))+(((-0.000158999799016431)*x40))+(((-1.0)*x15*x69))+(((0.000675749145819832)*x41))+(((-0.391999504493339)*x3*x35))+((x31*x36))+(((-0.000211469732691853)*x8))+(((-0.0999998735952397)*x37))+(((-1.0)*x25*x56)));
eerot[6]=(((x11*x61))+((x5*x7*((x48+x47)))));
eerot[7]=(((x11*x7*(((((-1.0)*x48))+(((-1.0)*x47))))))+((x5*x61)));
eerot[8]=(x6*(((((-1.0)*x48))+(((-1.0)*x26*x45)))));
eetrans[2]=((0.163)+((x9*(((((0.099)*x38))+(((0.099)*x39))))))+(((-0.425)*x4))+(((-0.392)*x39))+(((-0.392)*x38))+((x6*(((((-1.0)*x14*x45))+(((-1.0)*x32*x46))))))+((x10*(((((0.099)*x34))+(((-0.099)*x36)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.999998735952397)*r00))+(((0.00158999799016431)*r10)));
new_r01=((((-0.999998735952397)*r01))+(((0.00158999799016431)*r11)));
new_r02=((((-0.999998735952397)*r02))+(((0.00158999799016431)*r12)));
new_px=((((0.0999998735952397)*r02))+(((-0.000158999799016431)*r12))+(((-0.999998735952397)*px))+(((0.00158999799016431)*py)));
new_r10=((((-0.00158999799016431)*r00))+(((-0.999998735952397)*r10)));
new_r11=((((-0.00158999799016431)*r01))+(((-0.999998735952397)*r11)));
new_r12=((((-0.00158999799016431)*r02))+(((-0.999998735952397)*r12)));
new_py=((((-0.00158999799016431)*px))+(((0.0999998735952397)*r12))+(((0.000158999799016431)*r02))+(((-0.999998735952397)*py)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.163)+(((-0.1)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x78=((1.0)*px);
IkReal x79=((1.0)*pz);
IkReal x80=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x80))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x79)));
rxp0_2=((((-1.0)*r10*x78))+((py*r00)));
rxp1_0=((((-1.0)*r21*x80))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x79)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x78)));
rxp2_0=((((-1.0)*r22*x80))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x79)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x78)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x81=((0.198)*npx);
IkReal x82=((0.198)*npy);
IkReal x83=((0.099)*r22);
IkReal x84=((0.099)*r21);
IkReal x85=((-0.099)*r20);
IkReal x86=((-1.0)*r20);
IkReal x87=((-1.0)*rxp0_2);
IkReal x88=((-0.099)*r21);
IkReal x89=((-1.0)*r21);
IkReal x90=((-1.0)*rxp1_2);
IkReal x91=((-1.0)*npx);
IkReal x92=((-1.0)*r22);
IkReal x93=((-1.0)*npz);
matrixinvcoeffs[0]=x85;
matrixinvcoeffs[1]=x81;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x86;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x87;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x85;
matrixinvcoeffs[19]=x81;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x86;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x87;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x88;
matrixinvcoeffs[33]=x82;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x89;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x90;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x88;
matrixinvcoeffs[51]=x82;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x89;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x90;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x92;
matrixinvcoeffs[76]=x83;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x93;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x83;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x90;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x88;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x90;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x84;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x86;
matrixinvcoeffs[133]=x91;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.099)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x86;
matrixinvcoeffs[151]=x91;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x85;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x92;
matrixinvcoeffs[165]=x93;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x83;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x92;
matrixinvcoeffs[183]=x93;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.099)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x89;
matrixinvcoeffs[204]=x84;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x90;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x84;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x91;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x85;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x86;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x85;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x87;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x94=pz*pz;
IkReal x95=pp*pp;
IkReal x96=((0.198)*pz);
IkReal x97=((0.009801)*r21);
IkReal x98=(gclwh13_0*pz);
IkReal x99=((1.7)*pz);
IkReal x100=(gclwh15_9*npx);
IkReal x101=(pp*r21);
IkReal x102=(gclwh8_12*rxp0_2);
IkReal x103=(gclwh5_9*npz);
IkReal x104=(npx*pz);
IkReal x105=(pp*r20);
IkReal x106=(npy*pz);
IkReal x107=((0.792)*rxp1_2);
IkReal x108=(gclwh13_15*r21);
IkReal x109=(pp*r22);
IkReal x110=(gclwh15_1*r20);
IkReal x111=(gclwh10_12*r22);
IkReal x112=((0.198)*rxp0_2);
IkReal x113=(npz*pz);
IkReal x114=((2.0)*gclwh11_10);
IkReal x115=(gclwh11_0*r22);
IkReal x116=((0.009801)*pz);
IkReal x117=((0.019602)*r22);
IkReal x118=(gclwh12_2*rxp1_2);
IkReal x119=(gclwh14_2*pz);
IkReal x120=(gclwh14_8*rxp0_2);
IkReal x121=((0.026334)*rxp2_2);
IkReal x122=((2.0)*gclwh4_11);
IkReal x123=(gclwh6_2*r21);
IkReal x124=((0.026334)*rxp0_2);
IkReal x125=(gclwh4_8*r22);
IkReal x126=((0.007683984)*r22);
IkReal x127=(gclwh14_8*r20);
IkReal x128=(gclwh12_8*r21);
IkReal x129=(gclwh2_0*pz);
IkReal x130=(gclwh9_13*r20);
IkReal x131=((0.013068)*rxp0_2);
IkReal x132=((0.009801)*r22);
IkReal x133=((2.0)*gclwh9_10);
IkReal x134=((8.7983577e-5)*r21);
IkReal x135=((2.0)*gclwh15_10);
IkReal x136=(gclwh4_14*r22);
IkReal x137=(gclwh7_13*r21);
IkReal x138=((0.161766)*rxp1_2);
IkReal x139=(gclwh5_1*r22);
IkReal x140=((0.001303533)*r20);
IkReal x141=((2.0)*gclwh13_10);
IkReal x142=(gclwh15_15*rxp0_2);
IkReal x143=((0.006619369977)*r20);
IkReal x144=(gclwh14_3*rxp0_2);
IkReal x145=(gclwh12_14*rxp1_2);
IkReal x146=((0.266)*gclwh5_15);
IkReal x147=((0.396)*rxp1_2);
IkReal x148=((4.0)*gclwh11_10);
IkReal x149=((8.7983577e-5)*r20);
IkReal x150=(gclwh13_9*r21);
IkReal x151=((1.0)*pz);
IkReal x152=((2.0)*pp);
IkReal x153=(gclwh13_9*rxp1_2);
IkReal x154=(gclwh6_12*r21);
IkReal x155=((0.198)*rxp2_2);
IkReal x156=(gclwh5_0*pz);
IkReal x157=((0.198)*rxp1_2);
IkReal x158=(gclwh15_9*r20);
IkReal x159=(gclwh1_2*r20);
IkReal x160=(gclwh15_9*rxp0_2);
IkReal x161=((4.0)*gclwh8_11);
IkReal x162=((0.396)*rxp2_2);
IkReal x163=((0.013068)*rxp2_2);
IkReal x164=((0.006619369977)*r21);
IkReal x165=(gclwh14_2*r20);
IkReal x166=(gclwh9_0*r20);
IkReal x167=((0.155232)*rxp2_2);
IkReal x168=((2.0)*gclwh7_10);
IkReal x169=((0.266)*gclwh14_14);
IkReal x170=(gclwh14_14*rxp0_2);
IkReal x171=(gclwh14_11*rxp0_2);
IkReal x172=((4.0)*gclwh9_10);
IkReal x173=(gclwh9_13*rxp0_2);
IkReal x174=(gclwh9_10*r20);
IkReal x175=((0.001303533)*r22);
IkReal x176=((0.066)*pz);
IkReal x177=(gclwh5_9*r22);
IkReal x178=(gclwh12_8*rxp1_2);
IkReal x179=((4.0)*gclwh7_10);
IkReal x180=((0.155232)*rxp0_2);
IkReal x181=((0.001777446)*rxp1_2);
IkReal x182=((0.266)*gclwh15_15);
IkReal x183=(gclwh8_2*pz);
IkReal x184=(gclwh7_10*r21);
IkReal x185=((0.266)*gclwh12_14);
IkReal x186=((0.009801)*r20);
IkReal x187=((0.133724646)*rxp2_2);
IkReal x188=((0.266)*gclwh13_15);
IkReal x189=((0.019602)*r20);
IkReal x190=((2.0)*gclwh6_11);
IkReal x191=((1.634)*pz);
IkReal x192=((0.052668)*rxp2_2);
IkReal x193=((0.007683984)*r21);
IkReal x194=((2.0)*gclwh5_10);
IkReal x195=(gclwh7_0*r21);
IkReal x196=(gclwh5_9*rxp2_2);
IkReal x197=((2.0)*gclwh12_11);
IkReal x198=(gclwh6_2*pz);
IkReal x199=((0.002607066)*r20);
IkReal x200=((0.133724646)*rxp1_2);
IkReal x201=((0.006534)*rxp2_2);
IkReal x202=(gclwh8_12*r20);
IkReal x203=((0.016014834)*r21);
IkReal x204=(gclwh11_13*r22);
IkReal x205=(gclwh10_2*pz);
IkReal x206=((0.266)*gclwh4_14);
IkReal x207=(gclwh13_0*rxp1_2);
IkReal x208=(gclwh9_0*pz);
IkReal x209=(gclwh4_3*r22);
IkReal x210=((2.0)*gclwh8_11);
IkReal x211=((4.0)*gclwh10_11);
IkReal x212=(gclwh13_15*rxp1_2);
IkReal x213=((0.105336)*rxp2_2);
IkReal x214=((0.001303533)*r21);
IkReal x215=(gclwh4_8*rxp2_2);
IkReal x216=((0.026334)*rxp1_2);
IkReal x217=(gclwh7_0*pz);
IkReal x218=((0.007683984)*r20);
IkReal x219=((0.161766)*rxp2_2);
IkReal x220=((0.396)*rxp0_2);
IkReal x221=(gclwh8_2*r20);
IkReal x222=((0.019602)*r21);
IkReal x223=((0.323532)*rxp2_2);
IkReal x224=((0.006534)*rxp1_2);
IkReal x225=((4.0)*gclwh6_11);
IkReal x226=(gclwh15_1*rxp0_2);
IkReal x227=(gclwh11_0*pz);
IkReal x228=((0.792)*rxp2_2);
IkReal x229=((0.001777446)*rxp2_2);
IkReal x230=(gclwh4_2*r22);
IkReal x231=((0.039204)*r22);
IkReal x232=(gclwh6_2*rxp1_2);
IkReal x233=((0.323532)*rxp0_2);
IkReal x234=((2.0)*gclwh10_11);
IkReal x235=(gclwh10_2*r22);
IkReal x236=((2.0)*gclwh14_11);
IkReal x237=(gclwh14_14*x124);
IkReal x238=(gclwh6_5*x214);
IkReal x239=(gclwh4_14*x121);
IkReal x240=((0.026334)*x145);
IkReal x241=(gclwh10_5*x175);
IkReal x242=(gclwh8_5*x140);
IkReal x243=(gclwh6_11*x97);
IkReal x244=((0.019602)*x178);
IkReal x245=(gclwh12_11*x157);
IkReal x246=(gclwh4_11*x155);
IkReal x247=((0.019602)*x215);
IkReal x248=(gclwh10_11*x132);
IkReal x249=(gclwh8_11*x186);
IkReal x250=(gclwh14_11*x112);
IkReal x251=((0.019602)*x120);
IkReal x252=(gclwh15_10*x112);
IkReal x253=((0.019602)*x153);
IkReal x254=((0.009801)*x174);
IkReal x255=((0.019602)*x196);
IkReal x256=(gclwh11_10*x132);
IkReal x257=(gclwh13_10*x157);
IkReal x258=((0.019602)*x160);
IkReal x259=(gclwh5_10*x155);
IkReal x260=(gclwh7_10*x97);
IkReal x261=(gclwh7_7*x214);
IkReal x262=(gclwh15_15*x124);
IkReal x263=(gclwh11_7*x175);
IkReal x264=((0.026334)*x212);
IkReal x265=(gclwh9_7*x140);
IkReal x266=(gclwh5_15*x121);
IkReal x267=(gclwh14_14*x140);
IkReal x268=(gclwh8_5*x124);
IkReal x269=(gclwh10_5*x121);
IkReal x270=(gclwh12_14*x214);
IkReal x271=((0.001303533)*x136);
IkReal x272=(gclwh6_5*x216);
IkReal x273=((0.000970299)*x128);
IkReal x274=((0.000970299)*x125);
IkReal x275=(gclwh10_11*x155);
IkReal x276=(gclwh12_11*x97);
IkReal x277=(gclwh4_11*x132);
IkReal x278=(gclwh8_11*x112);
IkReal x279=(gclwh14_11*x186);
IkReal x280=((0.000970299)*x127);
IkReal x281=(gclwh6_11*x157);
IkReal x282=((0.000970299)*x158);
IkReal x283=(gclwh5_10*x132);
IkReal x284=(gclwh9_10*x112);
IkReal x285=(gclwh13_10*x97);
IkReal x286=(gclwh11_10*x155);
IkReal x287=(gclwh7_10*x157);
IkReal x288=((0.000970299)*x177);
IkReal x289=((0.000970299)*x150);
IkReal x290=(gclwh15_10*x186);
IkReal x291=(gclwh5_15*x175);
IkReal x292=((0.001303533)*x108);
IkReal x293=(gclwh7_7*x216);
IkReal x294=(gclwh9_7*x124);
IkReal x295=(gclwh15_15*x140);
IkReal x296=(gclwh11_7*x121);
IkReal x297=(gclwh10_11*x117);
IkReal x298=(gclwh8_11*x189);
IkReal x299=((0.396)*x171);
IkReal x300=((0.052668)*x170);
IkReal x301=((0.052668)*x145);
IkReal x302=(gclwh4_14*x192);
IkReal x303=(gclwh6_11*x222);
IkReal x304=(gclwh12_11*x147);
IkReal x305=(gclwh4_11*x162);
IkReal x306=(gclwh5_15*x192);
IkReal x307=((0.052668)*x212);
IkReal x308=((0.052668)*x142);
IkReal x309=(gclwh15_10*x220);
IkReal x310=((0.019602)*x174);
IkReal x311=(gclwh11_10*x117);
IkReal x312=(gclwh13_10*x147);
IkReal x313=(gclwh5_10*x162);
IkReal x314=((0.019602)*x184);
IkReal x315=(gclwh6_11*x147);
IkReal x316=(gclwh14_11*x189);
IkReal x317=(gclwh14_14*x199);
IkReal x318=((0.002607066)*gclwh12_14*r21);
IkReal x319=((0.002607066)*x136);
IkReal x320=(r21*x95);
IkReal x321=((2.0)*x94);
IkReal x322=(r20*x95);
IkReal x323=((0.133)*gclwh6_5*x101);
IkReal x324=((0.266)*gclwh10_5*x113);
IkReal x325=((0.266)*gclwh8_5*x104);
IkReal x326=((0.133)*gclwh10_5*x109);
IkReal x327=((0.266)*gclwh6_5*x106);
IkReal x328=((0.133)*gclwh8_5*x105);
IkReal x329=(x113*x234);
IkReal x330=(gclwh14_2*rxp0_2*x96);
IkReal x331=(gclwh12_3*pp*x157);
IkReal x332=(x104*x210);
IkReal x333=(x109*x205);
IkReal x334=(gclwh4_3*pp*x155);
IkReal x335=(x116*x235);
IkReal x336=(x105*x183);
IkReal x337=(x116*x221);
IkReal x338=(x118*x96);
IkReal x339=(x198*x97);
IkReal x340=(x106*x190);
IkReal x341=(gclwh14_3*pp*x112);
IkReal x342=(gclwh4_2*rxp2_2*x96);
IkReal x343=(gclwh5_1*pp*x155);
IkReal x344=(x116*x166);
IkReal x345=(gclwh13_1*pp*x157);
IkReal x346=(gclwh15_0*rxp0_2*x96);
IkReal x347=(x109*x227);
IkReal x348=(x115*x116);
IkReal x349=(x106*x168);
IkReal x350=(x105*x208);
IkReal x351=(x113*x114);
IkReal x352=(x104*x133);
IkReal x353=(x217*x97);
IkReal x354=(gclwh15_1*pp*x112);
IkReal x355=(gclwh5_0*rxp2_2*x96);
IkReal x356=(x207*x96);
IkReal x357=((0.266)*gclwh11_7*x113);
IkReal x358=((0.133)*gclwh7_7*x101);
IkReal x359=((0.266)*gclwh9_7*x104);
IkReal x360=((0.133)*gclwh9_7*x105);
IkReal x361=((0.133)*gclwh11_7*x109);
IkReal x362=((0.266)*gclwh7_7*x106);
IkReal x363=(x113*x206);
IkReal x364=((0.133)*gclwh14_14*x105);
IkReal x365=(x106*x185);
IkReal x366=((0.133)*gclwh12_14*x101);
IkReal x367=(x104*x169);
IkReal x368=((0.133)*gclwh4_14*x109);
IkReal x369=(x105*x119);
IkReal x370=(gclwh12_3*x320);
IkReal x371=(x232*x96);
IkReal x372=((0.099)*gclwh12_8*x101);
IkReal x373=(gclwh3_3*x320);
IkReal x374=(gclwh1_3*x322);
IkReal x375=(x104*x236);
IkReal x376=(gclwh3_2*pz*x97);
IkReal x377=(x209*x95);
IkReal x378=((0.099)*gclwh4_8*x109);
IkReal x379=(x116*x165);
IkReal x380=(gclwh14_8*npx*x96);
IkReal x381=(x116*x159);
IkReal x382=((0.099)*gclwh14_8*x105);
IkReal x383=(x116*x230);
IkReal x384=(gclwh4_8*npz*x96);
IkReal x385=(x113*x122);
IkReal x386=(gclwh10_2*rxp2_2*x96);
IkReal x387=(gclwh8_2*rxp0_2*x96);
IkReal x388=(x106*x197);
IkReal x389=(gclwh12_8*npy*x96);
IkReal x390=(gclwh12_2*pz*x97);
IkReal x391=((0.099)*gclwh15_9*x105);
IkReal x392=(x110*x95);
IkReal x393=(x109*x156);
IkReal x394=(x101*x98);
IkReal x395=(x97*x98);
IkReal x396=(x103*x96);
IkReal x397=(gclwh0_0*r20*x116);
IkReal x398=(x129*x97);
IkReal x399=(x104*x135);
IkReal x400=(gclwh2_1*x320);
IkReal x401=(gclwh11_0*rxp2_2*x96);
IkReal x402=(gclwh5_0*r22*x116);
IkReal x403=(gclwh9_0*rxp0_2*x96);
IkReal x404=(gclwh13_9*npy*x96);
IkReal x405=(gclwh0_1*x322);
IkReal x406=((0.099)*gclwh13_9*x101);
IkReal x407=(x100*x96);
IkReal x408=(gclwh7_0*rxp1_2*x96);
IkReal x409=(gclwh15_0*r20*x116);
IkReal x410=((0.099)*gclwh5_9*x109);
IkReal x411=(x113*x194);
IkReal x412=(x106*x141);
IkReal x413=((0.133)*gclwh13_15*x101);
IkReal x414=(x104*x182);
IkReal x415=((0.133)*gclwh5_15*x109);
IkReal x416=(x106*x188);
IkReal x417=(x113*x146);
IkReal x418=((0.133)*gclwh15_15*x105);
IkReal x419=(x105*x210);
IkReal x420=(x109*x234);
IkReal x421=(x106*x225);
IkReal x422=(x104*x161);
IkReal x423=(x101*x190);
IkReal x424=(x113*x211);
IkReal x425=(x109*x114);
IkReal x426=(x106*x179);
IkReal x427=(x105*x133);
IkReal x428=(x101*x168);
IkReal x429=(x104*x172);
IkReal x430=(x113*x148);
IkReal x431=(x105*x236);
IkReal x432=((4.0)*gclwh12_11*x106);
IkReal x433=((4.0)*gclwh4_11*x113);
IkReal x434=((0.532)*gclwh12_14*x106);
IkReal x435=((0.532)*gclwh4_14*x113);
IkReal x436=(x105*x169);
IkReal x437=((0.532)*gclwh14_14*x104);
IkReal x438=(x109*x206);
IkReal x439=(x101*x185);
IkReal x440=(npz*x321);
IkReal x441=(gclwh6_2*npy*x321);
IkReal x442=(gclwh6_2*x101*x151);
IkReal x443=(gclwh10_2*x440);
IkReal x444=(gclwh8_2*npx*x321);
IkReal x445=(gclwh7_0*npy*x321);
IkReal x446=(gclwh9_0*npx*x321);
IkReal x447=(gclwh11_0*x440);
IkReal x448=(gclwh7_0*x101*x151);
IkReal x449=(gclwh12_2*npy*x321);
IkReal x450=(gclwh3_2*npy*x321);
IkReal x451=(gclwh1_2*npx*x321);
IkReal x452=(gclwh14_3*x104*x152);
IkReal x453=(gclwh4_2*x440);
IkReal x454=(gclwh4_3*x113*x152);
IkReal x455=(gclwh12_2*x101*x151);
IkReal x456=(gclwh1_2*x105*x151);
IkReal x457=(gclwh3_3*x106*x152);
IkReal x458=(gclwh4_2*x109*x151);
IkReal x459=(gclwh1_3*x104*x152);
IkReal x460=(gclwh3_2*x101*x151);
IkReal x461=(gclwh12_3*x106*x152);
IkReal x462=(gclwh14_2*npx*x321);
IkReal x463=((1.0)*gclwh14_3*x322);
IkReal x464=(gclwh0_0*npx*x321);
IkReal x465=(gclwh2_0*npy*x321);
IkReal x466=(gclwh5_1*x113*x152);
IkReal x467=(gclwh13_1*x106*x152);
IkReal x468=(gclwh15_0*npx*x321);
IkReal x469=(gclwh2_1*x106*x152);
IkReal x470=(gclwh0_1*x104*x152);
IkReal x471=(gclwh5_0*x440);
IkReal x472=(gclwh13_0*npy*x321);
IkReal x473=(gclwh0_0*x105*x151);
IkReal x474=(gclwh15_0*x105*x151);
IkReal x475=((1.0)*x101*x129);
IkReal x476=((1.0)*gclwh13_1*x320);
IkReal x477=((1.0)*x139*x95);
IkReal x478=(gclwh15_1*x104*x152);
IkReal x479=(x306+x307);
IkReal x480=(x294+x296);
IkReal x481=(x269+x268);
IkReal x482=(x264+x266);
IkReal x483=(x302+x301);
IkReal x484=(x239+x240);
IkReal x485=(x340+x250+x249+x248);
IkReal x486=(x349+x254+x256+x252);
IkReal x487=(x290+x287+x412+x411);
IkReal x488=(x385+x388+x279+x281);
IkReal x489=(x295+x416+x417+x418);
IkReal x490=(x363+x364+x365+x267);
IkReal x491=(x357+x359+x358+x261);
IkReal x492=(x324+x325+x323+x238);
IkReal x493=(x317+x434+x435+x436);
IkReal x494=(x399+x286+x285+x284+x283);
IkReal x495=(x375+x276+x277+x275+x278);
IkReal x496=(x351+x352+x259+x257+x260);
IkReal x497=(x332+x329+x243+x246+x245);
IkReal x498=(x319+x318+x438+x439+x437);
IkReal x499=(x360+x361+x362+x265+x263);
IkReal x500=(x315+x316+x431+x432+x433);
IkReal x501=(x368+x366+x367+x270+x271);
IkReal x502=(x326+x327+x328+x242+x241);
IkReal x503=(x291+x292+x413+x414+x415);
IkReal x504=(x304+x305+x303+x424+x423+x422);
IkReal x505=(x314+x313+x312+x429+x428+x430);
IkReal x506=(x298+x299+x297+x419+x421+x420);
IkReal x507=(x309+x311+x310+x427+x426+x425);
IkReal x508=((((4.0)*gclwh14_11*x104))+((x101*x197))+((gclwh8_11*x220))+((gclwh4_11*x117))+((x109*x122))+((gclwh12_11*x222))+((gclwh10_11*x162)));
IkReal x509=(x339+x338+x342+x341+x251+x444+x443+x442);
IkReal x510=(x353+x355+x354+x356+x258+x448+x447+x446);
IkReal x511=(x350+x343+x346+x347+x344+x345+x348+x255+x253+x445);
IkReal x512=(x333+x331+x330+x337+x336+x335+x334+x247+x244+x441);
IkReal x513=(x289+x288+x407+x406+x409+x408+x410+x469+x474+x475+x476+x477+x470+x471+x472+x473+x478);
IkReal x514=(x380+x381+x379+x378+x377+x376+x374+x373+x372+x371+x370+x369+x274+x273+x449+x452+x453+x450+x451+x96);
IkReal x515=(x386+x387+x384+x382+x383+x389+x390+x280+x458+x459+x456+x457+x454+x455+x463+x462+x461+x460);
IkReal x516=(x395+x394+x397+x396+x391+x393+x392+x398+x282+x401+x400+x403+x402+x405+x404+x468+x467+x466+x465+x464+x96);
op[0]=((((-0.008007417)*x202))+(((-0.008007417)*x111))+(((1.634)*gclwh10_12*x113))+(((-1.0)*x502))+(((-1.0)*gclwh12_8*x138))+(((-1.0)*x237))+(((1.634)*gclwh8_12*x104))+x484+x492+(((0.161766)*x120))+(((-1.634)*gclwh6_12*x106))+(((0.008007417)*x154))+(((-0.817)*gclwh8_12*x105))+(((-0.161766)*x215))+(((-0.817)*gclwh10_12*x109))+(((0.817)*gclwh6_12*x101)));
op[1]=(((gclwh8_11*x105))+(((0.133724646)*x144))+(((-1.0)*x497))+(((-1.0)*gclwh12_3*x200))+(((-1.0)*x509))+((gclwh10_11*x109))+x485+x512+(((-1.0)*gclwh4_3*x187))+(((-1.0)*gclwh6_11*x101)));
op[2]=((-0.208544)+(((-1.0)*x504))+x506);
op[3]=((((-0.155232)*x118))+(((-1.568)*gclwh10_2*x113))+(((-1.0)*x483))+(((0.784)*gclwh10_2*x109))+(((-1.568)*gclwh8_2*x104))+(((-1.0)*gclwh4_2*x167))+x300+((gclwh8_2*x218))+(((1.568)*gclwh6_2*x106))+(((-0.784)*gclwh6_2*x101))+(((0.1683)*x215))+(((-0.007683984)*x123))+(((-0.1683)*x120))+((gclwh14_2*x180))+(((0.784)*gclwh8_2*x105))+((gclwh10_2*x126))+(((0.1683)*x178)));
op[4]=((((-0.066)*gclwh6_12*x106))+((gclwh4_8*x201))+(((0.000323433)*x154))+(((-1.0)*x484))+(((-0.033)*gclwh8_12*x105))+(((0.033)*gclwh6_12*x101))+(((-1.0)*x502))+(((0.006534)*x178))+(((0.066)*gclwh10_12*x113))+(((-0.000323433)*x111))+x237+x492+(((-0.000323433)*x202))+(((-0.006534)*x120))+(((0.066)*gclwh8_12*x104))+(((-0.033)*gclwh10_12*x109)));
op[5]=((((-1.0)*x485))+(((-1.0)*gclwh12_3*x181))+(((-1.0)*x509))+(((-1.0)*gclwh8_11*x105))+((gclwh6_11*x101))+(((-1.0)*gclwh10_11*x109))+x497+x512+(((-1.0)*gclwh4_3*x229))+(((0.001777446)*x144)));
op[6]=((((0.133724646)*x226))+((gclwh7_10*x101))+(((-1.0)*x486))+(((-1.0)*gclwh13_1*x200))+(((-1.0)*gclwh9_10*x105))+(((-1.0)*gclwh5_1*x187))+x496+x511+(((-1.0)*x510))+(((-1.0)*gclwh11_10*x109)));
op[7]=((((-0.008007417)*x204))+(((1.634)*gclwh11_13*x113))+(((-1.0)*x499))+(((-1.634)*gclwh7_13*x106))+(((-0.008007417)*x130))+(((0.817)*gclwh7_13*x101))+(((-0.161766)*x196))+(((0.008007417)*x137))+x482+x491+(((-1.0)*gclwh13_9*x138))+(((-1.0)*x262))+(((-0.817)*gclwh11_13*x109))+(((-0.817)*gclwh9_13*x105))+(((1.634)*gclwh9_13*x104))+(((0.161766)*x160)));
op[8]=((((0.784)*gclwh9_0*x105))+(((0.007683984)*x166))+(((-1.0)*gclwh7_0*x193))+((gclwh15_0*x180))+(((-1.568)*gclwh9_0*x104))+(((1.568)*gclwh7_0*x106))+x479+(((0.784)*gclwh11_0*x109))+(((-1.0)*gclwh5_0*x167))+(((-1.568)*gclwh11_0*x113))+(((0.007683984)*x115))+(((-0.155232)*x207))+(((-0.784)*gclwh7_0*x101))+(((-0.1683)*x153))+(((-0.1683)*x196))+(((-1.0)*x308))+(((0.1683)*x160)));
op[9]=((-0.208544)+(((-1.0)*x505))+x507);
op[10]=((((-1.0)*x496))+x486+(((-1.0)*gclwh5_1*x229))+((gclwh11_10*x109))+(((-1.0)*gclwh13_1*x181))+x511+(((0.001777446)*x226))+(((-1.0)*gclwh7_10*x101))+(((-1.0)*x510))+((gclwh9_10*x105)));
op[11]=((((-0.033)*gclwh9_13*x105))+(((-1.0)*x499))+(((0.006534)*x196))+(((-1.0)*x482))+(((-0.000323433)*x130))+(((0.066)*gclwh9_13*x104))+(((0.006534)*x153))+(((-0.006534)*x160))+(((0.066)*gclwh11_13*x113))+x262+(((-0.033)*gclwh11_13*x109))+x491+(((-0.000323433)*x204))+(((0.033)*gclwh7_13*x101))+(((0.000323433)*x137))+(((-0.066)*gclwh7_13*x106)));
op[12]=((((0.817)*gclwh14_8*x105))+(((-0.817)*gclwh12_8*x101))+(((-1.0)*x490))+(((1.634)*gclwh12_8*x106))+(((-0.008007417)*x125))+(((-0.008007417)*x128))+(((-1.0)*gclwh6_12*x138))+(((0.008007417)*x127))+(((-0.817)*gclwh4_8*x109))+x481+x501+(((1.634)*gclwh4_8*x113))+(((-1.0)*x272))+(((-1.634)*gclwh14_8*x104))+(((0.161766)*x102))+((gclwh10_12*x219)));
op[13]=((-0.685178)+(((1.350754)*gclwh12_3*x106))+(((-1.0)*gclwh12_3*x164))+(((1.350754)*gclwh4_3*x113))+(((-1.0)*x495))+(((-0.006619369977)*x209))+(((1.350754)*gclwh1_3*x104))+(((-1.350754)*gclwh14_3*x104))+(((-0.685178)*gclwh3_3*x101))+(((-0.685178)*gclwh1_3*x105))+(((-0.665576)*gclwh4_3*x109))+(((0.665576)*gclwh14_3*x105))+(((1.350754)*gclwh3_3*x106))+x488+(((-1.0)*gclwh12_11*x101))+((gclwh3_3*x164))+(((-1.0)*gclwh4_11*x109))+x514+((gclwh14_3*x143))+((gclwh14_11*x105))+(((-1.0)*x515))+(((-0.665576)*gclwh12_3*x101))+((gclwh1_3*x143)));
op[14]=((-0.0893)+(((-1.0)*x508))+x500);
op[15]=((((-1.0)*gclwh4_2*x126))+(((1.568)*gclwh4_2*x113))+(((-1.0)*x498))+(((-1.0)*gclwh12_2*x193))+(((0.007683984)*x165))+(((-0.85)*gclwh14_8*x105))+(((-1.0)*gclwh12_8*npy*x99))+(((-1.568)*gclwh14_2*x104))+(((0.007683984)*x159))+(((-0.784)*gclwh12_2*x101))+(((-1.0)*gclwh10_2*x167))+x493+(((1.568)*gclwh1_2*x104))+(((1.568)*gclwh3_2*x106))+(((-0.784)*gclwh4_2*x109))+(((-0.784)*gclwh1_2*x105))+(((0.85)*gclwh12_8*x101))+(((0.155232)*x232))+(((0.00833085)*x128))+(((0.00833085)*x125))+(((0.784)*gclwh14_2*x105))+(((-0.00833085)*x127))+((gclwh14_8*npx*x99))+(((-0.784)*gclwh3_2*x101))+(((0.85)*gclwh4_8*x109))+(((-1.0)*gclwh4_8*npz*x99))+((gclwh3_2*x193))+(((-1.0)*gclwh8_2*x180))+(((1.568)*gclwh12_2*x106)));
op[16]=((((0.066)*gclwh14_8*x104))+(((-0.066)*gclwh4_8*x113))+(((0.006534)*x102))+(((-0.066)*gclwh12_8*x106))+(((-1.0)*gclwh6_12*x224))+(((-1.0)*x501))+(((-0.000323433)*x127))+((gclwh10_12*x201))+(((0.033)*gclwh4_8*x109))+(((-0.033)*gclwh14_8*x105))+x481+x490+(((-1.0)*x272))+(((0.033)*gclwh12_8*x101))+(((0.000323433)*x128))+(((0.000323433)*x125)));
op[17]=((0.018778)+(((-0.017954)*gclwh14_3*x104))+(((0.000824)*gclwh4_3*x109))+((gclwh12_11*x101))+(((-1.0)*x488))+((gclwh3_3*x134))+(((-0.018778)*gclwh3_3*x101))+(((-0.000824)*gclwh14_3*x105))+(((0.017954)*gclwh1_3*x104))+((gclwh4_11*x109))+x495+x514+((gclwh14_3*x149))+(((0.017954)*gclwh4_3*x113))+(((-0.018778)*gclwh1_3*x105))+(((0.017954)*gclwh3_3*x106))+(((-1.0)*x515))+(((-1.0)*gclwh12_3*x134))+((gclwh1_3*x149))+(((-8.7983577e-5)*x209))+(((0.000824)*gclwh12_3*x101))+(((0.017954)*gclwh12_3*x106))+(((-1.0)*gclwh14_11*x105)));
op[18]=((0.685178)+(((-1.350754)*gclwh5_1*x113))+(((1.350754)*gclwh2_1*x106))+((gclwh13_1*x164))+(((-1.0)*x494))+(((-0.685178)*gclwh0_1*x105))+(((-1.0)*gclwh13_10*x101))+(((0.665576)*gclwh5_1*x109))+(((0.665576)*gclwh13_1*x101))+(((-1.350754)*gclwh13_1*x106))+((gclwh15_10*x105))+(((1.350754)*gclwh15_1*x104))+x487+(((-0.685178)*gclwh2_1*x101))+x516+(((-0.665576)*gclwh15_1*x105))+(((1.350754)*gclwh0_1*x104))+(((-1.0)*x513))+((gclwh0_1*x143))+(((0.006619369977)*x139))+(((-0.006619369977)*x110))+((gclwh2_1*x164))+(((-1.0)*gclwh5_10*x109)));
op[19]=((((0.817)*gclwh13_9*x101))+(((-1.634)*gclwh13_9*x106))+(((-0.161766)*x173))+(((-0.817)*gclwh15_9*x105))+(((-1.0)*gclwh11_13*x219))+(((-1.0)*x480))+((gclwh7_13*x138))+(((-1.0)*x503))+((x100*x191))+(((-0.008007417)*x158))+x293+x489+(((0.817)*gclwh5_9*x109))+(((0.008007417)*x150))+(((0.008007417)*x177))+(((-1.0)*x103*x191)));
op[20]=((((1.568)*gclwh15_0*x104))+(((-1.0)*gclwh13_9*npy*x99))+(((-0.85)*gclwh15_9*x105))+(((-0.00833085)*x158))+((gclwh2_0*x193))+(((1.568)*gclwh2_0*x106))+(((-1.0)*x103*x99))+((x100*x99))+(((0.784)*gclwh13_0*x101))+(((0.00833085)*x150))+(((-1.0)*gclwh15_0*x218))+(((0.00833085)*x177))+(((-1.568)*gclwh5_0*x113))+(((-0.784)*gclwh15_0*x105))+(((-1.568)*npy*x98))+((x105*x182))+(((0.85)*gclwh5_9*x109))+(((1.568)*gclwh0_0*x104))+(((-1.0)*x101*x188))+(((-0.784)*gclwh2_0*x101))+(((0.85)*gclwh13_9*x101))+(((-0.784)*gclwh0_0*x105))+(((0.532)*gclwh13_15*x106))+(((0.532)*gclwh5_15*x113))+((gclwh9_0*x180))+(((-0.155232)*gclwh7_0*rxp1_2))+(((-1.0)*x109*x146))+(((0.784)*gclwh5_0*x109))+((gclwh11_0*x167))+(((-0.002607066)*gclwh5_15*r22))+((gclwh15_15*x199))+(((-0.002607066)*x108))+((gclwh0_0*x218))+((gclwh13_0*x193))+(((-0.532)*gclwh15_15*x104))+((gclwh5_0*x126)));
op[21]=((-0.0893)+((gclwh11_10*x162))+((x101*x141))+((gclwh9_10*x220))+((gclwh5_10*x117))+(((-4.0)*gclwh5_10*x113))+(((-1.0)*gclwh15_10*x189))+((x109*x194))+(((-1.0)*x105*x135))+((gclwh13_10*x222))+(((4.0)*gclwh15_10*x104))+(((-1.0)*gclwh7_10*x147))+(((-4.0)*gclwh13_10*x106)));
op[22]=((-0.018778)+(((8.7983577e-5)*x139))+(((-8.7983577e-5)*x110))+(((-0.017954)*gclwh13_1*x106))+(((-1.0)*gclwh15_10*x105))+(((-1.0)*x487))+(((0.017954)*gclwh2_1*x106))+(((-0.018778)*gclwh2_1*x101))+((gclwh2_1*x134))+((gclwh5_10*x109))+((gclwh13_1*x134))+(((0.000824)*gclwh15_1*x105))+((gclwh13_10*x101))+(((-0.000824)*gclwh5_1*x109))+(((0.017954)*gclwh15_1*x104))+x494+x516+(((-0.018778)*gclwh0_1*x105))+(((-1.0)*x513))+((gclwh0_1*x149))+(((-0.000824)*gclwh13_1*x101))+(((0.017954)*gclwh0_1*x104))+(((-0.017954)*gclwh5_1*x113)));
op[23]=((((0.000323433)*x158))+(((-1.0)*x489))+(((-1.0)*x480))+(((-0.033)*gclwh13_9*x101))+(((0.033)*gclwh15_9*x105))+(((-0.006534)*x173))+x293+(((-1.0)*gclwh11_13*x201))+x503+(((-0.000323433)*x177))+(((-1.0)*x100*x176))+(((-0.000323433)*x150))+((gclwh7_13*x224))+(((0.066)*gclwh13_9*x106))+((x103*x176))+(((-0.033)*gclwh5_9*x109)));
op[24]=((-0.434644)+(((-1.0)*x504))+x506);
op[25]=((((-3.268)*gclwh8_2*x104))+(((-1.0)*x483))+(((-1.0)*gclwh4_2*x223))+(((1.634)*gclwh8_2*x105))+(((0.016014834)*x221))+(((1.634)*gclwh10_2*x109))+(((-0.016014834)*x123))+(((3.268)*gclwh6_2*x106))+(((-3.268)*gclwh10_2*x113))+x300+(((-1.634)*gclwh6_2*x101))+(((0.016014834)*x235))+(((-0.323532)*x118))+((gclwh14_2*x233)));
op[26]=((((-1.568)*gclwh6_12*x101))+(((-1.0)*gclwh4_14*x213))+(((-0.105336)*x145))+(((0.015367968)*x202))+(((-3.136)*gclwh8_12*x104))+(((0.105336)*x170))+(((-0.015367968)*x154))+(((1.568)*gclwh10_12*x109))+(((-3.136)*gclwh10_12*x113))+(((1.568)*gclwh8_12*x105))+(((0.015367968)*x111))+(((3.136)*gclwh6_12*x106)));
op[27]=(((gclwh4_11*x228))+(((-0.792)*x171))+(((-1.0)*x105*x161))+((gclwh12_11*x107))+(((-0.039204)*gclwh8_11*r20))+((x101*x225))+(((0.039204)*gclwh6_11*r21))+(((8.0)*gclwh10_11*x113))+(((-1.0)*x109*x211))+(((-1.0)*gclwh10_11*x231))+(((-8.0)*gclwh6_11*x106))+(((8.0)*gclwh8_11*x104)));
op[28]=((-0.017556)+(((-1.0)*x506))+x504);
op[29]=((((-0.132)*gclwh10_2*x113))+(((0.000646866)*x221))+(((-1.0)*gclwh4_2*x163))+(((0.000646866)*x235))+(((0.066)*gclwh10_2*x109))+((gclwh14_2*x131))+(((0.132)*gclwh6_2*x106))+(((-0.013068)*x118))+x483+(((-0.066)*gclwh6_2*x101))+(((0.066)*gclwh8_2*x105))+(((-0.132)*gclwh8_2*x104))+(((-1.0)*x300))+(((-0.000646866)*x123)));
op[30]=((((1.634)*gclwh9_0*x105))+(((0.016014834)*x166))+(((-1.634)*gclwh7_0*x101))+(((-1.0)*gclwh5_0*x223))+(((3.268)*gclwh7_0*x106))+(((-0.016014834)*x195))+x479+((gclwh15_0*x233))+(((1.634)*gclwh11_0*x109))+(((-3.268)*gclwh11_0*x113))+(((0.016014834)*x115))+(((-0.323532)*x207))+(((-1.0)*x308))+(((-3.268)*gclwh9_0*x104)));
op[31]=((-0.434644)+(((-1.0)*x505))+x507);
op[32]=(((gclwh11_10*x231))+(((-8.0)*gclwh9_10*x104))+((x105*x172))+(((-1.0)*gclwh13_10*x107))+(((-0.039204)*x184))+(((-8.0)*gclwh11_10*x113))+(((0.792)*gclwh15_10*rxp0_2))+(((0.039204)*x174))+(((-1.0)*x101*x179))+((x109*x148))+(((8.0)*gclwh7_10*x106))+(((-1.0)*gclwh5_10*x228)));
op[33]=((((0.015367968)*x130))+(((-0.015367968)*x137))+(((0.105336)*x142))+(((3.136)*gclwh7_13*x106))+(((0.015367968)*x204))+(((-0.105336)*x212))+(((1.568)*gclwh9_13*x105))+(((-1.0)*gclwh5_15*x213))+(((-3.136)*gclwh11_13*x113))+(((1.568)*gclwh11_13*x109))+(((-1.568)*gclwh7_13*x101))+(((-3.136)*gclwh9_13*x104)));
op[34]=(((gclwh15_0*x131))+(((0.000646866)*x166))+(((0.132)*gclwh7_0*x106))+(((-1.0)*x479))+(((-0.066)*gclwh7_0*x101))+x308+(((0.066)*gclwh11_0*x109))+(((0.066)*gclwh9_0*x105))+(((-1.0)*gclwh5_0*x163))+(((-0.000646866)*x195))+(((-0.013068)*x207))+(((0.000646866)*x115))+(((-0.132)*gclwh9_0*x104))+(((-0.132)*gclwh11_0*x113)));
op[35]=((-0.017556)+(((-1.0)*x507))+x505);
op[36]=((1.2996)+(((-1.0)*x508))+x500);
op[37]=((((-1.0)*gclwh8_2*x233))+(((-1.0)*x498))+(((3.268)*gclwh12_2*x106))+(((-1.634)*gclwh1_2*x105))+(((0.016014834)*x165))+(((3.268)*gclwh1_2*x104))+((gclwh3_2*x203))+(((-0.016014834)*x230))+(((-1.0)*gclwh12_2*x203))+(((-3.268)*gclwh14_2*x104))+(((0.323532)*x232))+(((0.016014834)*x159))+(((-1.634)*gclwh12_2*x101))+(((1.634)*gclwh14_2*x105))+x493+(((3.268)*gclwh4_2*x113))+(((-1.634)*gclwh3_2*x101))+(((-1.634)*gclwh4_2*x109))+(((3.268)*gclwh3_2*x106))+(((-1.0)*gclwh10_2*x223)));
IkReal x517=pz*pz;
IkReal x518=pp*pp;
IkReal x519=((0.198)*pz);
IkReal x520=((0.009801)*r21);
IkReal x521=(gclwh13_0*pz);
IkReal x522=((1.7)*pz);
IkReal x523=(gclwh15_9*npx);
IkReal x524=(pp*r21);
IkReal x525=(gclwh8_12*rxp0_2);
IkReal x526=(gclwh5_9*npz);
IkReal x527=((0.792)*rxp0_2);
IkReal x528=(pp*r20);
IkReal x529=(npy*pz);
IkReal x530=((4.0)*gclwh12_11);
IkReal x531=((0.005214132)*r20);
IkReal x532=(gclwh13_15*r21);
IkReal x533=((0.532)*gclwh15_15);
IkReal x534=(gclwh15_1*r20);
IkReal x535=((0.198)*rxp0_2);
IkReal x536=(npz*pz);
IkReal x537=((0.155232)*rxp0_2);
IkReal x538=((0.009801)*r22);
IkReal x539=(gclwh11_0*pz);
IkReal x540=((0.019602)*r22);
IkReal x541=((4.0)*gclwh4_11);
IkReal x542=((0.155232)*rxp1_2);
IkReal x543=(gclwh14_2*pz);
IkReal x544=(gclwh14_8*rxp0_2);
IkReal x545=(npx*pz);
IkReal x546=((0.026334)*rxp2_2);
IkReal x547=((2.0)*gclwh4_11);
IkReal x548=((0.026334)*rxp0_2);
IkReal x549=((0.016014834)*r20);
IkReal x550=(gclwh4_8*r22);
IkReal x551=(pp*r22);
IkReal x552=(gclwh14_8*r20);
IkReal x553=((2.0)*gclwh11_10);
IkReal x554=((0.161766)*rxp1_2);
IkReal x555=((0.310464)*rxp1_2);
IkReal x556=(gclwh2_0*pz);
IkReal x557=((0.532)*gclwh13_15);
IkReal x558=((2.0)*gclwh9_10);
IkReal x559=((8.7983577e-5)*r21);
IkReal x560=((2.0)*gclwh15_10);
IkReal x561=(gclwh4_14*r22);
IkReal x562=((4.0)*gclwh14_11);
IkReal x563=((0.008007417)*r21);
IkReal x564=(gclwh5_1*r22);
IkReal x565=((0.001303533)*r20);
IkReal x566=((2.0)*gclwh13_10);
IkReal x567=((0.052668)*rxp0_2);
IkReal x568=((0.006619369977)*r20);
IkReal x569=(gclwh14_3*rxp0_2);
IkReal x570=((0.052668)*rxp1_2);
IkReal x571=((0.000323433)*r21);
IkReal x572=((0.266)*gclwh5_15);
IkReal x573=(gclwh6_2*rxp1_2);
IkReal x574=(gclwh7_10*rxp1_2);
IkReal x575=((2.0)*gclwh10_11);
IkReal x576=((0.007683984)*r22);
IkReal x577=((8.7983577e-5)*r20);
IkReal x578=((0.198)*rxp2_2);
IkReal x579=(gclwh5_0*pz);
IkReal x580=((2.0)*gclwh5_10);
IkReal x581=(gclwh13_9*r21);
IkReal x582=(gclwh10_2*rxp2_2);
IkReal x583=((2.0)*gclwh7_10);
IkReal x584=((1.0)*pz);
IkReal x585=((2.0)*pp);
IkReal x586=(gclwh13_9*rxp1_2);
IkReal x587=((4.0)*gclwh15_10);
IkReal x588=((0.007683984)*r21);
IkReal x589=((0.792)*rxp2_2);
IkReal x590=((0.198)*rxp1_2);
IkReal x591=((0.000323433)*r20);
IkReal x592=(gclwh15_9*rxp0_2);
IkReal x593=((0.396)*rxp2_2);
IkReal x594=((0.006619369977)*r21);
IkReal x595=((0.007683984)*r20);
IkReal x596=((0.039204)*r22);
IkReal x597=((0.266)*gclwh14_14);
IkReal x598=(gclwh9_13*rxp0_2);
IkReal x599=((0.001303533)*r22);
IkReal x600=((0.066)*pz);
IkReal x601=((0.532)*gclwh12_14);
IkReal x602=(gclwh5_9*r22);
IkReal x603=(gclwh12_8*rxp1_2);
IkReal x604=((0.000646866)*r20);
IkReal x605=((0.532)*gclwh4_14);
IkReal x606=((0.001777446)*rxp1_2);
IkReal x607=((0.266)*gclwh15_15);
IkReal x608=(gclwh14_11*r20);
IkReal x609=((0.532)*gclwh5_15);
IkReal x610=(gclwh8_2*pz);
IkReal x611=((0.019602)*r21);
IkReal x612=((0.266)*gclwh12_14);
IkReal x613=((0.009801)*r20);
IkReal x614=((0.133724646)*rxp2_2);
IkReal x615=((0.016014834)*r21);
IkReal x616=((0.266)*gclwh4_14);
IkReal x617=((0.000646866)*r21);
IkReal x618=((0.266)*gclwh13_15);
IkReal x619=(gclwh15_10*r20);
IkReal x620=((2.0)*gclwh6_11);
IkReal x621=((0.396)*rxp1_2);
IkReal x622=((1.634)*pz);
IkReal x623=((0.052668)*rxp2_2);
IkReal x624=((0.002607066)*r20);
IkReal x625=(gclwh5_9*rxp2_2);
IkReal x626=(gclwh11_0*rxp2_2);
IkReal x627=(gclwh12_8*r21);
IkReal x628=(gclwh4_8*rxp2_2);
IkReal x629=((0.133724646)*rxp1_2);
IkReal x630=((0.008007417)*r20);
IkReal x631=((0.532)*gclwh14_14);
IkReal x632=(gclwh11_13*r22);
IkReal x633=(gclwh10_2*pz);
IkReal x634=(gclwh7_0*rxp1_2);
IkReal x635=((0.013068)*rxp0_2);
IkReal x636=(gclwh9_0*pz);
IkReal x637=(gclwh4_3*r22);
IkReal x638=(gclwh10_12*rxp2_2);
IkReal x639=((2.0)*gclwh8_11);
IkReal x640=(gclwh10_12*r22);
IkReal x641=((0.001303533)*r21);
IkReal x642=((2.0)*gclwh12_11);
IkReal x643=((4.0)*gclwh5_10);
IkReal x644=((0.026334)*rxp1_2);
IkReal x645=(gclwh7_0*pz);
IkReal x646=(gclwh11_13*rxp2_2);
IkReal x647=((4.0)*gclwh13_10);
IkReal x648=((0.396)*rxp0_2);
IkReal x649=((0.006534)*rxp1_2);
IkReal x650=(gclwh12_14*r21);
IkReal x651=(gclwh15_1*rxp0_2);
IkReal x652=((0.001777446)*rxp2_2);
IkReal x653=(gclwh4_2*pz);
IkReal x654=(gclwh5_15*r22);
IkReal x655=(gclwh12_2*pz);
IkReal x656=((0.000646866)*r22);
IkReal x657=((0.039204)*r21);
IkReal x658=(gclwh15_9*r20);
IkReal x659=((2.0)*gclwh14_11);
IkReal x660=((0.155232)*rxp2_2);
IkReal x661=((0.019602)*r20);
IkReal x662=((0.002607066)*x654);
IkReal x663=((0.002607066)*x532);
IkReal x664=(gclwh15_15*x624);
IkReal x665=((0.019602)*x619);
IkReal x666=((0.396)*x574);
IkReal x667=(gclwh5_10*x540);
IkReal x668=(gclwh9_10*x648);
IkReal x669=(gclwh13_10*x611);
IkReal x670=(gclwh11_10*x593);
IkReal x671=(gclwh4_14*x546);
IkReal x672=(gclwh12_14*x644);
IkReal x673=(gclwh6_5*x641);
IkReal x674=(gclwh10_5*x599);
IkReal x675=(gclwh8_5*x565);
IkReal x676=(gclwh14_14*x548);
IkReal x677=(gclwh10_11*x538);
IkReal x678=(gclwh8_11*x613);
IkReal x679=(gclwh14_11*x535);
IkReal x680=((0.019602)*x603);
IkReal x681=((0.019602)*x628);
IkReal x682=(gclwh6_11*x520);
IkReal x683=(gclwh12_11*x590);
IkReal x684=(gclwh4_11*x578);
IkReal x685=((0.019602)*x544);
IkReal x686=((0.019602)*x586);
IkReal x687=(gclwh13_10*x590);
IkReal x688=((0.019602)*x625);
IkReal x689=(gclwh5_10*x578);
IkReal x690=(gclwh7_10*x520);
IkReal x691=(gclwh15_10*x535);
IkReal x692=(gclwh9_10*x613);
IkReal x693=((0.019602)*x592);
IkReal x694=(gclwh11_10*x538);
IkReal x695=(gclwh7_7*x641);
IkReal x696=(gclwh13_15*x644);
IkReal x697=(gclwh5_15*x546);
IkReal x698=(gclwh11_7*x599);
IkReal x699=(gclwh9_7*x565);
IkReal x700=(gclwh15_15*x548);
IkReal x701=(gclwh4_11*x540);
IkReal x702=(gclwh10_11*x593);
IkReal x703=(gclwh8_11*x648);
IkReal x704=(gclwh12_11*x611);
IkReal x705=((0.002607066)*x650);
IkReal x706=((0.002607066)*x561);
IkReal x707=(gclwh14_14*x624);
IkReal x708=(gclwh12_14*x641);
IkReal x709=(gclwh8_5*x548);
IkReal x710=(gclwh10_5*x546);
IkReal x711=((0.001303533)*x561);
IkReal x712=(gclwh14_14*x565);
IkReal x713=(gclwh6_5*x644);
IkReal x714=((0.000970299)*x627);
IkReal x715=((0.000970299)*x550);
IkReal x716=((0.009801)*x608);
IkReal x717=(gclwh6_11*x590);
IkReal x718=(gclwh10_11*x578);
IkReal x719=(gclwh12_11*x520);
IkReal x720=(gclwh4_11*x538);
IkReal x721=((0.000970299)*x552);
IkReal x722=(gclwh8_11*x535);
IkReal x723=((0.000970299)*x658);
IkReal x724=((0.198)*x574);
IkReal x725=(gclwh15_10*x613);
IkReal x726=(gclwh5_10*x538);
IkReal x727=((0.000970299)*x602);
IkReal x728=((0.000970299)*x581);
IkReal x729=(gclwh9_10*x535);
IkReal x730=(gclwh13_10*x520);
IkReal x731=(gclwh11_10*x578);
IkReal x732=(gclwh7_7*x644);
IkReal x733=(gclwh15_15*x565);
IkReal x734=(gclwh9_7*x548);
IkReal x735=(gclwh5_15*x599);
IkReal x736=((0.001303533)*x532);
IkReal x737=(gclwh11_7*x546);
IkReal x738=(r21*x518);
IkReal x739=((2.0)*x517);
IkReal x740=(pz*x613);
IkReal x741=(r20*x518);
IkReal x742=(x533*x545);
IkReal x743=(x524*x618);
IkReal x744=(x551*x572);
IkReal x745=(x528*x607);
IkReal x746=(x536*x609);
IkReal x747=(x529*x557);
IkReal x748=(x528*x560);
IkReal x749=(x536*x643);
IkReal x750=(x529*x647);
IkReal x751=(x524*x566);
IkReal x752=(x545*x587);
IkReal x753=(x551*x580);
IkReal x754=((0.133)*gclwh6_5*x524);
IkReal x755=((0.266)*gclwh10_5*x536);
IkReal x756=((0.266)*gclwh8_5*x545);
IkReal x757=((0.133)*gclwh10_5*x551);
IkReal x758=((0.266)*gclwh6_5*x529);
IkReal x759=((0.133)*gclwh8_5*x528);
IkReal x760=(x529*x620);
IkReal x761=(gclwh14_2*rxp0_2*x519);
IkReal x762=(gclwh12_3*pp*x590);
IkReal x763=(x551*x633);
IkReal x764=(gclwh4_3*pp*x578);
IkReal x765=(x538*x633);
IkReal x766=(x528*x610);
IkReal x767=(x610*x613);
IkReal x768=(gclwh12_2*rxp1_2*x519);
IkReal x769=(gclwh6_2*pz*x520);
IkReal x770=(x536*x575);
IkReal x771=(x545*x639);
IkReal x772=(gclwh14_3*pp*x535);
IkReal x773=(gclwh4_2*rxp2_2*x519);
IkReal x774=(x536*x553);
IkReal x775=(x545*x558);
IkReal x776=(gclwh5_1*pp*x578);
IkReal x777=(x613*x636);
IkReal x778=(gclwh13_1*pp*x590);
IkReal x779=(gclwh15_0*rxp0_2*x519);
IkReal x780=(x539*x551);
IkReal x781=(x538*x539);
IkReal x782=(x528*x636);
IkReal x783=(x520*x645);
IkReal x784=(gclwh15_1*pp*x535);
IkReal x785=(gclwh5_0*rxp2_2*x519);
IkReal x786=(x529*x583);
IkReal x787=(gclwh13_0*rxp1_2*x519);
IkReal x788=((0.266)*gclwh11_7*x536);
IkReal x789=((0.133)*gclwh7_7*x524);
IkReal x790=((0.266)*gclwh9_7*x545);
IkReal x791=((0.133)*gclwh9_7*x528);
IkReal x792=((0.133)*gclwh11_7*x551);
IkReal x793=((0.266)*gclwh7_7*x529);
IkReal x794=(x547*x551);
IkReal x795=(x524*x642);
IkReal x796=(x545*x562);
IkReal x797=(x545*x631);
IkReal x798=(x551*x616);
IkReal x799=(x524*x612);
IkReal x800=(x529*x601);
IkReal x801=(x536*x605);
IkReal x802=(x528*x597);
IkReal x803=((0.133)*gclwh12_14*x524);
IkReal x804=(x545*x597);
IkReal x805=((0.133)*gclwh4_14*x551);
IkReal x806=(x536*x616);
IkReal x807=((0.133)*gclwh14_14*x528);
IkReal x808=(x529*x612);
IkReal x809=(x528*x543);
IkReal x810=(gclwh12_3*x738);
IkReal x811=(x519*x573);
IkReal x812=((0.099)*gclwh12_8*x524);
IkReal x813=(x536*x547);
IkReal x814=(gclwh3_3*x738);
IkReal x815=(gclwh1_3*x741);
IkReal x816=(gclwh3_2*pz*x520);
IkReal x817=(x518*x637);
IkReal x818=((0.099)*pp*x550);
IkReal x819=(x543*x613);
IkReal x820=(x529*x642);
IkReal x821=(gclwh14_8*npx*x519);
IkReal x822=(gclwh1_2*x740);
IkReal x823=((0.099)*gclwh14_8*x528);
IkReal x824=(x538*x653);
IkReal x825=(gclwh4_8*npz*x519);
IkReal x826=(x519*x582);
IkReal x827=(gclwh8_2*rxp0_2*x519);
IkReal x828=(x545*x659);
IkReal x829=(gclwh12_8*npy*x519);
IkReal x830=(x520*x655);
IkReal x831=((0.099)*gclwh15_9*x528);
IkReal x832=(x518*x534);
IkReal x833=(x551*x579);
IkReal x834=(x521*x524);
IkReal x835=(x520*x521);
IkReal x836=(x519*x526);
IkReal x837=(gclwh0_0*x740);
IkReal x838=(x520*x556);
IkReal x839=(gclwh2_1*x738);
IkReal x840=(x519*x626);
IkReal x841=(x536*x580);
IkReal x842=(x538*x579);
IkReal x843=(gclwh9_0*rxp0_2*x519);
IkReal x844=(x529*x566);
IkReal x845=(gclwh13_9*npy*x519);
IkReal x846=(gclwh0_1*x741);
IkReal x847=((0.099)*gclwh13_9*x524);
IkReal x848=(x519*x523);
IkReal x849=(x519*x634);
IkReal x850=(gclwh15_0*x740);
IkReal x851=((0.099)*gclwh5_9*x551);
IkReal x852=(x545*x560);
IkReal x853=(x529*x618);
IkReal x854=(x536*x572);
IkReal x855=((0.133)*gclwh15_15*x528);
IkReal x856=((0.133)*gclwh13_15*x524);
IkReal x857=(x545*x607);
IkReal x858=((0.133)*gclwh5_15*x551);
IkReal x859=(gclwh6_2*npy*x739);
IkReal x860=(gclwh6_2*x524*x584);
IkReal x861=(gclwh10_2*npz*x739);
IkReal x862=(gclwh8_2*npx*x739);
IkReal x863=(gclwh7_0*npy*x739);
IkReal x864=(gclwh9_0*npx*x739);
IkReal x865=(gclwh11_0*npz*x739);
IkReal x866=(gclwh7_0*x524*x584);
IkReal x867=(gclwh12_2*npy*x739);
IkReal x868=(gclwh3_2*npy*x739);
IkReal x869=(gclwh1_2*npx*x739);
IkReal x870=(gclwh14_3*x545*x585);
IkReal x871=(gclwh4_2*npz*x739);
IkReal x872=(gclwh4_3*x536*x585);
IkReal x873=(gclwh12_2*x524*x584);
IkReal x874=(gclwh1_2*x528*x584);
IkReal x875=(gclwh3_3*x529*x585);
IkReal x876=(gclwh4_2*x551*x584);
IkReal x877=(gclwh1_3*x545*x585);
IkReal x878=(gclwh3_2*x524*x584);
IkReal x879=(gclwh12_3*x529*x585);
IkReal x880=(gclwh14_2*npx*x739);
IkReal x881=((1.0)*gclwh14_3*x741);
IkReal x882=(gclwh0_0*npx*x739);
IkReal x883=(gclwh2_0*npy*x739);
IkReal x884=(gclwh5_1*x536*x585);
IkReal x885=(gclwh13_1*x529*x585);
IkReal x886=(gclwh15_0*npx*x739);
IkReal x887=(gclwh2_1*x529*x585);
IkReal x888=(gclwh0_1*x545*x585);
IkReal x889=(gclwh5_0*npz*x739);
IkReal x890=(gclwh13_0*npy*x739);
IkReal x891=(gclwh0_0*x528*x584);
IkReal x892=(gclwh15_0*x528*x584);
IkReal x893=((1.0)*x524*x556);
IkReal x894=((1.0)*gclwh13_1*x738);
IkReal x895=((1.0)*x518*x564);
IkReal x896=(gclwh15_1*x545*x585);
IkReal x897=(x710+x709);
IkReal x898=(x696+x697);
IkReal x899=(x672+x671);
IkReal x900=(x737+x734);
IkReal x901=(x678+x679+x677+x760);
IkReal x902=(x694+x691+x692+x786);
IkReal x903=(x717+x716+x813+x820);
IkReal x904=(x724+x725+x841+x844);
IkReal x905=(x664+x746+x747+x745);
IkReal x906=(x712+x808+x807+x806);
IkReal x907=(x733+x853+x854+x855);
IkReal x908=(x673+x755+x754+x756);
IkReal x909=(x695+x790+x788+x789);
IkReal x910=(x707+x801+x800+x802);
IkReal x911=(x731+x730+x726+x729+x852);
IkReal x912=(x719+x718+x720+x722+x828);
IkReal x913=(x689+x687+x690+x775+x774);
IkReal x914=(x683+x682+x684+x771+x770);
IkReal x915=(((gclwh6_11*x621))+((x536*x541))+((x528*x659))+(((0.019602)*x608))+((x529*x530)));
IkReal x916=(x711+x708+x805+x804+x803);
IkReal x917=(x698+x699+x791+x793+x792);
IkReal x918=(x674+x675+x757+x759+x758);
IkReal x919=(x663+x662+x744+x742+x743);
IkReal x920=(x736+x735+x856+x857+x858);
IkReal x921=(x665+x666+x750+x748+x749);
IkReal x922=(x706+x705+x797+x799+x798);
IkReal x923=(x669+x668+x667+x670+x751+x753+x752);
IkReal x924=(x702+x703+x701+x704+x795+x794+x796);
IkReal x925=(x685+x773+x772+x768+x769+x862+x861+x860);
IkReal x926=(x693+x783+x787+x784+x785+x866+x865+x864);
IkReal x927=(x681+x680+x764+x765+x766+x767+x761+x762+x763+x859);
IkReal x928=(x688+x686+x777+x776+x779+x778+x782+x780+x781+x863);
IkReal x929=(x727+x728+x850+x851+x887+x889+x888+x896+x894+x895+x892+x893+x890+x891+x847+x849+x848);
IkReal x930=(x721+x878+x879+x872+x873+x874+x875+x876+x877+x881+x880+x829+x823+x827+x826+x825+x824+x830);
IkReal x931=(x519+x715+x714+x869+x868+x867+x870+x871+x818+x819+x816+x817+x814+x815+x812+x810+x811+x822+x821+x809);
IkReal x932=(x519+x723+x885+x884+x886+x883+x882+x834+x835+x836+x837+x831+x832+x833+x838+x839+x840+x843+x842+x845+x846);
op[38]=((((-1.064)*gclwh14_14*x545))+(((1.064)*gclwh12_14*x529))+((gclwh6_12*x555))+(((-0.005214132)*x650))+(((-0.310464)*x638))+((x528*x631))+(((1.064)*gclwh4_14*x536))+(((-1.0)*x551*x605))+(((-0.310464)*x525))+((gclwh14_14*x531))+(((-1.0)*x524*x601))+(((-0.005214132)*x561)));
op[39]=((-0.037088)+(((8.0)*gclwh14_11*x545))+((x541*x551))+(((-8.0)*gclwh12_11*x529))+((gclwh8_11*x527))+(((-8.0)*gclwh4_11*x536))+((gclwh4_11*x596))+((gclwh10_11*x589))+((x524*x530))+(((-0.039204)*x608))+(((-0.792)*gclwh6_11*rxp1_2))+((gclwh12_11*x657))+(((-1.0)*x528*x562)));
op[40]=((0.0332)+(((-1.0)*x915))+x924);
op[41]=((((-0.066)*gclwh3_2*x524))+(((-1.0)*gclwh4_2*x656))+(((0.013068)*x573))+(((0.066)*gclwh14_2*x528))+(((-1.0)*gclwh8_2*x635))+(((-0.132)*npx*x543))+(((0.132)*gclwh1_2*x545))+((gclwh14_2*x604))+(((-1.0)*gclwh12_2*x617))+(((-1.0)*x910))+((gclwh1_2*x604))+(((0.132)*gclwh3_2*x529))+(((-0.066)*gclwh12_2*x524))+(((-0.066)*gclwh1_2*x528))+(((0.132)*gclwh12_2*x529))+(((0.132)*gclwh4_2*x536))+(((-0.013068)*x582))+(((-0.066)*gclwh4_2*x551))+((gclwh3_2*x617))+x922);
op[42]=((((-1.634)*gclwh0_0*x528))+(((0.323532)*gclwh9_0*rxp0_2))+(((1.634)*gclwh5_0*x551))+(((0.323532)*x626))+(((0.016014834)*gclwh5_0*r22))+(((-3.268)*gclwh5_0*x536))+(((3.268)*gclwh15_0*x545))+(((-1.0)*gclwh15_0*x549))+(((-3.268)*npy*x521))+(((-1.0)*x919))+(((1.634)*gclwh13_0*x524))+((gclwh13_0*x615))+(((3.268)*gclwh2_0*x529))+(((3.268)*gclwh0_0*x545))+(((-0.323532)*x634))+((gclwh2_0*x615))+(((-1.634)*gclwh15_0*x528))+((gclwh0_0*x549))+x905+(((-1.634)*gclwh2_0*x524)));
op[43]=((1.2996)+(((-1.0)*x921))+x923);
op[44]=((0.037088)+((x551*x643))+(((-1.0)*x528*x587))+((gclwh11_10*x589))+((gclwh13_10*x657))+(((-8.0)*gclwh5_10*x536))+(((-0.039204)*x619))+((gclwh5_10*x596))+(((-8.0)*gclwh13_10*x529))+(((8.0)*gclwh15_10*x545))+(((-0.792)*x574))+((x524*x647))+((gclwh9_10*x527)));
op[45]=((((1.064)*gclwh15_15*x545))+(((0.005214132)*x532))+(((-1.0)*gclwh15_15*x531))+(((0.005214132)*x654))+(((-1.0)*x528*x533))+(((-1.0)*gclwh7_13*x555))+(((0.310464)*x646))+((x551*x609))+(((-1.064)*gclwh13_15*x529))+((x524*x557))+(((-1.064)*gclwh5_15*x536))+(((0.310464)*x598)));
op[46]=((((0.132)*gclwh0_0*x545))+(((0.132)*gclwh2_0*x529))+(((-0.066)*gclwh15_0*x528))+(((-0.132)*npy*x521))+(((-1.0)*x905))+(((-0.132)*gclwh5_0*x536))+((gclwh5_0*x656))+(((0.066)*gclwh13_0*x524))+((gclwh13_0*x617))+(((0.066)*gclwh5_0*x551))+((gclwh9_0*x635))+(((-0.013068)*x634))+(((0.013068)*x626))+((gclwh2_0*x617))+(((-0.066)*gclwh0_0*x528))+(((0.132)*gclwh15_0*x545))+x919+(((-1.0)*gclwh15_0*x604))+((gclwh0_0*x604))+(((-0.066)*gclwh2_0*x524)));
op[47]=((0.0332)+(((-1.0)*x923))+x921);
op[48]=((((-1.0)*gclwh6_12*x563))+(((-0.817)*gclwh6_12*x524))+((gclwh8_12*x630))+(((0.817)*gclwh8_12*x528))+(((0.817)*gclwh10_12*x551))+(((-1.0)*x899))+(((0.008007417)*x640))+(((-1.0)*x918))+(((-1.0)*gclwh12_8*x554))+(((1.634)*gclwh6_12*x529))+(((-1.634)*gclwh8_12*x545))+x676+(((0.161766)*x544))+(((-1.634)*gclwh10_12*x536))+x908+(((-0.161766)*x628)));
op[49]=((((-1.0)*x925))+(((-1.0)*gclwh4_3*x614))+((gclwh6_11*x524))+(((-1.0)*x901))+(((-1.0)*gclwh8_11*x528))+(((-1.0)*gclwh10_11*x551))+(((0.133724646)*x569))+(((-1.0)*gclwh12_3*x629))+x927+x914);
op[50]=((0.208544)+(((-4.0)*gclwh6_11*x529))+(((4.0)*gclwh8_11*x545))+((gclwh12_11*x621))+((x524*x620))+((gclwh4_11*x593))+(((-1.0)*gclwh10_11*x540))+(((4.0)*gclwh10_11*x536))+((gclwh6_11*x611))+(((-1.0)*x528*x639))+(((-1.0)*gclwh14_11*x648))+(((-1.0)*gclwh8_11*x661))+(((-1.0)*x551*x575)));
op[51]=((((0.1683)*x603))+(((-1.0)*gclwh10_2*x576))+(((-0.1683)*x544))+(((-1.568)*gclwh6_2*x529))+(((1.568)*gclwh10_2*x536))+(((-0.784)*gclwh8_2*x528))+(((0.1683)*x628))+((gclwh12_14*x570))+(((-1.0)*gclwh14_2*x537))+((gclwh12_2*x542))+(((1.568)*gclwh8_2*x545))+((gclwh6_2*x588))+((gclwh4_2*x660))+(((-1.0)*gclwh8_2*x595))+((gclwh4_14*x623))+(((-0.784)*gclwh10_2*x551))+(((-1.0)*gclwh14_14*x567))+(((0.784)*gclwh6_2*x524)));
op[52]=((((-1.0)*gclwh6_12*x571))+(((-0.066)*gclwh8_12*x545))+(((-0.033)*gclwh6_12*x524))+(((0.033)*gclwh10_12*x551))+(((0.066)*gclwh6_12*x529))+(((-1.0)*x918))+(((0.000323433)*x640))+(((0.006534)*x603))+(((-0.066)*gclwh10_12*x536))+((gclwh8_12*x591))+(((-0.006534)*x544))+x899+(((0.006534)*x628))+(((0.033)*gclwh8_12*x528))+x908+(((-1.0)*x676)));
op[53]=((((-1.0)*x925))+(((-1.0)*gclwh6_11*x524))+(((0.001777446)*x569))+((gclwh8_11*x528))+(((-1.0)*gclwh4_3*x652))+(((-1.0)*gclwh12_3*x606))+(((-1.0)*x914))+((gclwh10_11*x551))+x927+x901);
op[54]=((((-1.0)*x926))+((gclwh11_10*x551))+(((-1.0)*x913))+(((0.133724646)*x651))+(((-1.0)*gclwh13_1*x629))+(((-1.0)*gclwh7_10*x524))+(((-1.0)*gclwh5_1*x614))+((gclwh9_10*x528))+x928+x902);
op[55]=((((-1.634)*gclwh9_13*x545))+(((-1.0)*gclwh7_13*x563))+(((1.634)*gclwh7_13*x529))+(((-1.0)*x898))+(((-1.0)*x917))+((gclwh9_13*x630))+(((0.161766)*x592))+(((-0.817)*gclwh7_13*x524))+(((-1.634)*gclwh11_13*x536))+(((0.817)*gclwh9_13*x528))+x700+(((0.008007417)*x632))+(((-1.0)*gclwh13_9*x554))+x909+(((0.817)*gclwh11_13*x551))+(((-0.161766)*x625)));
op[56]=((((-0.784)*gclwh9_0*x528))+(((-1.0)*gclwh5_15*x623))+((gclwh5_0*x660))+(((-0.784)*gclwh11_0*x551))+(((0.1683)*x592))+(((-0.1683)*x625))+(((0.784)*gclwh7_0*x524))+(((-1.0)*gclwh9_0*x595))+((gclwh15_15*x567))+(((1.568)*gclwh9_0*x545))+(((-1.0)*gclwh15_0*x537))+(((-1.0)*gclwh13_15*x570))+(((-1.568)*gclwh7_0*x529))+(((-0.1683)*x586))+((gclwh7_0*x588))+(((1.568)*gclwh11_0*x536))+(((-1.0)*gclwh11_0*x576))+((gclwh13_0*x542)));
op[57]=((0.208544)+((x524*x583))+((gclwh13_10*x621))+(((-1.0)*gclwh9_10*x661))+(((4.0)*gclwh11_10*x536))+(((-4.0)*gclwh7_10*x529))+((gclwh7_10*x611))+(((-1.0)*x528*x558))+(((-1.0)*x551*x553))+((gclwh5_10*x593))+(((-1.0)*gclwh11_10*x540))+(((4.0)*gclwh9_10*x545))+(((-1.0)*gclwh15_10*x648)));
op[58]=((((-1.0)*x926))+(((0.001777446)*x651))+(((-1.0)*x902))+(((-1.0)*gclwh9_10*x528))+((gclwh7_10*x524))+x928+x913+(((-1.0)*gclwh11_10*x551))+(((-1.0)*gclwh13_1*x606))+(((-1.0)*gclwh5_1*x652)));
op[59]=((((0.066)*gclwh7_13*x529))+(((-0.066)*gclwh9_13*x545))+((gclwh9_13*x591))+(((0.006534)*x586))+(((0.033)*gclwh9_13*x528))+(((-1.0)*x917))+(((-0.006534)*x592))+(((0.033)*gclwh11_13*x551))+(((-1.0)*x700))+(((-0.033)*gclwh7_13*x524))+(((-0.066)*gclwh11_13*x536))+(((-1.0)*gclwh7_13*x571))+(((0.000323433)*x632))+x898+(((0.006534)*x625))+x909);
op[60]=(((gclwh6_12*x554))+(((0.008007417)*x552))+(((0.817)*gclwh14_8*x528))+(((1.634)*gclwh12_8*x529))+(((-0.817)*gclwh12_8*x524))+(((-1.0)*x916))+(((-0.817)*pp*x550))+(((-0.008007417)*x550))+(((1.634)*gclwh4_8*x536))+(((-1.0)*x713))+(((-0.161766)*x525))+(((-1.634)*gclwh14_8*x545))+x897+(((-1.0)*gclwh12_8*x563))+x906+(((-0.161766)*x638)));
op[61]=((0.685178)+(((-0.665576)*gclwh4_3*x551))+(((-0.685178)*gclwh1_3*x528))+(((-1.0)*gclwh12_3*x594))+(((-0.006619369977)*x637))+((gclwh12_11*x524))+((gclwh14_3*x568))+(((-1.0)*x903))+(((-0.685178)*gclwh3_3*x524))+((gclwh1_3*x568))+(((1.350754)*gclwh12_3*x529))+(((0.665576)*gclwh14_3*x528))+(((-0.665576)*gclwh12_3*x524))+(((-1.350754)*gclwh14_3*x545))+(((1.350754)*gclwh1_3*x545))+((gclwh3_3*x594))+((gclwh4_11*x551))+(((-1.0)*gclwh14_11*x528))+(((1.350754)*gclwh4_3*x536))+(((1.350754)*gclwh3_3*x529))+x931+x912+(((-1.0)*x930)));
op[62]=((0.0893)+(((-1.0)*x915))+x924);
op[63]=((((-1.568)*gclwh3_2*x529))+(((0.00833085)*x550))+(((0.00833085)*x627))+(((-1.568)*gclwh4_2*x536))+(((0.85)*gclwh12_8*x524))+(((0.85)*pp*x550))+(((-0.784)*gclwh14_2*x528))+(((-1.568)*gclwh12_2*x529))+(((-1.0)*gclwh3_2*x588))+(((0.784)*gclwh3_2*x524))+(((-1.0)*gclwh14_2*x595))+(((-1.0)*gclwh12_8*npy*x522))+(((-1.0)*gclwh1_2*x595))+(((-1.0)*x910))+(((0.155232)*x582))+(((0.784)*gclwh1_2*x528))+(((0.784)*gclwh12_2*x524))+(((-0.85)*gclwh14_8*x528))+(((1.568)*npx*x543))+((gclwh4_2*x576))+((gclwh8_2*x537))+((gclwh12_2*x588))+(((-1.0)*gclwh4_8*npz*x522))+(((-0.00833085)*x552))+(((0.784)*gclwh4_2*x551))+((gclwh14_8*npx*x522))+x922+(((-1.568)*gclwh1_2*x545))+(((-1.0)*gclwh6_2*x542)));
op[64]=((((0.033)*gclwh12_8*x524))+(((0.000323433)*x550))+((gclwh6_12*x649))+(((-1.0)*x906))+(((-0.006534)*x638))+(((-0.000323433)*x552))+(((0.033)*pp*x550))+(((-0.066)*gclwh4_8*x536))+(((-0.066)*gclwh12_8*x529))+(((-1.0)*x713))+(((-0.006534)*x525))+(((-0.033)*gclwh14_8*x528))+x897+(((0.066)*gclwh14_8*x545))+((gclwh12_8*x571))+x916);
op[65]=((-0.018778)+(((-1.0)*gclwh12_3*x559))+(((-0.018778)*gclwh3_3*x524))+(((-0.000824)*gclwh14_3*x528))+((gclwh14_11*x528))+(((0.000824)*gclwh4_3*x551))+(((0.017954)*gclwh4_3*x536))+((gclwh1_3*x577))+(((-1.0)*gclwh4_11*x551))+(((0.017954)*gclwh12_3*x529))+((gclwh14_3*x577))+(((-1.0)*x912))+(((-0.017954)*gclwh14_3*x545))+(((0.000824)*gclwh12_3*x524))+(((0.017954)*gclwh3_3*x529))+(((-0.018778)*gclwh1_3*x528))+(((0.017954)*gclwh1_3*x545))+(((-8.7983577e-5)*x637))+((gclwh3_3*x559))+(((-1.0)*gclwh12_11*x524))+x931+x903+(((-1.0)*x930)));
op[66]=((-0.685178)+(((-1.0)*x929))+(((0.665576)*gclwh13_1*x524))+(((0.006619369977)*x564))+(((-1.0)*gclwh15_10*x528))+(((-1.350754)*gclwh13_1*x529))+((gclwh5_10*x551))+((gclwh0_1*x568))+(((-1.0)*x904))+(((1.350754)*gclwh2_1*x529))+((gclwh13_1*x594))+(((1.350754)*gclwh0_1*x545))+(((1.350754)*gclwh15_1*x545))+(((0.665576)*gclwh5_1*x551))+(((-0.685178)*gclwh0_1*x528))+(((-1.350754)*gclwh5_1*x536))+(((-0.006619369977)*x534))+x932+x911+((gclwh2_1*x594))+(((-0.685178)*gclwh2_1*x524))+(((-0.665576)*gclwh15_1*x528))+((gclwh13_10*x524)));
op[67]=((((-1.0)*gclwh15_9*x630))+(((0.008007417)*x602))+(((0.817)*gclwh5_9*x551))+((gclwh13_9*x563))+(((-1.634)*gclwh13_9*x529))+(((-1.0)*x900))+(((-1.0)*x907))+(((0.161766)*x646))+(((0.817)*gclwh13_9*x524))+(((0.161766)*x598))+(((-1.0)*gclwh7_13*x554))+x732+(((-1.0)*x526*x622))+x920+(((-0.817)*gclwh15_9*x528))+((x523*x622)));
op[68]=(((x522*x523))+(((0.784)*gclwh15_0*x528))+(((1.568)*gclwh5_0*x536))+(((-1.0)*gclwh13_0*x588))+(((-1.568)*gclwh2_0*x529))+(((0.85)*gclwh13_9*x524))+(((0.784)*gclwh2_0*x524))+(((0.00833085)*x581))+(((-0.00833085)*x658))+(((-1.0)*x905))+(((-0.784)*gclwh5_0*x551))+(((0.784)*gclwh0_0*x528))+(((-1.0)*gclwh0_0*x595))+(((-1.568)*gclwh0_0*x545))+(((-1.0)*gclwh5_0*x576))+(((0.00833085)*x602))+(((-0.85)*gclwh15_9*x528))+((gclwh7_0*x542))+(((-0.155232)*x626))+(((1.568)*npy*x521))+(((-1.568)*gclwh15_0*x545))+(((-1.0)*gclwh9_0*x537))+((gclwh15_0*x595))+(((-1.0)*x522*x526))+x919+(((-1.0)*gclwh13_9*npy*x522))+(((-0.784)*gclwh13_0*x524))+(((0.85)*gclwh5_9*x551))+(((-1.0)*gclwh2_0*x588)));
op[69]=((0.0893)+(((-1.0)*x923))+x921);
op[70]=((0.018778)+(((0.017954)*gclwh0_1*x545))+(((-1.0)*x929))+((gclwh0_1*x577))+((gclwh15_10*x528))+((gclwh13_1*x559))+(((-0.017954)*gclwh5_1*x536))+(((-0.018778)*gclwh0_1*x528))+(((0.017954)*gclwh2_1*x529))+(((-8.7983577e-5)*x534))+(((-1.0)*x911))+(((-0.017954)*gclwh13_1*x529))+(((0.017954)*gclwh15_1*x545))+(((8.7983577e-5)*x564))+(((-1.0)*gclwh5_10*x551))+((gclwh2_1*x559))+(((-0.000824)*gclwh5_1*x551))+(((-0.018778)*gclwh2_1*x524))+(((-0.000824)*gclwh13_1*x524))+x932+x904+(((-1.0)*gclwh13_10*x524))+(((0.000824)*gclwh15_1*x528)));
op[71]=((((-1.0)*x920))+(((-0.000323433)*x602))+(((-0.033)*gclwh13_9*x524))+(((-0.033)*gclwh5_9*x551))+(((-1.0)*gclwh7_13*x649))+(((-1.0)*x900))+(((-1.0)*x523*x600))+((x526*x600))+(((0.006534)*x598))+(((0.006534)*x646))+x732+((gclwh15_9*x591))+(((-1.0)*gclwh13_9*x571))+(((0.033)*gclwh15_9*x528))+x907+(((0.066)*gclwh13_9*x529)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x933=htj1*htj1;
CheckValue<IkReal> x934=IKPowWithIntegerCheck(((1.0)+x933),-1);
if(!x934.valid){
continue;
}
cj1array[numsolutions]=((x934.value)*(((1.0)+(((-1.0)*x933)))));
CheckValue<IkReal> x935=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x935.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x935.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x936=htj2*htj2;
CheckValue<IkReal> x937=IKPowWithIntegerCheck(((1.0)+x936),-1);
if(!x937.valid){
continue;
}
cj2array[numsolutions]=((x937.value)*(((1.0)+(((-1.0)*x936)))));
CheckValue<IkReal> x938=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x938.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x938.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x939=htj3*htj3;
CheckValue<IkReal> x940=IKPowWithIntegerCheck(((1.0)+x939),-1);
if(!x940.valid){
continue;
}
cj3array[numsolutions]=((x940.value)*(((1.0)+(((-1.0)*x939)))));
CheckValue<IkReal> x941=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x941.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x941.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x942=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x942);
rxp1_0=(pz*r11);
rxp1_1=(r01*x942);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x943=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x943);
rxp1_0=(pz*r11);
rxp1_1=(r01*x943);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x944=IKPowWithIntegerCheck(r22,-1);
if(!x944.valid){
continue;
}
CheckValue<IkReal> x945=IKPowWithIntegerCheck(sj3,-1);
if(!x945.valid){
continue;
}
sj4array[0]=((x944.value)*(x945.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x946=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x946);
rxp1_0=(pz*r11);
rxp1_1=(r01*x946);
IkReal x947=((16.0)*sj4);
IkReal x948=(cj1*cj2);
IkReal x949=((4.0)*sj3);
IkReal x950=((8.0)*sj4);
IkReal x951=((4.0)*cj4);
IkReal x952=(sj1*sj2);
IkReal x953=((4.0)*sj4);
IkReal x954=(cj3*r02);
IkReal x955=((16.0)*sj3);
IkReal x956=((8.0)*sj3);
IkReal x957=((12.0)*cj4);
IkReal x958=((12.0)*sj4);
IkReal x959=(cj3*r12);
IkReal x960=(r11*x949);
IkReal x961=(r01*x949);
IkReal x962=(r01*x952);
IkReal x963=(cj3*cj4*r01);
IkReal x964=(cj3*cj4*r11);
IkReal x965=(cj3*r10*x951);
IkReal x966=(x958*x959);
IkReal x967=(cj3*r00*x951);
IkReal x968=(x954*x958);
IkReal x969=(r00*x952*x953);
IkReal x970=(r02*x952*x957);
IkReal x971=(r00*x948*x953);
IkReal x972=(r02*x948*x957);
IkReal x973=(r10*x952*x953);
IkReal x974=(r12*x948*x957);
IkReal x975=(r12*x952*x957);
IkReal x976=(r10*x948*x953);
IkReal x977=(x971+x960);
IkReal x978=(x973+x961);
IkReal x979=(x965+x969);
IkReal x980=(x972+x966);
IkReal x981=(x976+x967);
IkReal x982=(x975+x968);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r11*x947*x948))+(((-1.0)*r00*x955))+(((-16.0)*x963))+((r11*x947*x952)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x948*x951))+((r02*x951*x952))+(((-1.0)*x953*x959))+x977+(((-1.0)*x979)))))))+(IKabs(((((-1.0)*r10*x956))+(((-8.0)*x964))+((r01*x948*x950))+(((-1.0)*x950*x962)))))+(((0.5)*(IKabs(((((-1.0)*x982))+x981+x974+(((-1.0)*x978)))))))+(IKabs(((((-1.0)*r00*x956))+(((-8.0)*x963))+((r11*x950*x952))+(((-1.0)*r11*x948*x950)))))+(((0.5)*(IKabs(((((-1.0)*r10*x955))+(((-16.0)*x964))+(((-1.0)*x947*x962))+((r01*x947*x948)))))))+(((0.5)*(IKabs(((((-1.0)*x982))+(((-1.0)*x981))+x974+x978)))))+(((0.5)*(IKabs(((((-1.0)*x980))+x970+x977+(((-1.0)*x979)))))))+(((0.5)*(IKabs(((((-1.0)*x981))+(((-1.0)*r12*x951*x952))+(((-1.0)*x953*x954))+x978+((r12*x948*x951)))))))+(((0.5)*(IKabs(((((-1.0)*x980))+x970+x979+(((-1.0)*x977))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x983=(r10*sj3);
IkReal x984=(r01*sj4);
IkReal x985=(cj1*cj2);
IkReal x986=(cj3*cj4);
IkReal x987=(sj1*sj2);
IkReal x988=(cj4*r02);
IkReal x989=((4.0)*r11*sj3);
IkReal x990=(cj3*r12*sj4);
IkReal x991=((4.0)*r00*sj4);
IkReal x992=((4.0)*r10*x986);
IkReal x993=((12.0)*x990);
IkReal x994=((4.0)*x990);
IkReal x995=(x985*x991);
IkReal x996=(x987*x991);
IkReal x997=((12.0)*x987*x988);
IkReal x998=((12.0)*x985*x988);
IkReal x999=((4.0)*x987*x988);
IkReal x1000=((4.0)*x985*x988);
IkReal x1001=(x995+x989);
IkReal x1002=(x992+x996);
IkReal x1003=(x1000+x994);
IkReal x1004=(x993+x998);
IkReal x1005=((((-8.0)*x984*x987))+(((-8.0)*x983))+(((-8.0)*r11*x986))+(((8.0)*x984*x985)));
op[0]=(x1001+(((-1.0)*x1002))+(((-1.0)*x1003))+x999);
op[1]=x1005;
op[2]=(x1001+(((-1.0)*x1002))+(((-1.0)*x1004))+x997);
op[3]=((((-16.0)*r11*x986))+(((-16.0)*x983))+(((16.0)*x984*x985))+(((-16.0)*x984*x987)));
op[4]=(x1002+(((-1.0)*x1001))+(((-1.0)*x1004))+x997);
op[5]=x1005;
op[6]=(x1002+(((-1.0)*x1001))+(((-1.0)*x1003))+x999);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1006=(cj1*cj2);
IkReal x1007=((4.0)*cj4);
IkReal x1008=(sj1*sj2);
IkReal x1009=((4.0)*sj4);
IkReal x1010=(r00*sj3);
IkReal x1011=(cj3*r02);
IkReal x1012=((4.0)*r01*sj3);
IkReal x1013=((16.0)*r11*sj4);
IkReal x1014=(cj3*cj4*r01);
IkReal x1015=((12.0)*cj4*r12);
IkReal x1016=((8.0)*r11*sj4);
IkReal x1017=(cj3*r00*x1007);
IkReal x1018=((12.0)*sj4*x1011);
IkReal x1019=(x1009*x1011);
IkReal x1020=(r10*x1006*x1009);
IkReal x1021=(r10*x1008*x1009);
IkReal x1022=(x1006*x1015);
IkReal x1023=(x1008*x1015);
IkReal x1024=(r12*x1006*x1007);
IkReal x1025=(r12*x1007*x1008);
IkReal x1026=(x1012+x1021);
IkReal x1027=(x1017+x1020);
IkReal x1028=(x1019+x1025);
IkReal x1029=(x1018+x1023);
IkReal x1030=((((-1.0)*x1006*x1016))+(((-8.0)*x1010))+(((-8.0)*x1014))+((x1008*x1016)));
j5evalpoly[0]=(x1024+x1027+(((htj5*htj5)*((x1027+x1022+(((-1.0)*x1026))+(((-1.0)*x1029))))))+(((-1.0)*x1026))+(((-1.0)*x1028))+((x1030*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x1026+x1022+(((-1.0)*x1027))+(((-1.0)*x1029))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1010))+(((-16.0)*x1014))+(((-1.0)*x1006*x1013))+((x1008*x1013))))))+((htj5*x1030))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1024+x1026+(((-1.0)*x1027))+(((-1.0)*x1028)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1031=(cj5*sj4);
IkReal x1032=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1031))+((r01*x1032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1031))+(((-1.0)*r11*x1032))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1031))+((r01*x1032))))+IKsqr((((r10*x1031))+(((-1.0)*r11*x1032))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1031))+((r01*x1032))), (((r10*x1031))+(((-1.0)*r11*x1032))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1033=IKcos(j0);
IkReal x1034=IKsin(j0);
IkReal x1035=(r02*sj4);
IkReal x1036=((1.0)*sj3);
IkReal x1037=(r12*sj4);
IkReal x1038=((1.0)*cj3);
IkReal x1039=(r11*sj5);
IkReal x1040=(cj3*cj4);
IkReal x1041=((1.0)*sj2);
IkReal x1042=(cj5*r01);
IkReal x1043=(r00*sj5);
IkReal x1044=(r01*sj5);
IkReal x1045=(sj1*sj2);
IkReal x1046=(cj1*cj2);
IkReal x1047=(cj5*r11);
IkReal x1048=((1.0)*cj2);
IkReal x1049=(r10*sj5);
IkReal x1050=((1.0)*cj4);
IkReal x1051=(cj4*cj5*r00);
IkReal x1052=(cj1*x1033);
IkReal x1053=(cj4*cj5*r10);
IkReal x1054=((0.392)*x1034);
IkReal x1055=((1.0)*x1034);
IkReal x1056=(cj1*x1034);
IkReal x1057=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x1039))+x1033+(((-1.0)*r10*x1057))+(((-1.0)*r12*x1050)));
evalcond[1]=((((-1.0)*x1055))+(((-1.0)*r00*x1057))+(((-1.0)*r02*x1050))+((sj4*x1044)));
evalcond[2]=((((0.425)*x1052))+(((0.392)*x1033*x1046))+(((-0.392)*x1033*x1045))+(((-0.099)*x1042))+(((-0.099)*x1043))+(((-1.0)*px))+(((-0.133)*x1034)));
evalcond[3]=((((0.425)*x1056))+(((0.133)*x1033))+(((-1.0)*x1045*x1054))+(((-0.099)*x1049))+(((-0.099)*x1047))+(((-1.0)*py))+((x1046*x1054)));
evalcond[4]=((((-1.0)*x1033*x1046))+((cj3*x1035))+(((-1.0)*x1038*x1051))+((x1040*x1044))+((sj3*x1042))+((sj3*x1043))+((x1033*x1045)));
evalcond[5]=((((-1.0)*x1046*x1055))+((x1034*x1045))+((cj3*x1037))+(((-1.0)*x1038*x1053))+((x1039*x1040))+((sj3*x1049))+((sj3*x1047)));
evalcond[6]=((((-1.0)*sj1*x1033*x1048))+(((-1.0)*x1035*x1036))+((sj3*x1051))+(((-1.0)*x1041*x1052))+((cj3*x1042))+((cj3*x1043))+(((-1.0)*cj4*x1036*x1044)));
evalcond[7]=((((-1.0)*x1036*x1037))+((sj3*x1053))+(((-1.0)*cj4*x1036*x1039))+(((-1.0)*x1041*x1056))+((cj3*x1047))+((cj3*x1049))+(((-1.0)*sj1*x1034*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1058=IKPowWithIntegerCheck(cj3,-1);
if(!x1058.valid){
continue;
}
CheckValue<IkReal> x1059=IKPowWithIntegerCheck(r22,-1);
if(!x1059.valid){
continue;
}
sj4array[0]=((-1.0)*(x1058.value)*(x1059.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1060=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1060);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1060);
IkReal x1061=((16.0)*sj4);
IkReal x1062=(cj1*cj2);
IkReal x1063=((4.0)*sj3);
IkReal x1064=((8.0)*sj4);
IkReal x1065=((4.0)*cj4);
IkReal x1066=(sj1*sj2);
IkReal x1067=((4.0)*sj4);
IkReal x1068=(cj3*r02);
IkReal x1069=((16.0)*sj3);
IkReal x1070=((8.0)*sj3);
IkReal x1071=((12.0)*cj4);
IkReal x1072=((12.0)*sj4);
IkReal x1073=(cj3*r12);
IkReal x1074=(r11*x1063);
IkReal x1075=(r01*x1063);
IkReal x1076=(r01*x1066);
IkReal x1077=(cj3*cj4*r01);
IkReal x1078=(cj3*cj4*r11);
IkReal x1079=(cj3*r10*x1065);
IkReal x1080=(x1072*x1073);
IkReal x1081=(cj3*r00*x1065);
IkReal x1082=(x1068*x1072);
IkReal x1083=(r00*x1066*x1067);
IkReal x1084=(r02*x1066*x1071);
IkReal x1085=(r00*x1062*x1067);
IkReal x1086=(r02*x1062*x1071);
IkReal x1087=(r10*x1066*x1067);
IkReal x1088=(r12*x1062*x1071);
IkReal x1089=(r12*x1066*x1071);
IkReal x1090=(r10*x1062*x1067);
IkReal x1091=(x1074+x1085);
IkReal x1092=(x1075+x1087);
IkReal x1093=(x1079+x1083);
IkReal x1094=(x1086+x1080);
IkReal x1095=(x1090+x1081);
IkReal x1096=(x1082+x1089);
j5eval[0]=((((0.5)*(IKabs((x1092+(((-1.0)*r12*x1065*x1066))+((r12*x1062*x1065))+(((-1.0)*x1095))+(((-1.0)*x1067*x1068)))))))+(IKabs(((((-8.0)*x1078))+(((-1.0)*r10*x1070))+((r01*x1062*x1064))+(((-1.0)*x1064*x1076)))))+(IKabs(((((-8.0)*x1077))+(((-1.0)*r00*x1070))+(((-1.0)*r11*x1062*x1064))+((r11*x1064*x1066)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1069))+(((-1.0)*x1061*x1076))+((r01*x1061*x1062))+(((-16.0)*x1078)))))))+(((0.5)*(IKabs((x1093+x1084+(((-1.0)*x1091))+(((-1.0)*x1094)))))))+(((0.5)*(IKabs((x1095+x1088+(((-1.0)*x1096))+(((-1.0)*x1092)))))))+(((0.5)*(IKabs((x1091+x1084+(((-1.0)*x1094))+(((-1.0)*x1093)))))))+(((0.5)*(IKabs((x1092+x1088+(((-1.0)*x1096))+(((-1.0)*x1095)))))))+(((0.5)*(IKabs((((r11*x1061*x1066))+(((-1.0)*r00*x1069))+(((-1.0)*r11*x1061*x1062))+(((-16.0)*x1077)))))))+(((0.5)*(IKabs((x1091+(((-1.0)*x1093))+((r02*x1065*x1066))+(((-1.0)*x1067*x1073))+(((-1.0)*r02*x1062*x1065))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1097=(r10*sj3);
IkReal x1098=(r01*sj4);
IkReal x1099=(cj1*cj2);
IkReal x1100=(cj3*cj4);
IkReal x1101=(sj1*sj2);
IkReal x1102=(cj4*r02);
IkReal x1103=((4.0)*r11*sj3);
IkReal x1104=(cj3*r12*sj4);
IkReal x1105=((4.0)*r00*sj4);
IkReal x1106=((4.0)*r10*x1100);
IkReal x1107=((12.0)*x1104);
IkReal x1108=((4.0)*x1104);
IkReal x1109=(x1099*x1105);
IkReal x1110=(x1101*x1105);
IkReal x1111=((12.0)*x1101*x1102);
IkReal x1112=((12.0)*x1099*x1102);
IkReal x1113=((4.0)*x1101*x1102);
IkReal x1114=((4.0)*x1099*x1102);
IkReal x1115=(x1103+x1109);
IkReal x1116=(x1106+x1110);
IkReal x1117=(x1108+x1114);
IkReal x1118=(x1107+x1112);
IkReal x1119=((((-8.0)*r11*x1100))+(((-8.0)*x1097))+(((-8.0)*x1098*x1101))+(((8.0)*x1098*x1099)));
op[0]=(x1113+x1115+(((-1.0)*x1116))+(((-1.0)*x1117)));
op[1]=x1119;
op[2]=(x1111+x1115+(((-1.0)*x1118))+(((-1.0)*x1116)));
op[3]=((((-16.0)*x1097))+(((16.0)*x1098*x1099))+(((-16.0)*r11*x1100))+(((-16.0)*x1098*x1101)));
op[4]=(x1111+x1116+(((-1.0)*x1118))+(((-1.0)*x1115)));
op[5]=x1119;
op[6]=(x1113+x1116+(((-1.0)*x1117))+(((-1.0)*x1115)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1120=(cj1*cj2);
IkReal x1121=((4.0)*cj4);
IkReal x1122=(sj1*sj2);
IkReal x1123=((4.0)*sj4);
IkReal x1124=(r00*sj3);
IkReal x1125=(cj3*r02);
IkReal x1126=((4.0)*r01*sj3);
IkReal x1127=((16.0)*r11*sj4);
IkReal x1128=(cj3*cj4*r01);
IkReal x1129=((12.0)*cj4*r12);
IkReal x1130=((8.0)*r11*sj4);
IkReal x1131=(cj3*r00*x1121);
IkReal x1132=((12.0)*sj4*x1125);
IkReal x1133=(x1123*x1125);
IkReal x1134=(r10*x1120*x1123);
IkReal x1135=(r10*x1122*x1123);
IkReal x1136=(x1120*x1129);
IkReal x1137=(x1122*x1129);
IkReal x1138=(r12*x1120*x1121);
IkReal x1139=(r12*x1121*x1122);
IkReal x1140=(x1126+x1135);
IkReal x1141=(x1131+x1134);
IkReal x1142=(x1139+x1133);
IkReal x1143=(x1132+x1137);
IkReal x1144=((((-8.0)*x1124))+(((-8.0)*x1128))+((x1122*x1130))+(((-1.0)*x1120*x1130)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x1140+x1136+(((-1.0)*x1141))+(((-1.0)*x1143))))))+x1141+x1138+(((htj5*htj5*htj5)*((((x1122*x1127))+(((-1.0)*x1120*x1127))+(((-16.0)*x1124))+(((-16.0)*x1128))))))+(((htj5*htj5)*((x1141+x1136+(((-1.0)*x1140))+(((-1.0)*x1143))))))+(((-1.0)*x1142))+(((-1.0)*x1140))+((x1144*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1144))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1140+x1138+(((-1.0)*x1142))+(((-1.0)*x1141)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1145=(cj5*sj4);
IkReal x1146=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1145))+(((-1.0)*cj4*r02))+((r01*x1146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1146))+((r10*x1145))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1145))+(((-1.0)*cj4*r02))+((r01*x1146))))+IKsqr(((((-1.0)*r11*x1146))+((r10*x1145))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1145))+(((-1.0)*cj4*r02))+((r01*x1146))), ((((-1.0)*r11*x1146))+((r10*x1145))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1147=IKcos(j0);
IkReal x1148=IKsin(j0);
IkReal x1149=(r02*sj4);
IkReal x1150=((1.0)*sj3);
IkReal x1151=(r12*sj4);
IkReal x1152=((1.0)*cj3);
IkReal x1153=(r11*sj5);
IkReal x1154=(cj3*cj4);
IkReal x1155=((1.0)*sj2);
IkReal x1156=(cj5*r01);
IkReal x1157=(r00*sj5);
IkReal x1158=(r01*sj5);
IkReal x1159=(sj1*sj2);
IkReal x1160=(cj1*cj2);
IkReal x1161=(cj5*r11);
IkReal x1162=((1.0)*cj2);
IkReal x1163=(r10*sj5);
IkReal x1164=((1.0)*cj4);
IkReal x1165=(cj4*cj5*r00);
IkReal x1166=(cj1*x1147);
IkReal x1167=(cj4*cj5*r10);
IkReal x1168=((0.392)*x1148);
IkReal x1169=((1.0)*x1148);
IkReal x1170=(cj1*x1148);
IkReal x1171=((1.0)*cj5*sj4);
evalcond[0]=(x1147+(((-1.0)*r12*x1164))+((sj4*x1153))+(((-1.0)*r10*x1171)));
evalcond[1]=((((-1.0)*r02*x1164))+(((-1.0)*r00*x1171))+(((-1.0)*x1169))+((sj4*x1158)));
evalcond[2]=((((-1.0)*px))+(((-0.133)*x1148))+(((-0.099)*x1156))+(((-0.099)*x1157))+(((0.392)*x1147*x1160))+(((-0.392)*x1147*x1159))+(((0.425)*x1166)));
evalcond[3]=((((-1.0)*x1159*x1168))+(((-0.099)*x1163))+(((-0.099)*x1161))+(((-1.0)*py))+(((0.425)*x1170))+(((0.133)*x1147))+((x1160*x1168)));
evalcond[4]=((((-1.0)*x1152*x1165))+((cj3*x1149))+((sj3*x1156))+((sj3*x1157))+((x1147*x1159))+(((-1.0)*x1147*x1160))+((x1154*x1158)));
evalcond[5]=(((cj3*x1151))+(((-1.0)*x1152*x1167))+((x1153*x1154))+((x1148*x1159))+(((-1.0)*x1160*x1169))+((sj3*x1161))+((sj3*x1163)));
evalcond[6]=((((-1.0)*x1149*x1150))+((cj3*x1156))+((cj3*x1157))+(((-1.0)*sj1*x1147*x1162))+(((-1.0)*cj4*x1150*x1158))+(((-1.0)*x1155*x1166))+((sj3*x1165)));
evalcond[7]=((((-1.0)*cj4*x1150*x1153))+((cj3*x1161))+((cj3*x1163))+(((-1.0)*x1155*x1170))+(((-1.0)*sj1*x1148*x1162))+(((-1.0)*x1150*x1151))+((sj3*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1172=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1172);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1172);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1173=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1173);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1173);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1174=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1174);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1174);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(r22,-1);
if(!x1175.valid){
continue;
}
sj4array[0]=((-1.0)*(x1175.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1176=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1176);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1176);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1178 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1178.valid){
continue;
}
IkReal x1177=x1178.value;
j5array[0]=((-1.0)*x1177);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1177)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1179=(cj5*sj4);
IkReal x1180=(sj4*sj5);
if( IKabs((((r01*x1180))+(((-1.0)*r00*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1179))+(((-1.0)*r11*x1180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1180))+(((-1.0)*r00*x1179))))+IKsqr((((r10*x1179))+(((-1.0)*r11*x1180))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1180))+(((-1.0)*r00*x1179))), (((r10*x1179))+(((-1.0)*r11*x1180))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1181=IKcos(j0);
IkReal x1182=IKsin(j0);
IkReal x1183=(cj5*r01);
IkReal x1184=(sj4*sj5);
IkReal x1185=(r00*sj5);
IkReal x1186=((0.425)*cj1);
IkReal x1187=(cj5*r11);
IkReal x1188=(r10*sj5);
IkReal x1189=((1.0)*cj1*sj2);
IkReal x1190=((1.0)*cj2*sj1);
IkReal x1191=((1.0)*cj5*sj4);
evalcond[0]=(x1181+(((-1.0)*r10*x1191))+((r11*x1184)));
evalcond[1]=((((-1.0)*r00*x1191))+((r01*x1184))+(((-1.0)*x1182)));
evalcond[2]=((((-1.0)*x1181*x1189))+x1185+x1183+(((-1.0)*x1181*x1190)));
evalcond[3]=(x1188+x1187+(((-1.0)*x1182*x1190))+(((-1.0)*x1182*x1189)));
evalcond[4]=((((-0.099)*x1185))+(((-0.099)*x1183))+(((-1.0)*px))+((x1181*x1186))+(((-0.133)*x1182)));
evalcond[5]=((((-0.099)*x1187))+(((-0.099)*x1188))+((x1182*x1186))+(((-1.0)*py))+(((0.133)*x1181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1192=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1192);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1192);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(r22,-1);
if(!x1193.valid){
continue;
}
sj4array[0]=((x1193.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1194=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1194);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1194);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1196 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1196.valid){
continue;
}
IkReal x1195=x1196.value;
j5array[0]=((-1.0)*x1195);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1195)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1197=(cj5*sj4);
IkReal x1198=(sj4*sj5);
if( IKabs((((r01*x1198))+(((-1.0)*r00*x1197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1197))+(((-1.0)*r11*x1198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1198))+(((-1.0)*r00*x1197))))+IKsqr((((r10*x1197))+(((-1.0)*r11*x1198))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1198))+(((-1.0)*r00*x1197))), (((r10*x1197))+(((-1.0)*r11*x1198))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1199=IKcos(j0);
IkReal x1200=IKsin(j0);
IkReal x1201=(sj4*sj5);
IkReal x1202=(r00*sj5);
IkReal x1203=((0.425)*cj1);
IkReal x1204=((1.0)*r10);
IkReal x1205=((1.0)*cj5);
IkReal x1206=((0.099)*cj5);
IkReal x1207=((1.0)*cj1*sj2);
IkReal x1208=((1.0)*cj2*sj1);
evalcond[0]=(x1199+((r11*x1201))+(((-1.0)*cj5*sj4*x1204)));
evalcond[1]=((((-1.0)*r00*sj4*x1205))+(((-1.0)*x1200))+((r01*x1201)));
evalcond[2]=((((-0.133)*x1200))+(((-0.099)*x1202))+(((-1.0)*r01*x1206))+((x1199*x1203))+(((-1.0)*px)));
evalcond[3]=((((0.133)*x1199))+(((-0.099)*r10*sj5))+(((-1.0)*py))+((x1200*x1203))+(((-1.0)*r11*x1206)));
evalcond[4]=((((-1.0)*x1199*x1207))+(((-1.0)*x1199*x1208))+(((-1.0)*r01*x1205))+(((-1.0)*x1202)));
evalcond[5]=((((-1.0)*sj5*x1204))+(((-1.0)*x1200*x1208))+(((-1.0)*x1200*x1207))+(((-1.0)*r11*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1209=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1209);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1209);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(r22,-1);
if(!x1210.valid){
continue;
}
sj4array[0]=((x1210.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1211=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1211);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1211);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
IkReal x1212=x1213.value;
j5array[0]=((-1.0)*x1212);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1212)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1214=(cj5*sj4);
IkReal x1215=(sj4*sj5);
if( IKabs((((r01*x1215))+(((-1.0)*r00*x1214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1214))+(((-1.0)*r11*x1215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1215))+(((-1.0)*r00*x1214))))+IKsqr((((r10*x1214))+(((-1.0)*r11*x1215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1215))+(((-1.0)*r00*x1214))), (((r10*x1214))+(((-1.0)*r11*x1215))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1216=IKcos(j0);
IkReal x1217=IKsin(j0);
IkReal x1218=(sj1*sj2);
IkReal x1219=(cj5*r01);
IkReal x1220=(sj4*sj5);
IkReal x1221=(r00*sj5);
IkReal x1222=(cj1*cj2);
IkReal x1223=(cj5*r11);
IkReal x1224=(r10*sj5);
IkReal x1225=((0.392)*x1217);
IkReal x1226=(cj1*x1216);
IkReal x1227=((1.0)*x1217);
IkReal x1228=((1.0)*cj5*sj4);
evalcond[0]=(x1216+(((-1.0)*r10*x1228))+((r11*x1220)));
evalcond[1]=((((-1.0)*r00*x1228))+((r01*x1220))+(((-1.0)*x1227)));
evalcond[2]=(x1221+x1219+(((-1.0)*x1216*x1222))+((x1216*x1218)));
evalcond[3]=(x1224+x1223+(((-1.0)*x1222*x1227))+((x1217*x1218)));
evalcond[4]=((((-0.099)*x1219))+(((-0.392)*x1216*x1218))+(((-1.0)*px))+(((0.425)*x1226))+(((-0.099)*x1221))+(((0.392)*x1216*x1222))+(((-0.133)*x1217)));
evalcond[5]=((((-1.0)*x1218*x1225))+(((0.425)*cj1*x1217))+(((-1.0)*py))+((x1222*x1225))+(((-0.099)*x1224))+(((-0.099)*x1223))+(((0.133)*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1229=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1229);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1229);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1230=IKPowWithIntegerCheck(r22,-1);
if(!x1230.valid){
continue;
}
sj4array[0]=((-1.0)*(x1230.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1231=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1231);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1231);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1233.valid){
continue;
}
IkReal x1232=x1233.value;
j5array[0]=((-1.0)*x1232);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1232)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1234=(cj5*sj4);
IkReal x1235=(sj4*sj5);
if( IKabs((((r01*x1235))+(((-1.0)*r00*x1234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1235))+((r10*x1234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1235))+(((-1.0)*r00*x1234))))+IKsqr(((((-1.0)*r11*x1235))+((r10*x1234))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1235))+(((-1.0)*r00*x1234))), ((((-1.0)*r11*x1235))+((r10*x1234))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1236=IKcos(j0);
IkReal x1237=IKsin(j0);
IkReal x1238=(sj1*sj2);
IkReal x1239=(sj4*sj5);
IkReal x1240=(r00*sj5);
IkReal x1241=((1.0)*cj5);
IkReal x1242=(cj1*cj2);
IkReal x1243=(r10*sj5);
IkReal x1244=((0.425)*cj1);
IkReal x1245=((0.099)*cj5);
IkReal x1246=((0.392)*x1237);
IkReal x1247=((0.392)*x1236);
IkReal x1248=((1.0)*x1237);
evalcond[0]=(x1236+((r11*x1239))+(((-1.0)*r10*sj4*x1241)));
evalcond[1]=(((r01*x1239))+(((-1.0)*x1248))+(((-1.0)*r00*sj4*x1241)));
evalcond[2]=((((-1.0)*x1240))+(((-1.0)*r01*x1241))+(((-1.0)*x1236*x1242))+((x1236*x1238)));
evalcond[3]=((((-1.0)*x1243))+(((-1.0)*x1242*x1248))+(((-1.0)*r11*x1241))+((x1237*x1238)));
evalcond[4]=(((x1236*x1244))+(((-1.0)*px))+(((-0.133)*x1237))+(((-1.0)*x1238*x1247))+((x1242*x1247))+(((-1.0)*r01*x1245))+(((-0.099)*x1240)));
evalcond[5]=((((-1.0)*r11*x1245))+(((-1.0)*py))+(((-1.0)*x1238*x1246))+((x1242*x1246))+(((0.133)*x1236))+((x1237*x1244))+(((-0.099)*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(r22,-1);
if(!x1249.valid){
continue;
}
CheckValue<IkReal> x1250=IKPowWithIntegerCheck(sj3,-1);
if(!x1250.valid){
continue;
}
sj4array[0]=((x1249.value)*(x1250.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1251=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1251);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1251);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1252=((4.0)*r01);
IkReal x1253=((16.0)*r00);
IkReal x1254=(cj3*sj2);
IkReal x1255=((8.0)*r00);
IkReal x1256=(cj2*cj3);
IkReal x1257=(cj4*r01);
IkReal x1258=((16.0)*cj1);
IkReal x1259=((8.0)*sj1);
IkReal x1260=((16.0)*sj1);
IkReal x1261=((8.0)*cj1);
IkReal x1262=(sj2*sj3);
IkReal x1263=(cj2*sj3);
IkReal x1264=(sj1*x1263);
IkReal x1265=((4.0)*cj4*r00);
IkReal x1266=(((cj1*x1252*x1262))+((x1252*x1264))+((sj1*x1262*x1265))+((sj1*x1252*x1254)));
IkReal x1267=(((cj1*x1252*x1256))+((sj1*x1256*x1265))+((cj1*x1263*x1265))+((cj1*x1254*x1265)));
IkReal x1268=(x1267+(((-1.0)*x1266)));
IkReal x1269=(((cj1*x1255*x1262))+((x1257*x1261*x1263))+((x1255*x1264))+((sj1*x1254*x1255))+(((-1.0)*cj1*x1255*x1256))+(((-1.0)*x1257*x1259*x1262))+((x1256*x1257*x1259))+((x1254*x1257*x1261)));
IkReal x1270=(x1266+(((-1.0)*x1267)));
op[0]=x1268;
op[1]=x1269;
op[2]=x1268;
op[3]=(((cj1*x1253*x1262))+((x1253*x1264))+(((-1.0)*cj1*x1253*x1256))+(((-1.0)*x1257*x1260*x1262))+((sj1*x1253*x1254))+((x1254*x1257*x1258))+((x1256*x1257*x1260))+((x1257*x1258*x1263)));
op[4]=x1270;
op[5]=x1269;
op[6]=x1270;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1271=(cj5*sj4);
IkReal x1272=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1271))+((r01*x1272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1271))+(((-1.0)*r11*x1272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1271))+((r01*x1272))))+IKsqr((((r10*x1271))+(((-1.0)*r11*x1272))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1271))+((r01*x1272))), (((r10*x1271))+(((-1.0)*r11*x1272))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1273=IKcos(j0);
IkReal x1274=IKsin(j0);
IkReal x1275=((0.392)*sj1);
IkReal x1276=((1.0)*cj3);
IkReal x1277=((0.425)*cj1);
IkReal x1278=((1.0)*cj1);
IkReal x1279=(r11*sj5);
IkReal x1280=(cj5*r01);
IkReal x1281=(r00*sj5);
IkReal x1282=(r01*sj5);
IkReal x1283=(cj5*r11);
IkReal x1284=(cj3*cj4);
IkReal x1285=((1.0)*sj1);
IkReal x1286=(r10*sj5);
IkReal x1287=(sj2*x1274);
IkReal x1288=(cj4*cj5*r00);
IkReal x1289=(sj2*x1273);
IkReal x1290=(cj4*cj5*r10);
IkReal x1291=((1.0)*cj4*sj3);
IkReal x1292=((0.392)*cj1*cj2);
IkReal x1293=(cj2*x1273);
IkReal x1294=((1.0)*cj5*sj4);
IkReal x1295=(cj2*x1274);
evalcond[0]=(x1273+((sj4*x1279))+(((-1.0)*r10*x1294)));
evalcond[1]=((((-1.0)*r00*x1294))+((sj4*x1282))+(((-1.0)*x1274)));
evalcond[2]=((((-1.0)*x1278*x1293))+(((-1.0)*x1276*x1288))+((sj3*x1280))+((sj3*x1281))+((sj1*x1289))+((x1282*x1284)));
evalcond[3]=(((x1279*x1284))+(((-1.0)*x1278*x1295))+((sj3*x1286))+((sj3*x1283))+((sj1*x1287))+(((-1.0)*x1276*x1290)));
evalcond[4]=((((-1.0)*x1282*x1291))+(((-1.0)*x1278*x1289))+((sj3*x1288))+((cj3*x1280))+((cj3*x1281))+(((-1.0)*x1285*x1293)));
evalcond[5]=(((sj3*x1290))+(((-1.0)*x1279*x1291))+(((-1.0)*x1278*x1287))+((cj3*x1286))+((cj3*x1283))+(((-1.0)*x1285*x1295)));
evalcond[6]=((((-0.099)*x1280))+(((-0.099)*x1281))+(((-1.0)*x1275*x1289))+((x1273*x1292))+((x1273*x1277))+(((-0.133)*x1274))+(((-1.0)*px)));
evalcond[7]=((((-0.099)*x1283))+(((-0.099)*x1286))+((x1274*x1292))+(((-1.0)*x1275*x1287))+((x1274*x1277))+(((-1.0)*py))+(((0.133)*x1273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(cj3,-1);
if(!x1296.valid){
continue;
}
CheckValue<IkReal> x1297=IKPowWithIntegerCheck(r22,-1);
if(!x1297.valid){
continue;
}
sj4array[0]=((-1.0)*(x1296.value)*(x1297.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1298=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1298);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1298);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1299=((4.0)*r01);
IkReal x1300=((16.0)*r00);
IkReal x1301=(cj3*sj2);
IkReal x1302=((8.0)*r00);
IkReal x1303=(cj2*cj3);
IkReal x1304=(cj4*r01);
IkReal x1305=((16.0)*cj1);
IkReal x1306=((8.0)*sj1);
IkReal x1307=((16.0)*sj1);
IkReal x1308=((8.0)*cj1);
IkReal x1309=(sj2*sj3);
IkReal x1310=(cj2*sj3);
IkReal x1311=(sj1*x1310);
IkReal x1312=((4.0)*cj4*r00);
IkReal x1313=(((cj1*x1299*x1309))+((sj1*x1309*x1312))+((sj1*x1299*x1301))+((x1299*x1311)));
IkReal x1314=(((cj1*x1299*x1303))+((cj1*x1310*x1312))+((sj1*x1303*x1312))+((cj1*x1301*x1312)));
IkReal x1315=(x1314+(((-1.0)*x1313)));
IkReal x1316=((((-1.0)*cj1*x1302*x1303))+(((-1.0)*x1304*x1306*x1309))+((sj1*x1301*x1302))+((x1303*x1304*x1306))+((x1304*x1308*x1310))+((x1302*x1311))+((cj1*x1302*x1309))+((x1301*x1304*x1308)));
IkReal x1317=(x1313+(((-1.0)*x1314)));
op[0]=x1315;
op[1]=x1316;
op[2]=x1315;
op[3]=((((-1.0)*x1304*x1307*x1309))+(((-1.0)*cj1*x1300*x1303))+((x1300*x1311))+((x1303*x1304*x1307))+((cj1*x1300*x1309))+((sj1*x1300*x1301))+((x1304*x1305*x1310))+((x1301*x1304*x1305)));
op[4]=x1317;
op[5]=x1316;
op[6]=x1317;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1318=(cj5*sj4);
IkReal x1319=(sj4*sj5);
if( IKabs((((r01*x1319))+(((-1.0)*r00*x1318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1319))+((r10*x1318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1319))+(((-1.0)*r00*x1318))))+IKsqr(((((-1.0)*r11*x1319))+((r10*x1318))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1319))+(((-1.0)*r00*x1318))), ((((-1.0)*r11*x1319))+((r10*x1318))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1320=IKcos(j0);
IkReal x1321=IKsin(j0);
IkReal x1322=((0.392)*sj1);
IkReal x1323=((1.0)*cj3);
IkReal x1324=((0.425)*cj1);
IkReal x1325=((1.0)*cj1);
IkReal x1326=(r11*sj5);
IkReal x1327=(cj5*r01);
IkReal x1328=(r00*sj5);
IkReal x1329=(r01*sj5);
IkReal x1330=(cj5*r11);
IkReal x1331=(cj3*cj4);
IkReal x1332=((1.0)*sj1);
IkReal x1333=(r10*sj5);
IkReal x1334=(sj2*x1321);
IkReal x1335=(cj4*cj5*r00);
IkReal x1336=(sj2*x1320);
IkReal x1337=(cj4*cj5*r10);
IkReal x1338=((1.0)*cj4*sj3);
IkReal x1339=((0.392)*cj1*cj2);
IkReal x1340=(cj2*x1320);
IkReal x1341=((1.0)*cj5*sj4);
IkReal x1342=(cj2*x1321);
evalcond[0]=(x1320+((sj4*x1326))+(((-1.0)*r10*x1341)));
evalcond[1]=((((-1.0)*x1321))+(((-1.0)*r00*x1341))+((sj4*x1329)));
evalcond[2]=(((x1329*x1331))+((sj3*x1328))+((sj3*x1327))+(((-1.0)*x1323*x1335))+(((-1.0)*x1325*x1340))+((sj1*x1336)));
evalcond[3]=((((-1.0)*x1323*x1337))+((sj3*x1333))+((sj3*x1330))+(((-1.0)*x1325*x1342))+((x1326*x1331))+((sj1*x1334)));
evalcond[4]=((((-1.0)*x1325*x1336))+((sj3*x1335))+((cj3*x1327))+((cj3*x1328))+(((-1.0)*x1329*x1338))+(((-1.0)*x1332*x1340)));
evalcond[5]=((((-1.0)*x1326*x1338))+(((-1.0)*x1325*x1334))+((sj3*x1337))+((cj3*x1330))+((cj3*x1333))+(((-1.0)*x1332*x1342)));
evalcond[6]=((((-0.099)*x1328))+(((-0.099)*x1327))+((x1320*x1324))+(((-1.0)*x1322*x1336))+(((-0.133)*x1321))+(((-1.0)*px))+((x1320*x1339)));
evalcond[7]=((((-1.0)*x1322*x1334))+(((-1.0)*py))+(((-0.099)*x1330))+(((-0.099)*x1333))+((x1321*x1339))+(((0.133)*x1320))+((x1321*x1324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1345 = IKatan2WithCheck(IkReal(((-0.099)*r21)),IkReal(((-0.099)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1345.valid){
continue;
}
IkReal x1343=((1.0)*(x1345.value));
if((((((0.009801)*(r20*r20)))+(((0.009801)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1346=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.009801)*(r20*r20)))+(((0.009801)*(r21*r21)))))),-1);
if(!x1346.valid){
continue;
}
if( (((-1.0)*(x1346.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1346.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1344=((-1.0)*(IKasin(((-1.0)*(x1346.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1344))+(((-1.0)*x1343)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1344))+(((-1.0)*x1343)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1347=cj5*cj5;
IkReal x1348=r21*r21;
IkReal x1349=(sj3*x1347);
IkReal x1350=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1349*(r20*r20)))+(((-1.0)*x1348*x1349))+((sj3*x1348)));
j4eval[0]=x1350;
j4eval[1]=IKsign(x1350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1351=cj5*cj5;
IkReal x1352=r21*r21;
IkReal x1353=((1.0)*cj3);
IkReal x1354=(cj3*x1351);
IkReal x1355=((((-1.0)*x1352*x1353))+(((-1.0)*x1351*x1353*(r20*r20)))+(((-1.0)*x1353*(r22*r22)))+((x1352*x1354))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1355;
j4eval[1]=IKsign(x1355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1356=cj1*cj1;
IkReal x1357=cj2*cj2;
IkReal x1358=(cj1*sj1*sj2);
IkReal x1359=(cj2*x1356);
IkReal x1360=(x1356*x1357);
j0eval[0]=((6.35558770075294)+x1356+(((11.3989837172212)*x1360))+(((-5.69949185861059)*x1357))+(((-11.3989837172212)*cj2*x1358))+(((-12.3585920403546)*x1358))+(((12.3585920403546)*x1359)));
j0eval[1]=IKsign(((171353.0)+(((-153664.0)*x1357))+(((26961.0)*x1356))+(((-333200.0)*x1358))+(((307328.0)*x1360))+(((333200.0)*x1359))+(((-307328.0)*cj2*x1358))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1361=((1.0)*cj5);
IkReal x1362=((1.0)*sj5);
IkReal x1363=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1363;
j0eval[1]=((IKabs(((((-1.0)*r01*x1361))+(((-1.0)*r00*x1362)))))+(IKabs(((((-1.0)*r11*x1361))+(((-1.0)*r10*x1362))))));
j0eval[2]=IKsign(x1363);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1364=cj5*cj5;
IkReal x1365=r21*r21;
IkReal x1366=(sj1*sj2);
IkReal x1367=(r21*sj5);
IkReal x1368=(cj5*r20);
IkReal x1369=(cj1*cj2);
IkReal x1370=(x1365+(r22*r22)+((x1364*(r20*r20)))+(((-2.0)*x1367*x1368))+(((-1.0)*x1364*x1365)));
j4eval[0]=x1370;
j4eval[1]=IKsign(x1370);
j4eval[2]=((IKabs((((x1366*x1367))+(((-1.0)*x1367*x1369))+(((-1.0)*x1366*x1368))+((x1368*x1369)))))+(IKabs((((r22*x1366))+(((-1.0)*r22*x1369))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.14306604677431)*py))+(((-0.670653609931724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.670653609931724)*py))+(((2.14306604677431)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.14306604677431)*py))+(((-0.670653609931724)*px))))+IKsqr(((((0.670653609931724)*py))+(((2.14306604677431)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.14306604677431)*py))+(((-0.670653609931724)*px))), ((((0.670653609931724)*py))+(((2.14306604677431)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1371=IKcos(j0);
IkReal x1372=IKsin(j0);
evalcond[0]=((((0.425)*x1371))+(((-0.133)*x1372))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x1372))+(((-1.0)*py))+(((0.133)*x1371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1373=((1.0)*cj5);
IkReal x1374=((((-1.0)*r01*x1373))+(((-1.0)*r00*sj5)));
j4eval[0]=x1374;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1373)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1375=((1.0)*cj5);
IkReal x1376=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1375)));
j4eval[0]=x1376;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1375))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1377=cj5*cj5;
IkReal x1378=((1.0)*sj5);
IkReal x1379=(cj5*r20);
IkReal x1380=(r11*r21);
IkReal x1381=(x1380+((r10*r20*x1377))+(((-1.0)*x1377*x1380))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1378))+(((-1.0)*r11*x1378*x1379)));
j4eval[0]=x1381;
j4eval[1]=IKsign(x1381);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1378))+((cj0*x1379)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1382=cj5*cj5;
IkReal x1383=((1.0)*sj5);
IkReal x1384=(cj5*r20);
IkReal x1385=(r11*r21);
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(IKsign((x1385+(((-1.0)*x1382*x1385))+(((-1.0)*cj5*r10*r21*x1383))+(((-1.0)*r11*x1383*x1384))+((r12*r22))+((r10*r20*x1382)))),-1);
if(!x1386.valid){
continue;
}
CheckValue<IkReal> x1387 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1383))+((cj0*x1384)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1386.value)))+(x1387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1388=IKsin(j4);
IkReal x1389=IKcos(j4);
IkReal x1390=((1.0)*sj0);
IkReal x1391=(cj5*r00);
IkReal x1392=(r11*sj5);
IkReal x1393=(cj5*r10);
IkReal x1394=(r21*sj5);
IkReal x1395=(cj5*r20);
IkReal x1396=(r01*sj5);
IkReal x1397=((1.0)*x1389);
IkReal x1398=((1.0)*x1388);
evalcond[0]=(((x1388*x1394))+(((-1.0)*x1395*x1398))+(((-1.0)*r22*x1397)));
evalcond[1]=((((-1.0)*x1394*x1397))+(((-1.0)*r22*x1398))+((x1389*x1395)));
evalcond[2]=((((-1.0)*r12*x1397))+((x1388*x1392))+cj0+(((-1.0)*x1393*x1398)));
evalcond[3]=(((x1388*x1396))+(((-1.0)*r02*x1397))+(((-1.0)*x1391*x1398))+(((-1.0)*x1390)));
evalcond[4]=((((-1.0)*r02*x1398))+(((-1.0)*x1396*x1397))+((x1389*x1391))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1392*x1397))+(((-1.0)*r12*x1398))+((x1389*x1393))+(((-1.0)*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1399=((1.0)*cj5);
CheckValue<IkReal> x1400 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1400.valid){
continue;
}
CheckValue<IkReal> x1401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1399)))),-1);
if(!x1401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1400.value)+(((1.5707963267949)*(x1401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1402=IKsin(j4);
IkReal x1403=IKcos(j4);
IkReal x1404=((1.0)*sj0);
IkReal x1405=(cj5*r00);
IkReal x1406=(r11*sj5);
IkReal x1407=(cj5*r10);
IkReal x1408=(r21*sj5);
IkReal x1409=(cj5*r20);
IkReal x1410=(r01*sj5);
IkReal x1411=((1.0)*x1403);
IkReal x1412=((1.0)*x1402);
evalcond[0]=((((-1.0)*r22*x1411))+(((-1.0)*x1409*x1412))+((x1402*x1408)));
evalcond[1]=((((-1.0)*r22*x1412))+(((-1.0)*x1408*x1411))+((x1403*x1409)));
evalcond[2]=(cj0+(((-1.0)*x1407*x1412))+(((-1.0)*r12*x1411))+((x1402*x1406)));
evalcond[3]=(((x1402*x1410))+(((-1.0)*r02*x1411))+(((-1.0)*x1404))+(((-1.0)*x1405*x1412)));
evalcond[4]=((((-1.0)*r02*x1412))+((x1403*x1405))+(((-1.0)*x1410*x1411))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1404))+((x1403*x1407))+(((-1.0)*r12*x1412))+(((-1.0)*x1406*x1411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1413=((1.0)*cj5);
CheckValue<IkReal> x1414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1413)))),-1);
if(!x1414.valid){
continue;
}
CheckValue<IkReal> x1415 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1414.value)))+(x1415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1416=IKsin(j4);
IkReal x1417=IKcos(j4);
IkReal x1418=((1.0)*sj0);
IkReal x1419=(cj5*r00);
IkReal x1420=(r11*sj5);
IkReal x1421=(cj5*r10);
IkReal x1422=(r21*sj5);
IkReal x1423=(cj5*r20);
IkReal x1424=(r01*sj5);
IkReal x1425=((1.0)*x1417);
IkReal x1426=((1.0)*x1416);
evalcond[0]=((((-1.0)*x1423*x1426))+(((-1.0)*r22*x1425))+((x1416*x1422)));
evalcond[1]=((((-1.0)*x1422*x1425))+(((-1.0)*r22*x1426))+((x1417*x1423)));
evalcond[2]=((((-1.0)*x1421*x1426))+cj0+(((-1.0)*r12*x1425))+((x1416*x1420)));
evalcond[3]=((((-1.0)*x1418))+(((-1.0)*x1419*x1426))+(((-1.0)*r02*x1425))+((x1416*x1424)));
evalcond[4]=(((x1417*x1419))+(((-1.0)*x1424*x1425))+(((-1.0)*r02*x1426))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1418))+(((-1.0)*x1420*x1425))+(((-1.0)*r12*x1426))+((x1417*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.14306604677431)*py))+(((-0.670653609931724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.670653609931724)*py))+(((2.14306604677431)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.14306604677431)*py))+(((-0.670653609931724)*px))))+IKsqr(((((0.670653609931724)*py))+(((2.14306604677431)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.14306604677431)*py))+(((-0.670653609931724)*px))), ((((0.670653609931724)*py))+(((2.14306604677431)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1427=IKcos(j0);
IkReal x1428=IKsin(j0);
evalcond[0]=((((-0.133)*x1428))+(((0.425)*x1427))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x1428))+(((-1.0)*py))+(((0.133)*x1427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1429=((1.0)*cj5);
IkReal x1430=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1429)));
j4eval[0]=x1430;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1429)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1431=cj5*cj5;
IkReal x1432=((1.0)*r21);
IkReal x1433=(cj5*sj5);
IkReal x1434=((1.0)*r20);
IkReal x1435=((((-1.0)*r01*x1433*x1434))+((r01*r21))+(((-1.0)*r00*x1432*x1433))+((r00*r20*x1431))+((r02*r22))+(((-1.0)*r01*x1431*x1432)));
j4eval[0]=x1435;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1434)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1436=cj5*cj5;
IkReal x1437=(r21*sj5);
IkReal x1438=(r11*r21);
IkReal x1439=((1.0)*cj5*r20);
IkReal x1440=((((-1.0)*cj5*r10*x1437))+((r10*r20*x1436))+(((-1.0)*x1436*x1438))+(((-1.0)*r11*sj5*x1439))+((r12*r22))+x1438);
j4eval[0]=x1440;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1439))+((sj0*x1437))))));
j4eval[2]=IKsign(x1440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1441=cj5*cj5;
IkReal x1442=(r21*sj5);
IkReal x1443=(r11*r21);
IkReal x1444=((1.0)*cj5*r20);
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1442))+(((-1.0)*sj0*x1444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1441*x1443))+((r12*r22))+x1443+(((-1.0)*cj5*r10*x1442))+((r10*r20*x1441))+(((-1.0)*r11*sj5*x1444)))),-1);
if(!x1446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1445.value)+(((1.5707963267949)*(x1446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1447=IKsin(j4);
IkReal x1448=IKcos(j4);
IkReal x1449=(r11*sj5);
IkReal x1450=(cj5*r00);
IkReal x1451=(cj5*r10);
IkReal x1452=(r21*sj5);
IkReal x1453=(cj5*r20);
IkReal x1454=(r01*sj5);
IkReal x1455=((1.0)*x1448);
IkReal x1456=((1.0)*x1447);
evalcond[0]=((((-1.0)*r22*x1455))+((x1447*x1452))+(((-1.0)*x1453*x1456)));
evalcond[1]=((((-1.0)*r22*x1456))+((x1448*x1453))+(((-1.0)*x1452*x1455)));
evalcond[2]=(cj0+((x1447*x1449))+(((-1.0)*x1451*x1456))+(((-1.0)*r12*x1455)));
evalcond[3]=(cj0+(((-1.0)*x1454*x1455))+((x1448*x1450))+(((-1.0)*r02*x1456)));
evalcond[4]=(sj0+((x1448*x1451))+(((-1.0)*x1449*x1455))+(((-1.0)*r12*x1456)));
evalcond[5]=((((-1.0)*sj0))+((x1447*x1454))+(((-1.0)*r02*x1455))+(((-1.0)*x1450*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1457=cj5*cj5;
IkReal x1458=((1.0)*r21);
IkReal x1459=(cj5*sj5);
IkReal x1460=((1.0)*r20);
CheckValue<IkReal> x1461 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1461.valid){
continue;
}
CheckValue<IkReal> x1462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1459*x1460))+((r01*r21))+((r00*r20*x1457))+(((-1.0)*r00*x1458*x1459))+(((-1.0)*r01*x1457*x1458))+((r02*r22)))),-1);
if(!x1462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1461.value)+(((1.5707963267949)*(x1462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1463=IKsin(j4);
IkReal x1464=IKcos(j4);
IkReal x1465=(r11*sj5);
IkReal x1466=(cj5*r00);
IkReal x1467=(cj5*r10);
IkReal x1468=(r21*sj5);
IkReal x1469=(cj5*r20);
IkReal x1470=(r01*sj5);
IkReal x1471=((1.0)*x1464);
IkReal x1472=((1.0)*x1463);
evalcond[0]=((((-1.0)*r22*x1471))+((x1463*x1468))+(((-1.0)*x1469*x1472)));
evalcond[1]=((((-1.0)*r22*x1472))+((x1464*x1469))+(((-1.0)*x1468*x1471)));
evalcond[2]=(((x1463*x1465))+cj0+(((-1.0)*r12*x1471))+(((-1.0)*x1467*x1472)));
evalcond[3]=((((-1.0)*x1470*x1471))+cj0+((x1464*x1466))+(((-1.0)*r02*x1472)));
evalcond[4]=(sj0+(((-1.0)*r12*x1472))+((x1464*x1467))+(((-1.0)*x1465*x1471)));
evalcond[5]=((((-1.0)*sj0))+((x1463*x1470))+(((-1.0)*r02*x1471))+(((-1.0)*x1466*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1473=((1.0)*cj5);
CheckValue<IkReal> x1474 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1474.valid){
continue;
}
CheckValue<IkReal> x1475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1473))+(((-1.0)*r00*sj5)))),-1);
if(!x1475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1474.value)+(((1.5707963267949)*(x1475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1476=IKsin(j4);
IkReal x1477=IKcos(j4);
IkReal x1478=(r11*sj5);
IkReal x1479=(cj5*r00);
IkReal x1480=(cj5*r10);
IkReal x1481=(r21*sj5);
IkReal x1482=(cj5*r20);
IkReal x1483=(r01*sj5);
IkReal x1484=((1.0)*x1477);
IkReal x1485=((1.0)*x1476);
evalcond[0]=((((-1.0)*x1482*x1485))+((x1476*x1481))+(((-1.0)*r22*x1484)));
evalcond[1]=((((-1.0)*x1481*x1484))+((x1477*x1482))+(((-1.0)*r22*x1485)));
evalcond[2]=(cj0+(((-1.0)*r12*x1484))+(((-1.0)*x1480*x1485))+((x1476*x1478)));
evalcond[3]=(cj0+(((-1.0)*r02*x1485))+(((-1.0)*x1483*x1484))+((x1477*x1479)));
evalcond[4]=(sj0+(((-1.0)*r12*x1485))+((x1477*x1480))+(((-1.0)*x1478*x1484)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1479*x1485))+((x1476*x1483))+(((-1.0)*r02*x1484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.5187969924812)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.5187969924812)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.5187969924812)*px))+IKsqr(((7.5187969924812)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.5187969924812)*px), ((7.5187969924812)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.133)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.133)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1486=((1.0)*cj5);
IkReal x1487=((((-1.0)*r01*x1486))+(((-1.0)*r00*sj5)));
j4eval[0]=x1487;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1486))))));
j4eval[2]=IKsign(x1487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1488=((1.0)*cj5);
IkReal x1489=((((-1.0)*r11*x1488))+(((-1.0)*r10*sj5)));
j4eval[0]=x1489;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1488))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1490=cj5*cj5;
IkReal x1491=((1.0)*sj5);
IkReal x1492=(cj5*r20);
IkReal x1493=(r11*r21);
IkReal x1494=(((r10*r20*x1490))+(((-1.0)*cj5*r10*r21*x1491))+((r12*r22))+(((-1.0)*r11*x1491*x1492))+x1493+(((-1.0)*x1490*x1493)));
j4eval[0]=x1494;
j4eval[1]=IKsign(x1494);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1491))+((cj0*x1492)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1495=cj5*cj5;
IkReal x1496=((1.0)*sj5);
IkReal x1497=(cj5*r20);
IkReal x1498=(r11*r21);
CheckValue<IkReal> x1499 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1496))+((cj0*x1497)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1499.valid){
continue;
}
CheckValue<IkReal> x1500=IKPowWithIntegerCheck(IKsign((((r10*r20*x1495))+(((-1.0)*cj5*r10*r21*x1496))+((r12*r22))+(((-1.0)*r11*x1496*x1497))+x1498+(((-1.0)*x1495*x1498)))),-1);
if(!x1500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1499.value)+(((1.5707963267949)*(x1500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1501=IKsin(j4);
IkReal x1502=IKcos(j4);
IkReal x1503=((1.0)*sj0);
IkReal x1504=(cj5*r00);
IkReal x1505=(r11*sj5);
IkReal x1506=(cj5*r10);
IkReal x1507=(r21*sj5);
IkReal x1508=(cj5*r20);
IkReal x1509=(r01*sj5);
IkReal x1510=((1.0)*x1502);
IkReal x1511=((1.0)*x1501);
evalcond[0]=((((-1.0)*r22*x1510))+((x1501*x1507))+(((-1.0)*x1508*x1511)));
evalcond[1]=((((-1.0)*r22*x1511))+(((-1.0)*x1507*x1510))+((x1502*x1508)));
evalcond[2]=(cj0+(((-1.0)*x1506*x1511))+((x1501*x1505))+(((-1.0)*r12*x1510)));
evalcond[3]=((((-1.0)*x1503))+(((-1.0)*x1504*x1511))+((x1501*x1509))+(((-1.0)*r02*x1510)));
evalcond[4]=((((-1.0)*r02*x1511))+(((-1.0)*x1509*x1510))+((x1502*x1504))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1503))+((x1502*x1506))+(((-1.0)*x1505*x1510))+(((-1.0)*r12*x1511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1512=((1.0)*cj5);
CheckValue<IkReal> x1513 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1512)))),-1);
if(!x1514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1513.value)+(((1.5707963267949)*(x1514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1515=IKsin(j4);
IkReal x1516=IKcos(j4);
IkReal x1517=((1.0)*sj0);
IkReal x1518=(cj5*r00);
IkReal x1519=(r11*sj5);
IkReal x1520=(cj5*r10);
IkReal x1521=(r21*sj5);
IkReal x1522=(cj5*r20);
IkReal x1523=(r01*sj5);
IkReal x1524=((1.0)*x1516);
IkReal x1525=((1.0)*x1515);
evalcond[0]=((((-1.0)*r22*x1524))+(((-1.0)*x1522*x1525))+((x1515*x1521)));
evalcond[1]=((((-1.0)*r22*x1525))+((x1516*x1522))+(((-1.0)*x1521*x1524)));
evalcond[2]=((((-1.0)*r12*x1524))+cj0+((x1515*x1519))+(((-1.0)*x1520*x1525)));
evalcond[3]=((((-1.0)*x1517))+(((-1.0)*x1518*x1525))+(((-1.0)*r02*x1524))+((x1515*x1523)));
evalcond[4]=((((-1.0)*r02*x1525))+((x1516*x1518))+(((-1.0)*x1523*x1524))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1525))+(((-1.0)*x1517))+(((-1.0)*x1519*x1524))+((x1516*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1526=((1.0)*cj5);
CheckValue<IkReal> x1527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1526))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1526))+(((-1.0)*r00*sj5)))),-1);
if(!x1528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1527.value)+(((1.5707963267949)*(x1528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1529=IKsin(j4);
IkReal x1530=IKcos(j4);
IkReal x1531=((1.0)*sj0);
IkReal x1532=(cj5*r00);
IkReal x1533=(r11*sj5);
IkReal x1534=(cj5*r10);
IkReal x1535=(r21*sj5);
IkReal x1536=(cj5*r20);
IkReal x1537=(r01*sj5);
IkReal x1538=((1.0)*x1530);
IkReal x1539=((1.0)*x1529);
evalcond[0]=((((-1.0)*r22*x1538))+((x1529*x1535))+(((-1.0)*x1536*x1539)));
evalcond[1]=((((-1.0)*r22*x1539))+((x1530*x1536))+(((-1.0)*x1535*x1538)));
evalcond[2]=((((-1.0)*r12*x1538))+cj0+((x1529*x1533))+(((-1.0)*x1534*x1539)));
evalcond[3]=((((-1.0)*x1531))+(((-1.0)*x1532*x1539))+(((-1.0)*r02*x1538))+((x1529*x1537)));
evalcond[4]=((((-1.0)*x1537*x1538))+((x1530*x1532))+(((-1.0)*r02*x1539))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1539))+(((-1.0)*x1531))+((x1530*x1534))+(((-1.0)*x1533*x1538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.5187969924812)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.5187969924812)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.5187969924812)*px))+IKsqr(((7.5187969924812)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.5187969924812)*px), ((7.5187969924812)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.133)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.133)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1540=((1.0)*cj5);
IkReal x1541=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1540)));
j4eval[0]=x1541;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1540))))));
j4eval[2]=IKsign(x1541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1542=cj5*cj5;
IkReal x1543=((1.0)*r21);
IkReal x1544=(cj5*sj5);
IkReal x1545=((1.0)*r20);
IkReal x1546=((((-1.0)*r00*x1543*x1544))+((r01*r21))+(((-1.0)*r01*x1544*x1545))+((r00*r20*x1542))+(((-1.0)*r01*x1542*x1543))+((r02*r22)));
j4eval[0]=x1546;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1545)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1547=cj5*cj5;
IkReal x1548=(r21*sj5);
IkReal x1549=(r11*r21);
IkReal x1550=((1.0)*cj5*r20);
IkReal x1551=((((-1.0)*x1547*x1549))+(((-1.0)*r11*sj5*x1550))+(((-1.0)*cj5*r10*x1548))+((r12*r22))+x1549+((r10*r20*x1547)));
j4eval[0]=x1551;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1548))+(((-1.0)*sj0*x1550))))));
j4eval[2]=IKsign(x1551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1552=cj5*cj5;
IkReal x1553=(r21*sj5);
IkReal x1554=(r11*r21);
IkReal x1555=((1.0)*cj5*r20);
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1555))+(((-1.0)*cj5*r10*x1553))+((r12*r22))+(((-1.0)*x1552*x1554))+x1554+((r10*r20*x1552)))),-1);
if(!x1556.valid){
continue;
}
CheckValue<IkReal> x1557 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1553))+(((-1.0)*sj0*x1555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1556.value)))+(x1557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1558=IKsin(j4);
IkReal x1559=IKcos(j4);
IkReal x1560=(r11*sj5);
IkReal x1561=(cj5*r00);
IkReal x1562=(cj5*r10);
IkReal x1563=(r21*sj5);
IkReal x1564=(cj5*r20);
IkReal x1565=(r01*sj5);
IkReal x1566=((1.0)*x1559);
IkReal x1567=((1.0)*x1558);
evalcond[0]=((((-1.0)*r22*x1566))+(((-1.0)*x1564*x1567))+((x1558*x1563)));
evalcond[1]=((((-1.0)*r22*x1567))+(((-1.0)*x1563*x1566))+((x1559*x1564)));
evalcond[2]=(cj0+(((-1.0)*x1562*x1567))+(((-1.0)*r12*x1566))+((x1558*x1560)));
evalcond[3]=((((-1.0)*x1565*x1566))+(((-1.0)*r02*x1567))+cj0+((x1559*x1561)));
evalcond[4]=(sj0+(((-1.0)*x1560*x1566))+(((-1.0)*r12*x1567))+((x1559*x1562)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1566))+(((-1.0)*x1561*x1567))+((x1558*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1568=cj5*cj5;
IkReal x1569=((1.0)*r21);
IkReal x1570=(cj5*sj5);
IkReal x1571=((1.0)*r20);
CheckValue<IkReal> x1572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1570*x1571))+(((-1.0)*r00*x1569*x1570))+((r01*r21))+((r00*r20*x1568))+(((-1.0)*r01*x1568*x1569))+((r02*r22)))),-1);
if(!x1572.valid){
continue;
}
CheckValue<IkReal> x1573 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1572.value)))+(x1573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1574=IKsin(j4);
IkReal x1575=IKcos(j4);
IkReal x1576=(r11*sj5);
IkReal x1577=(cj5*r00);
IkReal x1578=(cj5*r10);
IkReal x1579=(r21*sj5);
IkReal x1580=(cj5*r20);
IkReal x1581=(r01*sj5);
IkReal x1582=((1.0)*x1575);
IkReal x1583=((1.0)*x1574);
evalcond[0]=((((-1.0)*x1580*x1583))+(((-1.0)*r22*x1582))+((x1574*x1579)));
evalcond[1]=(((x1575*x1580))+(((-1.0)*x1579*x1582))+(((-1.0)*r22*x1583)));
evalcond[2]=((((-1.0)*x1578*x1583))+cj0+(((-1.0)*r12*x1582))+((x1574*x1576)));
evalcond[3]=(cj0+(((-1.0)*r02*x1583))+((x1575*x1577))+(((-1.0)*x1581*x1582)));
evalcond[4]=(sj0+((x1575*x1578))+(((-1.0)*x1576*x1582))+(((-1.0)*r12*x1583)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1577*x1583))+(((-1.0)*r02*x1582))+((x1574*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1584=((1.0)*cj5);
CheckValue<IkReal> x1585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1584)))),-1);
if(!x1585.valid){
continue;
}
CheckValue<IkReal> x1586 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1584))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1585.value)))+(x1586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1587=IKsin(j4);
IkReal x1588=IKcos(j4);
IkReal x1589=(r11*sj5);
IkReal x1590=(cj5*r00);
IkReal x1591=(cj5*r10);
IkReal x1592=(r21*sj5);
IkReal x1593=(cj5*r20);
IkReal x1594=(r01*sj5);
IkReal x1595=((1.0)*x1588);
IkReal x1596=((1.0)*x1587);
evalcond[0]=(((x1587*x1592))+(((-1.0)*x1593*x1596))+(((-1.0)*r22*x1595)));
evalcond[1]=((((-1.0)*x1592*x1595))+((x1588*x1593))+(((-1.0)*r22*x1596)));
evalcond[2]=(((x1587*x1589))+cj0+(((-1.0)*x1591*x1596))+(((-1.0)*r12*x1595)));
evalcond[3]=(cj0+((x1588*x1590))+(((-1.0)*x1594*x1595))+(((-1.0)*r02*x1596)));
evalcond[4]=(sj0+((x1588*x1591))+(((-1.0)*x1589*x1595))+(((-1.0)*r12*x1596)));
evalcond[5]=((((-1.0)*sj0))+((x1587*x1594))+(((-1.0)*r02*x1595))+(((-1.0)*x1590*x1596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14306604677431)*py))+(((-0.670653609931724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.670653609931724)*py))+(((-2.14306604677431)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14306604677431)*py))+(((-0.670653609931724)*px))))+IKsqr(((((0.670653609931724)*py))+(((-2.14306604677431)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14306604677431)*py))+(((-0.670653609931724)*px))), ((((0.670653609931724)*py))+(((-2.14306604677431)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1597=IKcos(j0);
IkReal x1598=IKsin(j0);
evalcond[0]=((((-0.425)*x1597))+(((-1.0)*px))+(((-0.133)*x1598)));
evalcond[1]=((((-0.425)*x1598))+(((-1.0)*py))+(((0.133)*x1597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1599=((1.0)*cj5);
IkReal x1600=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1599)));
j4eval[0]=x1600;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1599))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1601=cj5*cj5;
IkReal x1602=((1.0)*r21);
IkReal x1603=(cj5*sj5);
IkReal x1604=((1.0)*r20);
IkReal x1605=(((r00*r20*x1601))+(((-1.0)*r00*x1602*x1603))+((r01*r21))+(((-1.0)*r01*x1603*x1604))+((r02*r22))+(((-1.0)*r01*x1601*x1602)));
j4eval[0]=x1605;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1604)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1606=cj5*cj5;
IkReal x1607=(r21*sj5);
IkReal x1608=(r11*r21);
IkReal x1609=((1.0)*cj5*r20);
IkReal x1610=((((-1.0)*cj5*r10*x1607))+((r10*r20*x1606))+x1608+(((-1.0)*r11*sj5*x1609))+((r12*r22))+(((-1.0)*x1606*x1608)));
j4eval[0]=x1610;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1609))+((sj0*x1607)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1610);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1611=cj5*cj5;
IkReal x1612=(r21*sj5);
IkReal x1613=(r11*r21);
IkReal x1614=((1.0)*cj5*r20);
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(IKsign((((r10*r20*x1611))+(((-1.0)*x1611*x1613))+x1613+((r12*r22))+(((-1.0)*r11*sj5*x1614))+(((-1.0)*cj5*r10*x1612)))),-1);
if(!x1615.valid){
continue;
}
CheckValue<IkReal> x1616 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1614))+((sj0*x1612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1615.value)))+(x1616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1617=IKsin(j4);
IkReal x1618=IKcos(j4);
IkReal x1619=(r11*sj5);
IkReal x1620=(cj5*r00);
IkReal x1621=(cj5*r10);
IkReal x1622=(r21*sj5);
IkReal x1623=(cj5*r20);
IkReal x1624=(r01*sj5);
IkReal x1625=((1.0)*x1618);
IkReal x1626=((1.0)*x1617);
evalcond[0]=(((x1617*x1622))+(((-1.0)*x1623*x1626))+(((-1.0)*r22*x1625)));
evalcond[1]=((((-1.0)*x1622*x1625))+(((-1.0)*r22*x1626))+((x1618*x1623)));
evalcond[2]=((((-1.0)*r12*x1625))+cj0+((x1617*x1619))+(((-1.0)*x1621*x1626)));
evalcond[3]=(cj0+(((-1.0)*r02*x1626))+(((-1.0)*x1624*x1625))+((x1618*x1620)));
evalcond[4]=((((-1.0)*r12*x1626))+(((-1.0)*x1619*x1625))+sj0+((x1618*x1621)));
evalcond[5]=((((-1.0)*sj0))+((x1617*x1624))+(((-1.0)*r02*x1625))+(((-1.0)*x1620*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1627=cj5*cj5;
IkReal x1628=((1.0)*r21);
IkReal x1629=(cj5*sj5);
IkReal x1630=((1.0)*r20);
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(IKsign((((r00*r20*x1627))+(((-1.0)*r00*x1628*x1629))+((r01*r21))+(((-1.0)*r01*x1629*x1630))+(((-1.0)*r01*x1627*x1628))+((r02*r22)))),-1);
if(!x1631.valid){
continue;
}
CheckValue<IkReal> x1632 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1631.value)))+(x1632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1633=IKsin(j4);
IkReal x1634=IKcos(j4);
IkReal x1635=(r11*sj5);
IkReal x1636=(cj5*r00);
IkReal x1637=(cj5*r10);
IkReal x1638=(r21*sj5);
IkReal x1639=(cj5*r20);
IkReal x1640=(r01*sj5);
IkReal x1641=((1.0)*x1634);
IkReal x1642=((1.0)*x1633);
evalcond[0]=((((-1.0)*r22*x1641))+(((-1.0)*x1639*x1642))+((x1633*x1638)));
evalcond[1]=((((-1.0)*r22*x1642))+(((-1.0)*x1638*x1641))+((x1634*x1639)));
evalcond[2]=(cj0+(((-1.0)*r12*x1641))+(((-1.0)*x1637*x1642))+((x1633*x1635)));
evalcond[3]=(cj0+(((-1.0)*x1640*x1641))+((x1634*x1636))+(((-1.0)*r02*x1642)));
evalcond[4]=(sj0+(((-1.0)*x1635*x1641))+(((-1.0)*r12*x1642))+((x1634*x1637)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1636*x1642))+((x1633*x1640))+(((-1.0)*r02*x1641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1643=((1.0)*cj5);
CheckValue<IkReal> x1644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1643))+(((-1.0)*r00*sj5)))),-1);
if(!x1644.valid){
continue;
}
CheckValue<IkReal> x1645 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1644.value)))+(x1645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1646=IKsin(j4);
IkReal x1647=IKcos(j4);
IkReal x1648=(r11*sj5);
IkReal x1649=(cj5*r00);
IkReal x1650=(cj5*r10);
IkReal x1651=(r21*sj5);
IkReal x1652=(cj5*r20);
IkReal x1653=(r01*sj5);
IkReal x1654=((1.0)*x1647);
IkReal x1655=((1.0)*x1646);
evalcond[0]=((((-1.0)*x1652*x1655))+(((-1.0)*r22*x1654))+((x1646*x1651)));
evalcond[1]=((((-1.0)*r22*x1655))+((x1647*x1652))+(((-1.0)*x1651*x1654)));
evalcond[2]=(cj0+(((-1.0)*x1650*x1655))+(((-1.0)*r12*x1654))+((x1646*x1648)));
evalcond[3]=(cj0+(((-1.0)*x1653*x1654))+((x1647*x1649))+(((-1.0)*r02*x1655)));
evalcond[4]=(sj0+((x1647*x1650))+(((-1.0)*r12*x1655))+(((-1.0)*x1648*x1654)));
evalcond[5]=((((-1.0)*sj0))+((x1646*x1653))+(((-1.0)*x1649*x1655))+(((-1.0)*r02*x1654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14306604677431)*py))+(((-0.670653609931724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.670653609931724)*py))+(((-2.14306604677431)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14306604677431)*py))+(((-0.670653609931724)*px))))+IKsqr(((((0.670653609931724)*py))+(((-2.14306604677431)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14306604677431)*py))+(((-0.670653609931724)*px))), ((((0.670653609931724)*py))+(((-2.14306604677431)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1656=IKcos(j0);
IkReal x1657=IKsin(j0);
evalcond[0]=((((-0.133)*x1657))+(((-0.425)*x1656))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1657))+(((-1.0)*py))+(((0.133)*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1658=((1.0)*cj5);
IkReal x1659=((((-1.0)*r01*x1658))+(((-1.0)*r00*sj5)));
j4eval[0]=x1659;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1658))))));
j4eval[2]=IKsign(x1659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1660=((1.0)*cj5);
IkReal x1661=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1660)));
j4eval[0]=x1661;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1660))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1661);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1662=cj5*cj5;
IkReal x1663=((1.0)*sj5);
IkReal x1664=(cj5*r20);
IkReal x1665=(r11*r21);
IkReal x1666=((((-1.0)*r11*x1663*x1664))+(((-1.0)*cj5*r10*r21*x1663))+x1665+((r12*r22))+(((-1.0)*x1662*x1665))+((r10*r20*x1662)));
j4eval[0]=x1666;
j4eval[1]=IKsign(x1666);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1663))+((cj0*x1664))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1667=cj5*cj5;
IkReal x1668=((1.0)*sj5);
IkReal x1669=(cj5*r20);
IkReal x1670=(r11*r21);
CheckValue<IkReal> x1671 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1668))+((cj0*x1669)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1671.valid){
continue;
}
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1668))+x1670+(((-1.0)*r11*x1668*x1669))+((r12*r22))+(((-1.0)*x1667*x1670))+((r10*r20*x1667)))),-1);
if(!x1672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1671.value)+(((1.5707963267949)*(x1672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1673=IKsin(j4);
IkReal x1674=IKcos(j4);
IkReal x1675=((1.0)*sj0);
IkReal x1676=(cj5*r00);
IkReal x1677=(r11*sj5);
IkReal x1678=(cj5*r10);
IkReal x1679=(r21*sj5);
IkReal x1680=(cj5*r20);
IkReal x1681=(r01*sj5);
IkReal x1682=((1.0)*x1674);
IkReal x1683=((1.0)*x1673);
evalcond[0]=(((x1673*x1679))+(((-1.0)*r22*x1682))+(((-1.0)*x1680*x1683)));
evalcond[1]=((((-1.0)*x1679*x1682))+(((-1.0)*r22*x1683))+((x1674*x1680)));
evalcond[2]=((((-1.0)*r12*x1682))+cj0+((x1673*x1677))+(((-1.0)*x1678*x1683)));
evalcond[3]=(((x1673*x1681))+(((-1.0)*x1676*x1683))+(((-1.0)*r02*x1682))+(((-1.0)*x1675)));
evalcond[4]=((((-1.0)*x1681*x1682))+((x1674*x1676))+(((-1.0)*r02*x1683))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1683))+(((-1.0)*x1677*x1682))+((x1674*x1678))+(((-1.0)*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1684=((1.0)*cj5);
CheckValue<IkReal> x1685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1684))+(((-1.0)*r10*sj5)))),-1);
if(!x1685.valid){
continue;
}
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1684))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1685.value)))+(x1686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1687=IKsin(j4);
IkReal x1688=IKcos(j4);
IkReal x1689=((1.0)*sj0);
IkReal x1690=(cj5*r00);
IkReal x1691=(r11*sj5);
IkReal x1692=(cj5*r10);
IkReal x1693=(r21*sj5);
IkReal x1694=(cj5*r20);
IkReal x1695=(r01*sj5);
IkReal x1696=((1.0)*x1688);
IkReal x1697=((1.0)*x1687);
evalcond[0]=((((-1.0)*x1694*x1697))+(((-1.0)*r22*x1696))+((x1687*x1693)));
evalcond[1]=((((-1.0)*r22*x1697))+((x1688*x1694))+(((-1.0)*x1693*x1696)));
evalcond[2]=((((-1.0)*x1692*x1697))+cj0+(((-1.0)*r12*x1696))+((x1687*x1691)));
evalcond[3]=((((-1.0)*x1689))+(((-1.0)*x1690*x1697))+(((-1.0)*r02*x1696))+((x1687*x1695)));
evalcond[4]=((((-1.0)*r02*x1697))+((x1688*x1690))+(((-1.0)*x1695*x1696))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1689))+(((-1.0)*r12*x1697))+(((-1.0)*x1691*x1696))+((x1688*x1692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1698=((1.0)*cj5);
CheckValue<IkReal> x1699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1698)))),-1);
if(!x1699.valid){
continue;
}
CheckValue<IkReal> x1700 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1698))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1699.value)))+(x1700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1701=IKsin(j4);
IkReal x1702=IKcos(j4);
IkReal x1703=((1.0)*sj0);
IkReal x1704=(cj5*r00);
IkReal x1705=(r11*sj5);
IkReal x1706=(cj5*r10);
IkReal x1707=(r21*sj5);
IkReal x1708=(cj5*r20);
IkReal x1709=(r01*sj5);
IkReal x1710=((1.0)*x1702);
IkReal x1711=((1.0)*x1701);
evalcond[0]=((((-1.0)*x1708*x1711))+((x1701*x1707))+(((-1.0)*r22*x1710)));
evalcond[1]=((((-1.0)*x1707*x1710))+(((-1.0)*r22*x1711))+((x1702*x1708)));
evalcond[2]=(cj0+((x1701*x1705))+(((-1.0)*x1706*x1711))+(((-1.0)*r12*x1710)));
evalcond[3]=((((-1.0)*x1703))+((x1701*x1709))+(((-1.0)*r02*x1710))+(((-1.0)*x1704*x1711)));
evalcond[4]=((((-1.0)*x1709*x1710))+(((-1.0)*r02*x1711))+((x1702*x1704))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1703))+(((-1.0)*x1705*x1710))+((x1702*x1706))+(((-1.0)*r12*x1711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.5187969924812)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.5187969924812)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.5187969924812)*px))+IKsqr(((7.5187969924812)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.5187969924812)*px), ((7.5187969924812)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.133)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.133)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1712=((1.0)*cj5);
IkReal x1713=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1712)));
j4eval[0]=x1713;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1712)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1713);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1714=cj5*cj5;
IkReal x1715=((1.0)*r21);
IkReal x1716=(cj5*sj5);
IkReal x1717=((1.0)*r20);
IkReal x1718=((((-1.0)*r00*x1715*x1716))+((r00*r20*x1714))+((r01*r21))+(((-1.0)*r01*x1714*x1715))+(((-1.0)*r01*x1716*x1717))+((r02*r22)));
j4eval[0]=x1718;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1717))))));
j4eval[2]=IKsign(x1718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1719=cj5*cj5;
IkReal x1720=(r21*sj5);
IkReal x1721=(r11*r21);
IkReal x1722=((1.0)*cj5*r20);
IkReal x1723=((((-1.0)*x1719*x1721))+x1721+((r10*r20*x1719))+(((-1.0)*cj5*r10*x1720))+((r12*r22))+(((-1.0)*r11*sj5*x1722)));
j4eval[0]=x1723;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1722))+((sj0*x1720)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1724=cj5*cj5;
IkReal x1725=(r21*sj5);
IkReal x1726=(r11*r21);
IkReal x1727=((1.0)*cj5*r20);
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(IKsign((x1726+(((-1.0)*cj5*r10*x1725))+((r12*r22))+(((-1.0)*r11*sj5*x1727))+(((-1.0)*x1724*x1726))+((r10*r20*x1724)))),-1);
if(!x1728.valid){
continue;
}
CheckValue<IkReal> x1729 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1727))+((sj0*x1725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1728.value)))+(x1729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1730=IKsin(j4);
IkReal x1731=IKcos(j4);
IkReal x1732=(r11*sj5);
IkReal x1733=(cj5*r00);
IkReal x1734=(cj5*r10);
IkReal x1735=(r21*sj5);
IkReal x1736=(cj5*r20);
IkReal x1737=(r01*sj5);
IkReal x1738=((1.0)*x1731);
IkReal x1739=((1.0)*x1730);
evalcond[0]=(((x1730*x1735))+(((-1.0)*x1736*x1739))+(((-1.0)*r22*x1738)));
evalcond[1]=(((x1731*x1736))+(((-1.0)*x1735*x1738))+(((-1.0)*r22*x1739)));
evalcond[2]=(((x1730*x1732))+cj0+(((-1.0)*r12*x1738))+(((-1.0)*x1734*x1739)));
evalcond[3]=(((x1731*x1733))+cj0+(((-1.0)*x1737*x1738))+(((-1.0)*r02*x1739)));
evalcond[4]=(sj0+((x1731*x1734))+(((-1.0)*r12*x1739))+(((-1.0)*x1732*x1738)));
evalcond[5]=((((-1.0)*x1733*x1739))+((x1730*x1737))+(((-1.0)*sj0))+(((-1.0)*r02*x1738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1740=cj5*cj5;
IkReal x1741=((1.0)*r21);
IkReal x1742=(cj5*sj5);
IkReal x1743=((1.0)*r20);
CheckValue<IkReal> x1744 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1744.valid){
continue;
}
CheckValue<IkReal> x1745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1740*x1741))+(((-1.0)*r00*x1741*x1742))+((r01*r21))+((r00*r20*x1740))+((r02*r22))+(((-1.0)*r01*x1742*x1743)))),-1);
if(!x1745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1744.value)+(((1.5707963267949)*(x1745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1746=IKsin(j4);
IkReal x1747=IKcos(j4);
IkReal x1748=(r11*sj5);
IkReal x1749=(cj5*r00);
IkReal x1750=(cj5*r10);
IkReal x1751=(r21*sj5);
IkReal x1752=(cj5*r20);
IkReal x1753=(r01*sj5);
IkReal x1754=((1.0)*x1747);
IkReal x1755=((1.0)*x1746);
evalcond[0]=((((-1.0)*r22*x1754))+((x1746*x1751))+(((-1.0)*x1752*x1755)));
evalcond[1]=((((-1.0)*r22*x1755))+((x1747*x1752))+(((-1.0)*x1751*x1754)));
evalcond[2]=((((-1.0)*r12*x1754))+cj0+((x1746*x1748))+(((-1.0)*x1750*x1755)));
evalcond[3]=(cj0+((x1747*x1749))+(((-1.0)*x1753*x1754))+(((-1.0)*r02*x1755)));
evalcond[4]=((((-1.0)*x1748*x1754))+sj0+(((-1.0)*r12*x1755))+((x1747*x1750)));
evalcond[5]=((((-1.0)*sj0))+((x1746*x1753))+(((-1.0)*x1749*x1755))+(((-1.0)*r02*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1756=((1.0)*cj5);
CheckValue<IkReal> x1757 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1757.valid){
continue;
}
CheckValue<IkReal> x1758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1756)))),-1);
if(!x1758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1757.value)+(((1.5707963267949)*(x1758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1759=IKsin(j4);
IkReal x1760=IKcos(j4);
IkReal x1761=(r11*sj5);
IkReal x1762=(cj5*r00);
IkReal x1763=(cj5*r10);
IkReal x1764=(r21*sj5);
IkReal x1765=(cj5*r20);
IkReal x1766=(r01*sj5);
IkReal x1767=((1.0)*x1760);
IkReal x1768=((1.0)*x1759);
evalcond[0]=(((x1759*x1764))+(((-1.0)*x1765*x1768))+(((-1.0)*r22*x1767)));
evalcond[1]=((((-1.0)*x1764*x1767))+(((-1.0)*r22*x1768))+((x1760*x1765)));
evalcond[2]=(cj0+((x1759*x1761))+(((-1.0)*x1763*x1768))+(((-1.0)*r12*x1767)));
evalcond[3]=(cj0+(((-1.0)*r02*x1768))+(((-1.0)*x1766*x1767))+((x1760*x1762)));
evalcond[4]=(sj0+(((-1.0)*x1761*x1767))+(((-1.0)*r12*x1768))+((x1760*x1763)));
evalcond[5]=((((-1.0)*x1762*x1768))+(((-1.0)*sj0))+((x1759*x1766))+(((-1.0)*r02*x1767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.5187969924812)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.5187969924812)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.5187969924812)*px))+IKsqr(((7.5187969924812)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.5187969924812)*px), ((7.5187969924812)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.133)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.133)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1769=((1.0)*cj5);
IkReal x1770=((((-1.0)*r01*x1769))+(((-1.0)*r00*sj5)));
j4eval[0]=x1770;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1769)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1771=((1.0)*cj5);
IkReal x1772=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1771)));
j4eval[0]=x1772;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1771))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1773=cj5*cj5;
IkReal x1774=((1.0)*sj5);
IkReal x1775=(cj5*r20);
IkReal x1776=(r11*r21);
IkReal x1777=(x1776+((r12*r22))+((r10*r20*x1773))+(((-1.0)*cj5*r10*r21*x1774))+(((-1.0)*r11*x1774*x1775))+(((-1.0)*x1773*x1776)));
j4eval[0]=x1777;
j4eval[1]=IKsign(x1777);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1774))+((cj0*x1775)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1778=cj5*cj5;
IkReal x1779=((1.0)*sj5);
IkReal x1780=(cj5*r20);
IkReal x1781=(r11*r21);
CheckValue<IkReal> x1782 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1779))+((cj0*x1780)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1782.valid){
continue;
}
CheckValue<IkReal> x1783=IKPowWithIntegerCheck(IKsign((x1781+(((-1.0)*r11*x1779*x1780))+((r12*r22))+((r10*r20*x1778))+(((-1.0)*cj5*r10*r21*x1779))+(((-1.0)*x1778*x1781)))),-1);
if(!x1783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1782.value)+(((1.5707963267949)*(x1783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1784=IKsin(j4);
IkReal x1785=IKcos(j4);
IkReal x1786=((1.0)*sj0);
IkReal x1787=(cj5*r00);
IkReal x1788=(r11*sj5);
IkReal x1789=(cj5*r10);
IkReal x1790=(r21*sj5);
IkReal x1791=(cj5*r20);
IkReal x1792=(r01*sj5);
IkReal x1793=((1.0)*x1785);
IkReal x1794=((1.0)*x1784);
evalcond[0]=((((-1.0)*r22*x1793))+((x1784*x1790))+(((-1.0)*x1791*x1794)));
evalcond[1]=((((-1.0)*r22*x1794))+(((-1.0)*x1790*x1793))+((x1785*x1791)));
evalcond[2]=(cj0+(((-1.0)*r12*x1793))+(((-1.0)*x1789*x1794))+((x1784*x1788)));
evalcond[3]=((((-1.0)*x1787*x1794))+(((-1.0)*x1786))+((x1784*x1792))+(((-1.0)*r02*x1793)));
evalcond[4]=((((-1.0)*x1792*x1793))+((x1785*x1787))+(((-1.0)*r02*x1794))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1786))+(((-1.0)*r12*x1794))+(((-1.0)*x1788*x1793))+((x1785*x1789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1795=((1.0)*cj5);
CheckValue<IkReal> x1796 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1796.valid){
continue;
}
CheckValue<IkReal> x1797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1795)))),-1);
if(!x1797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1796.value)+(((1.5707963267949)*(x1797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1798=IKsin(j4);
IkReal x1799=IKcos(j4);
IkReal x1800=((1.0)*sj0);
IkReal x1801=(cj5*r00);
IkReal x1802=(r11*sj5);
IkReal x1803=(cj5*r10);
IkReal x1804=(r21*sj5);
IkReal x1805=(cj5*r20);
IkReal x1806=(r01*sj5);
IkReal x1807=((1.0)*x1799);
IkReal x1808=((1.0)*x1798);
evalcond[0]=(((x1798*x1804))+(((-1.0)*x1805*x1808))+(((-1.0)*r22*x1807)));
evalcond[1]=(((x1799*x1805))+(((-1.0)*x1804*x1807))+(((-1.0)*r22*x1808)));
evalcond[2]=(cj0+((x1798*x1802))+(((-1.0)*r12*x1807))+(((-1.0)*x1803*x1808)));
evalcond[3]=(((x1798*x1806))+(((-1.0)*x1801*x1808))+(((-1.0)*x1800))+(((-1.0)*r02*x1807)));
evalcond[4]=(((x1799*x1801))+(((-1.0)*r02*x1808))+(((-1.0)*x1806*x1807))+(((-1.0)*cj0)));
evalcond[5]=(((x1799*x1803))+(((-1.0)*x1802*x1807))+(((-1.0)*x1800))+(((-1.0)*r12*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1809=((1.0)*cj5);
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
CheckValue<IkReal> x1811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1809))+(((-1.0)*r00*sj5)))),-1);
if(!x1811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1810.value)+(((1.5707963267949)*(x1811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1812=IKsin(j4);
IkReal x1813=IKcos(j4);
IkReal x1814=((1.0)*sj0);
IkReal x1815=(cj5*r00);
IkReal x1816=(r11*sj5);
IkReal x1817=(cj5*r10);
IkReal x1818=(r21*sj5);
IkReal x1819=(cj5*r20);
IkReal x1820=(r01*sj5);
IkReal x1821=((1.0)*x1813);
IkReal x1822=((1.0)*x1812);
evalcond[0]=(((x1812*x1818))+(((-1.0)*x1819*x1822))+(((-1.0)*r22*x1821)));
evalcond[1]=(((x1813*x1819))+(((-1.0)*x1818*x1821))+(((-1.0)*r22*x1822)));
evalcond[2]=(cj0+(((-1.0)*x1817*x1822))+((x1812*x1816))+(((-1.0)*r12*x1821)));
evalcond[3]=((((-1.0)*x1814))+((x1812*x1820))+(((-1.0)*r02*x1821))+(((-1.0)*x1815*x1822)));
evalcond[4]=(((x1813*x1815))+(((-1.0)*r02*x1822))+(((-1.0)*x1820*x1821))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1814))+((x1813*x1817))+(((-1.0)*r12*x1822))+(((-1.0)*x1816*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1823=(r00*sj5);
IkReal x1824=(cj5*r01);
IkReal x1825=(sj1*sj2);
IkReal x1826=((425.0)*cj1);
IkReal x1827=(cj1*cj2);
IkReal x1828=((1000.0)*px);
CheckValue<IkReal> x1829=IKPowWithIntegerCheck(((((-133.0)*x1827))+(((133.0)*x1825))),-1);
if(!x1829.valid){
continue;
}
CheckValue<IkReal> x1830=IKPowWithIntegerCheck(((((-1.0)*x1827))+x1825),-1);
if(!x1830.valid){
continue;
}
if( IKabs(((x1829.value)*(((((293.0)*x1824*x1825))+((x1827*x1828))+(((-293.0)*x1824*x1827))+(((-1.0)*x1825*x1828))+(((-1.0)*x1823*x1826))+(((-1.0)*x1824*x1826))+(((-293.0)*x1823*x1827))+(((293.0)*x1823*x1825)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1830.value)*(((((-1.0)*x1823))+(((-1.0)*x1824)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1829.value)*(((((293.0)*x1824*x1825))+((x1827*x1828))+(((-293.0)*x1824*x1827))+(((-1.0)*x1825*x1828))+(((-1.0)*x1823*x1826))+(((-1.0)*x1824*x1826))+(((-293.0)*x1823*x1827))+(((293.0)*x1823*x1825))))))+IKsqr(((x1830.value)*(((((-1.0)*x1823))+(((-1.0)*x1824))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1829.value)*(((((293.0)*x1824*x1825))+((x1827*x1828))+(((-293.0)*x1824*x1827))+(((-1.0)*x1825*x1828))+(((-1.0)*x1823*x1826))+(((-1.0)*x1824*x1826))+(((-293.0)*x1823*x1827))+(((293.0)*x1823*x1825))))), ((x1830.value)*(((((-1.0)*x1823))+(((-1.0)*x1824))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1831=IKcos(j0);
IkReal x1832=IKsin(j0);
IkReal x1833=(cj5*r01);
IkReal x1834=(r00*sj5);
IkReal x1835=(sj1*sj2);
IkReal x1836=(cj1*cj2);
IkReal x1837=(cj5*r11);
IkReal x1838=(r10*sj5);
IkReal x1839=((0.392)*x1832);
IkReal x1840=(cj1*x1831);
evalcond[0]=((((-1.0)*x1831*x1836))+((x1831*x1835))+x1833+x1834);
evalcond[1]=((((-1.0)*x1832*x1836))+x1837+x1838+((x1832*x1835)));
evalcond[2]=((((-0.392)*x1831*x1835))+(((0.392)*x1831*x1836))+(((-0.099)*x1834))+(((-0.099)*x1833))+(((-1.0)*px))+(((0.425)*x1840))+(((-0.133)*x1832)));
evalcond[3]=((((-0.099)*x1838))+(((-0.099)*x1837))+(((-1.0)*x1835*x1839))+(((-1.0)*py))+(((0.133)*x1831))+(((0.425)*cj1*x1832))+((x1836*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1841=((1.0)*cj5);
IkReal x1842=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1841)));
j4eval[0]=x1842;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1841))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1843=((1.0)*cj5);
IkReal x1844=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1843)));
j4eval[0]=x1844;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1843))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1845=((1.0)*sj0);
IkReal x1846=((1.0)*cj0);
IkReal x1847=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1847;
j4eval[1]=((IKabs(((((-1.0)*r02*x1846))+(((-1.0)*r12*x1845)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1845))+(((-1.0)*r01*sj5*x1846))))));
j4eval[2]=IKsign(x1847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1848=((-1.0)*r20);
IkReal x1850 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1850)==0){
continue;
}
IkReal x1849=pow(x1850,-0.5);
CheckValue<IkReal> x1851 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1848),IKFAST_ATAN2_MAGTHRESH);
if(!x1851.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1851.value));
IkReal gconst79=(r21*x1849);
IkReal gconst80=(x1848*x1849);
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1852.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1853=((-1.0)*r20);
IkReal x1854=x1849;
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1853),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal x1855=((-1.0)*(x1856.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1855;
IkReal gconst78=x1855;
IkReal gconst79=(r21*x1854);
IkReal gconst80=(x1853*x1854);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1857=((-1.0)*r20);
IkReal x1858=x1849;
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1857),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
IkReal x1859=((-1.0)*(x1860.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1859;
IkReal gconst78=x1859;
IkReal gconst79=(r21*x1858);
IkReal gconst80=(x1857*x1858);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1861=((-1.0)*r20);
IkReal x1862=x1849;
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1861),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
IkReal x1863=((-1.0)*(x1864.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1863;
IkReal gconst78=x1863;
IkReal gconst79=(r21*x1862);
IkReal gconst80=(x1861*x1862);
IkReal x1865=r22*r22;
CheckValue<IkReal> x1868=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1865))),-1);
if(!x1868.valid){
continue;
}
IkReal x1866=x1868.value;
IkReal x1867=((((2.0)*x1866*(r20*r20)*(r21*r21)))+((x1866*(r20*r20*r20*r20)))+x1865+((x1866*(r21*r21*r21*r21))));
j4eval[0]=x1867;
j4eval[1]=IKsign(x1867);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1869=(sj1*sj2);
IkReal x1870=(gconst80*r20);
IkReal x1871=(gconst79*r21);
IkReal x1872=(cj1*cj2);
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1870*x1870)+(((-2.0)*x1870*x1871))+(x1871*x1871))),-1);
if(!x1873.valid){
continue;
}
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal((((r22*x1869))+(((-1.0)*r22*x1872)))),IkReal(((((-1.0)*x1869*x1870))+(((-1.0)*x1871*x1872))+((x1869*x1871))+((x1870*x1872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1873.value)))+(x1874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1875=IKsin(j4);
IkReal x1876=IKcos(j4);
IkReal x1877=(gconst79*r01);
IkReal x1878=(gconst79*r21);
IkReal x1879=((1.0)*cj2);
IkReal x1880=(gconst79*r11);
IkReal x1881=((1.0)*sj0);
IkReal x1882=(cj1*sj2);
IkReal x1883=((1.0)*x1876);
IkReal x1884=(gconst80*x1876);
IkReal x1885=((1.0)*x1875);
IkReal x1886=(gconst80*x1885);
evalcond[0]=((((-1.0)*r22*x1883))+(((-1.0)*r20*x1886))+((x1875*x1878)));
evalcond[1]=(cj0+(((-1.0)*r12*x1883))+((x1875*x1880))+(((-1.0)*r10*x1886)));
evalcond[2]=((((-1.0)*r02*x1883))+(((-1.0)*r00*x1886))+((x1875*x1877))+(((-1.0)*x1881)));
evalcond[3]=(((r20*x1884))+(((-1.0)*r22*x1885))+(((-1.0)*x1878*x1883))+((sj1*sj2))+(((-1.0)*cj1*x1879)));
evalcond[4]=((((-1.0)*cj0*x1882))+(((-1.0)*r02*x1885))+(((-1.0)*cj0*sj1*x1879))+((r00*x1884))+(((-1.0)*x1877*x1883)));
evalcond[5]=((((-1.0)*x1880*x1883))+(((-1.0)*r12*x1885))+(((-1.0)*sj0*sj1*x1879))+((r10*x1884))+(((-1.0)*x1881*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1887=((1.0)*gconst80);
CheckValue<IkReal> x1888 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1887))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1888.valid){
continue;
}
CheckValue<IkReal> x1889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1887))+(((-1.0)*gconst79*r10)))),-1);
if(!x1889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1888.value)+(((1.5707963267949)*(x1889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1890=IKsin(j4);
IkReal x1891=IKcos(j4);
IkReal x1892=(gconst79*r01);
IkReal x1893=(gconst79*r21);
IkReal x1894=((1.0)*cj2);
IkReal x1895=(gconst79*r11);
IkReal x1896=((1.0)*sj0);
IkReal x1897=(cj1*sj2);
IkReal x1898=((1.0)*x1891);
IkReal x1899=(gconst80*x1891);
IkReal x1900=((1.0)*x1890);
IkReal x1901=(gconst80*x1900);
evalcond[0]=((((-1.0)*r22*x1898))+(((-1.0)*r20*x1901))+((x1890*x1893)));
evalcond[1]=(cj0+(((-1.0)*r10*x1901))+(((-1.0)*r12*x1898))+((x1890*x1895)));
evalcond[2]=((((-1.0)*r02*x1898))+(((-1.0)*x1896))+((x1890*x1892))+(((-1.0)*r00*x1901)));
evalcond[3]=((((-1.0)*x1893*x1898))+((r20*x1899))+(((-1.0)*cj1*x1894))+(((-1.0)*r22*x1900))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1892*x1898))+((r00*x1899))+(((-1.0)*cj0*sj1*x1894))+(((-1.0)*cj0*x1897))+(((-1.0)*r02*x1900)));
evalcond[5]=(((r10*x1899))+(((-1.0)*sj0*sj1*x1894))+(((-1.0)*x1895*x1898))+(((-1.0)*r12*x1900))+(((-1.0)*x1896*x1897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1902=((1.0)*gconst80);
CheckValue<IkReal> x1903=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1902)))),-1);
if(!x1903.valid){
continue;
}
CheckValue<IkReal> x1904 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1903.value)))+(x1904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1905=IKsin(j4);
IkReal x1906=IKcos(j4);
IkReal x1907=(gconst79*r01);
IkReal x1908=(gconst79*r21);
IkReal x1909=((1.0)*cj2);
IkReal x1910=(gconst79*r11);
IkReal x1911=((1.0)*sj0);
IkReal x1912=(cj1*sj2);
IkReal x1913=((1.0)*x1906);
IkReal x1914=(gconst80*x1906);
IkReal x1915=((1.0)*x1905);
IkReal x1916=(gconst80*x1915);
evalcond[0]=(((x1905*x1908))+(((-1.0)*r22*x1913))+(((-1.0)*r20*x1916)));
evalcond[1]=(((x1905*x1910))+cj0+(((-1.0)*r12*x1913))+(((-1.0)*r10*x1916)));
evalcond[2]=((((-1.0)*r00*x1916))+((x1905*x1907))+(((-1.0)*r02*x1913))+(((-1.0)*x1911)));
evalcond[3]=((((-1.0)*r22*x1915))+(((-1.0)*cj1*x1909))+((sj1*sj2))+((r20*x1914))+(((-1.0)*x1908*x1913)));
evalcond[4]=((((-1.0)*r02*x1915))+((r00*x1914))+(((-1.0)*x1907*x1913))+(((-1.0)*cj0*x1912))+(((-1.0)*cj0*sj1*x1909)));
evalcond[5]=(((r10*x1914))+(((-1.0)*x1911*x1912))+(((-1.0)*x1910*x1913))+(((-1.0)*r12*x1915))+(((-1.0)*sj0*sj1*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1917=((-1.0)*r21);
IkReal x1919 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1919)==0){
continue;
}
IkReal x1918=pow(x1919,-0.5);
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal(x1917),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1920.value))));
IkReal gconst82=(x1917*x1918);
IkReal gconst83=((1.0)*r20*x1918);
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1922=((-1.0)*r21);
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal(x1922),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
IkReal x1923=((1.0)*(x1925.value));
IkReal x1924=x1918;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1923)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1923)));
IkReal gconst82=(x1922*x1924);
IkReal gconst83=((1.0)*r20*x1924);
IkReal x1926=r22*r22;
IkReal x1927=((1.0)*x1926);
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(((-1.0)+x1926),-1);
if(!x1931.valid){
continue;
}
IkReal x1928=x1931.value;
if((((1.0)+(((-1.0)*x1927)))) < -0.00001)
continue;
IkReal x1929=IKsqrt(((1.0)+(((-1.0)*x1927))));
IkReal x1930=(cj0*x1928*x1929);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x1930+(((-1.0)*x1927*x1930))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1932=((-1.0)*r21);
CheckValue<IkReal> x1935 = IKatan2WithCheck(IkReal(x1932),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1935.valid){
continue;
}
IkReal x1933=((1.0)*(x1935.value));
IkReal x1934=x1918;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1933)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1933)));
IkReal gconst82=(x1932*x1934);
IkReal gconst83=((1.0)*r20*x1934);
IkReal x1936=r22*r22;
IkReal x1937=((1.0)*x1936);
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(((-1.0)+x1936),-1);
if(!x1941.valid){
continue;
}
IkReal x1938=x1941.value;
if((((1.0)+(((-1.0)*x1937)))) < -0.00001)
continue;
IkReal x1939=IKsqrt(((1.0)+(((-1.0)*x1937))));
IkReal x1940=(sj0*x1938*x1939);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1937*x1940))+x1940))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1942=((-1.0)*r21);
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal(x1942),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
IkReal x1943=((1.0)*(x1945.value));
IkReal x1944=x1918;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1943)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1943)));
IkReal gconst82=(x1942*x1944);
IkReal gconst83=((1.0)*r20*x1944);
IkReal x1946=r22*r22;
IkReal x1947=(r12*sj0);
IkReal x1948=(cj0*r02);
CheckValue<IkReal> x1952=IKPowWithIntegerCheck(((-1.0)+x1946),-1);
if(!x1952.valid){
continue;
}
IkReal x1949=x1952.value;
if((((1.0)+(((-1.0)*x1946)))) < -0.00001)
continue;
IkReal x1950=IKsqrt(((1.0)+(((-1.0)*x1946))));
IkReal x1951=(r22*x1949*x1950);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1947))+(((-1.0)*x1948)))))+(IKabs((((x1948*x1951))+((x1947*x1951))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1953=((1.0)*sj0);
IkReal x1954=((1.0)*cj0);
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1955.valid){
continue;
}
CheckValue<IkReal> x1956 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1954))+(((-1.0)*r12*x1953)))),IkReal(((((-1.0)*gconst82*r01*x1954))+((gconst83*r10*sj0))+(((-1.0)*gconst82*r11*x1953))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1955.value)))+(x1956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1957=IKsin(j4);
IkReal x1958=IKcos(j4);
IkReal x1959=(gconst82*r11);
IkReal x1960=((1.0)*cj2);
IkReal x1961=((1.0)*sj0);
IkReal x1962=(cj1*sj2);
IkReal x1963=((1.0)*x1958);
IkReal x1964=(gconst83*x1958);
IkReal x1965=(gconst82*x1957);
IkReal x1966=((1.0)*x1957);
evalcond[0]=((((-1.0)*r22*x1963))+((r21*x1965))+(((-1.0)*gconst83*r20*x1966)));
evalcond[1]=(cj0+((x1957*x1959))+(((-1.0)*gconst83*r10*x1966))+(((-1.0)*r12*x1963)));
evalcond[2]=((((-1.0)*r02*x1963))+(((-1.0)*x1961))+((r01*x1965))+(((-1.0)*gconst83*r00*x1966)));
evalcond[3]=(((r20*x1964))+(((-1.0)*r22*x1966))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1963))+(((-1.0)*cj1*x1960)));
evalcond[4]=((((-1.0)*cj0*x1962))+(((-1.0)*cj0*sj1*x1960))+(((-1.0)*r02*x1966))+((r00*x1964))+(((-1.0)*gconst82*r01*x1963)));
evalcond[5]=((((-1.0)*x1959*x1963))+(((-1.0)*sj0*sj1*x1960))+((r10*x1964))+(((-1.0)*x1961*x1962))+(((-1.0)*r12*x1966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1967=((1.0)*gconst83);
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1967)))),-1);
if(!x1969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1968.value)+(((1.5707963267949)*(x1969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1970=IKsin(j4);
IkReal x1971=IKcos(j4);
IkReal x1972=(gconst82*r11);
IkReal x1973=((1.0)*cj2);
IkReal x1974=((1.0)*sj0);
IkReal x1975=(cj1*sj2);
IkReal x1976=((1.0)*x1971);
IkReal x1977=(gconst83*x1971);
IkReal x1978=(gconst82*x1970);
IkReal x1979=((1.0)*x1970);
evalcond[0]=((((-1.0)*r22*x1976))+((r21*x1978))+(((-1.0)*gconst83*r20*x1979)));
evalcond[1]=(cj0+((x1970*x1972))+(((-1.0)*gconst83*r10*x1979))+(((-1.0)*r12*x1976)));
evalcond[2]=((((-1.0)*r02*x1976))+(((-1.0)*x1974))+((r01*x1978))+(((-1.0)*gconst83*r00*x1979)));
evalcond[3]=(((r20*x1977))+(((-1.0)*r22*x1979))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1976))+(((-1.0)*cj1*x1973)));
evalcond[4]=((((-1.0)*cj0*x1975))+(((-1.0)*cj0*sj1*x1973))+(((-1.0)*r02*x1979))+((r00*x1977))+(((-1.0)*gconst82*r01*x1976)));
evalcond[5]=((((-1.0)*sj0*sj1*x1973))+((r10*x1977))+(((-1.0)*x1974*x1975))+(((-1.0)*x1972*x1976))+(((-1.0)*r12*x1979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1980=((1.0)*gconst83);
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
CheckValue<IkReal> x1982=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1980)))),-1);
if(!x1982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1981.value)+(((1.5707963267949)*(x1982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1983=IKsin(j4);
IkReal x1984=IKcos(j4);
IkReal x1985=(gconst82*r11);
IkReal x1986=((1.0)*cj2);
IkReal x1987=((1.0)*sj0);
IkReal x1988=(cj1*sj2);
IkReal x1989=((1.0)*x1984);
IkReal x1990=(gconst83*x1984);
IkReal x1991=(gconst82*x1983);
IkReal x1992=((1.0)*x1983);
evalcond[0]=(((r21*x1991))+(((-1.0)*gconst83*r20*x1992))+(((-1.0)*r22*x1989)));
evalcond[1]=((((-1.0)*gconst83*r10*x1992))+cj0+(((-1.0)*r12*x1989))+((x1983*x1985)));
evalcond[2]=((((-1.0)*x1987))+(((-1.0)*r02*x1989))+(((-1.0)*gconst83*r00*x1992))+((r01*x1991)));
evalcond[3]=((((-1.0)*gconst82*r21*x1989))+((sj1*sj2))+((r20*x1990))+(((-1.0)*cj1*x1986))+(((-1.0)*r22*x1992)));
evalcond[4]=((((-1.0)*gconst82*r01*x1989))+(((-1.0)*r02*x1992))+((r00*x1990))+(((-1.0)*cj0*sj1*x1986))+(((-1.0)*cj0*x1988)));
evalcond[5]=((((-1.0)*x1985*x1989))+((r10*x1990))+(((-1.0)*x1987*x1988))+(((-1.0)*sj0*sj1*x1986))+(((-1.0)*r12*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1993=((-1.0)*r10);
IkReal x1995 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1995)==0){
continue;
}
IkReal x1994=pow(x1995,-0.5);
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1993),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1996.value));
IkReal gconst85=(r11*x1994);
IkReal gconst86=(x1993*x1994);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1997.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1998=((-1.0)*r10);
IkReal x1999=x1994;
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1998),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
IkReal x2000=((-1.0)*(x2001.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2000;
IkReal gconst84=x2000;
IkReal gconst85=(r11*x1999);
IkReal gconst86=(x1998*x1999);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2002=((1.0)*sj0);
IkReal x2003=((1.0)*gconst85);
CheckValue<IkReal> x2004=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2003)))),-1);
if(!x2004.valid){
continue;
}
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2002))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2003))+(((-1.0)*gconst85*r11*x2002))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2004.value)))+(x2005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2006=IKsin(j4);
IkReal x2007=IKcos(j4);
IkReal x2008=(gconst85*r21);
IkReal x2009=(gconst86*r00);
IkReal x2010=(gconst86*r10);
IkReal x2011=((1.0)*cj2);
IkReal x2012=(gconst85*r11);
IkReal x2013=(gconst85*r01);
IkReal x2014=((1.0)*sj0);
IkReal x2015=(gconst86*r20);
IkReal x2016=(cj1*sj2);
IkReal x2017=((1.0)*x2007);
IkReal x2018=((1.0)*x2006);
evalcond[0]=((((-1.0)*x2015*x2018))+((x2006*x2008))+(((-1.0)*r22*x2017)));
evalcond[1]=((((-1.0)*x2010*x2018))+cj0+(((-1.0)*r12*x2017))+((x2006*x2012)));
evalcond[2]=((((-1.0)*x2014))+(((-1.0)*x2009*x2018))+(((-1.0)*r02*x2017))+((x2006*x2013)));
evalcond[3]=((((-1.0)*x2008*x2017))+((sj1*sj2))+(((-1.0)*cj1*x2011))+((x2007*x2015))+(((-1.0)*r22*x2018)));
evalcond[4]=((((-1.0)*x2013*x2017))+(((-1.0)*cj0*sj1*x2011))+((x2007*x2009))+(((-1.0)*r02*x2018))+(((-1.0)*cj0*x2016)));
evalcond[5]=((((-1.0)*x2014*x2016))+(((-1.0)*r12*x2018))+(((-1.0)*x2012*x2017))+((x2007*x2010))+(((-1.0)*sj0*sj1*x2011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2019=((1.0)*gconst86);
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2019)))),-1);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2019))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2020.value)))+(x2021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2022=IKsin(j4);
IkReal x2023=IKcos(j4);
IkReal x2024=(gconst85*r21);
IkReal x2025=(gconst86*r00);
IkReal x2026=(gconst86*r10);
IkReal x2027=((1.0)*cj2);
IkReal x2028=(gconst85*r11);
IkReal x2029=(gconst85*r01);
IkReal x2030=((1.0)*sj0);
IkReal x2031=(gconst86*r20);
IkReal x2032=(cj1*sj2);
IkReal x2033=((1.0)*x2023);
IkReal x2034=((1.0)*x2022);
evalcond[0]=((((-1.0)*r22*x2033))+((x2022*x2024))+(((-1.0)*x2031*x2034)));
evalcond[1]=(cj0+(((-1.0)*r12*x2033))+((x2022*x2028))+(((-1.0)*x2026*x2034)));
evalcond[2]=(((x2022*x2029))+(((-1.0)*r02*x2033))+(((-1.0)*x2030))+(((-1.0)*x2025*x2034)));
evalcond[3]=((((-1.0)*r22*x2034))+(((-1.0)*cj1*x2027))+((sj1*sj2))+((x2023*x2031))+(((-1.0)*x2024*x2033)));
evalcond[4]=((((-1.0)*cj0*sj1*x2027))+((x2023*x2025))+(((-1.0)*x2029*x2033))+(((-1.0)*r02*x2034))+(((-1.0)*cj0*x2032)));
evalcond[5]=((((-1.0)*r12*x2034))+((x2023*x2026))+(((-1.0)*sj0*sj1*x2027))+(((-1.0)*x2030*x2032))+(((-1.0)*x2028*x2033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2035=((-1.0)*r11);
IkReal x2037 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2037)==0){
continue;
}
IkReal x2036=pow(x2037,-0.5);
CheckValue<IkReal> x2038 = IKatan2WithCheck(IkReal(x2035),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2038.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2038.value))));
IkReal gconst88=(x2035*x2036);
IkReal gconst89=((1.0)*r10*x2036);
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2039.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2040=((-1.0)*r11);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(x2040),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
IkReal x2041=((1.0)*(x2043.value));
IkReal x2042=x2036;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2041)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2041)));
IkReal gconst88=(x2040*x2042);
IkReal gconst89=((1.0)*r10*x2042);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2044=((-1.0)*r11);
CheckValue<IkReal> x2047 = IKatan2WithCheck(IkReal(x2044),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2047.valid){
continue;
}
IkReal x2045=((1.0)*(x2047.value));
IkReal x2046=x2036;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2045)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2045)));
IkReal gconst88=(x2044*x2046);
IkReal gconst89=((1.0)*r10*x2046);
IkReal x2048=r12*r12;
IkReal x2049=((1.0)*sj0);
IkReal x2050=(cj0*r02);
IkReal x2051=x2036;
j4eval[0]=((IKabs((((sj0*x2048*x2051))+(((-1.0)*x2049*x2051))+((r12*x2050*x2051)))))+(IKabs(((((-1.0)*x2050))+(((-1.0)*r12*x2049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2052=((-1.0)*r11);
CheckValue<IkReal> x2055 = IKatan2WithCheck(IkReal(x2052),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2055.valid){
continue;
}
IkReal x2053=((1.0)*(x2055.value));
IkReal x2054=x2036;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2053)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2053)));
IkReal gconst88=(x2052*x2054);
IkReal gconst89=((1.0)*r10*x2054);
IkReal x2056=r12*r12;
IkReal x2057=(cj1*cj2*r22);
IkReal x2058=(r22*sj1*sj2);
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(((-1.0)+x2056),-1);
if(!x2062.valid){
continue;
}
IkReal x2059=x2062.value;
if((((1.0)+(((-1.0)*x2056)))) < -0.00001)
continue;
IkReal x2060=IKsqrt(((1.0)+(((-1.0)*x2056))));
IkReal x2061=(r12*x2059*x2060);
j4eval[0]=((IKabs((x2058+(((-1.0)*x2057)))))+(IKabs(((((-1.0)*x2058*x2061))+((x2057*x2061))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2063=(cj1*cj2);
IkReal x2064=(gconst89*r20);
IkReal x2065=(gconst88*r21);
IkReal x2066=(sj1*sj2);
CheckValue<IkReal> x2067=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2065*x2065)+(((-2.0)*x2064*x2065))+(x2064*x2064))),-1);
if(!x2067.valid){
continue;
}
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal((((r22*x2066))+(((-1.0)*r22*x2063)))),IkReal(((((-1.0)*x2063*x2065))+(((-1.0)*x2064*x2066))+((x2063*x2064))+((x2065*x2066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2067.value)))+(x2068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2069=IKsin(j4);
IkReal x2070=IKcos(j4);
IkReal x2071=((1.0)*sj0);
IkReal x2072=((1.0)*cj2);
IkReal x2073=(gconst89*r20);
IkReal x2074=(gconst89*r10);
IkReal x2075=(gconst89*r00);
IkReal x2076=(cj1*sj2);
IkReal x2077=((1.0)*x2070);
IkReal x2078=((1.0)*x2069);
IkReal x2079=(gconst88*x2069);
evalcond[0]=((((-1.0)*r22*x2077))+(((-1.0)*x2073*x2078))+((r21*x2079)));
evalcond[1]=(cj0+(((-1.0)*r12*x2077))+((r11*x2079))+(((-1.0)*x2074*x2078)));
evalcond[2]=((((-1.0)*r02*x2077))+(((-1.0)*x2071))+((r01*x2079))+(((-1.0)*x2075*x2078)));
evalcond[3]=((((-1.0)*gconst88*r21*x2077))+(((-1.0)*r22*x2078))+((sj1*sj2))+((x2070*x2073))+(((-1.0)*cj1*x2072)));
evalcond[4]=((((-1.0)*r02*x2078))+((x2070*x2075))+(((-1.0)*cj0*sj1*x2072))+(((-1.0)*gconst88*r01*x2077))+(((-1.0)*cj0*x2076)));
evalcond[5]=((((-1.0)*r12*x2078))+(((-1.0)*x2071*x2076))+((x2070*x2074))+(((-1.0)*gconst88*r11*x2077))+(((-1.0)*cj2*sj1*x2071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2080=((1.0)*sj0);
IkReal x2081=((1.0)*cj0);
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2082.valid){
continue;
}
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2081))+(((-1.0)*r12*x2080)))),IkReal(((((-1.0)*gconst88*r11*x2080))+(((-1.0)*gconst88*r01*x2081))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2082.value)))+(x2083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2084=IKsin(j4);
IkReal x2085=IKcos(j4);
IkReal x2086=((1.0)*sj0);
IkReal x2087=((1.0)*cj2);
IkReal x2088=(gconst89*r20);
IkReal x2089=(gconst89*r10);
IkReal x2090=(gconst89*r00);
IkReal x2091=(cj1*sj2);
IkReal x2092=((1.0)*x2085);
IkReal x2093=((1.0)*x2084);
IkReal x2094=(gconst88*x2084);
evalcond[0]=((((-1.0)*x2088*x2093))+((r21*x2094))+(((-1.0)*r22*x2092)));
evalcond[1]=(cj0+(((-1.0)*x2089*x2093))+(((-1.0)*r12*x2092))+((r11*x2094)));
evalcond[2]=((((-1.0)*x2090*x2093))+(((-1.0)*x2086))+((r01*x2094))+(((-1.0)*r02*x2092)));
evalcond[3]=((((-1.0)*cj1*x2087))+((x2085*x2088))+(((-1.0)*gconst88*r21*x2092))+((sj1*sj2))+(((-1.0)*r22*x2093)));
evalcond[4]=((((-1.0)*cj0*sj1*x2087))+(((-1.0)*gconst88*r01*x2092))+(((-1.0)*r02*x2093))+(((-1.0)*cj0*x2091))+((x2085*x2090)));
evalcond[5]=((((-1.0)*gconst88*r11*x2092))+((x2085*x2089))+(((-1.0)*x2086*x2091))+(((-1.0)*cj2*sj1*x2086))+(((-1.0)*r12*x2093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2095=((1.0)*gconst89);
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2095))+(((-1.0)*gconst88*r00)))),-1);
if(!x2096.valid){
continue;
}
CheckValue<IkReal> x2097 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2095))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2096.value)))+(x2097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2098=IKsin(j4);
IkReal x2099=IKcos(j4);
IkReal x2100=((1.0)*sj0);
IkReal x2101=((1.0)*cj2);
IkReal x2102=(gconst89*r20);
IkReal x2103=(gconst89*r10);
IkReal x2104=(gconst89*r00);
IkReal x2105=(cj1*sj2);
IkReal x2106=((1.0)*x2099);
IkReal x2107=((1.0)*x2098);
IkReal x2108=(gconst88*x2098);
evalcond[0]=((((-1.0)*r22*x2106))+((r21*x2108))+(((-1.0)*x2102*x2107)));
evalcond[1]=((((-1.0)*x2103*x2107))+(((-1.0)*r12*x2106))+cj0+((r11*x2108)));
evalcond[2]=((((-1.0)*r02*x2106))+(((-1.0)*x2100))+((r01*x2108))+(((-1.0)*x2104*x2107)));
evalcond[3]=(((x2099*x2102))+(((-1.0)*r22*x2107))+(((-1.0)*cj1*x2101))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2106)));
evalcond[4]=((((-1.0)*r02*x2107))+((x2099*x2104))+(((-1.0)*gconst88*r01*x2106))+(((-1.0)*cj0*x2105))+(((-1.0)*cj0*sj1*x2101)));
evalcond[5]=(((x2099*x2103))+(((-1.0)*gconst88*r11*x2106))+(((-1.0)*x2100*x2105))+(((-1.0)*r12*x2107))+(((-1.0)*cj2*sj1*x2100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2109=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2109;
j4eval[1]=IKsign(x2109);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2110=((1.0)*cj5);
IkReal x2111=((((-1.0)*r01*x2110))+(((-1.0)*r00*sj5)));
j4eval[0]=x2111;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2110))+((r21*sj5))))));
j4eval[2]=IKsign(x2111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2112=cj5*cj5;
IkReal x2113=r11*r11;
IkReal x2114=(r11*sj5);
IkReal x2115=(cj5*r10);
IkReal x2116=((r12*r12)+((x2112*(r10*r10)))+x2113+(((-1.0)*x2112*x2113))+(((-2.0)*x2114*x2115)));
j4eval[0]=x2116;
j4eval[1]=IKsign(x2116);
j4eval[2]=((IKabs(r12))+(IKabs((x2115+(((-1.0)*x2114))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2117=cj5*cj5;
IkReal x2118=r11*r11;
IkReal x2119=(cj5*r10);
IkReal x2120=(r11*sj5);
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(IKsign((((x2117*(r10*r10)))+(r12*r12)+x2118+(((-1.0)*x2117*x2118))+(((-2.0)*x2119*x2120)))),-1);
if(!x2121.valid){
continue;
}
CheckValue<IkReal> x2122 = IKatan2WithCheck(IkReal((x2119+(((-1.0)*x2120)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2121.value)))+(x2122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2123=IKsin(j4);
IkReal x2124=IKcos(j4);
IkReal x2125=(cj5*r10);
IkReal x2126=(r01*sj5);
IkReal x2127=((1.0)*cj2);
IkReal x2128=(cj5*r00);
IkReal x2129=(cj5*r20);
IkReal x2130=((1.0)*x2124);
IkReal x2131=((1.0)*x2123);
IkReal x2132=(sj5*x2123);
evalcond[0]=((((-1.0)*r22*x2130))+((r21*x2132))+(((-1.0)*x2129*x2131)));
evalcond[1]=(((x2123*x2126))+(((-1.0)*x2128*x2131))+(((-1.0)*r02*x2130)));
evalcond[2]=((((-1.0)*r12*x2131))+(((-1.0)*r11*sj5*x2130))+((x2124*x2125)));
evalcond[3]=((1.0)+(((-1.0)*x2125*x2131))+(((-1.0)*r12*x2130))+((r11*x2132)));
evalcond[4]=((((-1.0)*r22*x2131))+((sj1*sj2))+(((-1.0)*cj1*x2127))+(((-1.0)*r21*sj5*x2130))+((x2124*x2129)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x2126*x2130))+((x2124*x2128))+(((-1.0)*sj1*x2127))+(((-1.0)*r02*x2131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2133=((1.0)*cj5);
CheckValue<IkReal> x2134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2133))+(((-1.0)*r00*sj5)))),-1);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2134.value)))+(x2135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2136=IKsin(j4);
IkReal x2137=IKcos(j4);
IkReal x2138=(cj5*r10);
IkReal x2139=(r01*sj5);
IkReal x2140=((1.0)*cj2);
IkReal x2141=(cj5*r00);
IkReal x2142=(cj5*r20);
IkReal x2143=((1.0)*x2137);
IkReal x2144=((1.0)*x2136);
IkReal x2145=(sj5*x2136);
evalcond[0]=((((-1.0)*x2142*x2144))+(((-1.0)*r22*x2143))+((r21*x2145)));
evalcond[1]=(((x2136*x2139))+(((-1.0)*r02*x2143))+(((-1.0)*x2141*x2144)));
evalcond[2]=((((-1.0)*r11*sj5*x2143))+(((-1.0)*r12*x2144))+((x2137*x2138)));
evalcond[3]=((1.0)+(((-1.0)*x2138*x2144))+((r11*x2145))+(((-1.0)*r12*x2143)));
evalcond[4]=(((sj1*sj2))+((x2137*x2142))+(((-1.0)*r22*x2144))+(((-1.0)*cj1*x2140))+(((-1.0)*r21*sj5*x2143)));
evalcond[5]=((((-1.0)*r02*x2144))+(((-1.0)*sj1*x2140))+(((-1.0)*cj1*sj2))+((x2137*x2141))+(((-1.0)*x2139*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2146=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2146.valid){
continue;
}
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2146.value)))+(x2147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2148=IKsin(j4);
IkReal x2149=IKcos(j4);
IkReal x2150=(cj5*r10);
IkReal x2151=(r01*sj5);
IkReal x2152=((1.0)*cj2);
IkReal x2153=(cj5*r00);
IkReal x2154=(cj5*r20);
IkReal x2155=((1.0)*x2149);
IkReal x2156=((1.0)*x2148);
IkReal x2157=(sj5*x2148);
evalcond[0]=((((-1.0)*x2154*x2156))+(((-1.0)*r22*x2155))+((r21*x2157)));
evalcond[1]=((((-1.0)*r02*x2155))+(((-1.0)*x2153*x2156))+((x2148*x2151)));
evalcond[2]=(((x2149*x2150))+(((-1.0)*r11*sj5*x2155))+(((-1.0)*r12*x2156)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2155))+(((-1.0)*x2150*x2156))+((r11*x2157)));
evalcond[4]=(((x2149*x2154))+((sj1*sj2))+(((-1.0)*cj1*x2152))+(((-1.0)*r22*x2156))+(((-1.0)*r21*sj5*x2155)));
evalcond[5]=(((x2149*x2153))+(((-1.0)*r02*x2156))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2152))+(((-1.0)*x2151*x2155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2158=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2158;
j4eval[1]=IKsign(x2158);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2159=((1.0)*cj5);
IkReal x2160=((((-1.0)*r21*x2159))+(((-1.0)*r20*sj5)));
j4eval[0]=x2160;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2159))+((r01*sj5))))));
j4eval[2]=IKsign(x2160);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2161=cj5*cj5;
IkReal x2162=r11*r11;
IkReal x2163=(cj5*r10);
IkReal x2164=(r11*sj5);
IkReal x2165=((((-1.0)*x2161*(r10*r10)))+(((2.0)*x2163*x2164))+((x2161*x2162))+(((-1.0)*(r12*r12)))+(((-1.0)*x2162)));
j4eval[0]=x2165;
j4eval[1]=((IKabs(r12))+(IKabs((x2163+(((-1.0)*x2164))))));
j4eval[2]=IKsign(x2165);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2166=cj5*cj5;
IkReal x2167=r11*r11;
IkReal x2168=(cj5*r10);
IkReal x2169=(r11*sj5);
CheckValue<IkReal> x2170 = IKatan2WithCheck(IkReal((x2168+(((-1.0)*x2169)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2170.valid){
continue;
}
CheckValue<IkReal> x2171=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2166*(r10*r10)))+((x2166*x2167))+(((-1.0)*(r12*r12)))+(((-1.0)*x2167))+(((2.0)*x2168*x2169)))),-1);
if(!x2171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2170.value)+(((1.5707963267949)*(x2171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2172=IKsin(j4);
IkReal x2173=IKcos(j4);
IkReal x2174=(cj5*r10);
IkReal x2175=(r01*sj5);
IkReal x2176=(cj5*r00);
IkReal x2177=(cj5*r20);
IkReal x2178=((1.0)*x2173);
IkReal x2179=((1.0)*x2172);
IkReal x2180=(sj5*x2172);
evalcond[0]=(((r21*x2180))+(((-1.0)*r22*x2178))+(((-1.0)*x2177*x2179)));
evalcond[1]=((((-1.0)*x2176*x2179))+((x2172*x2175))+(((-1.0)*r02*x2178)));
evalcond[2]=(((x2173*x2174))+(((-1.0)*r11*sj5*x2178))+(((-1.0)*r12*x2179)));
evalcond[3]=((-1.0)+(((-1.0)*x2174*x2179))+((r11*x2180))+(((-1.0)*r12*x2178)));
evalcond[4]=(((cj2*sj1))+((x2173*x2176))+((cj1*sj2))+(((-1.0)*r02*x2179))+(((-1.0)*x2175*x2178)));
evalcond[5]=(((x2173*x2177))+(((-1.0)*r21*sj5*x2178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2181=((1.0)*cj5);
CheckValue<IkReal> x2182 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2182.valid){
continue;
}
CheckValue<IkReal> x2183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2181))+(((-1.0)*r20*sj5)))),-1);
if(!x2183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2182.value)+(((1.5707963267949)*(x2183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2184=IKsin(j4);
IkReal x2185=IKcos(j4);
IkReal x2186=(cj5*r10);
IkReal x2187=(r01*sj5);
IkReal x2188=(cj5*r00);
IkReal x2189=(cj5*r20);
IkReal x2190=((1.0)*x2185);
IkReal x2191=((1.0)*x2184);
IkReal x2192=(sj5*x2184);
evalcond[0]=((((-1.0)*x2189*x2191))+((r21*x2192))+(((-1.0)*r22*x2190)));
evalcond[1]=((((-1.0)*x2188*x2191))+(((-1.0)*r02*x2190))+((x2184*x2187)));
evalcond[2]=((((-1.0)*r12*x2191))+(((-1.0)*r11*sj5*x2190))+((x2185*x2186)));
evalcond[3]=((-1.0)+(((-1.0)*x2186*x2191))+((r11*x2192))+(((-1.0)*r12*x2190)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2187*x2190))+((cj1*sj2))+(((-1.0)*r02*x2191))+((x2185*x2188)));
evalcond[5]=((((-1.0)*r21*sj5*x2190))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2191))+((x2185*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
CheckValue<IkReal> x2194=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2193.value)+(((1.5707963267949)*(x2194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2195=IKsin(j4);
IkReal x2196=IKcos(j4);
IkReal x2197=(cj5*r10);
IkReal x2198=(r01*sj5);
IkReal x2199=(cj5*r00);
IkReal x2200=(cj5*r20);
IkReal x2201=((1.0)*x2196);
IkReal x2202=((1.0)*x2195);
IkReal x2203=(sj5*x2195);
evalcond[0]=((((-1.0)*r22*x2201))+(((-1.0)*x2200*x2202))+((r21*x2203)));
evalcond[1]=((((-1.0)*x2199*x2202))+(((-1.0)*r02*x2201))+((x2195*x2198)));
evalcond[2]=(((x2196*x2197))+(((-1.0)*r12*x2202))+(((-1.0)*r11*sj5*x2201)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2201))+((r11*x2203))+(((-1.0)*x2197*x2202)));
evalcond[4]=(((x2196*x2199))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2198*x2201))+(((-1.0)*r02*x2202)));
evalcond[5]=((((-1.0)*r22*x2202))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2201))+((x2196*x2200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2204=((-1.0)*r00);
IkReal x2206 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2206)==0){
continue;
}
IkReal x2205=pow(x2206,-0.5);
CheckValue<IkReal> x2207 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2204),IKFAST_ATAN2_MAGTHRESH);
if(!x2207.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2207.value));
IkReal gconst91=(r01*x2205);
IkReal gconst92=(x2204*x2205);
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2208.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2209=((-1.0)*r00);
IkReal x2210=x2205;
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2209),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
IkReal x2211=((-1.0)*(x2212.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2211;
IkReal gconst90=x2211;
IkReal gconst91=(r01*x2210);
IkReal gconst92=(x2209*x2210);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2213=((1.0)*sj0);
IkReal x2214=((1.0)*cj0);
CheckValue<IkReal> x2215=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2215.valid){
continue;
}
CheckValue<IkReal> x2216 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2213))+(((-1.0)*r02*x2214)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2214))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2215.value)))+(x2216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2217=IKsin(j4);
IkReal x2218=IKcos(j4);
IkReal x2219=((1.0)*cj2);
IkReal x2220=(gconst92*r00);
IkReal x2221=(gconst92*r20);
IkReal x2222=((1.0)*sj0);
IkReal x2223=(gconst92*r10);
IkReal x2224=(cj1*sj2);
IkReal x2225=((1.0)*x2218);
IkReal x2226=(gconst91*x2217);
IkReal x2227=((1.0)*x2217);
evalcond[0]=((((-1.0)*x2221*x2227))+((r21*x2226))+(((-1.0)*r22*x2225)));
evalcond[1]=(cj0+(((-1.0)*x2223*x2227))+(((-1.0)*r12*x2225))+((r11*x2226)));
evalcond[2]=((((-1.0)*x2220*x2227))+(((-1.0)*r02*x2225))+(((-1.0)*x2222))+((r01*x2226)));
evalcond[3]=((((-1.0)*gconst91*r21*x2225))+(((-1.0)*cj1*x2219))+((sj1*sj2))+((x2218*x2221))+(((-1.0)*r22*x2227)));
evalcond[4]=((((-1.0)*r02*x2227))+((x2218*x2220))+(((-1.0)*gconst91*r01*x2225))+(((-1.0)*cj0*sj1*x2219))+(((-1.0)*cj0*x2224)));
evalcond[5]=((((-1.0)*x2222*x2224))+((x2218*x2223))+(((-1.0)*r12*x2227))+(((-1.0)*gconst91*r11*x2225))+(((-1.0)*sj0*sj1*x2219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2228=((1.0)*gconst92);
CheckValue<IkReal> x2229=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2228)))),-1);
if(!x2229.valid){
continue;
}
CheckValue<IkReal> x2230 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2228))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2229.value)))+(x2230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2231=IKsin(j4);
IkReal x2232=IKcos(j4);
IkReal x2233=((1.0)*cj2);
IkReal x2234=(gconst92*r00);
IkReal x2235=(gconst92*r20);
IkReal x2236=((1.0)*sj0);
IkReal x2237=(gconst92*r10);
IkReal x2238=(cj1*sj2);
IkReal x2239=((1.0)*x2232);
IkReal x2240=(gconst91*x2231);
IkReal x2241=((1.0)*x2231);
evalcond[0]=((((-1.0)*r22*x2239))+((r21*x2240))+(((-1.0)*x2235*x2241)));
evalcond[1]=((((-1.0)*x2237*x2241))+cj0+((r11*x2240))+(((-1.0)*r12*x2239)));
evalcond[2]=((((-1.0)*x2234*x2241))+(((-1.0)*r02*x2239))+((r01*x2240))+(((-1.0)*x2236)));
evalcond[3]=((((-1.0)*cj1*x2233))+((x2232*x2235))+(((-1.0)*r22*x2241))+(((-1.0)*gconst91*r21*x2239))+((sj1*sj2)));
evalcond[4]=(((x2232*x2234))+(((-1.0)*r02*x2241))+(((-1.0)*cj0*x2238))+(((-1.0)*gconst91*r01*x2239))+(((-1.0)*cj0*sj1*x2233)));
evalcond[5]=(((x2232*x2237))+(((-1.0)*sj0*sj1*x2233))+(((-1.0)*x2236*x2238))+(((-1.0)*gconst91*r11*x2239))+(((-1.0)*r12*x2241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2242=((-1.0)*r01);
IkReal x2244 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2244)==0){
continue;
}
IkReal x2243=pow(x2244,-0.5);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(x2242),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2245.value))));
IkReal gconst94=(x2242*x2243);
IkReal gconst95=((1.0)*r00*x2243);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2246.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2247=((-1.0)*r01);
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal(x2247),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
IkReal x2248=((1.0)*(x2250.value));
IkReal x2249=x2243;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2248)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2248)));
IkReal gconst94=(x2247*x2249);
IkReal gconst95=((1.0)*r00*x2249);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2251=((-1.0)*r01);
CheckValue<IkReal> x2254 = IKatan2WithCheck(IkReal(x2251),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2254.valid){
continue;
}
IkReal x2252=((1.0)*(x2254.value));
IkReal x2253=x2243;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2252)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2252)));
IkReal gconst94=(x2251*x2253);
IkReal gconst95=((1.0)*r00*x2253);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2255=((-1.0)*r01);
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal(x2255),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
IkReal x2256=((1.0)*(x2258.value));
IkReal x2257=x2243;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2256)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2256)));
IkReal gconst94=(x2255*x2257);
IkReal gconst95=((1.0)*r00*x2257);
IkReal x2259=r02*r02;
IkReal x2260=(r12*sj0);
IkReal x2261=((1.0)*cj0);
IkReal x2262=x2243;
j4eval[0]=((IKabs((((cj0*x2259*x2262))+(((-1.0)*x2261*x2262))+((r02*x2260*x2262)))))+(IKabs(((((-1.0)*r02*x2261))+(((-1.0)*x2260))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2263=((1.0)*sj0);
IkReal x2264=((1.0)*cj0);
CheckValue<IkReal> x2265 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2264))+(((-1.0)*r12*x2263)))),IkReal(((((-1.0)*gconst94*r01*x2264))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2263))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2265.valid){
continue;
}
CheckValue<IkReal> x2266=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2265.value)+(((1.5707963267949)*(x2266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2267=IKsin(j4);
IkReal x2268=IKcos(j4);
IkReal x2269=(gconst94*r11);
IkReal x2270=((1.0)*cj2);
IkReal x2271=(gconst94*r21);
IkReal x2272=((1.0)*sj0);
IkReal x2273=(gconst94*r01);
IkReal x2274=(cj1*sj2);
IkReal x2275=((1.0)*x2268);
IkReal x2276=(gconst95*x2268);
IkReal x2277=((1.0)*x2267);
IkReal x2278=(gconst95*x2277);
evalcond[0]=((((-1.0)*r20*x2278))+(((-1.0)*r22*x2275))+((x2267*x2271)));
evalcond[1]=(cj0+(((-1.0)*r10*x2278))+((x2267*x2269))+(((-1.0)*r12*x2275)));
evalcond[2]=((((-1.0)*r00*x2278))+(((-1.0)*r02*x2275))+(((-1.0)*x2272))+((x2267*x2273)));
evalcond[3]=((((-1.0)*cj1*x2270))+((sj1*sj2))+(((-1.0)*r22*x2277))+((r20*x2276))+(((-1.0)*x2271*x2275)));
evalcond[4]=(((r00*x2276))+(((-1.0)*cj0*sj1*x2270))+(((-1.0)*x2273*x2275))+(((-1.0)*r02*x2277))+(((-1.0)*cj0*x2274)));
evalcond[5]=((((-1.0)*sj0*sj1*x2270))+((r10*x2276))+(((-1.0)*x2269*x2275))+(((-1.0)*x2272*x2274))+(((-1.0)*r12*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2279=((1.0)*gconst95);
CheckValue<IkReal> x2280 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2280.valid){
continue;
}
CheckValue<IkReal> x2281=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2279)))),-1);
if(!x2281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2280.value)+(((1.5707963267949)*(x2281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2282=IKsin(j4);
IkReal x2283=IKcos(j4);
IkReal x2284=(gconst94*r11);
IkReal x2285=((1.0)*cj2);
IkReal x2286=(gconst94*r21);
IkReal x2287=((1.0)*sj0);
IkReal x2288=(gconst94*r01);
IkReal x2289=(cj1*sj2);
IkReal x2290=((1.0)*x2283);
IkReal x2291=(gconst95*x2283);
IkReal x2292=((1.0)*x2282);
IkReal x2293=(gconst95*x2292);
evalcond[0]=(((x2282*x2286))+(((-1.0)*r22*x2290))+(((-1.0)*r20*x2293)));
evalcond[1]=(cj0+((x2282*x2284))+(((-1.0)*r12*x2290))+(((-1.0)*r10*x2293)));
evalcond[2]=(((x2282*x2288))+(((-1.0)*x2287))+(((-1.0)*r00*x2293))+(((-1.0)*r02*x2290)));
evalcond[3]=((((-1.0)*x2286*x2290))+((sj1*sj2))+(((-1.0)*cj1*x2285))+((r20*x2291))+(((-1.0)*r22*x2292)));
evalcond[4]=((((-1.0)*cj0*x2289))+(((-1.0)*r02*x2292))+(((-1.0)*cj0*sj1*x2285))+(((-1.0)*x2288*x2290))+((r00*x2291)));
evalcond[5]=(((r10*x2291))+(((-1.0)*r12*x2292))+(((-1.0)*x2287*x2289))+(((-1.0)*x2284*x2290))+(((-1.0)*sj0*sj1*x2285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2294=((1.0)*gconst95);
CheckValue<IkReal> x2295=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2294)))),-1);
if(!x2295.valid){
continue;
}
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2294))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2295.value)))+(x2296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2297=IKsin(j4);
IkReal x2298=IKcos(j4);
IkReal x2299=(gconst94*r11);
IkReal x2300=((1.0)*cj2);
IkReal x2301=(gconst94*r21);
IkReal x2302=((1.0)*sj0);
IkReal x2303=(gconst94*r01);
IkReal x2304=(cj1*sj2);
IkReal x2305=((1.0)*x2298);
IkReal x2306=(gconst95*x2298);
IkReal x2307=((1.0)*x2297);
IkReal x2308=(gconst95*x2307);
evalcond[0]=((((-1.0)*r22*x2305))+(((-1.0)*r20*x2308))+((x2297*x2301)));
evalcond[1]=((((-1.0)*r10*x2308))+cj0+((x2297*x2299))+(((-1.0)*r12*x2305)));
evalcond[2]=((((-1.0)*r00*x2308))+((x2297*x2303))+(((-1.0)*x2302))+(((-1.0)*r02*x2305)));
evalcond[3]=((((-1.0)*x2301*x2305))+(((-1.0)*r22*x2307))+((r20*x2306))+((sj1*sj2))+(((-1.0)*cj1*x2300)));
evalcond[4]=((((-1.0)*x2303*x2305))+(((-1.0)*cj0*x2304))+(((-1.0)*cj0*sj1*x2300))+((r00*x2306))+(((-1.0)*r02*x2307)));
evalcond[5]=((((-1.0)*sj0*sj1*x2300))+((r10*x2306))+(((-1.0)*x2299*x2305))+(((-1.0)*x2302*x2304))+(((-1.0)*r12*x2307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2309=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2309;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2310=((1.0)*cj5);
IkReal x2311=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2310)));
j4eval[0]=x2311;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2310))+((r21*sj5))))));
j4eval[2]=IKsign(x2311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2312=cj5*cj5;
IkReal x2313=r01*r01;
IkReal x2314=(r01*sj5);
IkReal x2315=(cj5*r00);
IkReal x2316=(((x2312*x2313))+(((-1.0)*x2313))+(((-1.0)*(r02*r02)))+(((2.0)*x2314*x2315))+(((-1.0)*x2312*(r00*r00))));
j4eval[0]=x2316;
j4eval[1]=IKsign(x2316);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2314))+x2315))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2317=cj5*cj5;
IkReal x2318=r01*r01;
IkReal x2319=(r01*sj5);
IkReal x2320=(cj5*r00);
CheckValue<IkReal> x2321=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2318))+((x2317*x2318))+(((-1.0)*(r02*r02)))+(((2.0)*x2319*x2320))+(((-1.0)*x2317*(r00*r00))))),-1);
if(!x2321.valid){
continue;
}
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal(((((-1.0)*x2319))+x2320)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2321.value)))+(x2322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2323=IKsin(j4);
IkReal x2324=IKcos(j4);
IkReal x2325=(cj5*r10);
IkReal x2326=(r01*sj5);
IkReal x2327=((1.0)*cj2);
IkReal x2328=(cj5*r00);
IkReal x2329=(cj5*r20);
IkReal x2330=((1.0)*x2324);
IkReal x2331=((1.0)*x2323);
IkReal x2332=(sj5*x2323);
evalcond[0]=(((r21*x2332))+(((-1.0)*r22*x2330))+(((-1.0)*x2329*x2331)));
evalcond[1]=(((r11*x2332))+(((-1.0)*x2325*x2331))+(((-1.0)*r12*x2330)));
evalcond[2]=((((-1.0)*r02*x2331))+(((-1.0)*x2326*x2330))+((x2324*x2328)));
evalcond[3]=((-1.0)+(((-1.0)*x2328*x2331))+(((-1.0)*r02*x2330))+((x2323*x2326)));
evalcond[4]=((((-1.0)*r22*x2331))+((sj1*sj2))+(((-1.0)*cj1*x2327))+((x2324*x2329))+(((-1.0)*r21*sj5*x2330)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2330))+(((-1.0)*sj1*x2327))+(((-1.0)*r12*x2331))+((x2324*x2325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2333=((1.0)*cj5);
CheckValue<IkReal> x2334 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2334.valid){
continue;
}
CheckValue<IkReal> x2335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2333)))),-1);
if(!x2335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2334.value)+(((1.5707963267949)*(x2335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2336=IKsin(j4);
IkReal x2337=IKcos(j4);
IkReal x2338=(cj5*r10);
IkReal x2339=(r01*sj5);
IkReal x2340=((1.0)*cj2);
IkReal x2341=(cj5*r00);
IkReal x2342=(cj5*r20);
IkReal x2343=((1.0)*x2337);
IkReal x2344=((1.0)*x2336);
IkReal x2345=(sj5*x2336);
evalcond[0]=((((-1.0)*r22*x2343))+((r21*x2345))+(((-1.0)*x2342*x2344)));
evalcond[1]=(((r11*x2345))+(((-1.0)*r12*x2343))+(((-1.0)*x2338*x2344)));
evalcond[2]=((((-1.0)*x2339*x2343))+(((-1.0)*r02*x2344))+((x2337*x2341)));
evalcond[3]=((-1.0)+(((-1.0)*x2341*x2344))+((x2336*x2339))+(((-1.0)*r02*x2343)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2340))+(((-1.0)*r22*x2344))+((x2337*x2342))+(((-1.0)*r21*sj5*x2343)));
evalcond[5]=(((x2337*x2338))+(((-1.0)*r11*sj5*x2343))+(((-1.0)*sj1*x2340))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2346=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2346.valid){
continue;
}
CheckValue<IkReal> x2347 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2346.value)))+(x2347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2348=IKsin(j4);
IkReal x2349=IKcos(j4);
IkReal x2350=(cj5*r10);
IkReal x2351=(r01*sj5);
IkReal x2352=((1.0)*cj2);
IkReal x2353=(cj5*r00);
IkReal x2354=(cj5*r20);
IkReal x2355=((1.0)*x2349);
IkReal x2356=((1.0)*x2348);
IkReal x2357=(sj5*x2348);
evalcond[0]=((((-1.0)*x2354*x2356))+(((-1.0)*r22*x2355))+((r21*x2357)));
evalcond[1]=(((r11*x2357))+(((-1.0)*x2350*x2356))+(((-1.0)*r12*x2355)));
evalcond[2]=((((-1.0)*r02*x2356))+((x2349*x2353))+(((-1.0)*x2351*x2355)));
evalcond[3]=((-1.0)+((x2348*x2351))+(((-1.0)*x2353*x2356))+(((-1.0)*r02*x2355)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2352))+(((-1.0)*r22*x2356))+((x2349*x2354))+(((-1.0)*r21*sj5*x2355)));
evalcond[5]=((((-1.0)*r11*sj5*x2355))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2352))+((x2349*x2350))+(((-1.0)*r12*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2358=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2358;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2359=((1.0)*cj5);
IkReal x2360=((((-1.0)*r21*x2359))+(((-1.0)*r20*sj5)));
j4eval[0]=x2360;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2359))))));
j4eval[2]=IKsign(x2360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2361=cj5*cj5;
IkReal x2362=r01*r01;
IkReal x2363=(cj5*r00);
IkReal x2364=(r01*sj5);
IkReal x2365=(x2362+(((-1.0)*x2361*x2362))+(((-2.0)*x2363*x2364))+((x2361*(r00*r00)))+(r02*r02));
j4eval[0]=x2365;
j4eval[1]=((IKabs((x2363+(((-1.0)*x2364)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2366=cj5*cj5;
IkReal x2367=r01*r01;
IkReal x2368=(r01*sj5);
IkReal x2369=(cj5*r00);
CheckValue<IkReal> x2370 = IKatan2WithCheck(IkReal((x2369+(((-1.0)*x2368)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2370.valid){
continue;
}
CheckValue<IkReal> x2371=IKPowWithIntegerCheck(IKsign((x2367+(((-1.0)*x2366*x2367))+((x2366*(r00*r00)))+(r02*r02)+(((-2.0)*x2368*x2369)))),-1);
if(!x2371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2370.value)+(((1.5707963267949)*(x2371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2372=IKsin(j4);
IkReal x2373=IKcos(j4);
IkReal x2374=(cj5*r10);
IkReal x2375=(r01*sj5);
IkReal x2376=(cj5*r00);
IkReal x2377=(cj5*r20);
IkReal x2378=((1.0)*x2373);
IkReal x2379=((1.0)*x2372);
IkReal x2380=(sj5*x2372);
evalcond[0]=((((-1.0)*x2377*x2379))+((r21*x2380))+(((-1.0)*r22*x2378)));
evalcond[1]=((((-1.0)*x2374*x2379))+(((-1.0)*r12*x2378))+((r11*x2380)));
evalcond[2]=(((x2373*x2376))+(((-1.0)*r02*x2379))+(((-1.0)*x2375*x2378)));
evalcond[3]=((1.0)+((x2372*x2375))+(((-1.0)*r02*x2378))+(((-1.0)*x2376*x2379)));
evalcond[4]=(((x2373*x2374))+(((-1.0)*r11*sj5*x2378))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2379)));
evalcond[5]=(((x2373*x2377))+(((-1.0)*r21*sj5*x2378))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2381=((1.0)*cj5);
CheckValue<IkReal> x2382=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2381))+(((-1.0)*r20*sj5)))),-1);
if(!x2382.valid){
continue;
}
CheckValue<IkReal> x2383 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2381))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2382.value)))+(x2383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2384=IKsin(j4);
IkReal x2385=IKcos(j4);
IkReal x2386=(cj5*r10);
IkReal x2387=(r01*sj5);
IkReal x2388=(cj5*r00);
IkReal x2389=(cj5*r20);
IkReal x2390=((1.0)*x2385);
IkReal x2391=((1.0)*x2384);
IkReal x2392=(sj5*x2384);
evalcond[0]=((((-1.0)*x2389*x2391))+(((-1.0)*r22*x2390))+((r21*x2392)));
evalcond[1]=((((-1.0)*x2386*x2391))+((r11*x2392))+(((-1.0)*r12*x2390)));
evalcond[2]=((((-1.0)*r02*x2391))+((x2385*x2388))+(((-1.0)*x2387*x2390)));
evalcond[3]=((1.0)+((x2384*x2387))+(((-1.0)*r02*x2390))+(((-1.0)*x2388*x2391)));
evalcond[4]=(((cj2*sj1))+((x2385*x2386))+((cj1*sj2))+(((-1.0)*r11*sj5*x2390))+(((-1.0)*r12*x2391)));
evalcond[5]=(((x2385*x2389))+(((-1.0)*r21*sj5*x2390))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2393 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2393.valid){
continue;
}
CheckValue<IkReal> x2394=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2393.value)+(((1.5707963267949)*(x2394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2395=IKsin(j4);
IkReal x2396=IKcos(j4);
IkReal x2397=(cj5*r10);
IkReal x2398=(r01*sj5);
IkReal x2399=(cj5*r00);
IkReal x2400=(cj5*r20);
IkReal x2401=((1.0)*x2396);
IkReal x2402=((1.0)*x2395);
IkReal x2403=(sj5*x2395);
evalcond[0]=((((-1.0)*x2400*x2402))+((r21*x2403))+(((-1.0)*r22*x2401)));
evalcond[1]=(((r11*x2403))+(((-1.0)*x2397*x2402))+(((-1.0)*r12*x2401)));
evalcond[2]=((((-1.0)*r02*x2402))+((x2396*x2399))+(((-1.0)*x2398*x2401)));
evalcond[3]=((1.0)+(((-1.0)*x2399*x2402))+(((-1.0)*r02*x2401))+((x2395*x2398)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2396*x2397))+(((-1.0)*r11*sj5*x2401))+(((-1.0)*r12*x2402)));
evalcond[5]=((((-1.0)*r21*sj5*x2401))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2396*x2400))+(((-1.0)*r22*x2402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2404=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2404);
rxp1_1=(px*r21);
rxp1_2=(r11*x2404);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2405=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2405);
rxp1_1=(px*r21);
rxp1_2=(r11*x2405);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2406=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2406);
rxp1_1=(px*r21);
rxp1_2=(r11*x2406);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2409=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2409.valid){
continue;
}
IkReal x2407=x2409.value;
IkReal x2408=(sj0*x2407);
cj4array[0]=(((cj1*sj2*x2408))+((cj2*sj1*x2408)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2410=IKsin(j4);
IkReal x2411=IKcos(j4);
IkReal x2412=(cj5*r20);
IkReal x2413=(r21*sj5);
IkReal x2414=((1.0)*x2410);
IkReal x2415=((1.0)*x2411);
evalcond[0]=((-1.0)*r02*x2410);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2415)));
evalcond[2]=(((x2410*x2413))+(((-1.0)*x2412*x2414)));
evalcond[3]=((((-1.0)*cj5*r10*x2414))+((r11*sj5*x2410)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2411*x2412))+(((-1.0)*x2413*x2415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2417=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2417.valid){
continue;
}
IkReal x2416=x2417.value;
cj4array[0]=(((cj1*cj2*x2416))+(((-1.0)*sj1*sj2*x2416)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2418=IKsin(j4);
IkReal x2419=IKcos(j4);
IkReal x2420=(r11*sj5);
IkReal x2421=((1.0)*sj0);
IkReal x2422=((1.0)*x2419);
IkReal x2423=((1.0)*cj5*x2418);
evalcond[0]=((-1.0)*r02*x2418);
evalcond[1]=((((-1.0)*r02*x2422))+(((-1.0)*x2421)));
evalcond[2]=((((-1.0)*r20*x2423))+((r21*sj5*x2418)));
evalcond[3]=(((x2418*x2420))+(((-1.0)*r10*x2423)));
evalcond[4]=((((-1.0)*cj1*sj2*x2421))+(((-1.0)*x2420*x2422))+(((-1.0)*cj2*sj1*x2421))+((cj5*r10*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2424=IKPowWithIntegerCheck(r02,-1);
if(!x2424.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2424.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2425=IKsin(j4);
IkReal x2426=IKcos(j4);
IkReal x2427=((1.0)*sj0);
IkReal x2428=(cj5*x2426);
IkReal x2429=(sj5*x2425);
IkReal x2430=((1.0)*sj5*x2426);
IkReal x2431=((1.0)*cj5*x2425);
evalcond[0]=((-1.0)*r02*x2425);
evalcond[1]=(((r21*x2429))+(((-1.0)*r20*x2431)));
evalcond[2]=(((r11*x2429))+(((-1.0)*r10*x2431)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2428))+(((-1.0)*r21*x2430)));
evalcond[4]=((((-1.0)*cj1*sj2*x2427))+((r10*x2428))+(((-1.0)*cj2*sj1*x2427))+(((-1.0)*r11*x2430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2432=((1.0)*sj0);
IkReal x2433=((1.0)*cj0);
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2433))+(((-1.0)*r12*x2432)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2433))+(((-1.0)*r11*sj5*x2432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
CheckValue<IkReal> x2435=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2434.value)+(((1.5707963267949)*(x2435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2436=IKsin(j4);
IkReal x2437=IKcos(j4);
IkReal x2438=(cj5*r10);
IkReal x2439=(r01*sj5);
IkReal x2440=((1.0)*cj2);
IkReal x2441=(cj5*r00);
IkReal x2442=((1.0)*sj0);
IkReal x2443=(cj5*r20);
IkReal x2444=(cj1*sj2);
IkReal x2445=((1.0)*x2437);
IkReal x2446=((1.0)*x2436);
IkReal x2447=(sj5*x2436);
evalcond[0]=((((-1.0)*x2443*x2446))+(((-1.0)*r22*x2445))+((r21*x2447)));
evalcond[1]=(cj0+(((-1.0)*r12*x2445))+(((-1.0)*x2438*x2446))+((r11*x2447)));
evalcond[2]=((((-1.0)*x2441*x2446))+((x2436*x2439))+(((-1.0)*x2442))+(((-1.0)*r02*x2445)));
evalcond[3]=((((-1.0)*r21*sj5*x2445))+((sj1*sj2))+((x2437*x2443))+(((-1.0)*cj1*x2440))+(((-1.0)*r22*x2446)));
evalcond[4]=((((-1.0)*cj0*x2444))+(((-1.0)*cj0*sj1*x2440))+(((-1.0)*x2439*x2445))+((x2437*x2441))+(((-1.0)*r02*x2446)));
evalcond[5]=((((-1.0)*r11*sj5*x2445))+((x2437*x2438))+(((-1.0)*r12*x2446))+(((-1.0)*x2442*x2444))+(((-1.0)*sj0*sj1*x2440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2448=((1.0)*cj5);
CheckValue<IkReal> x2449 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2449.valid){
continue;
}
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2448)))),-1);
if(!x2450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2449.value)+(((1.5707963267949)*(x2450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2451=IKsin(j4);
IkReal x2452=IKcos(j4);
IkReal x2453=(cj5*r10);
IkReal x2454=(r01*sj5);
IkReal x2455=((1.0)*cj2);
IkReal x2456=(cj5*r00);
IkReal x2457=((1.0)*sj0);
IkReal x2458=(cj5*r20);
IkReal x2459=(cj1*sj2);
IkReal x2460=((1.0)*x2452);
IkReal x2461=((1.0)*x2451);
IkReal x2462=(sj5*x2451);
evalcond[0]=((((-1.0)*r22*x2460))+((r21*x2462))+(((-1.0)*x2458*x2461)));
evalcond[1]=(cj0+(((-1.0)*r12*x2460))+((r11*x2462))+(((-1.0)*x2453*x2461)));
evalcond[2]=((((-1.0)*x2456*x2461))+((x2451*x2454))+(((-1.0)*r02*x2460))+(((-1.0)*x2457)));
evalcond[3]=((((-1.0)*r22*x2461))+((x2452*x2458))+((sj1*sj2))+(((-1.0)*r21*sj5*x2460))+(((-1.0)*cj1*x2455)));
evalcond[4]=((((-1.0)*cj0*x2459))+(((-1.0)*x2454*x2460))+((x2452*x2456))+(((-1.0)*cj0*sj1*x2455))+(((-1.0)*r02*x2461)));
evalcond[5]=((((-1.0)*r11*sj5*x2460))+((x2452*x2453))+(((-1.0)*r12*x2461))+(((-1.0)*x2457*x2459))+(((-1.0)*sj0*sj1*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2463=((1.0)*cj5);
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
CheckValue<IkReal> x2465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2463))+(((-1.0)*r00*sj5)))),-1);
if(!x2465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2464.value)+(((1.5707963267949)*(x2465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2466=IKsin(j4);
IkReal x2467=IKcos(j4);
IkReal x2468=(cj5*r10);
IkReal x2469=(r01*sj5);
IkReal x2470=((1.0)*cj2);
IkReal x2471=(cj5*r00);
IkReal x2472=((1.0)*sj0);
IkReal x2473=(cj5*r20);
IkReal x2474=(cj1*sj2);
IkReal x2475=((1.0)*x2467);
IkReal x2476=((1.0)*x2466);
IkReal x2477=(sj5*x2466);
evalcond[0]=(((r21*x2477))+(((-1.0)*x2473*x2476))+(((-1.0)*r22*x2475)));
evalcond[1]=((((-1.0)*r12*x2475))+cj0+(((-1.0)*x2468*x2476))+((r11*x2477)));
evalcond[2]=((((-1.0)*x2472))+((x2466*x2469))+(((-1.0)*x2471*x2476))+(((-1.0)*r02*x2475)));
evalcond[3]=(((x2467*x2473))+((sj1*sj2))+(((-1.0)*r21*sj5*x2475))+(((-1.0)*r22*x2476))+(((-1.0)*cj1*x2470)));
evalcond[4]=((((-1.0)*cj0*sj1*x2470))+(((-1.0)*cj0*x2474))+((x2467*x2471))+(((-1.0)*x2469*x2475))+(((-1.0)*r02*x2476)));
evalcond[5]=(((x2467*x2468))+(((-1.0)*r12*x2476))+(((-1.0)*x2472*x2474))+(((-1.0)*sj0*sj1*x2470))+(((-1.0)*r11*sj5*x2475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2478=cj5*cj5;
IkReal x2479=r21*r21;
IkReal x2480=(sj1*sj2);
IkReal x2481=(r21*sj5);
IkReal x2482=(cj1*cj2);
IkReal x2483=(cj5*r20);
CheckValue<IkReal> x2484 = IKatan2WithCheck(IkReal((((r22*x2480))+(((-1.0)*r22*x2482)))),IkReal((((x2482*x2483))+(((-1.0)*x2480*x2483))+((x2480*x2481))+(((-1.0)*x2481*x2482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2484.valid){
continue;
}
CheckValue<IkReal> x2485=IKPowWithIntegerCheck(IKsign((((x2478*(r20*r20)))+x2479+(r22*r22)+(((-1.0)*x2478*x2479))+(((-2.0)*x2481*x2483)))),-1);
if(!x2485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2484.value)+(((1.5707963267949)*(x2485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2486=IKsin(j4);
IkReal x2487=IKcos(j4);
IkReal x2488=(r21*sj5);
IkReal x2489=(cj5*r20);
IkReal x2490=((1.0)*x2487);
IkReal x2491=((1.0)*x2486);
evalcond[0]=((((-1.0)*x2489*x2491))+((x2486*x2488))+(((-1.0)*r22*x2490)));
evalcond[1]=(((x2487*x2489))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2488*x2490))+(((-1.0)*r22*x2491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2492=(cj5*sj4);
IkReal x2493=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2492))+((r01*x2493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2493))+((cj4*r12))+((r10*x2492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2492))+((r01*x2493))))+IKsqr(((((-1.0)*r11*x2493))+((cj4*r12))+((r10*x2492))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2492))+((r01*x2493))), ((((-1.0)*r11*x2493))+((cj4*r12))+((r10*x2492))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2494=IKcos(j0);
IkReal x2495=IKsin(j0);
IkReal x2496=(cj4*cj5);
IkReal x2497=((0.392)*sj1);
IkReal x2498=(cj5*r01);
IkReal x2499=((1.0)*cj1);
IkReal x2500=(r11*sj5);
IkReal x2501=(r00*sj5);
IkReal x2502=((1.0)*sj4);
IkReal x2503=((0.392)*cj2);
IkReal x2504=((1.0)*sj1);
IkReal x2505=(cj5*r11);
IkReal x2506=((1.0)*cj4);
IkReal x2507=(r01*sj5);
IkReal x2508=(r10*sj5);
IkReal x2509=(sj2*x2495);
IkReal x2510=(sj2*x2494);
IkReal x2511=(cj1*x2494);
IkReal x2512=(cj2*x2494);
IkReal x2513=(cj1*x2495);
IkReal x2514=(cj2*x2495);
evalcond[0]=(x2494+(((-1.0)*cj5*r10*x2502))+((sj4*x2500))+(((-1.0)*r12*x2506)));
evalcond[1]=((((-1.0)*r02*x2506))+((sj4*x2507))+(((-1.0)*x2495))+(((-1.0)*cj5*r00*x2502)));
evalcond[2]=(x2501+x2498+((sj1*x2510))+(((-1.0)*x2499*x2512)));
evalcond[3]=(x2508+x2505+((sj1*x2509))+(((-1.0)*x2499*x2514)));
evalcond[4]=(((r00*x2496))+(((-1.0)*r02*x2502))+(((-1.0)*x2504*x2512))+(((-1.0)*x2499*x2510))+(((-1.0)*x2506*x2507)));
evalcond[5]=((((-1.0)*r12*x2502))+(((-1.0)*x2504*x2514))+(((-1.0)*x2500*x2506))+(((-1.0)*x2499*x2509))+((r10*x2496)));
evalcond[6]=((((-1.0)*x2497*x2510))+(((0.425)*x2511))+(((-1.0)*px))+(((-0.099)*x2501))+(((-0.133)*x2495))+(((-0.099)*x2498))+((x2503*x2511)));
evalcond[7]=((((0.425)*x2513))+(((-1.0)*py))+(((-0.099)*x2508))+(((-0.099)*x2505))+(((-1.0)*x2497*x2509))+(((0.133)*x2494))+((x2503*x2513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2515=((1.0)*cj5);
IkReal x2516=((1.0)*sj5);
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2515))+(((-1.0)*r10*x2516)))),IkReal(((((-1.0)*r01*x2515))+(((-1.0)*r00*x2516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2518.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2517.value)+(((1.5707963267949)*(x2518.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2519=IKcos(j0);
IkReal x2520=IKsin(j0);
IkReal x2521=(cj5*r01);
IkReal x2522=(r00*sj5);
IkReal x2523=(sj1*sj2);
IkReal x2524=(cj1*cj2);
IkReal x2525=(cj5*r11);
IkReal x2526=(r10*sj5);
IkReal x2527=((0.392)*x2520);
IkReal x2528=(cj1*x2519);
evalcond[0]=(x2521+x2522+((x2519*x2523))+(((-1.0)*x2519*x2524)));
evalcond[1]=(x2525+x2526+(((-1.0)*x2520*x2524))+((x2520*x2523)));
evalcond[2]=((((0.425)*x2528))+(((-0.099)*x2522))+(((-0.099)*x2521))+(((-1.0)*px))+(((-0.133)*x2520))+(((0.392)*x2519*x2524))+(((-0.392)*x2519*x2523)));
evalcond[3]=((((-1.0)*x2523*x2527))+(((0.425)*cj1*x2520))+(((-0.099)*x2526))+(((-0.099)*x2525))+(((0.133)*x2519))+(((-1.0)*py))+((x2524*x2527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2529=((1.0)*cj5);
IkReal x2530=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2529)));
j4eval[0]=x2530;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2529)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2530);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2531=((1.0)*cj5);
IkReal x2532=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2531)));
j4eval[0]=x2532;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2531))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2533=((1.0)*sj0);
IkReal x2534=((1.0)*cj0);
IkReal x2535=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2535;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x2534))+(((-1.0)*r11*sj5*x2533))+((cj0*cj5*r00))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x2534))+(((-1.0)*r12*x2533))))));
j4eval[2]=IKsign(x2535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2536=((-1.0)*r20);
IkReal x2538 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2538)==0){
continue;
}
IkReal x2537=pow(x2538,-0.5);
CheckValue<IkReal> x2539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2536),IKFAST_ATAN2_MAGTHRESH);
if(!x2539.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2539.value));
IkReal gconst79=(r21*x2537);
IkReal gconst80=(x2536*x2537);
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2540.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2541=((-1.0)*r20);
IkReal x2542=x2537;
CheckValue<IkReal> x2544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2541),IKFAST_ATAN2_MAGTHRESH);
if(!x2544.valid){
continue;
}
IkReal x2543=((-1.0)*(x2544.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2543;
IkReal gconst78=x2543;
IkReal gconst79=(r21*x2542);
IkReal gconst80=(x2541*x2542);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2545=((-1.0)*r20);
IkReal x2546=x2537;
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2545),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
IkReal x2547=((-1.0)*(x2548.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2547;
IkReal gconst78=x2547;
IkReal gconst79=(r21*x2546);
IkReal gconst80=(x2545*x2546);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2549=((-1.0)*r20);
IkReal x2550=x2537;
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2549),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
IkReal x2551=((-1.0)*(x2552.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2551;
IkReal gconst78=x2551;
IkReal gconst79=(r21*x2550);
IkReal gconst80=(x2549*x2550);
IkReal x2553=r22*r22;
CheckValue<IkReal> x2556=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2553))),-1);
if(!x2556.valid){
continue;
}
IkReal x2554=x2556.value;
IkReal x2555=(x2553+((x2554*(r20*r20*r20*r20)))+(((2.0)*x2554*(r20*r20)*(r21*r21)))+((x2554*(r21*r21*r21*r21))));
j4eval[0]=x2555;
j4eval[1]=IKsign(x2555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2557=(sj1*sj2);
IkReal x2558=(gconst80*r20);
IkReal x2559=(gconst79*r21);
IkReal x2560=(cj1*cj2);
CheckValue<IkReal> x2561 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2560))+((r22*x2557)))),IkReal(((((-1.0)*x2557*x2558))+((x2558*x2560))+((x2557*x2559))+(((-1.0)*x2559*x2560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2561.valid){
continue;
}
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2558*x2559))+(r22*r22)+(x2559*x2559)+(x2558*x2558))),-1);
if(!x2562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2561.value)+(((1.5707963267949)*(x2562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2563=IKsin(j4);
IkReal x2564=IKcos(j4);
IkReal x2565=(gconst79*r01);
IkReal x2566=(gconst79*r21);
IkReal x2567=((1.0)*cj2);
IkReal x2568=(gconst79*r11);
IkReal x2569=((1.0)*sj0);
IkReal x2570=(cj1*sj2);
IkReal x2571=((1.0)*x2564);
IkReal x2572=(gconst80*x2564);
IkReal x2573=((1.0)*x2563);
IkReal x2574=(gconst80*x2573);
evalcond[0]=(((x2563*x2566))+(((-1.0)*r20*x2574))+(((-1.0)*r22*x2571)));
evalcond[1]=((((-1.0)*r10*x2574))+(((-1.0)*r12*x2571))+cj0+((x2563*x2568)));
evalcond[2]=((((-1.0)*x2569))+((x2563*x2565))+(((-1.0)*r02*x2571))+(((-1.0)*r00*x2574)));
evalcond[3]=((((-1.0)*cj1*x2567))+(((-1.0)*x2566*x2571))+((sj1*sj2))+((r20*x2572))+(((-1.0)*r22*x2573)));
evalcond[4]=((((-1.0)*cj0*x2570))+(((-1.0)*cj0*sj1*x2567))+((r00*x2572))+(((-1.0)*r02*x2573))+(((-1.0)*x2565*x2571)));
evalcond[5]=((((-1.0)*x2569*x2570))+((r10*x2572))+(((-1.0)*r12*x2573))+(((-1.0)*x2568*x2571))+(((-1.0)*sj0*sj1*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2575=((1.0)*gconst80);
CheckValue<IkReal> x2576=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2575)))),-1);
if(!x2576.valid){
continue;
}
CheckValue<IkReal> x2577 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2575))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2576.value)))+(x2577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2578=IKsin(j4);
IkReal x2579=IKcos(j4);
IkReal x2580=(gconst79*r01);
IkReal x2581=(gconst79*r21);
IkReal x2582=((1.0)*cj2);
IkReal x2583=(gconst79*r11);
IkReal x2584=((1.0)*sj0);
IkReal x2585=(cj1*sj2);
IkReal x2586=((1.0)*x2579);
IkReal x2587=(gconst80*x2579);
IkReal x2588=((1.0)*x2578);
IkReal x2589=(gconst80*x2588);
evalcond[0]=((((-1.0)*r20*x2589))+((x2578*x2581))+(((-1.0)*r22*x2586)));
evalcond[1]=(cj0+((x2578*x2583))+(((-1.0)*r10*x2589))+(((-1.0)*r12*x2586)));
evalcond[2]=((((-1.0)*r00*x2589))+(((-1.0)*r02*x2586))+(((-1.0)*x2584))+((x2578*x2580)));
evalcond[3]=((((-1.0)*cj1*x2582))+((r20*x2587))+((sj1*sj2))+(((-1.0)*x2581*x2586))+(((-1.0)*r22*x2588)));
evalcond[4]=((((-1.0)*cj0*x2585))+((r00*x2587))+(((-1.0)*r02*x2588))+(((-1.0)*cj0*sj1*x2582))+(((-1.0)*x2580*x2586)));
evalcond[5]=((((-1.0)*sj0*sj1*x2582))+((r10*x2587))+(((-1.0)*x2584*x2585))+(((-1.0)*x2583*x2586))+(((-1.0)*r12*x2588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2590=((1.0)*gconst80);
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2590))+(((-1.0)*gconst79*r00)))),-1);
if(!x2592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2591.value)+(((1.5707963267949)*(x2592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2593=IKsin(j4);
IkReal x2594=IKcos(j4);
IkReal x2595=(gconst79*r01);
IkReal x2596=(gconst79*r21);
IkReal x2597=((1.0)*cj2);
IkReal x2598=(gconst79*r11);
IkReal x2599=((1.0)*sj0);
IkReal x2600=(cj1*sj2);
IkReal x2601=((1.0)*x2594);
IkReal x2602=(gconst80*x2594);
IkReal x2603=((1.0)*x2593);
IkReal x2604=(gconst80*x2603);
evalcond[0]=(((x2593*x2596))+(((-1.0)*r22*x2601))+(((-1.0)*r20*x2604)));
evalcond[1]=(cj0+(((-1.0)*r10*x2604))+((x2593*x2598))+(((-1.0)*r12*x2601)));
evalcond[2]=((((-1.0)*x2599))+((x2593*x2595))+(((-1.0)*r02*x2601))+(((-1.0)*r00*x2604)));
evalcond[3]=((((-1.0)*x2596*x2601))+(((-1.0)*cj1*x2597))+((r20*x2602))+((sj1*sj2))+(((-1.0)*r22*x2603)));
evalcond[4]=((((-1.0)*x2595*x2601))+(((-1.0)*cj0*x2600))+(((-1.0)*r02*x2603))+(((-1.0)*cj0*sj1*x2597))+((r00*x2602)));
evalcond[5]=((((-1.0)*r12*x2603))+(((-1.0)*sj0*sj1*x2597))+((r10*x2602))+(((-1.0)*x2598*x2601))+(((-1.0)*x2599*x2600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2605=((-1.0)*r21);
IkReal x2607 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2607)==0){
continue;
}
IkReal x2606=pow(x2607,-0.5);
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal(x2605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2608.value))));
IkReal gconst82=(x2605*x2606);
IkReal gconst83=((1.0)*r20*x2606);
CheckValue<IkReal> x2609 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2609.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2609.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2610=((-1.0)*r21);
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal(x2610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
IkReal x2611=((1.0)*(x2613.value));
IkReal x2612=x2606;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2611)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2611)));
IkReal gconst82=(x2610*x2612);
IkReal gconst83=((1.0)*r20*x2612);
IkReal x2614=r22*r22;
IkReal x2615=((1.0)*x2614);
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(((-1.0)+x2614),-1);
if(!x2619.valid){
continue;
}
IkReal x2616=x2619.value;
if((((1.0)+(((-1.0)*x2615)))) < -0.00001)
continue;
IkReal x2617=IKsqrt(((1.0)+(((-1.0)*x2615))));
IkReal x2618=(cj0*x2616*x2617);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x2615*x2618))+x2618))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2620=((-1.0)*r21);
CheckValue<IkReal> x2623 = IKatan2WithCheck(IkReal(x2620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
IkReal x2621=((1.0)*(x2623.value));
IkReal x2622=x2606;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2621)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2621)));
IkReal gconst82=(x2620*x2622);
IkReal gconst83=((1.0)*r20*x2622);
IkReal x2624=r22*r22;
IkReal x2625=((1.0)*x2624);
CheckValue<IkReal> x2629=IKPowWithIntegerCheck(((-1.0)+x2624),-1);
if(!x2629.valid){
continue;
}
IkReal x2626=x2629.value;
if((((1.0)+(((-1.0)*x2625)))) < -0.00001)
continue;
IkReal x2627=IKsqrt(((1.0)+(((-1.0)*x2625))));
IkReal x2628=(sj0*x2626*x2627);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2625*x2628))+x2628))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2630=((-1.0)*r21);
CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(x2630),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2633.valid){
continue;
}
IkReal x2631=((1.0)*(x2633.value));
IkReal x2632=x2606;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2631)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2631)));
IkReal gconst82=(x2630*x2632);
IkReal gconst83=((1.0)*r20*x2632);
IkReal x2634=r22*r22;
IkReal x2635=(r12*sj0);
IkReal x2636=(cj0*r02);
CheckValue<IkReal> x2640=IKPowWithIntegerCheck(((-1.0)+x2634),-1);
if(!x2640.valid){
continue;
}
IkReal x2637=x2640.value;
if((((1.0)+(((-1.0)*x2634)))) < -0.00001)
continue;
IkReal x2638=IKsqrt(((1.0)+(((-1.0)*x2634))));
IkReal x2639=(r22*x2637*x2638);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2635*x2639))+((x2636*x2639)))))+(IKabs(((((-1.0)*x2636))+(((-1.0)*x2635))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2641=((1.0)*sj0);
IkReal x2642=((1.0)*cj0);
CheckValue<IkReal> x2643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2643.valid){
continue;
}
CheckValue<IkReal> x2644 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2641))+(((-1.0)*r02*x2642)))),IkReal(((((-1.0)*gconst82*r11*x2641))+(((-1.0)*gconst82*r01*x2642))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2643.value)))+(x2644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2645=IKsin(j4);
IkReal x2646=IKcos(j4);
IkReal x2647=(gconst82*r11);
IkReal x2648=((1.0)*cj2);
IkReal x2649=((1.0)*sj0);
IkReal x2650=(cj1*sj2);
IkReal x2651=((1.0)*x2646);
IkReal x2652=(gconst83*x2646);
IkReal x2653=(gconst82*x2645);
IkReal x2654=((1.0)*x2645);
evalcond[0]=((((-1.0)*r22*x2651))+(((-1.0)*gconst83*r20*x2654))+((r21*x2653)));
evalcond[1]=(cj0+(((-1.0)*r12*x2651))+((x2645*x2647))+(((-1.0)*gconst83*r10*x2654)));
evalcond[2]=((((-1.0)*r02*x2651))+((r01*x2653))+(((-1.0)*x2649))+(((-1.0)*gconst83*r00*x2654)));
evalcond[3]=((((-1.0)*r22*x2654))+(((-1.0)*cj1*x2648))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2651))+((r20*x2652)));
evalcond[4]=((((-1.0)*r02*x2654))+(((-1.0)*cj0*sj1*x2648))+(((-1.0)*gconst82*r01*x2651))+((r00*x2652))+(((-1.0)*cj0*x2650)));
evalcond[5]=((((-1.0)*r12*x2654))+(((-1.0)*x2647*x2651))+((r10*x2652))+(((-1.0)*sj0*sj1*x2648))+(((-1.0)*x2649*x2650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2655=((1.0)*gconst83);
CheckValue<IkReal> x2656 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2656.valid){
continue;
}
CheckValue<IkReal> x2657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2655))+(((-1.0)*gconst82*r10)))),-1);
if(!x2657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2656.value)+(((1.5707963267949)*(x2657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2658=IKsin(j4);
IkReal x2659=IKcos(j4);
IkReal x2660=(gconst82*r11);
IkReal x2661=((1.0)*cj2);
IkReal x2662=((1.0)*sj0);
IkReal x2663=(cj1*sj2);
IkReal x2664=((1.0)*x2659);
IkReal x2665=(gconst83*x2659);
IkReal x2666=(gconst82*x2658);
IkReal x2667=((1.0)*x2658);
evalcond[0]=(((r21*x2666))+(((-1.0)*gconst83*r20*x2667))+(((-1.0)*r22*x2664)));
evalcond[1]=((((-1.0)*r12*x2664))+((x2658*x2660))+cj0+(((-1.0)*gconst83*r10*x2667)));
evalcond[2]=((((-1.0)*r02*x2664))+(((-1.0)*x2662))+((r01*x2666))+(((-1.0)*gconst83*r00*x2667)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2661))+(((-1.0)*gconst82*r21*x2664))+(((-1.0)*r22*x2667))+((r20*x2665)));
evalcond[4]=((((-1.0)*cj0*x2663))+(((-1.0)*cj0*sj1*x2661))+(((-1.0)*gconst82*r01*x2664))+(((-1.0)*r02*x2667))+((r00*x2665)));
evalcond[5]=((((-1.0)*r12*x2667))+(((-1.0)*x2660*x2664))+(((-1.0)*sj0*sj1*x2661))+(((-1.0)*x2662*x2663))+((r10*x2665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2668=((1.0)*gconst83);
CheckValue<IkReal> x2669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2668))+(((-1.0)*gconst82*r00)))),-1);
if(!x2669.valid){
continue;
}
CheckValue<IkReal> x2670 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2669.value)))+(x2670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2671=IKsin(j4);
IkReal x2672=IKcos(j4);
IkReal x2673=(gconst82*r11);
IkReal x2674=((1.0)*cj2);
IkReal x2675=((1.0)*sj0);
IkReal x2676=(cj1*sj2);
IkReal x2677=((1.0)*x2672);
IkReal x2678=(gconst83*x2672);
IkReal x2679=(gconst82*x2671);
IkReal x2680=((1.0)*x2671);
evalcond[0]=((((-1.0)*gconst83*r20*x2680))+((r21*x2679))+(((-1.0)*r22*x2677)));
evalcond[1]=((((-1.0)*r12*x2677))+cj0+(((-1.0)*gconst83*r10*x2680))+((x2671*x2673)));
evalcond[2]=((((-1.0)*gconst83*r00*x2680))+(((-1.0)*r02*x2677))+(((-1.0)*x2675))+((r01*x2679)));
evalcond[3]=((((-1.0)*cj1*x2674))+((sj1*sj2))+(((-1.0)*r22*x2680))+(((-1.0)*gconst82*r21*x2677))+((r20*x2678)));
evalcond[4]=((((-1.0)*cj0*x2676))+(((-1.0)*r02*x2680))+(((-1.0)*cj0*sj1*x2674))+(((-1.0)*gconst82*r01*x2677))+((r00*x2678)));
evalcond[5]=((((-1.0)*r12*x2680))+(((-1.0)*x2675*x2676))+(((-1.0)*sj0*sj1*x2674))+(((-1.0)*x2673*x2677))+((r10*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2681=((-1.0)*r10);
IkReal x2683 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2683)==0){
continue;
}
IkReal x2682=pow(x2683,-0.5);
CheckValue<IkReal> x2684 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2681),IKFAST_ATAN2_MAGTHRESH);
if(!x2684.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2684.value));
IkReal gconst85=(r11*x2682);
IkReal gconst86=(x2681*x2682);
CheckValue<IkReal> x2685 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2685.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2685.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2686=((-1.0)*r10);
IkReal x2687=x2682;
CheckValue<IkReal> x2689 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2686),IKFAST_ATAN2_MAGTHRESH);
if(!x2689.valid){
continue;
}
IkReal x2688=((-1.0)*(x2689.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2688;
IkReal gconst84=x2688;
IkReal gconst85=(r11*x2687);
IkReal gconst86=(x2686*x2687);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2690=((1.0)*sj0);
IkReal x2691=((1.0)*gconst85);
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2691)))),-1);
if(!x2692.valid){
continue;
}
CheckValue<IkReal> x2693 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2690)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2690))+(((-1.0)*cj0*r01*x2691))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2692.value)))+(x2693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2694=IKsin(j4);
IkReal x2695=IKcos(j4);
IkReal x2696=(gconst85*r21);
IkReal x2697=(gconst86*r00);
IkReal x2698=(gconst86*r10);
IkReal x2699=((1.0)*cj2);
IkReal x2700=(gconst85*r11);
IkReal x2701=(gconst85*r01);
IkReal x2702=((1.0)*sj0);
IkReal x2703=(gconst86*r20);
IkReal x2704=(cj1*sj2);
IkReal x2705=((1.0)*x2695);
IkReal x2706=((1.0)*x2694);
evalcond[0]=((((-1.0)*r22*x2705))+((x2694*x2696))+(((-1.0)*x2703*x2706)));
evalcond[1]=(((x2694*x2700))+cj0+(((-1.0)*r12*x2705))+(((-1.0)*x2698*x2706)));
evalcond[2]=(((x2694*x2701))+(((-1.0)*x2697*x2706))+(((-1.0)*r02*x2705))+(((-1.0)*x2702)));
evalcond[3]=(((x2695*x2703))+(((-1.0)*r22*x2706))+(((-1.0)*cj1*x2699))+((sj1*sj2))+(((-1.0)*x2696*x2705)));
evalcond[4]=((((-1.0)*cj0*x2704))+(((-1.0)*r02*x2706))+((x2695*x2697))+(((-1.0)*cj0*sj1*x2699))+(((-1.0)*x2701*x2705)));
evalcond[5]=((((-1.0)*x2702*x2704))+(((-1.0)*r12*x2706))+((x2695*x2698))+(((-1.0)*sj0*sj1*x2699))+(((-1.0)*x2700*x2705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2707=((1.0)*gconst86);
CheckValue<IkReal> x2708 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2707))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2708.valid){
continue;
}
CheckValue<IkReal> x2709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2707))+(((-1.0)*gconst85*r00)))),-1);
if(!x2709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2708.value)+(((1.5707963267949)*(x2709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2710=IKsin(j4);
IkReal x2711=IKcos(j4);
IkReal x2712=(gconst85*r21);
IkReal x2713=(gconst86*r00);
IkReal x2714=(gconst86*r10);
IkReal x2715=((1.0)*cj2);
IkReal x2716=(gconst85*r11);
IkReal x2717=(gconst85*r01);
IkReal x2718=((1.0)*sj0);
IkReal x2719=(gconst86*r20);
IkReal x2720=(cj1*sj2);
IkReal x2721=((1.0)*x2711);
IkReal x2722=((1.0)*x2710);
evalcond[0]=((((-1.0)*x2719*x2722))+((x2710*x2712))+(((-1.0)*r22*x2721)));
evalcond[1]=(cj0+((x2710*x2716))+(((-1.0)*r12*x2721))+(((-1.0)*x2714*x2722)));
evalcond[2]=((((-1.0)*x2718))+(((-1.0)*x2713*x2722))+((x2710*x2717))+(((-1.0)*r02*x2721)));
evalcond[3]=(((sj1*sj2))+((x2711*x2719))+(((-1.0)*r22*x2722))+(((-1.0)*cj1*x2715))+(((-1.0)*x2712*x2721)));
evalcond[4]=((((-1.0)*cj0*sj1*x2715))+((x2711*x2713))+(((-1.0)*cj0*x2720))+(((-1.0)*x2717*x2721))+(((-1.0)*r02*x2722)));
evalcond[5]=((((-1.0)*sj0*sj1*x2715))+(((-1.0)*x2718*x2720))+(((-1.0)*r12*x2722))+((x2711*x2714))+(((-1.0)*x2716*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2723=((-1.0)*r11);
IkReal x2725 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2725)==0){
continue;
}
IkReal x2724=pow(x2725,-0.5);
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal(x2723),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2726.value))));
IkReal gconst88=(x2723*x2724);
IkReal gconst89=((1.0)*r10*x2724);
CheckValue<IkReal> x2727 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2727.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2727.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2728=((-1.0)*r11);
CheckValue<IkReal> x2731 = IKatan2WithCheck(IkReal(x2728),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2731.valid){
continue;
}
IkReal x2729=((1.0)*(x2731.value));
IkReal x2730=x2724;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2729)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2729)));
IkReal gconst88=(x2728*x2730);
IkReal gconst89=((1.0)*r10*x2730);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2732=((-1.0)*r11);
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal(x2732),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
IkReal x2733=((1.0)*(x2735.value));
IkReal x2734=x2724;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2733)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2733)));
IkReal gconst88=(x2732*x2734);
IkReal gconst89=((1.0)*r10*x2734);
IkReal x2736=r12*r12;
IkReal x2737=((1.0)*sj0);
IkReal x2738=(cj0*r02);
IkReal x2739=x2724;
j4eval[0]=((IKabs(((((-1.0)*x2738))+(((-1.0)*r12*x2737)))))+(IKabs(((((-1.0)*x2737*x2739))+((sj0*x2736*x2739))+((r12*x2738*x2739))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2740=((-1.0)*r11);
CheckValue<IkReal> x2743 = IKatan2WithCheck(IkReal(x2740),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2743.valid){
continue;
}
IkReal x2741=((1.0)*(x2743.value));
IkReal x2742=x2724;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2741)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2741)));
IkReal gconst88=(x2740*x2742);
IkReal gconst89=((1.0)*r10*x2742);
IkReal x2744=r12*r12;
IkReal x2745=(cj1*cj2*r22);
IkReal x2746=(r22*sj1*sj2);
CheckValue<IkReal> x2750=IKPowWithIntegerCheck(((-1.0)+x2744),-1);
if(!x2750.valid){
continue;
}
IkReal x2747=x2750.value;
if((((1.0)+(((-1.0)*x2744)))) < -0.00001)
continue;
IkReal x2748=IKsqrt(((1.0)+(((-1.0)*x2744))));
IkReal x2749=(r12*x2747*x2748);
j4eval[0]=((IKabs((x2746+(((-1.0)*x2745)))))+(IKabs((((x2745*x2749))+(((-1.0)*x2746*x2749))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2751=(cj1*cj2);
IkReal x2752=(gconst89*r20);
IkReal x2753=(gconst88*r21);
IkReal x2754=(sj1*sj2);
CheckValue<IkReal> x2755 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2751))+((r22*x2754)))),IkReal(((((-1.0)*x2751*x2753))+((x2753*x2754))+((x2751*x2752))+(((-1.0)*x2752*x2754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2755.valid){
continue;
}
CheckValue<IkReal> x2756=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2753*x2753)+(x2752*x2752)+(((-2.0)*x2752*x2753)))),-1);
if(!x2756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2755.value)+(((1.5707963267949)*(x2756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2757=IKsin(j4);
IkReal x2758=IKcos(j4);
IkReal x2759=((1.0)*sj0);
IkReal x2760=((1.0)*cj2);
IkReal x2761=(gconst89*r20);
IkReal x2762=(gconst89*r10);
IkReal x2763=(gconst89*r00);
IkReal x2764=(cj1*sj2);
IkReal x2765=((1.0)*x2758);
IkReal x2766=((1.0)*x2757);
IkReal x2767=(gconst88*x2757);
evalcond[0]=((((-1.0)*x2761*x2766))+((r21*x2767))+(((-1.0)*r22*x2765)));
evalcond[1]=(cj0+(((-1.0)*r12*x2765))+(((-1.0)*x2762*x2766))+((r11*x2767)));
evalcond[2]=(((r01*x2767))+(((-1.0)*r02*x2765))+(((-1.0)*x2759))+(((-1.0)*x2763*x2766)));
evalcond[3]=(((x2758*x2761))+(((-1.0)*gconst88*r21*x2765))+((sj1*sj2))+(((-1.0)*cj1*x2760))+(((-1.0)*r22*x2766)));
evalcond[4]=(((x2758*x2763))+(((-1.0)*cj0*x2764))+(((-1.0)*gconst88*r01*x2765))+(((-1.0)*r02*x2766))+(((-1.0)*cj0*sj1*x2760)));
evalcond[5]=(((x2758*x2762))+(((-1.0)*r12*x2766))+(((-1.0)*cj2*sj1*x2759))+(((-1.0)*x2759*x2764))+(((-1.0)*gconst88*r11*x2765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2768=((1.0)*sj0);
IkReal x2769=((1.0)*cj0);
CheckValue<IkReal> x2770 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2768))+(((-1.0)*r02*x2769)))),IkReal(((((-1.0)*gconst88*r01*x2769))+(((-1.0)*gconst88*r11*x2768))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2770.valid){
continue;
}
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2770.value)+(((1.5707963267949)*(x2771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2772=IKsin(j4);
IkReal x2773=IKcos(j4);
IkReal x2774=((1.0)*sj0);
IkReal x2775=((1.0)*cj2);
IkReal x2776=(gconst89*r20);
IkReal x2777=(gconst89*r10);
IkReal x2778=(gconst89*r00);
IkReal x2779=(cj1*sj2);
IkReal x2780=((1.0)*x2773);
IkReal x2781=((1.0)*x2772);
IkReal x2782=(gconst88*x2772);
evalcond[0]=(((r21*x2782))+(((-1.0)*r22*x2780))+(((-1.0)*x2776*x2781)));
evalcond[1]=((((-1.0)*r12*x2780))+cj0+((r11*x2782))+(((-1.0)*x2777*x2781)));
evalcond[2]=((((-1.0)*x2778*x2781))+(((-1.0)*x2774))+((r01*x2782))+(((-1.0)*r02*x2780)));
evalcond[3]=((((-1.0)*gconst88*r21*x2780))+((sj1*sj2))+(((-1.0)*r22*x2781))+(((-1.0)*cj1*x2775))+((x2773*x2776)));
evalcond[4]=((((-1.0)*cj0*x2779))+(((-1.0)*cj0*sj1*x2775))+(((-1.0)*gconst88*r01*x2780))+((x2773*x2778))+(((-1.0)*r02*x2781)));
evalcond[5]=((((-1.0)*r12*x2781))+(((-1.0)*cj2*sj1*x2774))+(((-1.0)*gconst88*r11*x2780))+(((-1.0)*x2774*x2779))+((x2773*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2783=((1.0)*gconst89);
CheckValue<IkReal> x2784 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2783))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2784.valid){
continue;
}
CheckValue<IkReal> x2785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2783))+(((-1.0)*gconst88*r00)))),-1);
if(!x2785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2784.value)+(((1.5707963267949)*(x2785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2786=IKsin(j4);
IkReal x2787=IKcos(j4);
IkReal x2788=((1.0)*sj0);
IkReal x2789=((1.0)*cj2);
IkReal x2790=(gconst89*r20);
IkReal x2791=(gconst89*r10);
IkReal x2792=(gconst89*r00);
IkReal x2793=(cj1*sj2);
IkReal x2794=((1.0)*x2787);
IkReal x2795=((1.0)*x2786);
IkReal x2796=(gconst88*x2786);
evalcond[0]=(((r21*x2796))+(((-1.0)*x2790*x2795))+(((-1.0)*r22*x2794)));
evalcond[1]=((((-1.0)*x2791*x2795))+cj0+((r11*x2796))+(((-1.0)*r12*x2794)));
evalcond[2]=((((-1.0)*x2788))+((r01*x2796))+(((-1.0)*x2792*x2795))+(((-1.0)*r02*x2794)));
evalcond[3]=((((-1.0)*cj1*x2789))+(((-1.0)*gconst88*r21*x2794))+((x2787*x2790))+((sj1*sj2))+(((-1.0)*r22*x2795)));
evalcond[4]=(((x2787*x2792))+(((-1.0)*cj0*sj1*x2789))+(((-1.0)*cj0*x2793))+(((-1.0)*gconst88*r01*x2794))+(((-1.0)*r02*x2795)));
evalcond[5]=((((-1.0)*cj2*sj1*x2788))+((x2787*x2791))+(((-1.0)*gconst88*r11*x2794))+(((-1.0)*x2788*x2793))+(((-1.0)*r12*x2795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2797=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2797;
j4eval[1]=IKsign(x2797);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2798=((1.0)*cj5);
IkReal x2799=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2798)));
j4eval[0]=x2799;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2798))+((r21*sj5))))));
j4eval[2]=IKsign(x2799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2800=cj5*cj5;
IkReal x2801=r11*r11;
IkReal x2802=(r11*sj5);
IkReal x2803=(cj5*r10);
IkReal x2804=((r12*r12)+((x2800*(r10*r10)))+(((-1.0)*x2800*x2801))+(((-2.0)*x2802*x2803))+x2801);
j4eval[0]=x2804;
j4eval[1]=IKsign(x2804);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2802))+x2803))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2805=cj5*cj5;
IkReal x2806=r11*r11;
IkReal x2807=(cj5*r10);
IkReal x2808=(r11*sj5);
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2806+((x2805*(r10*r10)))+(((-1.0)*x2805*x2806))+(((-2.0)*x2807*x2808)))),-1);
if(!x2809.valid){
continue;
}
CheckValue<IkReal> x2810 = IKatan2WithCheck(IkReal(((((-1.0)*x2808))+x2807)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2809.value)))+(x2810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2811=IKsin(j4);
IkReal x2812=IKcos(j4);
IkReal x2813=(cj5*r10);
IkReal x2814=(r01*sj5);
IkReal x2815=((1.0)*cj2);
IkReal x2816=(cj5*r00);
IkReal x2817=(cj5*r20);
IkReal x2818=((1.0)*x2812);
IkReal x2819=((1.0)*x2811);
IkReal x2820=(sj5*x2811);
evalcond[0]=((((-1.0)*r22*x2818))+((r21*x2820))+(((-1.0)*x2817*x2819)));
evalcond[1]=((((-1.0)*r02*x2818))+(((-1.0)*x2816*x2819))+((x2811*x2814)));
evalcond[2]=((((-1.0)*r12*x2819))+((x2812*x2813))+(((-1.0)*r11*sj5*x2818)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2818))+(((-1.0)*x2813*x2819))+((r11*x2820)));
evalcond[4]=(((x2812*x2817))+(((-1.0)*cj1*x2815))+((sj1*sj2))+(((-1.0)*r22*x2819))+(((-1.0)*r21*sj5*x2818)));
evalcond[5]=((((-1.0)*r02*x2819))+((x2812*x2816))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2815))+(((-1.0)*x2814*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2821=((1.0)*cj5);
CheckValue<IkReal> x2822 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2822.valid){
continue;
}
CheckValue<IkReal> x2823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2821)))),-1);
if(!x2823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2822.value)+(((1.5707963267949)*(x2823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2824=IKsin(j4);
IkReal x2825=IKcos(j4);
IkReal x2826=(cj5*r10);
IkReal x2827=(r01*sj5);
IkReal x2828=((1.0)*cj2);
IkReal x2829=(cj5*r00);
IkReal x2830=(cj5*r20);
IkReal x2831=((1.0)*x2825);
IkReal x2832=((1.0)*x2824);
IkReal x2833=(sj5*x2824);
evalcond[0]=((((-1.0)*r22*x2831))+((r21*x2833))+(((-1.0)*x2830*x2832)));
evalcond[1]=(((x2824*x2827))+(((-1.0)*x2829*x2832))+(((-1.0)*r02*x2831)));
evalcond[2]=((((-1.0)*r12*x2832))+((x2825*x2826))+(((-1.0)*r11*sj5*x2831)));
evalcond[3]=((1.0)+(((-1.0)*x2826*x2832))+(((-1.0)*r12*x2831))+((r11*x2833)));
evalcond[4]=((((-1.0)*cj1*x2828))+(((-1.0)*r21*sj5*x2831))+((x2825*x2830))+((sj1*sj2))+(((-1.0)*r22*x2832)));
evalcond[5]=((((-1.0)*sj1*x2828))+(((-1.0)*cj1*sj2))+((x2825*x2829))+(((-1.0)*x2827*x2831))+(((-1.0)*r02*x2832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2834=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2834.valid){
continue;
}
CheckValue<IkReal> x2835 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2834.value)))+(x2835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2836=IKsin(j4);
IkReal x2837=IKcos(j4);
IkReal x2838=(cj5*r10);
IkReal x2839=(r01*sj5);
IkReal x2840=((1.0)*cj2);
IkReal x2841=(cj5*r00);
IkReal x2842=(cj5*r20);
IkReal x2843=((1.0)*x2837);
IkReal x2844=((1.0)*x2836);
IkReal x2845=(sj5*x2836);
evalcond[0]=((((-1.0)*x2842*x2844))+((r21*x2845))+(((-1.0)*r22*x2843)));
evalcond[1]=(((x2836*x2839))+(((-1.0)*r02*x2843))+(((-1.0)*x2841*x2844)));
evalcond[2]=((((-1.0)*r12*x2844))+(((-1.0)*r11*sj5*x2843))+((x2837*x2838)));
evalcond[3]=((1.0)+((r11*x2845))+(((-1.0)*r12*x2843))+(((-1.0)*x2838*x2844)));
evalcond[4]=(((x2837*x2842))+((sj1*sj2))+(((-1.0)*r22*x2844))+(((-1.0)*r21*sj5*x2843))+(((-1.0)*cj1*x2840)));
evalcond[5]=((((-1.0)*sj1*x2840))+((x2837*x2841))+(((-1.0)*cj1*sj2))+(((-1.0)*x2839*x2843))+(((-1.0)*r02*x2844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2846=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2846;
j4eval[1]=IKsign(x2846);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2847=((1.0)*cj5);
IkReal x2848=((((-1.0)*r21*x2847))+(((-1.0)*r20*sj5)));
j4eval[0]=x2848;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2847)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2849=cj5*cj5;
IkReal x2850=r11*r11;
IkReal x2851=(cj5*r10);
IkReal x2852=(r11*sj5);
IkReal x2853=((((-1.0)*x2849*(r10*r10)))+((x2849*x2850))+(((-1.0)*(r12*r12)))+(((2.0)*x2851*x2852))+(((-1.0)*x2850)));
j4eval[0]=x2853;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2852))+x2851))));
j4eval[2]=IKsign(x2853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2854=cj5*cj5;
IkReal x2855=r11*r11;
IkReal x2856=(cj5*r10);
IkReal x2857=(r11*sj5);
CheckValue<IkReal> x2858=IKPowWithIntegerCheck(IKsign(((((2.0)*x2856*x2857))+(((-1.0)*x2854*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2855))+((x2854*x2855)))),-1);
if(!x2858.valid){
continue;
}
CheckValue<IkReal> x2859 = IKatan2WithCheck(IkReal(((((-1.0)*x2857))+x2856)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2858.value)))+(x2859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2860=IKsin(j4);
IkReal x2861=IKcos(j4);
IkReal x2862=(cj5*r10);
IkReal x2863=(r01*sj5);
IkReal x2864=(cj5*r00);
IkReal x2865=(cj5*r20);
IkReal x2866=((1.0)*x2861);
IkReal x2867=((1.0)*x2860);
IkReal x2868=(sj5*x2860);
evalcond[0]=((((-1.0)*x2865*x2867))+((r21*x2868))+(((-1.0)*r22*x2866)));
evalcond[1]=((((-1.0)*r02*x2866))+(((-1.0)*x2864*x2867))+((x2860*x2863)));
evalcond[2]=((((-1.0)*r12*x2867))+((x2861*x2862))+(((-1.0)*r11*sj5*x2866)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2866))+(((-1.0)*x2862*x2867))+((r11*x2868)));
evalcond[4]=((((-1.0)*r02*x2867))+((cj2*sj1))+((cj1*sj2))+((x2861*x2864))+(((-1.0)*x2863*x2866)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2867))+((x2861*x2865))+(((-1.0)*r21*sj5*x2866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2869=((1.0)*cj5);
CheckValue<IkReal> x2870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2869))+(((-1.0)*r20*sj5)))),-1);
if(!x2870.valid){
continue;
}
CheckValue<IkReal> x2871 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2870.value)))+(x2871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2872=IKsin(j4);
IkReal x2873=IKcos(j4);
IkReal x2874=(cj5*r10);
IkReal x2875=(r01*sj5);
IkReal x2876=(cj5*r00);
IkReal x2877=(cj5*r20);
IkReal x2878=((1.0)*x2873);
IkReal x2879=((1.0)*x2872);
IkReal x2880=(sj5*x2872);
evalcond[0]=((((-1.0)*x2877*x2879))+((r21*x2880))+(((-1.0)*r22*x2878)));
evalcond[1]=((((-1.0)*x2876*x2879))+(((-1.0)*r02*x2878))+((x2872*x2875)));
evalcond[2]=((((-1.0)*r11*sj5*x2878))+((x2873*x2874))+(((-1.0)*r12*x2879)));
evalcond[3]=((-1.0)+((r11*x2880))+(((-1.0)*x2874*x2879))+(((-1.0)*r12*x2878)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2879))+((cj1*sj2))+((x2873*x2876))+(((-1.0)*x2875*x2878)));
evalcond[5]=((((-1.0)*r22*x2879))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2873*x2877))+(((-1.0)*r21*sj5*x2878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2881 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2881.valid){
continue;
}
CheckValue<IkReal> x2882=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2881.value)+(((1.5707963267949)*(x2882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2883=IKsin(j4);
IkReal x2884=IKcos(j4);
IkReal x2885=(cj5*r10);
IkReal x2886=(r01*sj5);
IkReal x2887=(cj5*r00);
IkReal x2888=(cj5*r20);
IkReal x2889=((1.0)*x2884);
IkReal x2890=((1.0)*x2883);
IkReal x2891=(sj5*x2883);
evalcond[0]=((((-1.0)*r22*x2889))+(((-1.0)*x2888*x2890))+((r21*x2891)));
evalcond[1]=((((-1.0)*x2887*x2890))+(((-1.0)*r02*x2889))+((x2883*x2886)));
evalcond[2]=(((x2884*x2885))+(((-1.0)*r11*sj5*x2889))+(((-1.0)*r12*x2890)));
evalcond[3]=((-1.0)+((r11*x2891))+(((-1.0)*x2885*x2890))+(((-1.0)*r12*x2889)));
evalcond[4]=(((x2884*x2887))+((cj2*sj1))+(((-1.0)*r02*x2890))+((cj1*sj2))+(((-1.0)*x2886*x2889)));
evalcond[5]=((((-1.0)*r22*x2890))+((x2884*x2888))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2892=((-1.0)*r00);
IkReal x2894 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2894)==0){
continue;
}
IkReal x2893=pow(x2894,-0.5);
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2892),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2895.value));
IkReal gconst91=(r01*x2893);
IkReal gconst92=(x2892*x2893);
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2896.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2897=((-1.0)*r00);
IkReal x2898=x2893;
CheckValue<IkReal> x2900 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2897),IKFAST_ATAN2_MAGTHRESH);
if(!x2900.valid){
continue;
}
IkReal x2899=((-1.0)*(x2900.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2899;
IkReal gconst90=x2899;
IkReal gconst91=(r01*x2898);
IkReal gconst92=(x2897*x2898);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2901=((1.0)*sj0);
IkReal x2902=((1.0)*cj0);
CheckValue<IkReal> x2903 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2902))+(((-1.0)*r12*x2901)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r11*x2901))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2903.valid){
continue;
}
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2903.value)+(((1.5707963267949)*(x2904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2905=IKsin(j4);
IkReal x2906=IKcos(j4);
IkReal x2907=((1.0)*cj2);
IkReal x2908=(gconst92*r00);
IkReal x2909=(gconst92*r20);
IkReal x2910=((1.0)*sj0);
IkReal x2911=(gconst92*r10);
IkReal x2912=(cj1*sj2);
IkReal x2913=((1.0)*x2906);
IkReal x2914=(gconst91*x2905);
IkReal x2915=((1.0)*x2905);
evalcond[0]=(((r21*x2914))+(((-1.0)*x2909*x2915))+(((-1.0)*r22*x2913)));
evalcond[1]=(((r11*x2914))+cj0+(((-1.0)*r12*x2913))+(((-1.0)*x2911*x2915)));
evalcond[2]=(((r01*x2914))+(((-1.0)*x2908*x2915))+(((-1.0)*r02*x2913))+(((-1.0)*x2910)));
evalcond[3]=(((x2906*x2909))+((sj1*sj2))+(((-1.0)*cj1*x2907))+(((-1.0)*gconst91*r21*x2913))+(((-1.0)*r22*x2915)));
evalcond[4]=((((-1.0)*gconst91*r01*x2913))+((x2906*x2908))+(((-1.0)*cj0*sj1*x2907))+(((-1.0)*r02*x2915))+(((-1.0)*cj0*x2912)));
evalcond[5]=((((-1.0)*gconst91*r11*x2913))+(((-1.0)*r12*x2915))+(((-1.0)*sj0*sj1*x2907))+(((-1.0)*x2910*x2912))+((x2906*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2916=((1.0)*gconst92);
CheckValue<IkReal> x2917 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2917.valid){
continue;
}
CheckValue<IkReal> x2918=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2916)))),-1);
if(!x2918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2917.value)+(((1.5707963267949)*(x2918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2919=IKsin(j4);
IkReal x2920=IKcos(j4);
IkReal x2921=((1.0)*cj2);
IkReal x2922=(gconst92*r00);
IkReal x2923=(gconst92*r20);
IkReal x2924=((1.0)*sj0);
IkReal x2925=(gconst92*r10);
IkReal x2926=(cj1*sj2);
IkReal x2927=((1.0)*x2920);
IkReal x2928=(gconst91*x2919);
IkReal x2929=((1.0)*x2919);
evalcond[0]=((((-1.0)*x2923*x2929))+((r21*x2928))+(((-1.0)*r22*x2927)));
evalcond[1]=(cj0+(((-1.0)*x2925*x2929))+(((-1.0)*r12*x2927))+((r11*x2928)));
evalcond[2]=((((-1.0)*r02*x2927))+(((-1.0)*x2924))+((r01*x2928))+(((-1.0)*x2922*x2929)));
evalcond[3]=((((-1.0)*gconst91*r21*x2927))+((sj1*sj2))+(((-1.0)*cj1*x2921))+(((-1.0)*r22*x2929))+((x2920*x2923)));
evalcond[4]=((((-1.0)*r02*x2929))+(((-1.0)*cj0*sj1*x2921))+(((-1.0)*cj0*x2926))+(((-1.0)*gconst91*r01*x2927))+((x2920*x2922)));
evalcond[5]=((((-1.0)*sj0*sj1*x2921))+(((-1.0)*x2924*x2926))+(((-1.0)*r12*x2929))+(((-1.0)*gconst91*r11*x2927))+((x2920*x2925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2930=((-1.0)*r01);
IkReal x2932 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2932)==0){
continue;
}
IkReal x2931=pow(x2932,-0.5);
CheckValue<IkReal> x2933 = IKatan2WithCheck(IkReal(x2930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2933.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2933.value))));
IkReal gconst94=(x2930*x2931);
IkReal gconst95=((1.0)*r00*x2931);
CheckValue<IkReal> x2934 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2934.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2934.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2935=((-1.0)*r01);
CheckValue<IkReal> x2938 = IKatan2WithCheck(IkReal(x2935),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2938.valid){
continue;
}
IkReal x2936=((1.0)*(x2938.value));
IkReal x2937=x2931;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2936)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2936)));
IkReal gconst94=(x2935*x2937);
IkReal gconst95=((1.0)*r00*x2937);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2939=((-1.0)*r01);
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal(x2939),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
IkReal x2940=((1.0)*(x2942.value));
IkReal x2941=x2931;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2940)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2940)));
IkReal gconst94=(x2939*x2941);
IkReal gconst95=((1.0)*r00*x2941);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2943=((-1.0)*r01);
CheckValue<IkReal> x2946 = IKatan2WithCheck(IkReal(x2943),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2946.valid){
continue;
}
IkReal x2944=((1.0)*(x2946.value));
IkReal x2945=x2931;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2944)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2944)));
IkReal gconst94=(x2943*x2945);
IkReal gconst95=((1.0)*r00*x2945);
IkReal x2947=r02*r02;
IkReal x2948=(r12*sj0);
IkReal x2949=((1.0)*cj0);
IkReal x2950=x2931;
j4eval[0]=((IKabs((((cj0*x2947*x2950))+((r02*x2948*x2950))+(((-1.0)*x2949*x2950)))))+(IKabs(((((-1.0)*x2948))+(((-1.0)*r02*x2949))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2951=((1.0)*sj0);
IkReal x2952=((1.0)*cj0);
CheckValue<IkReal> x2953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2953.valid){
continue;
}
CheckValue<IkReal> x2954 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2952))+(((-1.0)*r12*x2951)))),IkReal(((((-1.0)*gconst94*r01*x2952))+(((-1.0)*gconst94*r11*x2951))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2953.value)))+(x2954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2955=IKsin(j4);
IkReal x2956=IKcos(j4);
IkReal x2957=(gconst94*r11);
IkReal x2958=((1.0)*cj2);
IkReal x2959=(gconst94*r21);
IkReal x2960=((1.0)*sj0);
IkReal x2961=(gconst94*r01);
IkReal x2962=(cj1*sj2);
IkReal x2963=((1.0)*x2956);
IkReal x2964=(gconst95*x2956);
IkReal x2965=((1.0)*x2955);
IkReal x2966=(gconst95*x2965);
evalcond[0]=((((-1.0)*r20*x2966))+(((-1.0)*r22*x2963))+((x2955*x2959)));
evalcond[1]=(cj0+(((-1.0)*r10*x2966))+(((-1.0)*r12*x2963))+((x2955*x2957)));
evalcond[2]=(((x2955*x2961))+(((-1.0)*r00*x2966))+(((-1.0)*r02*x2963))+(((-1.0)*x2960)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2959*x2963))+(((-1.0)*r22*x2965))+((r20*x2964))+(((-1.0)*cj1*x2958)));
evalcond[4]=((((-1.0)*cj0*sj1*x2958))+(((-1.0)*r02*x2965))+(((-1.0)*cj0*x2962))+((r00*x2964))+(((-1.0)*x2961*x2963)));
evalcond[5]=((((-1.0)*x2957*x2963))+(((-1.0)*sj0*sj1*x2958))+((r10*x2964))+(((-1.0)*x2960*x2962))+(((-1.0)*r12*x2965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2967=((1.0)*gconst95);
CheckValue<IkReal> x2968 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2968.valid){
continue;
}
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2967))+(((-1.0)*gconst94*r10)))),-1);
if(!x2969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2968.value)+(((1.5707963267949)*(x2969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2970=IKsin(j4);
IkReal x2971=IKcos(j4);
IkReal x2972=(gconst94*r11);
IkReal x2973=((1.0)*cj2);
IkReal x2974=(gconst94*r21);
IkReal x2975=((1.0)*sj0);
IkReal x2976=(gconst94*r01);
IkReal x2977=(cj1*sj2);
IkReal x2978=((1.0)*x2971);
IkReal x2979=(gconst95*x2971);
IkReal x2980=((1.0)*x2970);
IkReal x2981=(gconst95*x2980);
evalcond[0]=(((x2970*x2974))+(((-1.0)*r20*x2981))+(((-1.0)*r22*x2978)));
evalcond[1]=(((x2970*x2972))+cj0+(((-1.0)*r10*x2981))+(((-1.0)*r12*x2978)));
evalcond[2]=(((x2970*x2976))+(((-1.0)*r00*x2981))+(((-1.0)*r02*x2978))+(((-1.0)*x2975)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2974*x2978))+(((-1.0)*r22*x2980))+(((-1.0)*cj1*x2973))+((r20*x2979)));
evalcond[4]=((((-1.0)*cj0*x2977))+(((-1.0)*x2976*x2978))+((r00*x2979))+(((-1.0)*r02*x2980))+(((-1.0)*cj0*sj1*x2973)));
evalcond[5]=((((-1.0)*x2972*x2978))+(((-1.0)*x2975*x2977))+(((-1.0)*r12*x2980))+((r10*x2979))+(((-1.0)*sj0*sj1*x2973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2982=((1.0)*gconst95);
CheckValue<IkReal> x2983 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2982))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2982)))),-1);
if(!x2984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2983.value)+(((1.5707963267949)*(x2984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2985=IKsin(j4);
IkReal x2986=IKcos(j4);
IkReal x2987=(gconst94*r11);
IkReal x2988=((1.0)*cj2);
IkReal x2989=(gconst94*r21);
IkReal x2990=((1.0)*sj0);
IkReal x2991=(gconst94*r01);
IkReal x2992=(cj1*sj2);
IkReal x2993=((1.0)*x2986);
IkReal x2994=(gconst95*x2986);
IkReal x2995=((1.0)*x2985);
IkReal x2996=(gconst95*x2995);
evalcond[0]=((((-1.0)*r22*x2993))+(((-1.0)*r20*x2996))+((x2985*x2989)));
evalcond[1]=(cj0+(((-1.0)*r12*x2993))+(((-1.0)*r10*x2996))+((x2985*x2987)));
evalcond[2]=((((-1.0)*x2990))+((x2985*x2991))+(((-1.0)*r02*x2993))+(((-1.0)*r00*x2996)));
evalcond[3]=((((-1.0)*r22*x2995))+(((-1.0)*cj1*x2988))+((r20*x2994))+((sj1*sj2))+(((-1.0)*x2989*x2993)));
evalcond[4]=((((-1.0)*cj0*x2992))+((r00*x2994))+(((-1.0)*cj0*sj1*x2988))+(((-1.0)*x2991*x2993))+(((-1.0)*r02*x2995)));
evalcond[5]=((((-1.0)*x2987*x2993))+(((-1.0)*r12*x2995))+(((-1.0)*sj0*sj1*x2988))+(((-1.0)*x2990*x2992))+((r10*x2994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2997=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2997;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2998=((1.0)*cj5);
IkReal x2999=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2998)));
j4eval[0]=x2999;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2998))))));
j4eval[2]=IKsign(x2999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3000=cj5*cj5;
IkReal x3001=r01*r01;
IkReal x3002=(r01*sj5);
IkReal x3003=(cj5*r00);
IkReal x3004=((((-1.0)*x3001))+(((-1.0)*x3000*(r00*r00)))+(((-1.0)*(r02*r02)))+((x3000*x3001))+(((2.0)*x3002*x3003)));
j4eval[0]=x3004;
j4eval[1]=IKsign(x3004);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3002))+x3003))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3005=cj5*cj5;
IkReal x3006=r01*r01;
IkReal x3007=(r01*sj5);
IkReal x3008=(cj5*r00);
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal(((((-1.0)*x3007))+x3008)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
CheckValue<IkReal> x3010=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3006))+(((-1.0)*(r02*r02)))+(((2.0)*x3007*x3008))+(((-1.0)*x3005*(r00*r00)))+((x3005*x3006)))),-1);
if(!x3010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3009.value)+(((1.5707963267949)*(x3010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3011=IKsin(j4);
IkReal x3012=IKcos(j4);
IkReal x3013=(cj5*r10);
IkReal x3014=(r01*sj5);
IkReal x3015=((1.0)*cj2);
IkReal x3016=(cj5*r00);
IkReal x3017=(cj5*r20);
IkReal x3018=((1.0)*x3012);
IkReal x3019=((1.0)*x3011);
IkReal x3020=(sj5*x3011);
evalcond[0]=((((-1.0)*r22*x3018))+((r21*x3020))+(((-1.0)*x3017*x3019)));
evalcond[1]=(((r11*x3020))+(((-1.0)*r12*x3018))+(((-1.0)*x3013*x3019)));
evalcond[2]=((((-1.0)*r02*x3019))+((x3012*x3016))+(((-1.0)*x3014*x3018)));
evalcond[3]=((-1.0)+((x3011*x3014))+(((-1.0)*r02*x3018))+(((-1.0)*x3016*x3019)));
evalcond[4]=((((-1.0)*r22*x3019))+(((-1.0)*r21*sj5*x3018))+((x3012*x3017))+((sj1*sj2))+(((-1.0)*cj1*x3015)));
evalcond[5]=(((x3012*x3013))+(((-1.0)*r11*sj5*x3018))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3019))+(((-1.0)*sj1*x3015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3021=((1.0)*cj5);
CheckValue<IkReal> x3022 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3022.valid){
continue;
}
CheckValue<IkReal> x3023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3021))+(((-1.0)*r10*sj5)))),-1);
if(!x3023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3022.value)+(((1.5707963267949)*(x3023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3024=IKsin(j4);
IkReal x3025=IKcos(j4);
IkReal x3026=(cj5*r10);
IkReal x3027=(r01*sj5);
IkReal x3028=((1.0)*cj2);
IkReal x3029=(cj5*r00);
IkReal x3030=(cj5*r20);
IkReal x3031=((1.0)*x3025);
IkReal x3032=((1.0)*x3024);
IkReal x3033=(sj5*x3024);
evalcond[0]=((((-1.0)*x3030*x3032))+((r21*x3033))+(((-1.0)*r22*x3031)));
evalcond[1]=(((r11*x3033))+(((-1.0)*x3026*x3032))+(((-1.0)*r12*x3031)));
evalcond[2]=((((-1.0)*x3027*x3031))+(((-1.0)*r02*x3032))+((x3025*x3029)));
evalcond[3]=((-1.0)+(((-1.0)*x3029*x3032))+(((-1.0)*r02*x3031))+((x3024*x3027)));
evalcond[4]=((((-1.0)*cj1*x3028))+(((-1.0)*r21*sj5*x3031))+((sj1*sj2))+((x3025*x3030))+(((-1.0)*r22*x3032)));
evalcond[5]=((((-1.0)*sj1*x3028))+(((-1.0)*cj1*sj2))+((x3025*x3026))+(((-1.0)*r12*x3032))+(((-1.0)*r11*sj5*x3031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3034=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3034.valid){
continue;
}
CheckValue<IkReal> x3035 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3034.value)))+(x3035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3036=IKsin(j4);
IkReal x3037=IKcos(j4);
IkReal x3038=(cj5*r10);
IkReal x3039=(r01*sj5);
IkReal x3040=((1.0)*cj2);
IkReal x3041=(cj5*r00);
IkReal x3042=(cj5*r20);
IkReal x3043=((1.0)*x3037);
IkReal x3044=((1.0)*x3036);
IkReal x3045=(sj5*x3036);
evalcond[0]=((((-1.0)*x3042*x3044))+((r21*x3045))+(((-1.0)*r22*x3043)));
evalcond[1]=((((-1.0)*r12*x3043))+(((-1.0)*x3038*x3044))+((r11*x3045)));
evalcond[2]=(((x3037*x3041))+(((-1.0)*x3039*x3043))+(((-1.0)*r02*x3044)));
evalcond[3]=((-1.0)+((x3036*x3039))+(((-1.0)*x3041*x3044))+(((-1.0)*r02*x3043)));
evalcond[4]=(((x3037*x3042))+(((-1.0)*r22*x3044))+((sj1*sj2))+(((-1.0)*cj1*x3040))+(((-1.0)*r21*sj5*x3043)));
evalcond[5]=((((-1.0)*r12*x3044))+((x3037*x3038))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3043))+(((-1.0)*sj1*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3046=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3046;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3047=((1.0)*cj5);
IkReal x3048=((((-1.0)*r21*x3047))+(((-1.0)*r20*sj5)));
j4eval[0]=x3048;
j4eval[1]=((IKabs(((((-1.0)*r10*x3047))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3049=cj5*cj5;
IkReal x3050=r01*r01;
IkReal x3051=(cj5*r00);
IkReal x3052=(r01*sj5);
IkReal x3053=((((-1.0)*x3049*x3050))+x3050+(((-2.0)*x3051*x3052))+(r02*r02)+((x3049*(r00*r00))));
j4eval[0]=x3053;
j4eval[1]=((IKabs(r02))+(IKabs((x3051+(((-1.0)*x3052))))));
j4eval[2]=IKsign(x3053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3054=cj5*cj5;
IkReal x3055=r01*r01;
IkReal x3056=(r01*sj5);
IkReal x3057=(cj5*r00);
CheckValue<IkReal> x3058=IKPowWithIntegerCheck(IKsign((((x3054*(r00*r00)))+x3055+(r02*r02)+(((-2.0)*x3056*x3057))+(((-1.0)*x3054*x3055)))),-1);
if(!x3058.valid){
continue;
}
CheckValue<IkReal> x3059 = IKatan2WithCheck(IkReal((x3057+(((-1.0)*x3056)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3058.value)))+(x3059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3060=IKsin(j4);
IkReal x3061=IKcos(j4);
IkReal x3062=(cj5*r10);
IkReal x3063=(r01*sj5);
IkReal x3064=(cj5*r00);
IkReal x3065=(cj5*r20);
IkReal x3066=((1.0)*x3061);
IkReal x3067=((1.0)*x3060);
IkReal x3068=(sj5*x3060);
evalcond[0]=((((-1.0)*r22*x3066))+(((-1.0)*x3065*x3067))+((r21*x3068)));
evalcond[1]=((((-1.0)*x3062*x3067))+(((-1.0)*r12*x3066))+((r11*x3068)));
evalcond[2]=((((-1.0)*x3063*x3066))+(((-1.0)*r02*x3067))+((x3061*x3064)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3066))+(((-1.0)*x3064*x3067))+((x3060*x3063)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3066))+((cj1*sj2))+(((-1.0)*r12*x3067))+((x3061*x3062)));
evalcond[5]=((((-1.0)*r21*sj5*x3066))+(((-1.0)*r22*x3067))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3061*x3065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3069=((1.0)*cj5);
CheckValue<IkReal> x3070 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3069))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3070.valid){
continue;
}
CheckValue<IkReal> x3071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3069))+(((-1.0)*r20*sj5)))),-1);
if(!x3071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3070.value)+(((1.5707963267949)*(x3071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3072=IKsin(j4);
IkReal x3073=IKcos(j4);
IkReal x3074=(cj5*r10);
IkReal x3075=(r01*sj5);
IkReal x3076=(cj5*r00);
IkReal x3077=(cj5*r20);
IkReal x3078=((1.0)*x3073);
IkReal x3079=((1.0)*x3072);
IkReal x3080=(sj5*x3072);
evalcond[0]=((((-1.0)*r22*x3078))+((r21*x3080))+(((-1.0)*x3077*x3079)));
evalcond[1]=((((-1.0)*x3074*x3079))+((r11*x3080))+(((-1.0)*r12*x3078)));
evalcond[2]=((((-1.0)*r02*x3079))+((x3073*x3076))+(((-1.0)*x3075*x3078)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3078))+((x3072*x3075))+(((-1.0)*x3076*x3079)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3078))+(((-1.0)*r12*x3079))+((x3073*x3074)));
evalcond[5]=((((-1.0)*r21*sj5*x3078))+(((-1.0)*r22*x3079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3073*x3077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3081 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3081.valid){
continue;
}
CheckValue<IkReal> x3082=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3081.value)+(((1.5707963267949)*(x3082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3083=IKsin(j4);
IkReal x3084=IKcos(j4);
IkReal x3085=(cj5*r10);
IkReal x3086=(r01*sj5);
IkReal x3087=(cj5*r00);
IkReal x3088=(cj5*r20);
IkReal x3089=((1.0)*x3084);
IkReal x3090=((1.0)*x3083);
IkReal x3091=(sj5*x3083);
evalcond[0]=(((r21*x3091))+(((-1.0)*r22*x3089))+(((-1.0)*x3088*x3090)));
evalcond[1]=((((-1.0)*x3085*x3090))+((r11*x3091))+(((-1.0)*r12*x3089)));
evalcond[2]=((((-1.0)*r02*x3090))+((x3084*x3087))+(((-1.0)*x3086*x3089)));
evalcond[3]=((1.0)+((x3083*x3086))+(((-1.0)*r02*x3089))+(((-1.0)*x3087*x3090)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3090))+((cj1*sj2))+((x3084*x3085))+(((-1.0)*r11*sj5*x3089)));
evalcond[5]=((((-1.0)*r22*x3090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3089))+((x3084*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3092=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3092);
rxp1_1=(px*r21);
rxp1_2=(r11*x3092);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3093=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3093);
rxp1_1=(px*r21);
rxp1_2=(r11*x3093);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3094=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3094);
rxp1_1=(px*r21);
rxp1_2=(r11*x3094);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3097=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3097.valid){
continue;
}
IkReal x3095=x3097.value;
IkReal x3096=(sj0*x3095);
cj4array[0]=(((cj2*sj1*x3096))+((cj1*sj2*x3096)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3098=IKsin(j4);
IkReal x3099=IKcos(j4);
IkReal x3100=(cj5*r20);
IkReal x3101=(r21*sj5);
IkReal x3102=((1.0)*x3098);
IkReal x3103=((1.0)*x3099);
evalcond[0]=((-1.0)*r02*x3098);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3103)));
evalcond[2]=(((x3098*x3101))+(((-1.0)*x3100*x3102)));
evalcond[3]=(((r11*sj5*x3098))+(((-1.0)*cj5*r10*x3102)));
evalcond[4]=(((x3099*x3100))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3101*x3103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3105=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3105.valid){
continue;
}
IkReal x3104=x3105.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3104))+((cj1*cj2*x3104)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3106=IKsin(j4);
IkReal x3107=IKcos(j4);
IkReal x3108=(r11*sj5);
IkReal x3109=((1.0)*sj0);
IkReal x3110=((1.0)*x3107);
IkReal x3111=((1.0)*cj5*x3106);
evalcond[0]=((-1.0)*r02*x3106);
evalcond[1]=((((-1.0)*r02*x3110))+(((-1.0)*x3109)));
evalcond[2]=((((-1.0)*r20*x3111))+((r21*sj5*x3106)));
evalcond[3]=((((-1.0)*r10*x3111))+((x3106*x3108)));
evalcond[4]=((((-1.0)*cj1*sj2*x3109))+(((-1.0)*cj2*sj1*x3109))+((cj5*r10*x3107))+(((-1.0)*x3108*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3112=IKPowWithIntegerCheck(r02,-1);
if(!x3112.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3112.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3113=IKsin(j4);
IkReal x3114=IKcos(j4);
IkReal x3115=((1.0)*sj0);
IkReal x3116=(cj5*x3114);
IkReal x3117=(sj5*x3113);
IkReal x3118=((1.0)*sj5*x3114);
IkReal x3119=((1.0)*cj5*x3113);
evalcond[0]=((-1.0)*r02*x3113);
evalcond[1]=((((-1.0)*r20*x3119))+((r21*x3117)));
evalcond[2]=((((-1.0)*r10*x3119))+((r11*x3117)));
evalcond[3]=((((-1.0)*r21*x3118))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3116)));
evalcond[4]=((((-1.0)*cj1*sj2*x3115))+(((-1.0)*cj2*sj1*x3115))+(((-1.0)*r11*x3118))+((r10*x3116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3120=((1.0)*sj0);
IkReal x3121=((1.0)*cj0);
CheckValue<IkReal> x3122 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3121))+(((-1.0)*r12*x3120)))),IkReal(((((-1.0)*r01*sj5*x3121))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3122.value)+(((1.5707963267949)*(x3123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3124=IKsin(j4);
IkReal x3125=IKcos(j4);
IkReal x3126=(cj5*r10);
IkReal x3127=(r01*sj5);
IkReal x3128=((1.0)*cj2);
IkReal x3129=(cj5*r00);
IkReal x3130=((1.0)*sj0);
IkReal x3131=(cj5*r20);
IkReal x3132=(cj1*sj2);
IkReal x3133=((1.0)*x3125);
IkReal x3134=((1.0)*x3124);
IkReal x3135=(sj5*x3124);
evalcond[0]=((((-1.0)*x3131*x3134))+((r21*x3135))+(((-1.0)*r22*x3133)));
evalcond[1]=(cj0+(((-1.0)*r12*x3133))+((r11*x3135))+(((-1.0)*x3126*x3134)));
evalcond[2]=((((-1.0)*r02*x3133))+((x3124*x3127))+(((-1.0)*x3129*x3134))+(((-1.0)*x3130)));
evalcond[3]=((((-1.0)*r21*sj5*x3133))+((x3125*x3131))+((sj1*sj2))+(((-1.0)*cj1*x3128))+(((-1.0)*r22*x3134)));
evalcond[4]=((((-1.0)*cj0*sj1*x3128))+(((-1.0)*r02*x3134))+((x3125*x3129))+(((-1.0)*cj0*x3132))+(((-1.0)*x3127*x3133)));
evalcond[5]=((((-1.0)*x3130*x3132))+((x3125*x3126))+(((-1.0)*r12*x3134))+(((-1.0)*r11*sj5*x3133))+(((-1.0)*sj0*sj1*x3128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3136=((1.0)*cj5);
CheckValue<IkReal> x3137 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3136))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3137.valid){
continue;
}
CheckValue<IkReal> x3138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3136)))),-1);
if(!x3138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3137.value)+(((1.5707963267949)*(x3138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3139=IKsin(j4);
IkReal x3140=IKcos(j4);
IkReal x3141=(cj5*r10);
IkReal x3142=(r01*sj5);
IkReal x3143=((1.0)*cj2);
IkReal x3144=(cj5*r00);
IkReal x3145=((1.0)*sj0);
IkReal x3146=(cj5*r20);
IkReal x3147=(cj1*sj2);
IkReal x3148=((1.0)*x3140);
IkReal x3149=((1.0)*x3139);
IkReal x3150=(sj5*x3139);
evalcond[0]=((((-1.0)*x3146*x3149))+(((-1.0)*r22*x3148))+((r21*x3150)));
evalcond[1]=((((-1.0)*r12*x3148))+cj0+((r11*x3150))+(((-1.0)*x3141*x3149)));
evalcond[2]=((((-1.0)*x3145))+(((-1.0)*x3144*x3149))+(((-1.0)*r02*x3148))+((x3139*x3142)));
evalcond[3]=((((-1.0)*cj1*x3143))+(((-1.0)*r22*x3149))+((sj1*sj2))+(((-1.0)*r21*sj5*x3148))+((x3140*x3146)));
evalcond[4]=((((-1.0)*x3142*x3148))+(((-1.0)*r02*x3149))+(((-1.0)*cj0*x3147))+(((-1.0)*cj0*sj1*x3143))+((x3140*x3144)));
evalcond[5]=((((-1.0)*r12*x3149))+(((-1.0)*sj0*sj1*x3143))+(((-1.0)*x3145*x3147))+((x3140*x3141))+(((-1.0)*r11*sj5*x3148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3151=((1.0)*cj5);
CheckValue<IkReal> x3152 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3151)))),-1);
if(!x3153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3152.value)+(((1.5707963267949)*(x3153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3154=IKsin(j4);
IkReal x3155=IKcos(j4);
IkReal x3156=(cj5*r10);
IkReal x3157=(r01*sj5);
IkReal x3158=((1.0)*cj2);
IkReal x3159=(cj5*r00);
IkReal x3160=((1.0)*sj0);
IkReal x3161=(cj5*r20);
IkReal x3162=(cj1*sj2);
IkReal x3163=((1.0)*x3155);
IkReal x3164=((1.0)*x3154);
IkReal x3165=(sj5*x3154);
evalcond[0]=((((-1.0)*x3161*x3164))+((r21*x3165))+(((-1.0)*r22*x3163)));
evalcond[1]=((((-1.0)*r12*x3163))+cj0+((r11*x3165))+(((-1.0)*x3156*x3164)));
evalcond[2]=(((x3154*x3157))+(((-1.0)*r02*x3163))+(((-1.0)*x3159*x3164))+(((-1.0)*x3160)));
evalcond[3]=(((x3155*x3161))+(((-1.0)*cj1*x3158))+((sj1*sj2))+(((-1.0)*r21*sj5*x3163))+(((-1.0)*r22*x3164)));
evalcond[4]=((((-1.0)*x3157*x3163))+((x3155*x3159))+(((-1.0)*cj0*sj1*x3158))+(((-1.0)*r02*x3164))+(((-1.0)*cj0*x3162)));
evalcond[5]=((((-1.0)*r12*x3164))+((x3155*x3156))+(((-1.0)*x3160*x3162))+(((-1.0)*sj0*sj1*x3158))+(((-1.0)*r11*sj5*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3166=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3166;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3166);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3167=r21*r21;
IkReal x3168=cj5*cj5;
IkReal x3169=(sj1*sj2);
IkReal x3170=(r21*sj5);
IkReal x3171=(cj5*r20);
IkReal x3172=(cj1*cj2);
IkReal x3173=((((-1.0)*x3167))+(((-1.0)*x3168*(r20*r20)))+((x3167*x3168))+(((-1.0)*(r22*r22)))+(((2.0)*x3170*x3171)));
j4eval[0]=x3173;
j4eval[1]=((IKabs((((r22*x3169))+(((-1.0)*r22*x3172)))))+(IKabs(((((-1.0)*x3169*x3171))+(((-1.0)*x3170*x3172))+((x3171*x3172))+((x3169*x3170))))));
j4eval[2]=IKsign(x3173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.14306604677431)*py))+(((-0.670653609931724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.670653609931724)*py))+(((2.14306604677431)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.14306604677431)*py))+(((-0.670653609931724)*px))))+IKsqr(((((0.670653609931724)*py))+(((2.14306604677431)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.14306604677431)*py))+(((-0.670653609931724)*px))), ((((0.670653609931724)*py))+(((2.14306604677431)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3174=IKcos(j0);
IkReal x3175=IKsin(j0);
evalcond[0]=((((-0.133)*x3175))+(((0.425)*x3174))+(((-1.0)*px)));
evalcond[1]=((((0.133)*x3174))+(((0.425)*x3175))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3176=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3176;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3176);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3177=((1.0)*cj5);
IkReal x3178=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3177)));
j4eval[0]=x3178;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3177))))));
j4eval[2]=IKsign(x3178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3179=((1.0)*cj5);
IkReal x3180=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3179)));
j4eval[0]=x3180;
j4eval[1]=IKsign(x3180);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3179))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3181=((1.0)*cj5);
CheckValue<IkReal> x3182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3181)))),-1);
if(!x3182.valid){
continue;
}
CheckValue<IkReal> x3183 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3181)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3182.value)))+(x3183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3184=IKcos(j4);
IkReal x3185=IKsin(j4);
IkReal x3186=((1.0)*sj0);
IkReal x3187=(cj5*r00);
IkReal x3188=(cj5*r10);
IkReal x3189=(cj5*r20);
IkReal x3190=((1.0)*x3184);
IkReal x3191=((1.0)*x3185);
IkReal x3192=(sj5*x3184);
IkReal x3193=(sj5*x3185);
evalcond[0]=(((r22*x3185))+((r21*x3192))+(((-1.0)*x3189*x3190)));
evalcond[1]=((((-1.0)*r22*x3190))+((r21*x3193))+(((-1.0)*x3189*x3191)));
evalcond[2]=(cj0+(((-1.0)*x3188*x3191))+((r11*x3193))+(((-1.0)*r12*x3190)));
evalcond[3]=((((-1.0)*x3187*x3190))+((r01*x3192))+(((-1.0)*cj0))+((r02*x3185)));
evalcond[4]=((((-1.0)*x3188*x3190))+((r12*x3185))+((r11*x3192))+(((-1.0)*x3186)));
evalcond[5]=((((-1.0)*x3187*x3191))+((r01*x3193))+(((-1.0)*r02*x3190))+(((-1.0)*x3186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3194=((1.0)*cj5);
CheckValue<IkReal> x3195 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3194))+(((-1.0)*r00*sj5)))),-1);
if(!x3196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3195.value)+(((1.5707963267949)*(x3196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3197=IKcos(j4);
IkReal x3198=IKsin(j4);
IkReal x3199=((1.0)*sj0);
IkReal x3200=(cj5*r00);
IkReal x3201=(cj5*r10);
IkReal x3202=(cj5*r20);
IkReal x3203=((1.0)*x3197);
IkReal x3204=((1.0)*x3198);
IkReal x3205=(sj5*x3197);
IkReal x3206=(sj5*x3198);
evalcond[0]=((((-1.0)*x3202*x3203))+((r22*x3198))+((r21*x3205)));
evalcond[1]=((((-1.0)*x3202*x3204))+(((-1.0)*r22*x3203))+((r21*x3206)));
evalcond[2]=(cj0+((r11*x3206))+(((-1.0)*r12*x3203))+(((-1.0)*x3201*x3204)));
evalcond[3]=((((-1.0)*x3200*x3203))+((r01*x3205))+((r02*x3198))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3205))+(((-1.0)*x3201*x3203))+((r12*x3198))+(((-1.0)*x3199)));
evalcond[5]=((((-1.0)*r02*x3203))+(((-1.0)*x3200*x3204))+((r01*x3206))+(((-1.0)*x3199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3207 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3207.valid){
continue;
}
CheckValue<IkReal> x3208=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3207.value)+(((1.5707963267949)*(x3208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3209=IKcos(j4);
IkReal x3210=IKsin(j4);
IkReal x3211=((1.0)*sj0);
IkReal x3212=(cj5*r00);
IkReal x3213=(cj5*r10);
IkReal x3214=(cj5*r20);
IkReal x3215=((1.0)*x3209);
IkReal x3216=((1.0)*x3210);
IkReal x3217=(sj5*x3209);
IkReal x3218=(sj5*x3210);
evalcond[0]=((((-1.0)*x3214*x3215))+((r22*x3210))+((r21*x3217)));
evalcond[1]=((((-1.0)*x3214*x3216))+((r21*x3218))+(((-1.0)*r22*x3215)));
evalcond[2]=(cj0+((r11*x3218))+(((-1.0)*r12*x3215))+(((-1.0)*x3213*x3216)));
evalcond[3]=(((r01*x3217))+(((-1.0)*x3212*x3215))+(((-1.0)*cj0))+((r02*x3210)));
evalcond[4]=(((r12*x3210))+((r11*x3217))+(((-1.0)*x3211))+(((-1.0)*x3213*x3215)));
evalcond[5]=(((r01*x3218))+(((-1.0)*x3212*x3216))+(((-1.0)*x3211))+(((-1.0)*r02*x3215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.14306604677431)*py))+(((-0.670653609931724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.670653609931724)*py))+(((2.14306604677431)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.14306604677431)*py))+(((-0.670653609931724)*px))))+IKsqr(((((0.670653609931724)*py))+(((2.14306604677431)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.14306604677431)*py))+(((-0.670653609931724)*px))), ((((0.670653609931724)*py))+(((2.14306604677431)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3219=IKcos(j0);
IkReal x3220=IKsin(j0);
evalcond[0]=((((-0.133)*x3220))+(((-1.0)*px))+(((0.425)*x3219)));
evalcond[1]=((((0.425)*x3220))+(((0.133)*x3219))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3221=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3221;
j4eval[1]=IKsign(x3221);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3222=((1.0)*cj5);
IkReal x3223=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3222)));
j4eval[0]=x3223;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3222)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3224=cj5*cj5;
IkReal x3225=((1.0)*r20);
IkReal x3226=(r01*r21);
IkReal x3227=(r21*sj5);
IkReal x3228=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3227))+(((-1.0)*x3226))+((x3224*x3226))+(((-1.0)*r00*x3224*x3225)));
j4eval[0]=x3228;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3227))+(((-1.0)*cj0*cj5*x3225))))));
j4eval[2]=IKsign(x3228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3229=cj5*cj5;
IkReal x3230=((1.0)*r20);
IkReal x3231=(r01*r21);
IkReal x3232=(r21*sj5);
CheckValue<IkReal> x3233 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3232))+(((-1.0)*cj0*cj5*x3230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3233.valid){
continue;
}
CheckValue<IkReal> x3234=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3231))+(((-1.0)*r00*x3229*x3230))+((x3229*x3231))+((cj5*r00*x3232)))),-1);
if(!x3234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3233.value)+(((1.5707963267949)*(x3234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3235=IKcos(j4);
IkReal x3236=IKsin(j4);
IkReal x3237=(cj5*r00);
IkReal x3238=(cj5*r10);
IkReal x3239=(cj5*r20);
IkReal x3240=((1.0)*x3235);
IkReal x3241=((1.0)*x3236);
IkReal x3242=(sj5*x3235);
IkReal x3243=(sj5*x3236);
evalcond[0]=(((r21*x3242))+(((-1.0)*x3239*x3240))+((r22*x3236)));
evalcond[1]=(((r21*x3243))+(((-1.0)*x3239*x3241))+(((-1.0)*r22*x3240)));
evalcond[2]=(((r01*x3242))+cj0+(((-1.0)*x3237*x3240))+((r02*x3236)));
evalcond[3]=(sj0+(((-1.0)*x3238*x3240))+((r12*x3236))+((r11*x3242)));
evalcond[4]=(cj0+(((-1.0)*x3238*x3241))+(((-1.0)*r12*x3240))+((r11*x3243)));
evalcond[5]=(((r01*x3243))+(((-1.0)*sj0))+(((-1.0)*x3237*x3241))+(((-1.0)*r02*x3240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3244=((1.0)*cj5);
CheckValue<IkReal> x3245 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3244)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3245.valid){
continue;
}
CheckValue<IkReal> x3246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3244)))),-1);
if(!x3246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3245.value)+(((1.5707963267949)*(x3246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3247=IKcos(j4);
IkReal x3248=IKsin(j4);
IkReal x3249=(cj5*r00);
IkReal x3250=(cj5*r10);
IkReal x3251=(cj5*r20);
IkReal x3252=((1.0)*x3247);
IkReal x3253=((1.0)*x3248);
IkReal x3254=(sj5*x3247);
IkReal x3255=(sj5*x3248);
evalcond[0]=(((r22*x3248))+((r21*x3254))+(((-1.0)*x3251*x3252)));
evalcond[1]=(((r21*x3255))+(((-1.0)*r22*x3252))+(((-1.0)*x3251*x3253)));
evalcond[2]=(cj0+(((-1.0)*x3249*x3252))+((r01*x3254))+((r02*x3248)));
evalcond[3]=(sj0+((r11*x3254))+((r12*x3248))+(((-1.0)*x3250*x3252)));
evalcond[4]=(cj0+((r11*x3255))+(((-1.0)*x3250*x3253))+(((-1.0)*r12*x3252)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3252))+(((-1.0)*x3249*x3253))+((r01*x3255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3256 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3256.valid){
continue;
}
CheckValue<IkReal> x3257=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3256.value)+(((1.5707963267949)*(x3257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3258=IKcos(j4);
IkReal x3259=IKsin(j4);
IkReal x3260=(cj5*r00);
IkReal x3261=(cj5*r10);
IkReal x3262=(cj5*r20);
IkReal x3263=((1.0)*x3258);
IkReal x3264=((1.0)*x3259);
IkReal x3265=(sj5*x3258);
IkReal x3266=(sj5*x3259);
evalcond[0]=(((r21*x3265))+((r22*x3259))+(((-1.0)*x3262*x3263)));
evalcond[1]=(((r21*x3266))+(((-1.0)*x3262*x3264))+(((-1.0)*r22*x3263)));
evalcond[2]=((((-1.0)*x3260*x3263))+((r01*x3265))+cj0+((r02*x3259)));
evalcond[3]=(((r12*x3259))+sj0+(((-1.0)*x3261*x3263))+((r11*x3265)));
evalcond[4]=((((-1.0)*x3261*x3264))+cj0+(((-1.0)*r12*x3263))+((r11*x3266)));
evalcond[5]=((((-1.0)*x3260*x3264))+(((-1.0)*sj0))+((r01*x3266))+(((-1.0)*r02*x3263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.5187969924812)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.5187969924812)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.5187969924812)*px))+IKsqr(((7.5187969924812)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.5187969924812)*px), ((7.5187969924812)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.133)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.133)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3267=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3267;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3268=((1.0)*cj5);
IkReal x3269=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3268)));
j4eval[0]=x3269;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3268))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3270=((1.0)*cj5);
IkReal x3271=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3270)));
j4eval[0]=x3271;
j4eval[1]=IKsign(x3271);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3270))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3272=((1.0)*cj5);
CheckValue<IkReal> x3273 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3272)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3273.valid){
continue;
}
CheckValue<IkReal> x3274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3272)))),-1);
if(!x3274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3273.value)+(((1.5707963267949)*(x3274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3275=IKcos(j4);
IkReal x3276=IKsin(j4);
IkReal x3277=((1.0)*sj0);
IkReal x3278=(cj5*r00);
IkReal x3279=(cj5*r10);
IkReal x3280=(cj5*r20);
IkReal x3281=((1.0)*x3275);
IkReal x3282=((1.0)*x3276);
IkReal x3283=(sj5*x3275);
IkReal x3284=(sj5*x3276);
evalcond[0]=((((-1.0)*x3280*x3281))+((r21*x3283))+((r22*x3276)));
evalcond[1]=((((-1.0)*x3280*x3282))+(((-1.0)*r22*x3281))+((r21*x3284)));
evalcond[2]=((((-1.0)*r12*x3281))+cj0+(((-1.0)*x3279*x3282))+((r11*x3284)));
evalcond[3]=(((r02*x3276))+(((-1.0)*x3278*x3281))+(((-1.0)*cj0))+((r01*x3283)));
evalcond[4]=((((-1.0)*x3279*x3281))+(((-1.0)*x3277))+((r12*x3276))+((r11*x3283)));
evalcond[5]=((((-1.0)*x3277))+(((-1.0)*r02*x3281))+(((-1.0)*x3278*x3282))+((r01*x3284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3285=((1.0)*cj5);
CheckValue<IkReal> x3286 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3285))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3286.valid){
continue;
}
CheckValue<IkReal> x3287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3285)))),-1);
if(!x3287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3286.value)+(((1.5707963267949)*(x3287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3288=IKcos(j4);
IkReal x3289=IKsin(j4);
IkReal x3290=((1.0)*sj0);
IkReal x3291=(cj5*r00);
IkReal x3292=(cj5*r10);
IkReal x3293=(cj5*r20);
IkReal x3294=((1.0)*x3288);
IkReal x3295=((1.0)*x3289);
IkReal x3296=(sj5*x3288);
IkReal x3297=(sj5*x3289);
evalcond[0]=((((-1.0)*x3293*x3294))+((r22*x3289))+((r21*x3296)));
evalcond[1]=((((-1.0)*r22*x3294))+(((-1.0)*x3293*x3295))+((r21*x3297)));
evalcond[2]=((((-1.0)*r12*x3294))+cj0+(((-1.0)*x3292*x3295))+((r11*x3297)));
evalcond[3]=(((r01*x3296))+((r02*x3289))+(((-1.0)*x3291*x3294))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3290))+(((-1.0)*x3292*x3294))+((r11*x3296))+((r12*x3289)));
evalcond[5]=(((r01*x3297))+(((-1.0)*x3290))+(((-1.0)*x3291*x3295))+(((-1.0)*r02*x3294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3298 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3298.valid){
continue;
}
CheckValue<IkReal> x3299=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3298.value)+(((1.5707963267949)*(x3299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3300=IKcos(j4);
IkReal x3301=IKsin(j4);
IkReal x3302=((1.0)*sj0);
IkReal x3303=(cj5*r00);
IkReal x3304=(cj5*r10);
IkReal x3305=(cj5*r20);
IkReal x3306=((1.0)*x3300);
IkReal x3307=((1.0)*x3301);
IkReal x3308=(sj5*x3300);
IkReal x3309=(sj5*x3301);
evalcond[0]=((((-1.0)*x3305*x3306))+((r21*x3308))+((r22*x3301)));
evalcond[1]=((((-1.0)*x3305*x3307))+((r21*x3309))+(((-1.0)*r22*x3306)));
evalcond[2]=((((-1.0)*x3304*x3307))+cj0+((r11*x3309))+(((-1.0)*r12*x3306)));
evalcond[3]=(((r02*x3301))+((r01*x3308))+(((-1.0)*cj0))+(((-1.0)*x3303*x3306)));
evalcond[4]=((((-1.0)*x3304*x3306))+((r11*x3308))+(((-1.0)*x3302))+((r12*x3301)));
evalcond[5]=((((-1.0)*x3302))+(((-1.0)*r02*x3306))+((r01*x3309))+(((-1.0)*x3303*x3307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.5187969924812)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.5187969924812)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.5187969924812)*px))+IKsqr(((7.5187969924812)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.5187969924812)*px), ((7.5187969924812)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.133)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.133)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3310=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3310;
j4eval[1]=IKsign(x3310);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3311=((1.0)*cj5);
IkReal x3312=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3311)));
j4eval[0]=x3312;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3311)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3313=cj5*cj5;
IkReal x3314=((1.0)*r20);
IkReal x3315=(r01*r21);
IkReal x3316=(r21*sj5);
IkReal x3317=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3316))+((x3313*x3315))+(((-1.0)*x3315))+(((-1.0)*r00*x3313*x3314)));
j4eval[0]=x3317;
j4eval[1]=((IKabs((((cj0*x3316))+(((-1.0)*cj0*cj5*x3314)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3318=cj5*cj5;
IkReal x3319=((1.0)*r20);
IkReal x3320=(r01*r21);
IkReal x3321=(r21*sj5);
CheckValue<IkReal> x3322=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3320))+(((-1.0)*r00*x3318*x3319))+(((-1.0)*r02*r22))+((cj5*r00*x3321))+((x3318*x3320)))),-1);
if(!x3322.valid){
continue;
}
CheckValue<IkReal> x3323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3319))+((cj0*x3321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3322.value)))+(x3323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3324=IKcos(j4);
IkReal x3325=IKsin(j4);
IkReal x3326=(cj5*r00);
IkReal x3327=(cj5*r10);
IkReal x3328=(cj5*r20);
IkReal x3329=((1.0)*x3324);
IkReal x3330=((1.0)*x3325);
IkReal x3331=(sj5*x3324);
IkReal x3332=(sj5*x3325);
evalcond[0]=(((r22*x3325))+((r21*x3331))+(((-1.0)*x3328*x3329)));
evalcond[1]=(((r21*x3332))+(((-1.0)*r22*x3329))+(((-1.0)*x3328*x3330)));
evalcond[2]=((((-1.0)*x3326*x3329))+cj0+((r01*x3331))+((r02*x3325)));
evalcond[3]=(((r12*x3325))+(((-1.0)*x3327*x3329))+sj0+((r11*x3331)));
evalcond[4]=(cj0+((r11*x3332))+(((-1.0)*r12*x3329))+(((-1.0)*x3327*x3330)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3329))+((r01*x3332))+(((-1.0)*x3326*x3330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3333=((1.0)*cj5);
CheckValue<IkReal> x3334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3333)))),-1);
if(!x3334.valid){
continue;
}
CheckValue<IkReal> x3335 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3333)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3334.value)))+(x3335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3336=IKcos(j4);
IkReal x3337=IKsin(j4);
IkReal x3338=(cj5*r00);
IkReal x3339=(cj5*r10);
IkReal x3340=(cj5*r20);
IkReal x3341=((1.0)*x3336);
IkReal x3342=((1.0)*x3337);
IkReal x3343=(sj5*x3336);
IkReal x3344=(sj5*x3337);
evalcond[0]=((((-1.0)*x3340*x3341))+((r21*x3343))+((r22*x3337)));
evalcond[1]=((((-1.0)*x3340*x3342))+((r21*x3344))+(((-1.0)*r22*x3341)));
evalcond[2]=(cj0+((r02*x3337))+(((-1.0)*x3338*x3341))+((r01*x3343)));
evalcond[3]=(sj0+((r12*x3337))+(((-1.0)*x3339*x3341))+((r11*x3343)));
evalcond[4]=(cj0+(((-1.0)*x3339*x3342))+(((-1.0)*r12*x3341))+((r11*x3344)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3338*x3342))+(((-1.0)*r02*x3341))+((r01*x3344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3345 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3345.valid){
continue;
}
CheckValue<IkReal> x3346=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3345.value)+(((1.5707963267949)*(x3346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3347=IKcos(j4);
IkReal x3348=IKsin(j4);
IkReal x3349=(cj5*r00);
IkReal x3350=(cj5*r10);
IkReal x3351=(cj5*r20);
IkReal x3352=((1.0)*x3347);
IkReal x3353=((1.0)*x3348);
IkReal x3354=(sj5*x3347);
IkReal x3355=(sj5*x3348);
evalcond[0]=(((r22*x3348))+(((-1.0)*x3351*x3352))+((r21*x3354)));
evalcond[1]=((((-1.0)*x3351*x3353))+((r21*x3355))+(((-1.0)*r22*x3352)));
evalcond[2]=(cj0+(((-1.0)*x3349*x3352))+((r01*x3354))+((r02*x3348)));
evalcond[3]=(sj0+((r11*x3354))+(((-1.0)*x3350*x3352))+((r12*x3348)));
evalcond[4]=(cj0+((r11*x3355))+(((-1.0)*x3350*x3353))+(((-1.0)*r12*x3352)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3349*x3353))+(((-1.0)*r02*x3352))+((r01*x3355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14306604677431)*py))+(((-0.670653609931724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.670653609931724)*py))+(((-2.14306604677431)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14306604677431)*py))+(((-0.670653609931724)*px))))+IKsqr(((((0.670653609931724)*py))+(((-2.14306604677431)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14306604677431)*py))+(((-0.670653609931724)*px))), ((((0.670653609931724)*py))+(((-2.14306604677431)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3356=IKcos(j0);
IkReal x3357=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3356))+(((-0.133)*x3357)));
evalcond[1]=((((-1.0)*py))+(((0.133)*x3356))+(((-0.425)*x3357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3358=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3358;
j4eval[1]=IKsign(x3358);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3359=((1.0)*cj5);
IkReal x3360=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3359)));
j4eval[0]=x3360;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3359)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3361=cj5*cj5;
IkReal x3362=((1.0)*r20);
IkReal x3363=(r01*r21);
IkReal x3364=(r21*sj5);
IkReal x3365=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3363))+(((-1.0)*r00*x3361*x3362))+((x3361*x3363))+((cj5*r00*x3364)));
j4eval[0]=x3365;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3364))+(((-1.0)*cj0*cj5*x3362))))));
j4eval[2]=IKsign(x3365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3366=cj5*cj5;
IkReal x3367=((1.0)*r20);
IkReal x3368=(r01*r21);
IkReal x3369=(r21*sj5);
CheckValue<IkReal> x3370=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3368))+((cj5*r00*x3369))+(((-1.0)*r00*x3366*x3367))+((x3366*x3368)))),-1);
if(!x3370.valid){
continue;
}
CheckValue<IkReal> x3371 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3369))+(((-1.0)*cj0*cj5*x3367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3370.value)))+(x3371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3372=IKcos(j4);
IkReal x3373=IKsin(j4);
IkReal x3374=(cj5*r00);
IkReal x3375=(cj5*r10);
IkReal x3376=(cj5*r20);
IkReal x3377=((1.0)*x3372);
IkReal x3378=((1.0)*x3373);
IkReal x3379=(sj5*x3372);
IkReal x3380=(sj5*x3373);
evalcond[0]=(((r22*x3373))+(((-1.0)*x3376*x3377))+((r21*x3379)));
evalcond[1]=((((-1.0)*r22*x3377))+((r21*x3380))+(((-1.0)*x3376*x3378)));
evalcond[2]=(((r01*x3379))+(((-1.0)*x3374*x3377))+cj0+((r02*x3373)));
evalcond[3]=(((r12*x3373))+sj0+(((-1.0)*x3375*x3377))+((r11*x3379)));
evalcond[4]=(cj0+(((-1.0)*x3375*x3378))+(((-1.0)*r12*x3377))+((r11*x3380)));
evalcond[5]=(((r01*x3380))+(((-1.0)*x3374*x3378))+(((-1.0)*sj0))+(((-1.0)*r02*x3377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3381=((1.0)*cj5);
CheckValue<IkReal> x3382 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3381)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3382.valid){
continue;
}
CheckValue<IkReal> x3383=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3381)))),-1);
if(!x3383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3382.value)+(((1.5707963267949)*(x3383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3384=IKcos(j4);
IkReal x3385=IKsin(j4);
IkReal x3386=(cj5*r00);
IkReal x3387=(cj5*r10);
IkReal x3388=(cj5*r20);
IkReal x3389=((1.0)*x3384);
IkReal x3390=((1.0)*x3385);
IkReal x3391=(sj5*x3384);
IkReal x3392=(sj5*x3385);
evalcond[0]=(((r21*x3391))+((r22*x3385))+(((-1.0)*x3388*x3389)));
evalcond[1]=((((-1.0)*r22*x3389))+((r21*x3392))+(((-1.0)*x3388*x3390)));
evalcond[2]=(cj0+((r01*x3391))+((r02*x3385))+(((-1.0)*x3386*x3389)));
evalcond[3]=(sj0+(((-1.0)*x3387*x3389))+((r11*x3391))+((r12*x3385)));
evalcond[4]=((((-1.0)*x3387*x3390))+cj0+((r11*x3392))+(((-1.0)*r12*x3389)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3392))+(((-1.0)*r02*x3389))+(((-1.0)*x3386*x3390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3393 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3393.valid){
continue;
}
CheckValue<IkReal> x3394=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3393.value)+(((1.5707963267949)*(x3394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3395=IKcos(j4);
IkReal x3396=IKsin(j4);
IkReal x3397=(cj5*r00);
IkReal x3398=(cj5*r10);
IkReal x3399=(cj5*r20);
IkReal x3400=((1.0)*x3395);
IkReal x3401=((1.0)*x3396);
IkReal x3402=(sj5*x3395);
IkReal x3403=(sj5*x3396);
evalcond[0]=((((-1.0)*x3399*x3400))+((r21*x3402))+((r22*x3396)));
evalcond[1]=((((-1.0)*x3399*x3401))+((r21*x3403))+(((-1.0)*r22*x3400)));
evalcond[2]=(cj0+((r02*x3396))+(((-1.0)*x3397*x3400))+((r01*x3402)));
evalcond[3]=(sj0+((r11*x3402))+(((-1.0)*x3398*x3400))+((r12*x3396)));
evalcond[4]=(cj0+((r11*x3403))+(((-1.0)*x3398*x3401))+(((-1.0)*r12*x3400)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3400))+(((-1.0)*x3397*x3401))+((r01*x3403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14306604677431)*py))+(((-0.670653609931724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.670653609931724)*py))+(((-2.14306604677431)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14306604677431)*py))+(((-0.670653609931724)*px))))+IKsqr(((((0.670653609931724)*py))+(((-2.14306604677431)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14306604677431)*py))+(((-0.670653609931724)*px))), ((((0.670653609931724)*py))+(((-2.14306604677431)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3404=IKcos(j0);
IkReal x3405=IKsin(j0);
evalcond[0]=((((-0.133)*x3405))+(((-1.0)*px))+(((-0.425)*x3404)));
evalcond[1]=((((0.133)*x3404))+(((-1.0)*py))+(((-0.425)*x3405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3406=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3406;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3406);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3407=((1.0)*cj5);
IkReal x3408=((((-1.0)*r01*x3407))+(((-1.0)*r00*sj5)));
j4eval[0]=x3408;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3407)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3409=((1.0)*cj5);
IkReal x3410=((((-1.0)*r01*x3409))+(((-1.0)*r00*sj5)));
j4eval[0]=x3410;
j4eval[1]=IKsign(x3410);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3409))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3411=((1.0)*cj5);
CheckValue<IkReal> x3412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3411)))),-1);
if(!x3412.valid){
continue;
}
CheckValue<IkReal> x3413 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3411)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3412.value)))+(x3413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3414=IKcos(j4);
IkReal x3415=IKsin(j4);
IkReal x3416=((1.0)*sj0);
IkReal x3417=(cj5*r00);
IkReal x3418=(cj5*r10);
IkReal x3419=(cj5*r20);
IkReal x3420=((1.0)*x3414);
IkReal x3421=((1.0)*x3415);
IkReal x3422=(sj5*x3414);
IkReal x3423=(sj5*x3415);
evalcond[0]=(((r22*x3415))+(((-1.0)*x3419*x3420))+((r21*x3422)));
evalcond[1]=((((-1.0)*x3419*x3421))+(((-1.0)*r22*x3420))+((r21*x3423)));
evalcond[2]=((((-1.0)*r12*x3420))+cj0+(((-1.0)*x3418*x3421))+((r11*x3423)));
evalcond[3]=(((r02*x3415))+(((-1.0)*x3417*x3420))+(((-1.0)*cj0))+((r01*x3422)));
evalcond[4]=(((r12*x3415))+(((-1.0)*x3418*x3420))+((r11*x3422))+(((-1.0)*x3416)));
evalcond[5]=((((-1.0)*x3417*x3421))+(((-1.0)*r02*x3420))+((r01*x3423))+(((-1.0)*x3416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3424=((1.0)*cj5);
CheckValue<IkReal> x3425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3424)))),-1);
if(!x3425.valid){
continue;
}
CheckValue<IkReal> x3426 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3425.value)))+(x3426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3427=IKcos(j4);
IkReal x3428=IKsin(j4);
IkReal x3429=((1.0)*sj0);
IkReal x3430=(cj5*r00);
IkReal x3431=(cj5*r10);
IkReal x3432=(cj5*r20);
IkReal x3433=((1.0)*x3427);
IkReal x3434=((1.0)*x3428);
IkReal x3435=(sj5*x3427);
IkReal x3436=(sj5*x3428);
evalcond[0]=((((-1.0)*x3432*x3433))+((r21*x3435))+((r22*x3428)));
evalcond[1]=((((-1.0)*x3432*x3434))+(((-1.0)*r22*x3433))+((r21*x3436)));
evalcond[2]=((((-1.0)*r12*x3433))+cj0+(((-1.0)*x3431*x3434))+((r11*x3436)));
evalcond[3]=(((r01*x3435))+(((-1.0)*x3430*x3433))+((r02*x3428))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3431*x3433))+(((-1.0)*x3429))+((r12*x3428))+((r11*x3435)));
evalcond[5]=(((r01*x3436))+(((-1.0)*x3430*x3434))+(((-1.0)*x3429))+(((-1.0)*r02*x3433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3437.value)+(((1.5707963267949)*(x3438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3439=IKcos(j4);
IkReal x3440=IKsin(j4);
IkReal x3441=((1.0)*sj0);
IkReal x3442=(cj5*r00);
IkReal x3443=(cj5*r10);
IkReal x3444=(cj5*r20);
IkReal x3445=((1.0)*x3439);
IkReal x3446=((1.0)*x3440);
IkReal x3447=(sj5*x3439);
IkReal x3448=(sj5*x3440);
evalcond[0]=(((r21*x3447))+((r22*x3440))+(((-1.0)*x3444*x3445)));
evalcond[1]=(((r21*x3448))+(((-1.0)*x3444*x3446))+(((-1.0)*r22*x3445)));
evalcond[2]=(((r11*x3448))+cj0+(((-1.0)*r12*x3445))+(((-1.0)*x3443*x3446)));
evalcond[3]=(((r02*x3440))+(((-1.0)*x3442*x3445))+((r01*x3447))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3447))+((r12*x3440))+(((-1.0)*x3443*x3445))+(((-1.0)*x3441)));
evalcond[5]=((((-1.0)*r02*x3445))+(((-1.0)*x3442*x3446))+((r01*x3448))+(((-1.0)*x3441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.5187969924812)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.5187969924812)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.5187969924812)*px))+IKsqr(((7.5187969924812)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.5187969924812)*px), ((7.5187969924812)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.133)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.133)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3449=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3449;
j4eval[1]=IKsign(x3449);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3450=((1.0)*cj5);
IkReal x3451=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3450)));
j4eval[0]=x3451;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3450))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3452=cj5*cj5;
IkReal x3453=((1.0)*r20);
IkReal x3454=(r01*r21);
IkReal x3455=(r21*sj5);
IkReal x3456=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3452*x3453))+(((-1.0)*x3454))+((cj5*r00*x3455))+((x3452*x3454)));
j4eval[0]=x3456;
j4eval[1]=((IKabs((((cj0*x3455))+(((-1.0)*cj0*cj5*x3453)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3457=cj5*cj5;
IkReal x3458=((1.0)*r20);
IkReal x3459=(r01*r21);
IkReal x3460=(r21*sj5);
CheckValue<IkReal> x3461=IKPowWithIntegerCheck(IKsign((((x3457*x3459))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3457*x3458))+(((-1.0)*x3459))+((cj5*r00*x3460)))),-1);
if(!x3461.valid){
continue;
}
CheckValue<IkReal> x3462 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3460))+(((-1.0)*cj0*cj5*x3458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3461.value)))+(x3462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3463=IKcos(j4);
IkReal x3464=IKsin(j4);
IkReal x3465=(cj5*r00);
IkReal x3466=(cj5*r10);
IkReal x3467=(cj5*r20);
IkReal x3468=((1.0)*x3463);
IkReal x3469=((1.0)*x3464);
IkReal x3470=(sj5*x3463);
IkReal x3471=(sj5*x3464);
evalcond[0]=((((-1.0)*x3467*x3468))+((r21*x3470))+((r22*x3464)));
evalcond[1]=((((-1.0)*x3467*x3469))+(((-1.0)*r22*x3468))+((r21*x3471)));
evalcond[2]=((((-1.0)*x3465*x3468))+cj0+((r01*x3470))+((r02*x3464)));
evalcond[3]=(sj0+((r12*x3464))+((r11*x3470))+(((-1.0)*x3466*x3468)));
evalcond[4]=(cj0+(((-1.0)*r12*x3468))+((r11*x3471))+(((-1.0)*x3466*x3469)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3465*x3469))+(((-1.0)*r02*x3468))+((r01*x3471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3472=((1.0)*cj5);
CheckValue<IkReal> x3473 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3472)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3473.valid){
continue;
}
CheckValue<IkReal> x3474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3472)))),-1);
if(!x3474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3473.value)+(((1.5707963267949)*(x3474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3475=IKcos(j4);
IkReal x3476=IKsin(j4);
IkReal x3477=(cj5*r00);
IkReal x3478=(cj5*r10);
IkReal x3479=(cj5*r20);
IkReal x3480=((1.0)*x3475);
IkReal x3481=((1.0)*x3476);
IkReal x3482=(sj5*x3475);
IkReal x3483=(sj5*x3476);
evalcond[0]=((((-1.0)*x3479*x3480))+((r21*x3482))+((r22*x3476)));
evalcond[1]=((((-1.0)*x3479*x3481))+(((-1.0)*r22*x3480))+((r21*x3483)));
evalcond[2]=(cj0+((r01*x3482))+(((-1.0)*x3477*x3480))+((r02*x3476)));
evalcond[3]=(sj0+((r12*x3476))+((r11*x3482))+(((-1.0)*x3478*x3480)));
evalcond[4]=(cj0+(((-1.0)*r12*x3480))+((r11*x3483))+(((-1.0)*x3478*x3481)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3480))+((r01*x3483))+(((-1.0)*x3477*x3481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3484 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3484.valid){
continue;
}
CheckValue<IkReal> x3485=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3484.value)+(((1.5707963267949)*(x3485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3486=IKcos(j4);
IkReal x3487=IKsin(j4);
IkReal x3488=(cj5*r00);
IkReal x3489=(cj5*r10);
IkReal x3490=(cj5*r20);
IkReal x3491=((1.0)*x3486);
IkReal x3492=((1.0)*x3487);
IkReal x3493=(sj5*x3486);
IkReal x3494=(sj5*x3487);
evalcond[0]=((((-1.0)*x3490*x3491))+((r21*x3493))+((r22*x3487)));
evalcond[1]=((((-1.0)*r22*x3491))+(((-1.0)*x3490*x3492))+((r21*x3494)));
evalcond[2]=(((r01*x3493))+cj0+(((-1.0)*x3488*x3491))+((r02*x3487)));
evalcond[3]=(sj0+(((-1.0)*x3489*x3491))+((r12*x3487))+((r11*x3493)));
evalcond[4]=((((-1.0)*r12*x3491))+cj0+(((-1.0)*x3489*x3492))+((r11*x3494)));
evalcond[5]=((((-1.0)*r02*x3491))+(((-1.0)*sj0))+((r01*x3494))+(((-1.0)*x3488*x3492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.5187969924812)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.5187969924812)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.5187969924812)*px))+IKsqr(((7.5187969924812)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.5187969924812)*px), ((7.5187969924812)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.133)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.133)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3495=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3495;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3496=((1.0)*cj5);
IkReal x3497=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3496)));
j4eval[0]=x3497;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3496))))));
j4eval[2]=IKsign(x3497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3498=((1.0)*cj5);
IkReal x3499=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3498)));
j4eval[0]=x3499;
j4eval[1]=IKsign(x3499);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3498))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3500=((1.0)*cj5);
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3500)))),-1);
if(!x3501.valid){
continue;
}
CheckValue<IkReal> x3502 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3500))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3501.value)))+(x3502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3503=IKcos(j4);
IkReal x3504=IKsin(j4);
IkReal x3505=((1.0)*sj0);
IkReal x3506=(cj5*r00);
IkReal x3507=(cj5*r10);
IkReal x3508=(cj5*r20);
IkReal x3509=((1.0)*x3503);
IkReal x3510=((1.0)*x3504);
IkReal x3511=(sj5*x3503);
IkReal x3512=(sj5*x3504);
evalcond[0]=(((r21*x3511))+(((-1.0)*x3508*x3509))+((r22*x3504)));
evalcond[1]=(((r21*x3512))+(((-1.0)*x3508*x3510))+(((-1.0)*r22*x3509)));
evalcond[2]=((((-1.0)*r12*x3509))+cj0+((r11*x3512))+(((-1.0)*x3507*x3510)));
evalcond[3]=((((-1.0)*x3506*x3509))+((r01*x3511))+((r02*x3504))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3505))+((r12*x3504))+((r11*x3511))+(((-1.0)*x3507*x3509)));
evalcond[5]=((((-1.0)*x3506*x3510))+((r01*x3512))+(((-1.0)*x3505))+(((-1.0)*r02*x3509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3513=((1.0)*cj5);
CheckValue<IkReal> x3514 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3514.valid){
continue;
}
CheckValue<IkReal> x3515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3513)))),-1);
if(!x3515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3514.value)+(((1.5707963267949)*(x3515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3516=IKcos(j4);
IkReal x3517=IKsin(j4);
IkReal x3518=((1.0)*sj0);
IkReal x3519=(cj5*r00);
IkReal x3520=(cj5*r10);
IkReal x3521=(cj5*r20);
IkReal x3522=((1.0)*x3516);
IkReal x3523=((1.0)*x3517);
IkReal x3524=(sj5*x3516);
IkReal x3525=(sj5*x3517);
evalcond[0]=(((r21*x3524))+(((-1.0)*x3521*x3522))+((r22*x3517)));
evalcond[1]=(((r21*x3525))+(((-1.0)*r22*x3522))+(((-1.0)*x3521*x3523)));
evalcond[2]=(cj0+((r11*x3525))+(((-1.0)*x3520*x3523))+(((-1.0)*r12*x3522)));
evalcond[3]=((((-1.0)*x3519*x3522))+((r01*x3524))+((r02*x3517))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3518))+((r11*x3524))+((r12*x3517))+(((-1.0)*x3520*x3522)));
evalcond[5]=((((-1.0)*r02*x3522))+(((-1.0)*x3519*x3523))+((r01*x3525))+(((-1.0)*x3518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3526 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3526.valid){
continue;
}
CheckValue<IkReal> x3527=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3526.value)+(((1.5707963267949)*(x3527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3528=IKcos(j4);
IkReal x3529=IKsin(j4);
IkReal x3530=((1.0)*sj0);
IkReal x3531=(cj5*r00);
IkReal x3532=(cj5*r10);
IkReal x3533=(cj5*r20);
IkReal x3534=((1.0)*x3528);
IkReal x3535=((1.0)*x3529);
IkReal x3536=(sj5*x3528);
IkReal x3537=(sj5*x3529);
evalcond[0]=(((r21*x3536))+(((-1.0)*x3533*x3534))+((r22*x3529)));
evalcond[1]=(((r21*x3537))+(((-1.0)*x3533*x3535))+(((-1.0)*r22*x3534)));
evalcond[2]=(((r11*x3537))+cj0+(((-1.0)*r12*x3534))+(((-1.0)*x3532*x3535)));
evalcond[3]=(((r02*x3529))+(((-1.0)*x3531*x3534))+((r01*x3536))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3536))+((r12*x3529))+(((-1.0)*x3530))+(((-1.0)*x3532*x3534)));
evalcond[5]=((((-1.0)*r02*x3534))+(((-1.0)*x3531*x3535))+((r01*x3537))+(((-1.0)*x3530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3538=(cj5*r01);
IkReal x3539=(sj1*sj2);
IkReal x3540=(cj1*cj2);
IkReal x3541=((1000.0)*px);
IkReal x3542=(r00*sj5);
IkReal x3543=((425.0)*cj1);
CheckValue<IkReal> x3544=IKPowWithIntegerCheck(((((133.0)*x3539))+(((-133.0)*x3540))),-1);
if(!x3544.valid){
continue;
}
CheckValue<IkReal> x3545=IKPowWithIntegerCheck((x3539+(((-1.0)*x3540))),-1);
if(!x3545.valid){
continue;
}
if( IKabs(((x3544.value)*(((((-1.0)*x3539*x3541))+((x3542*x3543))+((x3538*x3543))+((x3540*x3541))+(((-491.0)*x3538*x3539))+(((491.0)*x3538*x3540))+(((491.0)*x3540*x3542))+(((-491.0)*x3539*x3542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3545.value)*((x3538+x3542)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3544.value)*(((((-1.0)*x3539*x3541))+((x3542*x3543))+((x3538*x3543))+((x3540*x3541))+(((-491.0)*x3538*x3539))+(((491.0)*x3538*x3540))+(((491.0)*x3540*x3542))+(((-491.0)*x3539*x3542))))))+IKsqr(((x3545.value)*((x3538+x3542))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3544.value)*(((((-1.0)*x3539*x3541))+((x3542*x3543))+((x3538*x3543))+((x3540*x3541))+(((-491.0)*x3538*x3539))+(((491.0)*x3538*x3540))+(((491.0)*x3540*x3542))+(((-491.0)*x3539*x3542))))), ((x3545.value)*((x3538+x3542))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3546=IKcos(j0);
IkReal x3547=IKsin(j0);
IkReal x3548=(r00*sj5);
IkReal x3549=(sj1*sj2);
IkReal x3550=((1.0)*cj5);
IkReal x3551=(cj1*cj2);
IkReal x3552=(r10*sj5);
IkReal x3553=((0.425)*cj1);
IkReal x3554=((0.099)*cj5);
IkReal x3555=((0.392)*x3547);
IkReal x3556=((0.392)*x3546);
evalcond[0]=((((-1.0)*x3546*x3551))+(((-1.0)*r01*x3550))+((x3546*x3549))+(((-1.0)*x3548)));
evalcond[1]=((((-1.0)*x3547*x3551))+((x3547*x3549))+(((-1.0)*r11*x3550))+(((-1.0)*x3552)));
evalcond[2]=((((-1.0)*r01*x3554))+((x3546*x3553))+(((-1.0)*px))+(((-0.099)*x3548))+((x3551*x3556))+(((-0.133)*x3547))+(((-1.0)*x3549*x3556)));
evalcond[3]=(((x3547*x3553))+(((-1.0)*py))+(((-1.0)*r11*x3554))+((x3551*x3555))+(((-0.099)*x3552))+(((0.133)*x3546))+(((-1.0)*x3549*x3555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3557=((1.0)*cj5);
IkReal x3558=((((-1.0)*r01*x3557))+(((-1.0)*r00*sj5)));
j4eval[0]=x3558;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3557)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3559=((1.0)*cj5);
IkReal x3560=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3559)));
j4eval[0]=x3560;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3559))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3561=((1.0)*sj0);
IkReal x3562=((1.0)*cj0);
IkReal x3563=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3563;
j4eval[1]=((IKabs(((((-1.0)*r02*x3562))+(((-1.0)*r12*x3561)))))+(IKabs(((((-1.0)*r01*sj5*x3562))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3561))))));
j4eval[2]=IKsign(x3563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3564=((-1.0)*r20);
IkReal x3566 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3566)==0){
continue;
}
IkReal x3565=pow(x3566,-0.5);
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3564),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3567.value));
IkReal gconst97=(r21*x3565);
IkReal gconst98=(x3564*x3565);
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3568.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3569=((-1.0)*r20);
IkReal x3570=x3565;
CheckValue<IkReal> x3572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3569),IKFAST_ATAN2_MAGTHRESH);
if(!x3572.valid){
continue;
}
IkReal x3571=((-1.0)*(x3572.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3571;
IkReal gconst96=x3571;
IkReal gconst97=(r21*x3570);
IkReal gconst98=(x3569*x3570);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3573=((-1.0)*r20);
IkReal x3574=x3565;
CheckValue<IkReal> x3576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3573),IKFAST_ATAN2_MAGTHRESH);
if(!x3576.valid){
continue;
}
IkReal x3575=((-1.0)*(x3576.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3575;
IkReal gconst96=x3575;
IkReal gconst97=(r21*x3574);
IkReal gconst98=(x3573*x3574);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3577=((-1.0)*r20);
IkReal x3578=x3565;
CheckValue<IkReal> x3580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3577),IKFAST_ATAN2_MAGTHRESH);
if(!x3580.valid){
continue;
}
IkReal x3579=((-1.0)*(x3580.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3579;
IkReal gconst96=x3579;
IkReal gconst97=(r21*x3578);
IkReal gconst98=(x3577*x3578);
IkReal x3581=((1.0)*(r22*r22));
CheckValue<IkReal> x3585=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3581))),-1);
if(!x3585.valid){
continue;
}
IkReal x3582=x3585.value;
IkReal x3583=((1.0)*x3582);
IkReal x3584=((((-1.0)*x3583*(r21*r21*r21*r21)))+(((-2.0)*x3582*(r20*r20)*(r21*r21)))+(((-1.0)*x3583*(r20*r20*r20*r20)))+(((-1.0)*x3581)));
j4eval[0]=x3584;
j4eval[1]=IKsign(x3584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3586=(cj1*cj2);
IkReal x3587=(gconst98*r20);
IkReal x3588=(sj1*sj2);
IkReal x3589=(gconst97*r21);
CheckValue<IkReal> x3590 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3586))+((r22*x3588)))),IkReal((((x3586*x3587))+(((-1.0)*x3586*x3589))+((x3588*x3589))+(((-1.0)*x3587*x3588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3590.valid){
continue;
}
CheckValue<IkReal> x3591=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3589*x3589)))+(((-1.0)*(x3587*x3587)))+(((-1.0)*(r22*r22)))+(((2.0)*x3587*x3589)))),-1);
if(!x3591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3590.value)+(((1.5707963267949)*(x3591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3592=IKsin(j4);
IkReal x3593=IKcos(j4);
IkReal x3594=(gconst98*r10);
IkReal x3595=(gconst97*r21);
IkReal x3596=(gconst98*r20);
IkReal x3597=((1.0)*cj2);
IkReal x3598=((1.0)*sj0);
IkReal x3599=(gconst98*r00);
IkReal x3600=(cj1*sj2);
IkReal x3601=((1.0)*x3593);
IkReal x3602=((1.0)*x3592);
IkReal x3603=(gconst97*x3592);
IkReal x3604=(gconst97*x3593);
evalcond[0]=(((x3592*x3595))+(((-1.0)*r22*x3601))+(((-1.0)*x3596*x3602)));
evalcond[1]=(((r11*x3603))+cj0+(((-1.0)*x3594*x3602))+(((-1.0)*r12*x3601)));
evalcond[2]=((((-1.0)*r02*x3601))+((r01*x3603))+(((-1.0)*x3599*x3602))+(((-1.0)*x3598)));
evalcond[3]=((((-1.0)*cj1*x3597))+((sj1*sj2))+((x3593*x3595))+((r22*x3592))+(((-1.0)*x3596*x3601)));
evalcond[4]=(((r02*x3592))+((r01*x3604))+(((-1.0)*cj0*x3600))+(((-1.0)*x3599*x3601))+(((-1.0)*cj0*sj1*x3597)));
evalcond[5]=(((r11*x3604))+(((-1.0)*x3594*x3601))+(((-1.0)*x3598*x3600))+((r12*x3592))+(((-1.0)*sj0*sj1*x3597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3605=((1.0)*gconst98);
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
CheckValue<IkReal> x3607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3605))+(((-1.0)*gconst97*r10)))),-1);
if(!x3607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3606.value)+(((1.5707963267949)*(x3607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3608=IKsin(j4);
IkReal x3609=IKcos(j4);
IkReal x3610=(gconst98*r10);
IkReal x3611=(gconst97*r21);
IkReal x3612=(gconst98*r20);
IkReal x3613=((1.0)*cj2);
IkReal x3614=((1.0)*sj0);
IkReal x3615=(gconst98*r00);
IkReal x3616=(cj1*sj2);
IkReal x3617=((1.0)*x3609);
IkReal x3618=((1.0)*x3608);
IkReal x3619=(gconst97*x3608);
IkReal x3620=(gconst97*x3609);
evalcond[0]=(((x3608*x3611))+(((-1.0)*x3612*x3618))+(((-1.0)*r22*x3617)));
evalcond[1]=(((r11*x3619))+cj0+(((-1.0)*r12*x3617))+(((-1.0)*x3610*x3618)));
evalcond[2]=((((-1.0)*r02*x3617))+(((-1.0)*x3615*x3618))+((r01*x3619))+(((-1.0)*x3614)));
evalcond[3]=(((x3609*x3611))+(((-1.0)*x3612*x3617))+((r22*x3608))+((sj1*sj2))+(((-1.0)*cj1*x3613)));
evalcond[4]=(((r02*x3608))+((r01*x3620))+(((-1.0)*x3615*x3617))+(((-1.0)*cj0*sj1*x3613))+(((-1.0)*cj0*x3616)));
evalcond[5]=((((-1.0)*x3614*x3616))+((r11*x3620))+(((-1.0)*x3610*x3617))+(((-1.0)*sj0*sj1*x3613))+((r12*x3608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3621=((1.0)*gconst98);
CheckValue<IkReal> x3622 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3621))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3622.valid){
continue;
}
CheckValue<IkReal> x3623=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3621))+(((-1.0)*gconst97*r00)))),-1);
if(!x3623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3622.value)+(((1.5707963267949)*(x3623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3624=IKsin(j4);
IkReal x3625=IKcos(j4);
IkReal x3626=(gconst98*r10);
IkReal x3627=(gconst97*r21);
IkReal x3628=(gconst98*r20);
IkReal x3629=((1.0)*cj2);
IkReal x3630=((1.0)*sj0);
IkReal x3631=(gconst98*r00);
IkReal x3632=(cj1*sj2);
IkReal x3633=((1.0)*x3625);
IkReal x3634=((1.0)*x3624);
IkReal x3635=(gconst97*x3624);
IkReal x3636=(gconst97*x3625);
evalcond[0]=((((-1.0)*x3628*x3634))+(((-1.0)*r22*x3633))+((x3624*x3627)));
evalcond[1]=(((r11*x3635))+cj0+(((-1.0)*r12*x3633))+(((-1.0)*x3626*x3634)));
evalcond[2]=((((-1.0)*x3631*x3634))+(((-1.0)*x3630))+(((-1.0)*r02*x3633))+((r01*x3635)));
evalcond[3]=((((-1.0)*x3628*x3633))+((sj1*sj2))+((x3625*x3627))+(((-1.0)*cj1*x3629))+((r22*x3624)));
evalcond[4]=((((-1.0)*x3631*x3633))+((r02*x3624))+((r01*x3636))+(((-1.0)*cj0*x3632))+(((-1.0)*cj0*sj1*x3629)));
evalcond[5]=(((r11*x3636))+(((-1.0)*x3630*x3632))+((r12*x3624))+(((-1.0)*x3626*x3633))+(((-1.0)*sj0*sj1*x3629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3637=((-1.0)*r21);
IkReal x3639 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3639)==0){
continue;
}
IkReal x3638=pow(x3639,-0.5);
CheckValue<IkReal> x3640 = IKatan2WithCheck(IkReal(x3637),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3640.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3640.value))));
IkReal gconst100=(x3637*x3638);
IkReal gconst101=((1.0)*r20*x3638);
CheckValue<IkReal> x3641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3641.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3641.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3642=((-1.0)*r21);
CheckValue<IkReal> x3645 = IKatan2WithCheck(IkReal(x3642),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3645.valid){
continue;
}
IkReal x3643=((1.0)*(x3645.value));
IkReal x3644=x3638;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3643)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3643)));
IkReal gconst100=(x3642*x3644);
IkReal gconst101=((1.0)*r20*x3644);
IkReal x3646=r22*r22;
IkReal x3647=((1.0)*x3646);
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(((-1.0)+x3646),-1);
if(!x3651.valid){
continue;
}
IkReal x3648=x3651.value;
if((((1.0)+(((-1.0)*x3647)))) < -0.00001)
continue;
IkReal x3649=IKsqrt(((1.0)+(((-1.0)*x3647))));
IkReal x3650=(cj0*x3648*x3649);
j4eval[0]=((IKabs((x3650+(((-1.0)*x3647*x3650)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3652=((-1.0)*r21);
CheckValue<IkReal> x3655 = IKatan2WithCheck(IkReal(x3652),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3655.valid){
continue;
}
IkReal x3653=((1.0)*(x3655.value));
IkReal x3654=x3638;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3653)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3653)));
IkReal gconst100=(x3652*x3654);
IkReal gconst101=((1.0)*r20*x3654);
IkReal x3656=r22*r22;
IkReal x3657=((1.0)*x3656);
CheckValue<IkReal> x3661=IKPowWithIntegerCheck(((-1.0)+x3656),-1);
if(!x3661.valid){
continue;
}
IkReal x3658=x3661.value;
if((((1.0)+(((-1.0)*x3657)))) < -0.00001)
continue;
IkReal x3659=IKsqrt(((1.0)+(((-1.0)*x3657))));
IkReal x3660=(sj0*x3658*x3659);
j4eval[0]=((IKabs((x3660+(((-1.0)*x3657*x3660)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3662=((-1.0)*r21);
CheckValue<IkReal> x3665 = IKatan2WithCheck(IkReal(x3662),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3665.valid){
continue;
}
IkReal x3663=((1.0)*(x3665.value));
IkReal x3664=x3638;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3663)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3663)));
IkReal gconst100=(x3662*x3664);
IkReal gconst101=((1.0)*r20*x3664);
IkReal x3666=r22*r22;
IkReal x3667=(r12*sj0);
IkReal x3668=(cj0*r02);
CheckValue<IkReal> x3672=IKPowWithIntegerCheck(((-1.0)+x3666),-1);
if(!x3672.valid){
continue;
}
IkReal x3669=x3672.value;
if((((1.0)+(((-1.0)*x3666)))) < -0.00001)
continue;
IkReal x3670=IKsqrt(((1.0)+(((-1.0)*x3666))));
IkReal x3671=(r22*x3669*x3670);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3667*x3671))+((x3668*x3671)))))+(IKabs(((((-1.0)*x3667))+(((-1.0)*x3668))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3673=((1.0)*sj0);
IkReal x3674=((1.0)*gconst100);
CheckValue<IkReal> x3675 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3673))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3673))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x3674))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3675.valid){
continue;
}
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3674))+(((-1.0)*gconst101*r21)))),-1);
if(!x3676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3675.value)+(((1.5707963267949)*(x3676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3677=IKsin(j4);
IkReal x3678=IKcos(j4);
IkReal x3679=(gconst101*r20);
IkReal x3680=(gconst101*r10);
IkReal x3681=((1.0)*cj2);
IkReal x3682=(gconst101*r00);
IkReal x3683=((1.0)*sj0);
IkReal x3684=(cj1*sj2);
IkReal x3685=((1.0)*x3678);
IkReal x3686=((1.0)*x3677);
IkReal x3687=(gconst100*x3677);
IkReal x3688=(gconst100*x3678);
evalcond[0]=((((-1.0)*r22*x3685))+((r21*x3687))+(((-1.0)*x3679*x3686)));
evalcond[1]=(cj0+(((-1.0)*x3680*x3686))+(((-1.0)*r12*x3685))+((r11*x3687)));
evalcond[2]=(((r01*x3687))+(((-1.0)*x3683))+(((-1.0)*x3682*x3686))+(((-1.0)*r02*x3685)));
evalcond[3]=(((r21*x3688))+((sj1*sj2))+(((-1.0)*cj1*x3681))+(((-1.0)*x3679*x3685))+((r22*x3677)));
evalcond[4]=(((r01*x3688))+(((-1.0)*cj0*x3684))+(((-1.0)*x3682*x3685))+((r02*x3677))+(((-1.0)*cj0*sj1*x3681)));
evalcond[5]=((((-1.0)*sj0*sj1*x3681))+((r12*x3677))+(((-1.0)*x3683*x3684))+(((-1.0)*x3680*x3685))+((r11*x3688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3689=((1.0)*gconst101);
CheckValue<IkReal> x3690 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3689))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3690.valid){
continue;
}
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3689)))),-1);
if(!x3691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3690.value)+(((1.5707963267949)*(x3691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3692=IKsin(j4);
IkReal x3693=IKcos(j4);
IkReal x3694=(gconst101*r20);
IkReal x3695=(gconst101*r10);
IkReal x3696=((1.0)*cj2);
IkReal x3697=(gconst101*r00);
IkReal x3698=((1.0)*sj0);
IkReal x3699=(cj1*sj2);
IkReal x3700=((1.0)*x3693);
IkReal x3701=((1.0)*x3692);
IkReal x3702=(gconst100*x3692);
IkReal x3703=(gconst100*x3693);
evalcond[0]=((((-1.0)*x3694*x3701))+((r21*x3702))+(((-1.0)*r22*x3700)));
evalcond[1]=(cj0+((r11*x3702))+(((-1.0)*r12*x3700))+(((-1.0)*x3695*x3701)));
evalcond[2]=((((-1.0)*x3697*x3701))+(((-1.0)*r02*x3700))+((r01*x3702))+(((-1.0)*x3698)));
evalcond[3]=((((-1.0)*cj1*x3696))+(((-1.0)*x3694*x3700))+((sj1*sj2))+((r21*x3703))+((r22*x3692)));
evalcond[4]=((((-1.0)*cj0*x3699))+(((-1.0)*x3697*x3700))+((r01*x3703))+((r02*x3692))+(((-1.0)*cj0*sj1*x3696)));
evalcond[5]=(((r11*x3703))+(((-1.0)*x3698*x3699))+(((-1.0)*sj0*sj1*x3696))+(((-1.0)*x3695*x3700))+((r12*x3692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3704=((1.0)*gconst101);
CheckValue<IkReal> x3705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3704))+(((-1.0)*gconst100*r00)))),-1);
if(!x3705.valid){
continue;
}
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3705.value)))+(x3706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3707=IKsin(j4);
IkReal x3708=IKcos(j4);
IkReal x3709=(gconst101*r20);
IkReal x3710=(gconst101*r10);
IkReal x3711=((1.0)*cj2);
IkReal x3712=(gconst101*r00);
IkReal x3713=((1.0)*sj0);
IkReal x3714=(cj1*sj2);
IkReal x3715=((1.0)*x3708);
IkReal x3716=((1.0)*x3707);
IkReal x3717=(gconst100*x3707);
IkReal x3718=(gconst100*x3708);
evalcond[0]=(((r21*x3717))+(((-1.0)*x3709*x3716))+(((-1.0)*r22*x3715)));
evalcond[1]=(((r11*x3717))+cj0+(((-1.0)*x3710*x3716))+(((-1.0)*r12*x3715)));
evalcond[2]=((((-1.0)*r02*x3715))+(((-1.0)*x3713))+((r01*x3717))+(((-1.0)*x3712*x3716)));
evalcond[3]=((((-1.0)*cj1*x3711))+((sj1*sj2))+((r21*x3718))+(((-1.0)*x3709*x3715))+((r22*x3707)));
evalcond[4]=((((-1.0)*cj0*x3714))+((r01*x3718))+(((-1.0)*x3712*x3715))+((r02*x3707))+(((-1.0)*cj0*sj1*x3711)));
evalcond[5]=(((r11*x3718))+((r12*x3707))+(((-1.0)*x3713*x3714))+(((-1.0)*x3710*x3715))+(((-1.0)*sj0*sj1*x3711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3719=((-1.0)*r10);
IkReal x3721 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3721)==0){
continue;
}
IkReal x3720=pow(x3721,-0.5);
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3719),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3722.value));
IkReal gconst103=(r11*x3720);
IkReal gconst104=(x3719*x3720);
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3723.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3724=((-1.0)*r10);
IkReal x3725=x3720;
CheckValue<IkReal> x3727 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3724),IKFAST_ATAN2_MAGTHRESH);
if(!x3727.valid){
continue;
}
IkReal x3726=((-1.0)*(x3727.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3726;
IkReal gconst102=x3726;
IkReal gconst103=(r11*x3725);
IkReal gconst104=(x3724*x3725);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3728=((1.0)*sj0);
IkReal x3729=((1.0)*gconst103);
CheckValue<IkReal> x3730 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3728))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3729))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3728))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3730.valid){
continue;
}
CheckValue<IkReal> x3731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3729)))),-1);
if(!x3731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3730.value)+(((1.5707963267949)*(x3731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3732=IKsin(j4);
IkReal x3733=IKcos(j4);
IkReal x3734=(gconst103*r11);
IkReal x3735=((1.0)*cj2);
IkReal x3736=((1.0)*sj0);
IkReal x3737=(cj1*sj2);
IkReal x3738=((1.0)*x3733);
IkReal x3739=(gconst103*x3733);
IkReal x3740=(gconst103*x3732);
IkReal x3741=((1.0)*gconst104*x3732);
evalcond[0]=((((-1.0)*r20*x3741))+((r21*x3740))+(((-1.0)*r22*x3738)));
evalcond[1]=(cj0+(((-1.0)*r12*x3738))+((x3732*x3734))+(((-1.0)*r10*x3741)));
evalcond[2]=(((r01*x3740))+(((-1.0)*x3736))+(((-1.0)*r00*x3741))+(((-1.0)*r02*x3738)));
evalcond[3]=((((-1.0)*cj1*x3735))+((sj1*sj2))+((r22*x3732))+(((-1.0)*gconst104*r20*x3738))+((r21*x3739)));
evalcond[4]=((((-1.0)*gconst104*r00*x3738))+((r01*x3739))+(((-1.0)*cj0*x3737))+((r02*x3732))+(((-1.0)*cj0*sj1*x3735)));
evalcond[5]=((((-1.0)*sj0*sj1*x3735))+((x3733*x3734))+(((-1.0)*x3736*x3737))+((r12*x3732))+(((-1.0)*gconst104*r10*x3738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3742=((1.0)*gconst104);
CheckValue<IkReal> x3743 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3742))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3743.valid){
continue;
}
CheckValue<IkReal> x3744=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3742)))),-1);
if(!x3744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3743.value)+(((1.5707963267949)*(x3744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3745=IKsin(j4);
IkReal x3746=IKcos(j4);
IkReal x3747=(gconst103*r11);
IkReal x3748=((1.0)*cj2);
IkReal x3749=((1.0)*sj0);
IkReal x3750=(cj1*sj2);
IkReal x3751=((1.0)*x3746);
IkReal x3752=(gconst103*x3746);
IkReal x3753=(gconst103*x3745);
IkReal x3754=((1.0)*gconst104*x3745);
evalcond[0]=((((-1.0)*r22*x3751))+(((-1.0)*r20*x3754))+((r21*x3753)));
evalcond[1]=(cj0+(((-1.0)*r12*x3751))+(((-1.0)*r10*x3754))+((x3745*x3747)));
evalcond[2]=(((r01*x3753))+(((-1.0)*r00*x3754))+(((-1.0)*x3749))+(((-1.0)*r02*x3751)));
evalcond[3]=((((-1.0)*gconst104*r20*x3751))+((sj1*sj2))+((r22*x3745))+((r21*x3752))+(((-1.0)*cj1*x3748)));
evalcond[4]=((((-1.0)*gconst104*r00*x3751))+((r01*x3752))+(((-1.0)*cj0*x3750))+((r02*x3745))+(((-1.0)*cj0*sj1*x3748)));
evalcond[5]=((((-1.0)*x3749*x3750))+(((-1.0)*sj0*sj1*x3748))+((r12*x3745))+((x3746*x3747))+(((-1.0)*gconst104*r10*x3751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3755=((-1.0)*r11);
IkReal x3757 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3757)==0){
continue;
}
IkReal x3756=pow(x3757,-0.5);
CheckValue<IkReal> x3758 = IKatan2WithCheck(IkReal(x3755),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3758.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3758.value))));
IkReal gconst106=(x3755*x3756);
IkReal gconst107=((1.0)*r10*x3756);
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3759.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3760=((-1.0)*r11);
CheckValue<IkReal> x3763 = IKatan2WithCheck(IkReal(x3760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3763.valid){
continue;
}
IkReal x3761=((1.0)*(x3763.value));
IkReal x3762=x3756;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3761)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3761)));
IkReal gconst106=(x3760*x3762);
IkReal gconst107=((1.0)*r10*x3762);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3764=((-1.0)*r11);
CheckValue<IkReal> x3767 = IKatan2WithCheck(IkReal(x3764),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3767.valid){
continue;
}
IkReal x3765=((1.0)*(x3767.value));
IkReal x3766=x3756;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3765)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3765)));
IkReal gconst106=(x3764*x3766);
IkReal gconst107=((1.0)*r10*x3766);
IkReal x3768=r12*r12;
IkReal x3769=((1.0)*sj0);
IkReal x3770=(cj0*r02);
IkReal x3771=x3756;
j4eval[0]=((IKabs((((sj0*x3768*x3771))+(((-1.0)*x3769*x3771))+((r12*x3770*x3771)))))+(IKabs(((((-1.0)*x3770))+(((-1.0)*r12*x3769))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3772=((-1.0)*r11);
CheckValue<IkReal> x3775 = IKatan2WithCheck(IkReal(x3772),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3775.valid){
continue;
}
IkReal x3773=((1.0)*(x3775.value));
IkReal x3774=x3756;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3773)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3773)));
IkReal gconst106=(x3772*x3774);
IkReal gconst107=((1.0)*r10*x3774);
IkReal x3776=r12*r12;
IkReal x3777=((1.0)+(((-1.0)*x3776)));
IkReal x3778=(r22*sj1*sj2);
IkReal x3779=(cj1*cj2*r22);
CheckValue<IkReal> x3786=IKPowWithIntegerCheck(x3777,-1);
if(!x3786.valid){
continue;
}
IkReal x3780=x3786.value;
CheckValue<IkReal> x3787=IKPowWithIntegerCheck(((-1.0)+x3776),-1);
if(!x3787.valid){
continue;
}
IkReal x3781=x3787.value;
IkReal x3782=((1.0)*x3780);
if((x3777) < -0.00001)
continue;
IkReal x3783=IKsqrt(x3777);
IkReal x3784=(r12*x3781*x3783);
IkReal x3785=((((-1.0)*(r22*r22)))+(((-1.0)*x3782*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x3780))+(((-1.0)*x3782*(r10*r10)*(r20*r20))));
j4eval[0]=x3785;
j4eval[1]=((IKabs((((x3779*x3784))+(((-1.0)*x3778*x3784)))))+(IKabs(((((-1.0)*x3779))+x3778))));
j4eval[2]=IKsign(x3785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3788=(sj1*sj2);
IkReal x3789=(gconst106*r21);
IkReal x3790=(gconst107*r20);
IkReal x3791=(cj1*cj2);
CheckValue<IkReal> x3792=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3789*x3789)))+(((-1.0)*(x3790*x3790)))+(((-1.0)*(r22*r22)))+(((2.0)*x3789*x3790)))),-1);
if(!x3792.valid){
continue;
}
CheckValue<IkReal> x3793 = IKatan2WithCheck(IkReal((((r22*x3788))+(((-1.0)*r22*x3791)))),IkReal((((x3788*x3789))+((x3790*x3791))+(((-1.0)*x3788*x3790))+(((-1.0)*x3789*x3791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3792.value)))+(x3793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3794=IKsin(j4);
IkReal x3795=IKcos(j4);
IkReal x3796=(gconst107*r10);
IkReal x3797=(gconst107*r00);
IkReal x3798=((1.0)*cj2);
IkReal x3799=(gconst107*r20);
IkReal x3800=((1.0)*sj0);
IkReal x3801=(cj1*sj2);
IkReal x3802=((1.0)*x3795);
IkReal x3803=(gconst106*x3795);
IkReal x3804=(gconst106*x3794);
IkReal x3805=((1.0)*x3794);
evalcond[0]=(((r21*x3804))+(((-1.0)*x3799*x3805))+(((-1.0)*r22*x3802)));
evalcond[1]=(((r11*x3804))+cj0+(((-1.0)*x3796*x3805))+(((-1.0)*r12*x3802)));
evalcond[2]=(((r01*x3804))+(((-1.0)*x3800))+(((-1.0)*r02*x3802))+(((-1.0)*x3797*x3805)));
evalcond[3]=(((r22*x3794))+((r21*x3803))+((sj1*sj2))+(((-1.0)*x3799*x3802))+(((-1.0)*cj1*x3798)));
evalcond[4]=(((r01*x3803))+((r02*x3794))+(((-1.0)*cj0*sj1*x3798))+(((-1.0)*x3797*x3802))+(((-1.0)*cj0*x3801)));
evalcond[5]=((((-1.0)*sj0*sj1*x3798))+((r11*x3803))+(((-1.0)*x3796*x3802))+(((-1.0)*x3800*x3801))+((r12*x3794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3806=((1.0)*sj0);
IkReal x3807=((1.0)*gconst106);
CheckValue<IkReal> x3808 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3806)))),IkReal(((((-1.0)*gconst106*r11*x3806))+(((-1.0)*cj0*r01*x3807))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3807)))),-1);
if(!x3809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3808.value)+(((1.5707963267949)*(x3809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3810=IKsin(j4);
IkReal x3811=IKcos(j4);
IkReal x3812=(gconst107*r10);
IkReal x3813=(gconst107*r00);
IkReal x3814=((1.0)*cj2);
IkReal x3815=(gconst107*r20);
IkReal x3816=((1.0)*sj0);
IkReal x3817=(cj1*sj2);
IkReal x3818=((1.0)*x3811);
IkReal x3819=(gconst106*x3811);
IkReal x3820=(gconst106*x3810);
IkReal x3821=((1.0)*x3810);
evalcond[0]=((((-1.0)*r22*x3818))+(((-1.0)*x3815*x3821))+((r21*x3820)));
evalcond[1]=((((-1.0)*r12*x3818))+cj0+((r11*x3820))+(((-1.0)*x3812*x3821)));
evalcond[2]=((((-1.0)*r02*x3818))+(((-1.0)*x3816))+(((-1.0)*x3813*x3821))+((r01*x3820)));
evalcond[3]=(((r21*x3819))+(((-1.0)*x3815*x3818))+(((-1.0)*cj1*x3814))+((sj1*sj2))+((r22*x3810)));
evalcond[4]=((((-1.0)*cj0*x3817))+(((-1.0)*x3813*x3818))+((r02*x3810))+(((-1.0)*cj0*sj1*x3814))+((r01*x3819)));
evalcond[5]=(((r12*x3810))+(((-1.0)*sj0*sj1*x3814))+((r11*x3819))+(((-1.0)*x3812*x3818))+(((-1.0)*x3816*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3822=((1.0)*gconst107);
CheckValue<IkReal> x3823 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3823.valid){
continue;
}
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3822)))),-1);
if(!x3824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3823.value)+(((1.5707963267949)*(x3824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3825=IKsin(j4);
IkReal x3826=IKcos(j4);
IkReal x3827=(gconst107*r10);
IkReal x3828=(gconst107*r00);
IkReal x3829=((1.0)*cj2);
IkReal x3830=(gconst107*r20);
IkReal x3831=((1.0)*sj0);
IkReal x3832=(cj1*sj2);
IkReal x3833=((1.0)*x3826);
IkReal x3834=(gconst106*x3826);
IkReal x3835=(gconst106*x3825);
IkReal x3836=((1.0)*x3825);
evalcond[0]=((((-1.0)*x3830*x3836))+((r21*x3835))+(((-1.0)*r22*x3833)));
evalcond[1]=(cj0+(((-1.0)*r12*x3833))+((r11*x3835))+(((-1.0)*x3827*x3836)));
evalcond[2]=((((-1.0)*x3828*x3836))+((r01*x3835))+(((-1.0)*r02*x3833))+(((-1.0)*x3831)));
evalcond[3]=((((-1.0)*x3830*x3833))+((sj1*sj2))+(((-1.0)*cj1*x3829))+((r22*x3825))+((r21*x3834)));
evalcond[4]=((((-1.0)*x3828*x3833))+((r01*x3834))+((r02*x3825))+(((-1.0)*cj0*x3832))+(((-1.0)*cj0*sj1*x3829)));
evalcond[5]=(((r12*x3825))+(((-1.0)*x3831*x3832))+(((-1.0)*sj0*sj1*x3829))+((r11*x3834))+(((-1.0)*x3827*x3833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3837=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3837;
j4eval[1]=IKsign(x3837);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3838=((1.0)*cj5);
IkReal x3839=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3838)));
j4eval[0]=x3839;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3838))+((r21*sj5))))));
j4eval[2]=IKsign(x3839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3840=(sj1*sj2);
IkReal x3841=(cj5*r10);
IkReal x3842=(r11*sj5);
IkReal x3843=(cj1*cj2);
IkReal x3844=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3844;
j4eval[1]=((IKabs((((x3841*x3843))+(((-1.0)*x3840*x3841))+((x3840*x3842))+(((-1.0)*x3842*x3843)))))+(IKabs((((r12*x3843))+(((-1.0)*r12*x3840))))));
j4eval[2]=IKsign(x3844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3845=(sj1*sj2);
IkReal x3846=(cj5*r10);
IkReal x3847=(r11*sj5);
IkReal x3848=(cj1*cj2);
CheckValue<IkReal> x3849 = IKatan2WithCheck(IkReal((((x3846*x3848))+(((-1.0)*x3847*x3848))+((x3845*x3847))+(((-1.0)*x3845*x3846)))),IkReal((((r12*x3848))+(((-1.0)*r12*x3845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3849.valid){
continue;
}
CheckValue<IkReal> x3850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3849.value)+(((1.5707963267949)*(x3850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3851=IKcos(j4);
IkReal x3852=IKsin(j4);
IkReal x3853=(cj5*r00);
IkReal x3854=(cj5*r10);
IkReal x3855=(r21*sj5);
IkReal x3856=((1.0)*cj2);
IkReal x3857=(cj5*r20);
IkReal x3858=((1.0)*x3851);
IkReal x3859=((1.0)*x3852);
IkReal x3860=(sj5*x3852);
IkReal x3861=(sj5*x3851);
evalcond[0]=(((r11*x3861))+(((-1.0)*x3854*x3858))+((r12*x3852)));
evalcond[1]=(((x3852*x3855))+(((-1.0)*x3857*x3859))+(((-1.0)*r22*x3858)));
evalcond[2]=(((r01*x3860))+(((-1.0)*x3853*x3859))+(((-1.0)*r02*x3858)));
evalcond[3]=((1.0)+((r11*x3860))+(((-1.0)*x3854*x3859))+(((-1.0)*r12*x3858)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x3857*x3858))+(((-1.0)*cj1*x3856))+((x3851*x3855))+((r22*x3852)));
evalcond[5]=(((r02*x3852))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3856))+((r01*x3861))+(((-1.0)*x3853*x3858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3862=((1.0)*cj5);
CheckValue<IkReal> x3863 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3862))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3863.valid){
continue;
}
CheckValue<IkReal> x3864=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3862)))),-1);
if(!x3864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3863.value)+(((1.5707963267949)*(x3864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3865=IKcos(j4);
IkReal x3866=IKsin(j4);
IkReal x3867=(cj5*r00);
IkReal x3868=(cj5*r10);
IkReal x3869=(r21*sj5);
IkReal x3870=((1.0)*cj2);
IkReal x3871=(cj5*r20);
IkReal x3872=((1.0)*x3865);
IkReal x3873=((1.0)*x3866);
IkReal x3874=(sj5*x3866);
IkReal x3875=(sj5*x3865);
evalcond[0]=((((-1.0)*x3868*x3872))+((r11*x3875))+((r12*x3866)));
evalcond[1]=(((x3866*x3869))+(((-1.0)*x3871*x3873))+(((-1.0)*r22*x3872)));
evalcond[2]=((((-1.0)*x3867*x3873))+((r01*x3874))+(((-1.0)*r02*x3872)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3872))+(((-1.0)*x3868*x3873))+((r11*x3874)));
evalcond[4]=(((x3865*x3869))+((sj1*sj2))+(((-1.0)*x3871*x3872))+(((-1.0)*cj1*x3870))+((r22*x3866)));
evalcond[5]=((((-1.0)*x3867*x3872))+((r02*x3866))+((r01*x3875))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3876.valid){
continue;
}
CheckValue<IkReal> x3877 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3876.value)))+(x3877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3878=IKcos(j4);
IkReal x3879=IKsin(j4);
IkReal x3880=(cj5*r00);
IkReal x3881=(cj5*r10);
IkReal x3882=(r21*sj5);
IkReal x3883=((1.0)*cj2);
IkReal x3884=(cj5*r20);
IkReal x3885=((1.0)*x3878);
IkReal x3886=((1.0)*x3879);
IkReal x3887=(sj5*x3879);
IkReal x3888=(sj5*x3878);
evalcond[0]=(((r11*x3888))+((r12*x3879))+(((-1.0)*x3881*x3885)));
evalcond[1]=((((-1.0)*r22*x3885))+((x3879*x3882))+(((-1.0)*x3884*x3886)));
evalcond[2]=((((-1.0)*r02*x3885))+(((-1.0)*x3880*x3886))+((r01*x3887)));
evalcond[3]=((1.0)+((r11*x3887))+(((-1.0)*r12*x3885))+(((-1.0)*x3881*x3886)));
evalcond[4]=((((-1.0)*cj1*x3883))+((x3878*x3882))+((sj1*sj2))+((r22*x3879))+(((-1.0)*x3884*x3885)));
evalcond[5]=((((-1.0)*sj1*x3883))+(((-1.0)*x3880*x3885))+(((-1.0)*cj1*sj2))+((r01*x3888))+((r02*x3879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3889=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3889;
j4eval[1]=IKsign(x3889);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3890=((1.0)*cj5);
IkReal x3891=((((-1.0)*r21*x3890))+(((-1.0)*r20*sj5)));
j4eval[0]=x3891;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3890))))));
j4eval[2]=IKsign(x3891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3892=cj5*cj5;
IkReal x3893=r11*r11;
IkReal x3894=(r11*sj5);
IkReal x3895=(cj5*r10);
IkReal x3896=((r12*r12)+(((-1.0)*x3892*x3893))+(((-2.0)*x3894*x3895))+((x3892*(r10*r10)))+x3893);
j4eval[0]=x3896;
j4eval[1]=IKsign(x3896);
j4eval[2]=((IKabs(((((-1.0)*x3895))+x3894)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3897=cj5*cj5;
IkReal x3898=r11*r11;
IkReal x3899=(cj5*r10);
IkReal x3900=(r11*sj5);
CheckValue<IkReal> x3901 = IKatan2WithCheck(IkReal(((((-1.0)*x3899))+x3900)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3901.valid){
continue;
}
CheckValue<IkReal> x3902=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3899*x3900))+x3898+((x3897*(r10*r10)))+(((-1.0)*x3897*x3898)))),-1);
if(!x3902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3901.value)+(((1.5707963267949)*(x3902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3903=IKcos(j4);
IkReal x3904=IKsin(j4);
IkReal x3905=(cj5*r00);
IkReal x3906=(cj5*r10);
IkReal x3907=(r21*sj5);
IkReal x3908=(cj5*r20);
IkReal x3909=((1.0)*x3903);
IkReal x3910=((1.0)*x3904);
IkReal x3911=(sj5*x3904);
IkReal x3912=(sj5*x3903);
evalcond[0]=((((-1.0)*x3906*x3909))+((r12*x3904))+((r11*x3912)));
evalcond[1]=((((-1.0)*x3908*x3910))+(((-1.0)*r22*x3909))+((x3904*x3907)));
evalcond[2]=((((-1.0)*x3905*x3910))+((r01*x3911))+(((-1.0)*r02*x3909)));
evalcond[3]=((-1.0)+(((-1.0)*x3906*x3910))+(((-1.0)*r12*x3909))+((r11*x3911)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3905*x3909))+((cj1*sj2))+((r01*x3912))+((r02*x3904)));
evalcond[5]=(((x3903*x3907))+((r22*x3904))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3908*x3909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3913=((1.0)*cj5);
CheckValue<IkReal> x3914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3913))+(((-1.0)*r20*sj5)))),-1);
if(!x3914.valid){
continue;
}
CheckValue<IkReal> x3915 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3914.value)))+(x3915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3916=IKcos(j4);
IkReal x3917=IKsin(j4);
IkReal x3918=(cj5*r00);
IkReal x3919=(cj5*r10);
IkReal x3920=(r21*sj5);
IkReal x3921=(cj5*r20);
IkReal x3922=((1.0)*x3916);
IkReal x3923=((1.0)*x3917);
IkReal x3924=(sj5*x3917);
IkReal x3925=(sj5*x3916);
evalcond[0]=(((r11*x3925))+(((-1.0)*x3919*x3922))+((r12*x3917)));
evalcond[1]=(((x3917*x3920))+(((-1.0)*x3921*x3923))+(((-1.0)*r22*x3922)));
evalcond[2]=((((-1.0)*r02*x3922))+(((-1.0)*x3918*x3923))+((r01*x3924)));
evalcond[3]=((-1.0)+((r11*x3924))+(((-1.0)*r12*x3922))+(((-1.0)*x3919*x3923)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3918*x3922))+((r02*x3917))+((r01*x3925)));
evalcond[5]=(((x3916*x3920))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3921*x3922))+((r22*x3917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3926 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3926.valid){
continue;
}
CheckValue<IkReal> x3927=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3926.value)+(((1.5707963267949)*(x3927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3928=IKcos(j4);
IkReal x3929=IKsin(j4);
IkReal x3930=(cj5*r00);
IkReal x3931=(cj5*r10);
IkReal x3932=(r21*sj5);
IkReal x3933=(cj5*r20);
IkReal x3934=((1.0)*x3928);
IkReal x3935=((1.0)*x3929);
IkReal x3936=(sj5*x3929);
IkReal x3937=(sj5*x3928);
evalcond[0]=(((r12*x3929))+(((-1.0)*x3931*x3934))+((r11*x3937)));
evalcond[1]=((((-1.0)*x3933*x3935))+((x3929*x3932))+(((-1.0)*r22*x3934)));
evalcond[2]=(((r01*x3936))+(((-1.0)*x3930*x3935))+(((-1.0)*r02*x3934)));
evalcond[3]=((-1.0)+(((-1.0)*x3931*x3935))+(((-1.0)*r12*x3934))+((r11*x3936)));
evalcond[4]=(((cj2*sj1))+((r01*x3937))+((cj1*sj2))+((r02*x3929))+(((-1.0)*x3930*x3934)));
evalcond[5]=((((-1.0)*x3933*x3934))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3928*x3932))+((r22*x3929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3938=((-1.0)*r00);
IkReal x3940 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3940)==0){
continue;
}
IkReal x3939=pow(x3940,-0.5);
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3938),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3941.value));
IkReal gconst109=(r01*x3939);
IkReal gconst110=(x3938*x3939);
CheckValue<IkReal> x3942 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3942.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3942.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3943=((-1.0)*r00);
IkReal x3944=x3939;
CheckValue<IkReal> x3946 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3943),IKFAST_ATAN2_MAGTHRESH);
if(!x3946.valid){
continue;
}
IkReal x3945=((-1.0)*(x3946.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3945;
IkReal gconst108=x3945;
IkReal gconst109=(r01*x3944);
IkReal gconst110=(x3943*x3944);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3947=((1.0)*sj0);
IkReal x3948=((1.0)*gconst109);
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3947)))),IkReal(((((-1.0)*cj0*r01*x3948))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
CheckValue<IkReal> x3950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3948))+(((-1.0)*gconst110*r21)))),-1);
if(!x3950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3949.value)+(((1.5707963267949)*(x3950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3951=IKsin(j4);
IkReal x3952=IKcos(j4);
IkReal x3953=(gconst109*r21);
IkReal x3954=((1.0)*cj2);
IkReal x3955=((1.0)*sj0);
IkReal x3956=(cj1*sj2);
IkReal x3957=((1.0)*x3952);
IkReal x3958=(gconst109*x3951);
IkReal x3959=(gconst109*x3952);
IkReal x3960=((1.0)*gconst110*x3951);
evalcond[0]=((((-1.0)*r20*x3960))+(((-1.0)*r22*x3957))+((x3951*x3953)));
evalcond[1]=(cj0+(((-1.0)*r10*x3960))+(((-1.0)*r12*x3957))+((r11*x3958)));
evalcond[2]=(((r01*x3958))+(((-1.0)*x3955))+(((-1.0)*r02*x3957))+(((-1.0)*r00*x3960)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3954))+(((-1.0)*gconst110*r20*x3957))+((x3952*x3953))+((r22*x3951)));
evalcond[4]=((((-1.0)*cj0*sj1*x3954))+((r01*x3959))+(((-1.0)*cj0*x3956))+((r02*x3951))+(((-1.0)*gconst110*r00*x3957)));
evalcond[5]=((((-1.0)*x3955*x3956))+(((-1.0)*sj0*sj1*x3954))+((r11*x3959))+(((-1.0)*gconst110*r10*x3957))+((r12*x3951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3961=((1.0)*gconst110);
CheckValue<IkReal> x3962 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3961))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3962.valid){
continue;
}
CheckValue<IkReal> x3963=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3961)))),-1);
if(!x3963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3962.value)+(((1.5707963267949)*(x3963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3964=IKsin(j4);
IkReal x3965=IKcos(j4);
IkReal x3966=(gconst109*r21);
IkReal x3967=((1.0)*cj2);
IkReal x3968=((1.0)*sj0);
IkReal x3969=(cj1*sj2);
IkReal x3970=((1.0)*x3965);
IkReal x3971=(gconst109*x3964);
IkReal x3972=(gconst109*x3965);
IkReal x3973=((1.0)*gconst110*x3964);
evalcond[0]=((((-1.0)*r20*x3973))+((x3964*x3966))+(((-1.0)*r22*x3970)));
evalcond[1]=((((-1.0)*r12*x3970))+cj0+((r11*x3971))+(((-1.0)*r10*x3973)));
evalcond[2]=((((-1.0)*r02*x3970))+(((-1.0)*x3968))+((r01*x3971))+(((-1.0)*r00*x3973)));
evalcond[3]=((((-1.0)*gconst110*r20*x3970))+((x3965*x3966))+((r22*x3964))+((sj1*sj2))+(((-1.0)*cj1*x3967)));
evalcond[4]=((((-1.0)*cj0*x3969))+(((-1.0)*gconst110*r00*x3970))+((r02*x3964))+(((-1.0)*cj0*sj1*x3967))+((r01*x3972)));
evalcond[5]=((((-1.0)*gconst110*r10*x3970))+((r11*x3972))+(((-1.0)*x3968*x3969))+((r12*x3964))+(((-1.0)*sj0*sj1*x3967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3974=((-1.0)*r01);
IkReal x3976 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3976)==0){
continue;
}
IkReal x3975=pow(x3976,-0.5);
CheckValue<IkReal> x3977 = IKatan2WithCheck(IkReal(x3974),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3977.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3977.value))));
IkReal gconst112=(x3974*x3975);
IkReal gconst113=((1.0)*r00*x3975);
CheckValue<IkReal> x3978 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3978.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3978.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3979=((-1.0)*r01);
CheckValue<IkReal> x3982 = IKatan2WithCheck(IkReal(x3979),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3982.valid){
continue;
}
IkReal x3980=((1.0)*(x3982.value));
IkReal x3981=x3975;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3980)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3980)));
IkReal gconst112=(x3979*x3981);
IkReal gconst113=((1.0)*r00*x3981);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3983=((-1.0)*r01);
CheckValue<IkReal> x3986 = IKatan2WithCheck(IkReal(x3983),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3986.valid){
continue;
}
IkReal x3984=((1.0)*(x3986.value));
IkReal x3985=x3975;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3984)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3984)));
IkReal gconst112=(x3983*x3985);
IkReal gconst113=((1.0)*r00*x3985);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3987=((-1.0)*r01);
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal(x3987),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
IkReal x3988=((1.0)*(x3990.value));
IkReal x3989=x3975;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3988)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3988)));
IkReal gconst112=(x3987*x3989);
IkReal gconst113=((1.0)*r00*x3989);
IkReal x3991=r02*r02;
IkReal x3992=(r12*sj0);
IkReal x3993=((1.0)*cj0);
IkReal x3994=x3975;
j4eval[0]=((IKabs(((((-1.0)*x3993*x3994))+((r02*x3992*x3994))+((cj0*x3991*x3994)))))+(IKabs(((((-1.0)*r02*x3993))+(((-1.0)*x3992))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3995=((1.0)*sj0);
IkReal x3996=((1.0)*gconst112);
CheckValue<IkReal> x3997 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3995))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3996))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3997.valid){
continue;
}
CheckValue<IkReal> x3998=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3996)))),-1);
if(!x3998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3997.value)+(((1.5707963267949)*(x3998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3999=IKsin(j4);
IkReal x4000=IKcos(j4);
IkReal x4001=(gconst113*r20);
IkReal x4002=(gconst112*r21);
IkReal x4003=((1.0)*cj2);
IkReal x4004=(gconst113*r00);
IkReal x4005=(gconst113*r10);
IkReal x4006=((1.0)*sj0);
IkReal x4007=(cj1*sj2);
IkReal x4008=((1.0)*x4000);
IkReal x4009=((1.0)*x3999);
IkReal x4010=(gconst112*x4000);
IkReal x4011=(gconst112*x3999);
evalcond[0]=((((-1.0)*r22*x4008))+(((-1.0)*x4001*x4009))+((x3999*x4002)));
evalcond[1]=(cj0+(((-1.0)*r12*x4008))+(((-1.0)*x4005*x4009))+((r11*x4011)));
evalcond[2]=((((-1.0)*r02*x4008))+(((-1.0)*x4006))+((r01*x4011))+(((-1.0)*x4004*x4009)));
evalcond[3]=(((x4000*x4002))+((sj1*sj2))+(((-1.0)*x4001*x4008))+(((-1.0)*cj1*x4003))+((r22*x3999)));
evalcond[4]=((((-1.0)*cj0*x4007))+((r01*x4010))+((r02*x3999))+(((-1.0)*x4004*x4008))+(((-1.0)*cj0*sj1*x4003)));
evalcond[5]=(((r12*x3999))+(((-1.0)*sj0*sj1*x4003))+(((-1.0)*x4006*x4007))+(((-1.0)*x4005*x4008))+((r11*x4010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4012=((1.0)*gconst113);
CheckValue<IkReal> x4013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4012))+(((-1.0)*gconst112*r10)))),-1);
if(!x4013.valid){
continue;
}
CheckValue<IkReal> x4014 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4013.value)))+(x4014.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4015=IKsin(j4);
IkReal x4016=IKcos(j4);
IkReal x4017=(gconst113*r20);
IkReal x4018=(gconst112*r21);
IkReal x4019=((1.0)*cj2);
IkReal x4020=(gconst113*r00);
IkReal x4021=(gconst113*r10);
IkReal x4022=((1.0)*sj0);
IkReal x4023=(cj1*sj2);
IkReal x4024=((1.0)*x4016);
IkReal x4025=((1.0)*x4015);
IkReal x4026=(gconst112*x4016);
IkReal x4027=(gconst112*x4015);
evalcond[0]=((((-1.0)*r22*x4024))+((x4015*x4018))+(((-1.0)*x4017*x4025)));
evalcond[1]=((((-1.0)*r12*x4024))+cj0+(((-1.0)*x4021*x4025))+((r11*x4027)));
evalcond[2]=((((-1.0)*r02*x4024))+((r01*x4027))+(((-1.0)*x4022))+(((-1.0)*x4020*x4025)));
evalcond[3]=(((x4016*x4018))+(((-1.0)*cj1*x4019))+((sj1*sj2))+((r22*x4015))+(((-1.0)*x4017*x4024)));
evalcond[4]=(((r02*x4015))+(((-1.0)*cj0*x4023))+(((-1.0)*cj0*sj1*x4019))+((r01*x4026))+(((-1.0)*x4020*x4024)));
evalcond[5]=((((-1.0)*sj0*sj1*x4019))+(((-1.0)*x4022*x4023))+((r12*x4015))+(((-1.0)*x4021*x4024))+((r11*x4026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4028=((1.0)*gconst113);
CheckValue<IkReal> x4029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4028))+(((-1.0)*gconst112*r00)))),-1);
if(!x4029.valid){
continue;
}
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4029.value)))+(x4030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4031=IKsin(j4);
IkReal x4032=IKcos(j4);
IkReal x4033=(gconst113*r20);
IkReal x4034=(gconst112*r21);
IkReal x4035=((1.0)*cj2);
IkReal x4036=(gconst113*r00);
IkReal x4037=(gconst113*r10);
IkReal x4038=((1.0)*sj0);
IkReal x4039=(cj1*sj2);
IkReal x4040=((1.0)*x4032);
IkReal x4041=((1.0)*x4031);
IkReal x4042=(gconst112*x4032);
IkReal x4043=(gconst112*x4031);
evalcond[0]=((((-1.0)*x4033*x4041))+((x4031*x4034))+(((-1.0)*r22*x4040)));
evalcond[1]=(cj0+(((-1.0)*r12*x4040))+((r11*x4043))+(((-1.0)*x4037*x4041)));
evalcond[2]=((((-1.0)*x4036*x4041))+(((-1.0)*x4038))+(((-1.0)*r02*x4040))+((r01*x4043)));
evalcond[3]=(((x4032*x4034))+(((-1.0)*cj1*x4035))+((sj1*sj2))+(((-1.0)*x4033*x4040))+((r22*x4031)));
evalcond[4]=((((-1.0)*cj0*x4039))+(((-1.0)*x4036*x4040))+((r02*x4031))+((r01*x4042))+(((-1.0)*cj0*sj1*x4035)));
evalcond[5]=((((-1.0)*x4038*x4039))+((r11*x4042))+(((-1.0)*x4037*x4040))+((r12*x4031))+(((-1.0)*sj0*sj1*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4044=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4044;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4045=((1.0)*cj5);
IkReal x4046=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4045)));
j4eval[0]=x4046;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4045))+((r21*sj5))))));
j4eval[2]=IKsign(x4046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4047=cj5*cj5;
IkReal x4048=r01*r01;
IkReal x4049=(cj5*r00);
IkReal x4050=(r01*sj5);
IkReal x4051=(((x4047*(r00*r00)))+(((-2.0)*x4049*x4050))+(((-1.0)*x4047*x4048))+x4048+(r02*r02));
j4eval[0]=x4051;
j4eval[1]=IKsign(x4051);
j4eval[2]=((IKabs(r02))+(IKabs((x4050+(((-1.0)*x4049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4052=cj5*cj5;
IkReal x4053=r01*r01;
IkReal x4054=(r01*sj5);
IkReal x4055=(cj5*r00);
CheckValue<IkReal> x4056=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4052*x4053))+((x4052*(r00*r00)))+x4053+(r02*r02)+(((-2.0)*x4054*x4055)))),-1);
if(!x4056.valid){
continue;
}
CheckValue<IkReal> x4057 = IKatan2WithCheck(IkReal((x4054+(((-1.0)*x4055)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4056.value)))+(x4057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4058=IKcos(j4);
IkReal x4059=IKsin(j4);
IkReal x4060=(cj5*r00);
IkReal x4061=(cj5*r10);
IkReal x4062=(r21*sj5);
IkReal x4063=((1.0)*cj2);
IkReal x4064=(cj5*r20);
IkReal x4065=((1.0)*x4058);
IkReal x4066=((1.0)*x4059);
IkReal x4067=(sj5*x4059);
IkReal x4068=(sj5*x4058);
evalcond[0]=((((-1.0)*x4060*x4065))+((r02*x4059))+((r01*x4068)));
evalcond[1]=(((x4059*x4062))+(((-1.0)*x4064*x4066))+(((-1.0)*r22*x4065)));
evalcond[2]=((((-1.0)*x4061*x4066))+(((-1.0)*r12*x4065))+((r11*x4067)));
evalcond[3]=((-1.0)+(((-1.0)*x4060*x4066))+(((-1.0)*r02*x4065))+((r01*x4067)));
evalcond[4]=((((-1.0)*x4064*x4065))+((sj1*sj2))+(((-1.0)*cj1*x4063))+((r22*x4059))+((x4058*x4062)));
evalcond[5]=((((-1.0)*x4061*x4065))+(((-1.0)*cj1*sj2))+((r11*x4068))+((r12*x4059))+(((-1.0)*sj1*x4063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4069=((1.0)*cj5);
CheckValue<IkReal> x4070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4069)))),-1);
if(!x4070.valid){
continue;
}
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4069))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4070.value)))+(x4071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4072=IKcos(j4);
IkReal x4073=IKsin(j4);
IkReal x4074=(cj5*r00);
IkReal x4075=(cj5*r10);
IkReal x4076=(r21*sj5);
IkReal x4077=((1.0)*cj2);
IkReal x4078=(cj5*r20);
IkReal x4079=((1.0)*x4072);
IkReal x4080=((1.0)*x4073);
IkReal x4081=(sj5*x4073);
IkReal x4082=(sj5*x4072);
evalcond[0]=(((r01*x4082))+(((-1.0)*x4074*x4079))+((r02*x4073)));
evalcond[1]=((((-1.0)*r22*x4079))+((x4073*x4076))+(((-1.0)*x4078*x4080)));
evalcond[2]=((((-1.0)*x4075*x4080))+(((-1.0)*r12*x4079))+((r11*x4081)));
evalcond[3]=((-1.0)+((r01*x4081))+(((-1.0)*r02*x4079))+(((-1.0)*x4074*x4080)));
evalcond[4]=(((r22*x4073))+((sj1*sj2))+(((-1.0)*cj1*x4077))+((x4072*x4076))+(((-1.0)*x4078*x4079)));
evalcond[5]=((((-1.0)*x4075*x4079))+((r12*x4073))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4077))+((r11*x4082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4083=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4083.valid){
continue;
}
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4083.value)))+(x4084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4085=IKcos(j4);
IkReal x4086=IKsin(j4);
IkReal x4087=(cj5*r00);
IkReal x4088=(cj5*r10);
IkReal x4089=(r21*sj5);
IkReal x4090=((1.0)*cj2);
IkReal x4091=(cj5*r20);
IkReal x4092=((1.0)*x4085);
IkReal x4093=((1.0)*x4086);
IkReal x4094=(sj5*x4086);
IkReal x4095=(sj5*x4085);
evalcond[0]=(((r01*x4095))+((r02*x4086))+(((-1.0)*x4087*x4092)));
evalcond[1]=(((x4086*x4089))+(((-1.0)*r22*x4092))+(((-1.0)*x4091*x4093)));
evalcond[2]=((((-1.0)*r12*x4092))+((r11*x4094))+(((-1.0)*x4088*x4093)));
evalcond[3]=((-1.0)+((r01*x4094))+(((-1.0)*r02*x4092))+(((-1.0)*x4087*x4093)));
evalcond[4]=(((x4085*x4089))+((sj1*sj2))+(((-1.0)*cj1*x4090))+((r22*x4086))+(((-1.0)*x4091*x4092)));
evalcond[5]=((((-1.0)*sj1*x4090))+(((-1.0)*cj1*sj2))+((r11*x4095))+((r12*x4086))+(((-1.0)*x4088*x4092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4096=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4096;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4097=((1.0)*cj5);
IkReal x4098=((((-1.0)*r21*x4097))+(((-1.0)*r20*sj5)));
j4eval[0]=x4098;
j4eval[1]=((IKabs(((((-1.0)*r10*x4097))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4098);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4099=cj5*cj5;
IkReal x4100=r01*r01;
IkReal x4101=(r01*sj5);
IkReal x4102=(cj5*r00);
IkReal x4103=((((-1.0)*x4100))+((x4099*x4100))+(((-1.0)*(r02*r02)))+(((-1.0)*x4099*(r00*r00)))+(((2.0)*x4101*x4102)));
j4eval[0]=x4103;
j4eval[1]=IKsign(x4103);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4102))+x4101))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4104=cj5*cj5;
IkReal x4105=r01*r01;
IkReal x4106=(r01*sj5);
IkReal x4107=(cj5*r00);
CheckValue<IkReal> x4108=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4105))+(((-1.0)*x4104*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4106*x4107))+((x4104*x4105)))),-1);
if(!x4108.valid){
continue;
}
CheckValue<IkReal> x4109 = IKatan2WithCheck(IkReal(((((-1.0)*x4107))+x4106)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4108.value)))+(x4109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4110=IKcos(j4);
IkReal x4111=IKsin(j4);
IkReal x4112=(cj5*r00);
IkReal x4113=(cj5*r10);
IkReal x4114=(r21*sj5);
IkReal x4115=(cj5*r20);
IkReal x4116=((1.0)*x4110);
IkReal x4117=((1.0)*x4111);
IkReal x4118=(sj5*x4111);
IkReal x4119=(sj5*x4110);
evalcond[0]=(((r02*x4111))+(((-1.0)*x4112*x4116))+((r01*x4119)));
evalcond[1]=((((-1.0)*r22*x4116))+((x4111*x4114))+(((-1.0)*x4115*x4117)));
evalcond[2]=((((-1.0)*r12*x4116))+(((-1.0)*x4113*x4117))+((r11*x4118)));
evalcond[3]=((1.0)+(((-1.0)*x4112*x4117))+(((-1.0)*r02*x4116))+((r01*x4118)));
evalcond[4]=(((r12*x4111))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4113*x4116))+((r11*x4119)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4111))+(((-1.0)*x4115*x4116))+((x4110*x4114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4120=((1.0)*cj5);
CheckValue<IkReal> x4121 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4121.valid){
continue;
}
CheckValue<IkReal> x4122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4120))+(((-1.0)*r20*sj5)))),-1);
if(!x4122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4121.value)+(((1.5707963267949)*(x4122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4123=IKcos(j4);
IkReal x4124=IKsin(j4);
IkReal x4125=(cj5*r00);
IkReal x4126=(cj5*r10);
IkReal x4127=(r21*sj5);
IkReal x4128=(cj5*r20);
IkReal x4129=((1.0)*x4123);
IkReal x4130=((1.0)*x4124);
IkReal x4131=(sj5*x4124);
IkReal x4132=(sj5*x4123);
evalcond[0]=(((r02*x4124))+((r01*x4132))+(((-1.0)*x4125*x4129)));
evalcond[1]=((((-1.0)*r22*x4129))+(((-1.0)*x4128*x4130))+((x4124*x4127)));
evalcond[2]=((((-1.0)*r12*x4129))+(((-1.0)*x4126*x4130))+((r11*x4131)));
evalcond[3]=((1.0)+(((-1.0)*x4125*x4130))+((r01*x4131))+(((-1.0)*r02*x4129)));
evalcond[4]=(((r12*x4124))+((cj2*sj1))+((cj1*sj2))+((r11*x4132))+(((-1.0)*x4126*x4129)));
evalcond[5]=((((-1.0)*x4128*x4129))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4124))+((x4123*x4127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4133 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4133.valid){
continue;
}
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4133.value)+(((1.5707963267949)*(x4134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4135=IKcos(j4);
IkReal x4136=IKsin(j4);
IkReal x4137=(cj5*r00);
IkReal x4138=(cj5*r10);
IkReal x4139=(r21*sj5);
IkReal x4140=(cj5*r20);
IkReal x4141=((1.0)*x4135);
IkReal x4142=((1.0)*x4136);
IkReal x4143=(sj5*x4136);
IkReal x4144=(sj5*x4135);
evalcond[0]=(((r01*x4144))+(((-1.0)*x4137*x4141))+((r02*x4136)));
evalcond[1]=(((x4136*x4139))+(((-1.0)*x4140*x4142))+(((-1.0)*r22*x4141)));
evalcond[2]=(((r11*x4143))+(((-1.0)*x4138*x4142))+(((-1.0)*r12*x4141)));
evalcond[3]=((1.0)+((r01*x4143))+(((-1.0)*r02*x4141))+(((-1.0)*x4137*x4142)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4144))+((r12*x4136))+(((-1.0)*x4138*x4141)));
evalcond[5]=(((r22*x4136))+(((-1.0)*x4140*x4141))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4135*x4139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4145=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4145);
rxp1_1=(px*r21);
rxp1_2=(r11*x4145);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4146=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4146);
rxp1_1=(px*r21);
rxp1_2=(r11*x4146);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4147=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4147);
rxp1_1=(px*r21);
rxp1_2=(r11*x4147);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4150.valid){
continue;
}
IkReal x4148=x4150.value;
IkReal x4149=(sj0*x4148);
cj4array[0]=(((cj1*sj2*x4149))+((cj2*sj1*x4149)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4151=IKsin(j4);
IkReal x4152=IKcos(j4);
IkReal x4153=(r21*sj5);
IkReal x4154=((1.0)*cj5*r20);
evalcond[0]=(r02*x4151);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4152)));
evalcond[2]=((((-1.0)*x4151*x4154))+((x4151*x4153)));
evalcond[3]=((((-1.0)*cj5*r10*x4151))+((r11*sj5*x4151)));
evalcond[4]=(((x4152*x4153))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4152*x4154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4156=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4156.valid){
continue;
}
IkReal x4155=x4156.value;
cj4array[0]=(((cj1*cj2*x4155))+(((-1.0)*sj1*sj2*x4155)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4157=IKsin(j4);
IkReal x4158=IKcos(j4);
IkReal x4159=((1.0)*sj0);
IkReal x4160=((1.0)*cj5);
IkReal x4161=(sj5*x4157);
evalcond[0]=(r02*x4157);
evalcond[1]=((((-1.0)*x4159))+(((-1.0)*r02*x4158)));
evalcond[2]=((((-1.0)*r20*x4157*x4160))+((r21*x4161)));
evalcond[3]=(((r11*x4161))+(((-1.0)*r10*x4157*x4160)));
evalcond[4]=(((r11*sj5*x4158))+(((-1.0)*cj1*sj2*x4159))+(((-1.0)*r10*x4158*x4160))+(((-1.0)*cj2*sj1*x4159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4162=IKPowWithIntegerCheck(r02,-1);
if(!x4162.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4162.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4163=IKsin(j4);
IkReal x4164=IKcos(j4);
IkReal x4165=((1.0)*cj1);
IkReal x4166=(r21*sj5);
IkReal x4167=((1.0)*cj5);
IkReal x4168=(r11*sj5);
evalcond[0]=(r02*x4163);
evalcond[1]=((((-1.0)*r20*x4163*x4167))+((x4163*x4166)));
evalcond[2]=(((x4163*x4168))+(((-1.0)*r10*x4163*x4167)));
evalcond[3]=((((-1.0)*cj2*x4165))+((sj1*sj2))+(((-1.0)*r20*x4164*x4167))+((x4164*x4166)));
evalcond[4]=((((-1.0)*sj0*sj2*x4165))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4164*x4167))+((x4164*x4168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4169=((1.0)*sj0);
IkReal x4170=((1.0)*cj0);
CheckValue<IkReal> x4171 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4169))+(((-1.0)*r02*x4170)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4169))+(((-1.0)*r01*sj5*x4170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4171.valid){
continue;
}
CheckValue<IkReal> x4172=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4171.value)+(((1.5707963267949)*(x4172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4173=IKsin(j4);
IkReal x4174=IKcos(j4);
IkReal x4175=(cj5*r00);
IkReal x4176=(cj5*r10);
IkReal x4177=(r21*sj5);
IkReal x4178=((1.0)*cj2);
IkReal x4179=((1.0)*sj0);
IkReal x4180=(cj1*sj2);
IkReal x4181=(cj5*r20);
IkReal x4182=((1.0)*x4174);
IkReal x4183=((1.0)*x4173);
IkReal x4184=(sj5*x4173);
IkReal x4185=(sj5*x4174);
evalcond[0]=((((-1.0)*x4181*x4183))+((x4173*x4177))+(((-1.0)*r22*x4182)));
evalcond[1]=((((-1.0)*r12*x4182))+cj0+((r11*x4184))+(((-1.0)*x4176*x4183)));
evalcond[2]=((((-1.0)*x4179))+(((-1.0)*x4175*x4183))+(((-1.0)*r02*x4182))+((r01*x4184)));
evalcond[3]=((((-1.0)*x4181*x4182))+(((-1.0)*cj1*x4178))+((r22*x4173))+((sj1*sj2))+((x4174*x4177)));
evalcond[4]=((((-1.0)*cj0*x4180))+(((-1.0)*x4175*x4182))+((r01*x4185))+((r02*x4173))+(((-1.0)*cj0*sj1*x4178)));
evalcond[5]=(((r12*x4173))+((r11*x4185))+(((-1.0)*x4176*x4182))+(((-1.0)*sj0*sj1*x4178))+(((-1.0)*x4179*x4180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4186=((1.0)*cj5);
CheckValue<IkReal> x4187 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4186))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4187.valid){
continue;
}
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4186))+(((-1.0)*r10*sj5)))),-1);
if(!x4188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4187.value)+(((1.5707963267949)*(x4188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4189=IKsin(j4);
IkReal x4190=IKcos(j4);
IkReal x4191=(cj5*r00);
IkReal x4192=(cj5*r10);
IkReal x4193=(r21*sj5);
IkReal x4194=((1.0)*cj2);
IkReal x4195=((1.0)*sj0);
IkReal x4196=(cj1*sj2);
IkReal x4197=(cj5*r20);
IkReal x4198=((1.0)*x4190);
IkReal x4199=((1.0)*x4189);
IkReal x4200=(sj5*x4189);
IkReal x4201=(sj5*x4190);
evalcond[0]=(((x4189*x4193))+(((-1.0)*r22*x4198))+(((-1.0)*x4197*x4199)));
evalcond[1]=((((-1.0)*r12*x4198))+((r11*x4200))+cj0+(((-1.0)*x4192*x4199)));
evalcond[2]=((((-1.0)*x4195))+((r01*x4200))+(((-1.0)*r02*x4198))+(((-1.0)*x4191*x4199)));
evalcond[3]=(((x4190*x4193))+((sj1*sj2))+((r22*x4189))+(((-1.0)*x4197*x4198))+(((-1.0)*cj1*x4194)));
evalcond[4]=(((r02*x4189))+(((-1.0)*cj0*sj1*x4194))+(((-1.0)*cj0*x4196))+((r01*x4201))+(((-1.0)*x4191*x4198)));
evalcond[5]=(((r12*x4189))+((r11*x4201))+(((-1.0)*x4195*x4196))+(((-1.0)*sj0*sj1*x4194))+(((-1.0)*x4192*x4198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4202=((1.0)*cj5);
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
CheckValue<IkReal> x4204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4202))+(((-1.0)*r00*sj5)))),-1);
if(!x4204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4203.value)+(((1.5707963267949)*(x4204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4205=IKsin(j4);
IkReal x4206=IKcos(j4);
IkReal x4207=(cj5*r00);
IkReal x4208=(cj5*r10);
IkReal x4209=(r21*sj5);
IkReal x4210=((1.0)*cj2);
IkReal x4211=((1.0)*sj0);
IkReal x4212=(cj1*sj2);
IkReal x4213=(cj5*r20);
IkReal x4214=((1.0)*x4206);
IkReal x4215=((1.0)*x4205);
IkReal x4216=(sj5*x4205);
IkReal x4217=(sj5*x4206);
evalcond[0]=((((-1.0)*x4213*x4215))+((x4205*x4209))+(((-1.0)*r22*x4214)));
evalcond[1]=(cj0+((r11*x4216))+(((-1.0)*r12*x4214))+(((-1.0)*x4208*x4215)));
evalcond[2]=((((-1.0)*r02*x4214))+(((-1.0)*x4207*x4215))+((r01*x4216))+(((-1.0)*x4211)));
evalcond[3]=(((r22*x4205))+(((-1.0)*x4213*x4214))+((sj1*sj2))+((x4206*x4209))+(((-1.0)*cj1*x4210)));
evalcond[4]=((((-1.0)*cj0*sj1*x4210))+(((-1.0)*cj0*x4212))+((r02*x4205))+(((-1.0)*x4207*x4214))+((r01*x4217)));
evalcond[5]=(((r11*x4217))+(((-1.0)*sj0*sj1*x4210))+(((-1.0)*x4208*x4214))+(((-1.0)*x4211*x4212))+((r12*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4218=r21*r21;
IkReal x4219=cj5*cj5;
IkReal x4220=(sj1*sj2);
IkReal x4221=(r21*sj5);
IkReal x4222=(cj1*cj2);
IkReal x4223=(cj5*r20);
CheckValue<IkReal> x4224 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4222))+((r22*x4220)))),IkReal((((x4220*x4221))+(((-1.0)*x4220*x4223))+((x4222*x4223))+(((-1.0)*x4221*x4222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4224.valid){
continue;
}
CheckValue<IkReal> x4225=IKPowWithIntegerCheck(IKsign((((x4218*x4219))+(((2.0)*x4221*x4223))+(((-1.0)*(r22*r22)))+(((-1.0)*x4219*(r20*r20)))+(((-1.0)*x4218)))),-1);
if(!x4225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4224.value)+(((1.5707963267949)*(x4225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4226=IKsin(j4);
IkReal x4227=IKcos(j4);
IkReal x4228=(r21*sj5);
IkReal x4229=(cj5*r20);
IkReal x4230=((1.0)*x4227);
evalcond[0]=((((-1.0)*x4226*x4229))+((x4226*x4228))+(((-1.0)*r22*x4230)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4226))+((x4227*x4228))+(((-1.0)*x4229*x4230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4231=(cj5*sj4);
IkReal x4232=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4232))+(((-1.0)*r00*x4231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4231))+(((-1.0)*r11*x4232))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4232))+(((-1.0)*r00*x4231))))+IKsqr((((r10*x4231))+(((-1.0)*r11*x4232))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4232))+(((-1.0)*r00*x4231))), (((r10*x4231))+(((-1.0)*r11*x4232))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4233=IKcos(j0);
IkReal x4234=IKsin(j0);
IkReal x4235=((0.392)*sj1);
IkReal x4236=((1.0)*cj1);
IkReal x4237=(r11*sj5);
IkReal x4238=(r00*sj5);
IkReal x4239=((1.0)*cj5);
IkReal x4240=(r10*sj5);
IkReal x4241=((1.0)*sj1);
IkReal x4242=((0.425)*cj1);
IkReal x4243=((1.0)*cj4);
IkReal x4244=((0.099)*cj5);
IkReal x4245=(r01*sj5);
IkReal x4246=(sj2*x4234);
IkReal x4247=(sj2*x4233);
IkReal x4248=(cj4*x4239);
IkReal x4249=((0.392)*cj1*cj2);
IkReal x4250=(cj2*x4233);
IkReal x4251=(cj2*x4234);
evalcond[0]=(((sj4*x4237))+(((-1.0)*r10*sj4*x4239))+(((-1.0)*r12*x4243))+x4233);
evalcond[1]=(((sj4*x4245))+(((-1.0)*x4234))+(((-1.0)*r00*sj4*x4239))+(((-1.0)*r02*x4243)));
evalcond[2]=((((-1.0)*x4236*x4250))+((sj1*x4247))+(((-1.0)*x4238))+(((-1.0)*r01*x4239)));
evalcond[3]=((((-1.0)*x4236*x4251))+(((-1.0)*r11*x4239))+((sj1*x4246))+(((-1.0)*x4240)));
evalcond[4]=(((cj4*x4245))+(((-1.0)*x4241*x4250))+((r02*sj4))+(((-1.0)*x4236*x4247))+(((-1.0)*r00*x4248)));
evalcond[5]=(((cj4*x4237))+(((-1.0)*x4241*x4251))+((r12*sj4))+(((-1.0)*x4236*x4246))+(((-1.0)*r10*x4248)));
evalcond[6]=((((-1.0)*r01*x4244))+(((-1.0)*x4235*x4247))+(((-1.0)*px))+(((-0.099)*x4238))+(((-0.133)*x4234))+((x4233*x4242))+((x4233*x4249)));
evalcond[7]=((((0.133)*x4233))+(((-1.0)*x4235*x4246))+(((-1.0)*py))+(((-1.0)*r11*x4244))+(((-0.099)*x4240))+((x4234*x4249))+((x4234*x4242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4252 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4252.valid){
continue;
}
CheckValue<IkReal> x4253=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4253.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4252.value)+(((1.5707963267949)*(x4253.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4254=IKcos(j0);
IkReal x4255=IKsin(j0);
IkReal x4256=(r00*sj5);
IkReal x4257=(sj1*sj2);
IkReal x4258=((1.0)*cj5);
IkReal x4259=(cj1*cj2);
IkReal x4260=(r10*sj5);
IkReal x4261=((0.425)*cj1);
IkReal x4262=((0.099)*cj5);
IkReal x4263=((0.392)*x4255);
IkReal x4264=((0.392)*x4254);
evalcond[0]=((((-1.0)*x4256))+(((-1.0)*r01*x4258))+((x4254*x4257))+(((-1.0)*x4254*x4259)));
evalcond[1]=((((-1.0)*x4255*x4259))+((x4255*x4257))+(((-1.0)*x4260))+(((-1.0)*r11*x4258)));
evalcond[2]=((((-0.099)*x4256))+(((-0.133)*x4255))+((x4254*x4261))+(((-1.0)*r01*x4262))+(((-1.0)*px))+((x4259*x4264))+(((-1.0)*x4257*x4264)));
evalcond[3]=((((-1.0)*r11*x4262))+(((-0.099)*x4260))+(((-1.0)*py))+((x4255*x4261))+(((0.133)*x4254))+((x4259*x4263))+(((-1.0)*x4257*x4263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4265=((1.0)*cj5);
IkReal x4266=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4265)));
j4eval[0]=x4266;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4265)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4267=((1.0)*cj5);
IkReal x4268=((((-1.0)*r11*x4267))+(((-1.0)*r10*sj5)));
j4eval[0]=x4268;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4267))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4269=((1.0)*sj0);
IkReal x4270=((1.0)*cj0);
IkReal x4271=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4271;
j4eval[1]=((IKabs(((((-1.0)*r12*x4269))+(((-1.0)*r02*x4270)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4270))+(((-1.0)*r11*sj5*x4269))))));
j4eval[2]=IKsign(x4271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4272=((-1.0)*r20);
IkReal x4274 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4274)==0){
continue;
}
IkReal x4273=pow(x4274,-0.5);
CheckValue<IkReal> x4275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4272),IKFAST_ATAN2_MAGTHRESH);
if(!x4275.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4275.value));
IkReal gconst97=(r21*x4273);
IkReal gconst98=(x4272*x4273);
CheckValue<IkReal> x4276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4276.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4276.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4277=((-1.0)*r20);
IkReal x4278=x4273;
CheckValue<IkReal> x4280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4277),IKFAST_ATAN2_MAGTHRESH);
if(!x4280.valid){
continue;
}
IkReal x4279=((-1.0)*(x4280.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4279;
IkReal gconst96=x4279;
IkReal gconst97=(r21*x4278);
IkReal gconst98=(x4277*x4278);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4281=((-1.0)*r20);
IkReal x4282=x4273;
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4281),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
IkReal x4283=((-1.0)*(x4284.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4283;
IkReal gconst96=x4283;
IkReal gconst97=(r21*x4282);
IkReal gconst98=(x4281*x4282);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4285=((-1.0)*r20);
IkReal x4286=x4273;
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4285),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
IkReal x4287=((-1.0)*(x4288.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4287;
IkReal gconst96=x4287;
IkReal gconst97=(r21*x4286);
IkReal gconst98=(x4285*x4286);
IkReal x4289=((1.0)*(r22*r22));
CheckValue<IkReal> x4293=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4289))),-1);
if(!x4293.valid){
continue;
}
IkReal x4290=x4293.value;
IkReal x4291=((1.0)*x4290);
IkReal x4292=((((-1.0)*x4289))+(((-1.0)*x4291*(r21*r21*r21*r21)))+(((-2.0)*x4290*(r20*r20)*(r21*r21)))+(((-1.0)*x4291*(r20*r20*r20*r20))));
j4eval[0]=x4292;
j4eval[1]=IKsign(x4292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4294=(cj1*cj2);
IkReal x4295=(gconst98*r20);
IkReal x4296=(sj1*sj2);
IkReal x4297=(gconst97*r21);
CheckValue<IkReal> x4298=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4297*x4297)))+(((-1.0)*(x4295*x4295)))+(((-1.0)*(r22*r22)))+(((2.0)*x4295*x4297)))),-1);
if(!x4298.valid){
continue;
}
CheckValue<IkReal> x4299 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4294))+((r22*x4296)))),IkReal(((((-1.0)*x4295*x4296))+((x4296*x4297))+((x4294*x4295))+(((-1.0)*x4294*x4297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4298.value)))+(x4299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4300=IKsin(j4);
IkReal x4301=IKcos(j4);
IkReal x4302=(gconst98*r10);
IkReal x4303=(gconst97*r21);
IkReal x4304=(gconst98*r20);
IkReal x4305=((1.0)*cj2);
IkReal x4306=((1.0)*sj0);
IkReal x4307=(gconst98*r00);
IkReal x4308=(cj1*sj2);
IkReal x4309=((1.0)*x4301);
IkReal x4310=((1.0)*x4300);
IkReal x4311=(gconst97*x4300);
IkReal x4312=(gconst97*x4301);
evalcond[0]=(((x4300*x4303))+(((-1.0)*r22*x4309))+(((-1.0)*x4304*x4310)));
evalcond[1]=((((-1.0)*r12*x4309))+cj0+((r11*x4311))+(((-1.0)*x4302*x4310)));
evalcond[2]=((((-1.0)*x4307*x4310))+((r01*x4311))+(((-1.0)*r02*x4309))+(((-1.0)*x4306)));
evalcond[3]=(((x4301*x4303))+((r22*x4300))+((sj1*sj2))+(((-1.0)*cj1*x4305))+(((-1.0)*x4304*x4309)));
evalcond[4]=((((-1.0)*cj0*sj1*x4305))+((r02*x4300))+((r01*x4312))+(((-1.0)*cj0*x4308))+(((-1.0)*x4307*x4309)));
evalcond[5]=(((r12*x4300))+(((-1.0)*sj0*sj1*x4305))+((r11*x4312))+(((-1.0)*x4306*x4308))+(((-1.0)*x4302*x4309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4313=((1.0)*gconst98);
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4313))+(((-1.0)*gconst97*r10)))),-1);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4314.value)))+(x4315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4316=IKsin(j4);
IkReal x4317=IKcos(j4);
IkReal x4318=(gconst98*r10);
IkReal x4319=(gconst97*r21);
IkReal x4320=(gconst98*r20);
IkReal x4321=((1.0)*cj2);
IkReal x4322=((1.0)*sj0);
IkReal x4323=(gconst98*r00);
IkReal x4324=(cj1*sj2);
IkReal x4325=((1.0)*x4317);
IkReal x4326=((1.0)*x4316);
IkReal x4327=(gconst97*x4316);
IkReal x4328=(gconst97*x4317);
evalcond[0]=(((x4316*x4319))+(((-1.0)*r22*x4325))+(((-1.0)*x4320*x4326)));
evalcond[1]=(cj0+(((-1.0)*r12*x4325))+((r11*x4327))+(((-1.0)*x4318*x4326)));
evalcond[2]=((((-1.0)*r02*x4325))+(((-1.0)*x4322))+(((-1.0)*x4323*x4326))+((r01*x4327)));
evalcond[3]=(((x4317*x4319))+((sj1*sj2))+(((-1.0)*x4320*x4325))+(((-1.0)*cj1*x4321))+((r22*x4316)));
evalcond[4]=((((-1.0)*x4323*x4325))+(((-1.0)*cj0*sj1*x4321))+(((-1.0)*cj0*x4324))+((r02*x4316))+((r01*x4328)));
evalcond[5]=(((r12*x4316))+(((-1.0)*sj0*sj1*x4321))+(((-1.0)*x4322*x4324))+((r11*x4328))+(((-1.0)*x4318*x4325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4329=((1.0)*gconst98);
CheckValue<IkReal> x4330 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4329))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4330.valid){
continue;
}
CheckValue<IkReal> x4331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4329))+(((-1.0)*gconst97*r00)))),-1);
if(!x4331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4330.value)+(((1.5707963267949)*(x4331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4332=IKsin(j4);
IkReal x4333=IKcos(j4);
IkReal x4334=(gconst98*r10);
IkReal x4335=(gconst97*r21);
IkReal x4336=(gconst98*r20);
IkReal x4337=((1.0)*cj2);
IkReal x4338=((1.0)*sj0);
IkReal x4339=(gconst98*r00);
IkReal x4340=(cj1*sj2);
IkReal x4341=((1.0)*x4333);
IkReal x4342=((1.0)*x4332);
IkReal x4343=(gconst97*x4332);
IkReal x4344=(gconst97*x4333);
evalcond[0]=(((x4332*x4335))+(((-1.0)*r22*x4341))+(((-1.0)*x4336*x4342)));
evalcond[1]=(cj0+(((-1.0)*r12*x4341))+((r11*x4343))+(((-1.0)*x4334*x4342)));
evalcond[2]=((((-1.0)*r02*x4341))+(((-1.0)*x4339*x4342))+(((-1.0)*x4338))+((r01*x4343)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4337))+((x4333*x4335))+((r22*x4332))+(((-1.0)*x4336*x4341)));
evalcond[4]=((((-1.0)*x4339*x4341))+(((-1.0)*cj0*sj1*x4337))+((r02*x4332))+(((-1.0)*cj0*x4340))+((r01*x4344)));
evalcond[5]=((((-1.0)*sj0*sj1*x4337))+((r12*x4332))+(((-1.0)*x4338*x4340))+((r11*x4344))+(((-1.0)*x4334*x4341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4345=((-1.0)*r21);
IkReal x4347 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4347)==0){
continue;
}
IkReal x4346=pow(x4347,-0.5);
CheckValue<IkReal> x4348 = IKatan2WithCheck(IkReal(x4345),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4348.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4348.value))));
IkReal gconst100=(x4345*x4346);
IkReal gconst101=((1.0)*r20*x4346);
CheckValue<IkReal> x4349 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4349.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4349.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4350=((-1.0)*r21);
CheckValue<IkReal> x4353 = IKatan2WithCheck(IkReal(x4350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4353.valid){
continue;
}
IkReal x4351=((1.0)*(x4353.value));
IkReal x4352=x4346;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4351)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4351)));
IkReal gconst100=(x4350*x4352);
IkReal gconst101=((1.0)*r20*x4352);
IkReal x4354=r22*r22;
IkReal x4355=((1.0)*x4354);
CheckValue<IkReal> x4359=IKPowWithIntegerCheck(((-1.0)+x4354),-1);
if(!x4359.valid){
continue;
}
IkReal x4356=x4359.value;
if((((1.0)+(((-1.0)*x4355)))) < -0.00001)
continue;
IkReal x4357=IKsqrt(((1.0)+(((-1.0)*x4355))));
IkReal x4358=(cj0*x4356*x4357);
j4eval[0]=((IKabs((x4358+(((-1.0)*x4355*x4358)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4360=((-1.0)*r21);
CheckValue<IkReal> x4363 = IKatan2WithCheck(IkReal(x4360),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4363.valid){
continue;
}
IkReal x4361=((1.0)*(x4363.value));
IkReal x4362=x4346;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4361)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4361)));
IkReal gconst100=(x4360*x4362);
IkReal gconst101=((1.0)*r20*x4362);
IkReal x4364=r22*r22;
IkReal x4365=((1.0)*x4364);
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(((-1.0)+x4364),-1);
if(!x4369.valid){
continue;
}
IkReal x4366=x4369.value;
if((((1.0)+(((-1.0)*x4365)))) < -0.00001)
continue;
IkReal x4367=IKsqrt(((1.0)+(((-1.0)*x4365))));
IkReal x4368=(sj0*x4366*x4367);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4365*x4368))+x4368))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4370=((-1.0)*r21);
CheckValue<IkReal> x4373 = IKatan2WithCheck(IkReal(x4370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4373.valid){
continue;
}
IkReal x4371=((1.0)*(x4373.value));
IkReal x4372=x4346;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4371)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4371)));
IkReal gconst100=(x4370*x4372);
IkReal gconst101=((1.0)*r20*x4372);
IkReal x4374=r22*r22;
IkReal x4375=(r12*sj0);
IkReal x4376=(cj0*r02);
CheckValue<IkReal> x4380=IKPowWithIntegerCheck(((-1.0)+x4374),-1);
if(!x4380.valid){
continue;
}
IkReal x4377=x4380.value;
if((((1.0)+(((-1.0)*x4374)))) < -0.00001)
continue;
IkReal x4378=IKsqrt(((1.0)+(((-1.0)*x4374))));
IkReal x4379=(r22*x4377*x4378);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4376*x4379))+((x4375*x4379)))))+(IKabs(((((-1.0)*x4375))+(((-1.0)*x4376))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4381=((1.0)*sj0);
IkReal x4382=((1.0)*gconst100);
CheckValue<IkReal> x4383 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4381))+(((-1.0)*cj0*r02)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4381))+(((-1.0)*cj0*r01*x4382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4383.valid){
continue;
}
CheckValue<IkReal> x4384=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4382)))),-1);
if(!x4384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4383.value)+(((1.5707963267949)*(x4384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4385=IKsin(j4);
IkReal x4386=IKcos(j4);
IkReal x4387=(gconst101*r20);
IkReal x4388=(gconst101*r10);
IkReal x4389=((1.0)*cj2);
IkReal x4390=(gconst101*r00);
IkReal x4391=((1.0)*sj0);
IkReal x4392=(cj1*sj2);
IkReal x4393=((1.0)*x4386);
IkReal x4394=((1.0)*x4385);
IkReal x4395=(gconst100*x4385);
IkReal x4396=(gconst100*x4386);
evalcond[0]=((((-1.0)*x4387*x4394))+(((-1.0)*r22*x4393))+((r21*x4395)));
evalcond[1]=((((-1.0)*r12*x4393))+cj0+(((-1.0)*x4388*x4394))+((r11*x4395)));
evalcond[2]=((((-1.0)*x4391))+((r01*x4395))+(((-1.0)*r02*x4393))+(((-1.0)*x4390*x4394)));
evalcond[3]=((((-1.0)*x4387*x4393))+((r22*x4385))+((sj1*sj2))+((r21*x4396))+(((-1.0)*cj1*x4389)));
evalcond[4]=(((r01*x4396))+(((-1.0)*cj0*sj1*x4389))+((r02*x4385))+(((-1.0)*x4390*x4393))+(((-1.0)*cj0*x4392)));
evalcond[5]=((((-1.0)*x4388*x4393))+(((-1.0)*x4391*x4392))+((r11*x4396))+((r12*x4385))+(((-1.0)*sj0*sj1*x4389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4397=((1.0)*gconst101);
CheckValue<IkReal> x4398 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4397))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4397))+(((-1.0)*gconst100*r10)))),-1);
if(!x4399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4398.value)+(((1.5707963267949)*(x4399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4400=IKsin(j4);
IkReal x4401=IKcos(j4);
IkReal x4402=(gconst101*r20);
IkReal x4403=(gconst101*r10);
IkReal x4404=((1.0)*cj2);
IkReal x4405=(gconst101*r00);
IkReal x4406=((1.0)*sj0);
IkReal x4407=(cj1*sj2);
IkReal x4408=((1.0)*x4401);
IkReal x4409=((1.0)*x4400);
IkReal x4410=(gconst100*x4400);
IkReal x4411=(gconst100*x4401);
evalcond[0]=(((r21*x4410))+(((-1.0)*x4402*x4409))+(((-1.0)*r22*x4408)));
evalcond[1]=(((r11*x4410))+cj0+(((-1.0)*x4403*x4409))+(((-1.0)*r12*x4408)));
evalcond[2]=(((r01*x4410))+(((-1.0)*r02*x4408))+(((-1.0)*x4406))+(((-1.0)*x4405*x4409)));
evalcond[3]=(((r21*x4411))+((r22*x4400))+((sj1*sj2))+(((-1.0)*x4402*x4408))+(((-1.0)*cj1*x4404)));
evalcond[4]=((((-1.0)*cj0*x4407))+((r01*x4411))+(((-1.0)*x4405*x4408))+((r02*x4400))+(((-1.0)*cj0*sj1*x4404)));
evalcond[5]=(((r11*x4411))+(((-1.0)*x4403*x4408))+((r12*x4400))+(((-1.0)*x4406*x4407))+(((-1.0)*sj0*sj1*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4412=((1.0)*gconst101);
CheckValue<IkReal> x4413 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4412)))),-1);
if(!x4414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4413.value)+(((1.5707963267949)*(x4414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4415=IKsin(j4);
IkReal x4416=IKcos(j4);
IkReal x4417=(gconst101*r20);
IkReal x4418=(gconst101*r10);
IkReal x4419=((1.0)*cj2);
IkReal x4420=(gconst101*r00);
IkReal x4421=((1.0)*sj0);
IkReal x4422=(cj1*sj2);
IkReal x4423=((1.0)*x4416);
IkReal x4424=((1.0)*x4415);
IkReal x4425=(gconst100*x4415);
IkReal x4426=(gconst100*x4416);
evalcond[0]=((((-1.0)*x4417*x4424))+(((-1.0)*r22*x4423))+((r21*x4425)));
evalcond[1]=(cj0+(((-1.0)*r12*x4423))+(((-1.0)*x4418*x4424))+((r11*x4425)));
evalcond[2]=((((-1.0)*x4421))+(((-1.0)*x4420*x4424))+((r01*x4425))+(((-1.0)*r02*x4423)));
evalcond[3]=(((r22*x4415))+(((-1.0)*x4417*x4423))+((sj1*sj2))+((r21*x4426))+(((-1.0)*cj1*x4419)));
evalcond[4]=((((-1.0)*cj0*sj1*x4419))+(((-1.0)*x4420*x4423))+(((-1.0)*cj0*x4422))+((r01*x4426))+((r02*x4415)));
evalcond[5]=(((r12*x4415))+(((-1.0)*x4421*x4422))+(((-1.0)*sj0*sj1*x4419))+(((-1.0)*x4418*x4423))+((r11*x4426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4427=((-1.0)*r10);
IkReal x4429 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4429)==0){
continue;
}
IkReal x4428=pow(x4429,-0.5);
CheckValue<IkReal> x4430 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4427),IKFAST_ATAN2_MAGTHRESH);
if(!x4430.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4430.value));
IkReal gconst103=(r11*x4428);
IkReal gconst104=(x4427*x4428);
CheckValue<IkReal> x4431 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4431.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4431.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4432=((-1.0)*r10);
IkReal x4433=x4428;
CheckValue<IkReal> x4435 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4432),IKFAST_ATAN2_MAGTHRESH);
if(!x4435.valid){
continue;
}
IkReal x4434=((-1.0)*(x4435.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4434;
IkReal gconst102=x4434;
IkReal gconst103=(r11*x4433);
IkReal gconst104=(x4432*x4433);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4436=((1.0)*sj0);
IkReal x4437=((1.0)*gconst103);
CheckValue<IkReal> x4438=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4437)))),-1);
if(!x4438.valid){
continue;
}
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4436)))),IkReal(((((-1.0)*gconst103*r11*x4436))+(((-1.0)*cj0*r01*x4437))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4438.value)))+(x4439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4440=IKsin(j4);
IkReal x4441=IKcos(j4);
IkReal x4442=(gconst103*r11);
IkReal x4443=((1.0)*cj2);
IkReal x4444=((1.0)*sj0);
IkReal x4445=(cj1*sj2);
IkReal x4446=((1.0)*x4441);
IkReal x4447=(gconst103*x4441);
IkReal x4448=(gconst103*x4440);
IkReal x4449=((1.0)*gconst104*x4440);
evalcond[0]=(((r21*x4448))+(((-1.0)*r22*x4446))+(((-1.0)*r20*x4449)));
evalcond[1]=(cj0+(((-1.0)*r12*x4446))+((x4440*x4442))+(((-1.0)*r10*x4449)));
evalcond[2]=((((-1.0)*x4444))+((r01*x4448))+(((-1.0)*r02*x4446))+(((-1.0)*r00*x4449)));
evalcond[3]=(((r21*x4447))+((sj1*sj2))+(((-1.0)*cj1*x4443))+((r22*x4440))+(((-1.0)*gconst104*r20*x4446)));
evalcond[4]=((((-1.0)*gconst104*r00*x4446))+((r01*x4447))+(((-1.0)*cj0*sj1*x4443))+(((-1.0)*cj0*x4445))+((r02*x4440)));
evalcond[5]=((((-1.0)*x4444*x4445))+((x4441*x4442))+(((-1.0)*gconst104*r10*x4446))+((r12*x4440))+(((-1.0)*sj0*sj1*x4443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4450=((1.0)*gconst104);
CheckValue<IkReal> x4451 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4450))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4451.valid){
continue;
}
CheckValue<IkReal> x4452=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4450)))),-1);
if(!x4452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4451.value)+(((1.5707963267949)*(x4452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4453=IKsin(j4);
IkReal x4454=IKcos(j4);
IkReal x4455=(gconst103*r11);
IkReal x4456=((1.0)*cj2);
IkReal x4457=((1.0)*sj0);
IkReal x4458=(cj1*sj2);
IkReal x4459=((1.0)*x4454);
IkReal x4460=(gconst103*x4454);
IkReal x4461=(gconst103*x4453);
IkReal x4462=((1.0)*gconst104*x4453);
evalcond[0]=((((-1.0)*r22*x4459))+((r21*x4461))+(((-1.0)*r20*x4462)));
evalcond[1]=(cj0+((x4453*x4455))+(((-1.0)*r12*x4459))+(((-1.0)*r10*x4462)));
evalcond[2]=((((-1.0)*x4457))+(((-1.0)*r02*x4459))+((r01*x4461))+(((-1.0)*r00*x4462)));
evalcond[3]=((((-1.0)*gconst104*r20*x4459))+((sj1*sj2))+(((-1.0)*cj1*x4456))+((r21*x4460))+((r22*x4453)));
evalcond[4]=((((-1.0)*gconst104*r00*x4459))+(((-1.0)*cj0*sj1*x4456))+((r01*x4460))+(((-1.0)*cj0*x4458))+((r02*x4453)));
evalcond[5]=((((-1.0)*x4457*x4458))+(((-1.0)*gconst104*r10*x4459))+((r12*x4453))+(((-1.0)*sj0*sj1*x4456))+((x4454*x4455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4463=((-1.0)*r11);
IkReal x4465 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4465)==0){
continue;
}
IkReal x4464=pow(x4465,-0.5);
CheckValue<IkReal> x4466 = IKatan2WithCheck(IkReal(x4463),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4466.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4466.value))));
IkReal gconst106=(x4463*x4464);
IkReal gconst107=((1.0)*r10*x4464);
CheckValue<IkReal> x4467 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4467.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4467.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4468=((-1.0)*r11);
CheckValue<IkReal> x4471 = IKatan2WithCheck(IkReal(x4468),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4471.valid){
continue;
}
IkReal x4469=((1.0)*(x4471.value));
IkReal x4470=x4464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4469)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4469)));
IkReal gconst106=(x4468*x4470);
IkReal gconst107=((1.0)*r10*x4470);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4472=((-1.0)*r11);
CheckValue<IkReal> x4475 = IKatan2WithCheck(IkReal(x4472),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4475.valid){
continue;
}
IkReal x4473=((1.0)*(x4475.value));
IkReal x4474=x4464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4473)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4473)));
IkReal gconst106=(x4472*x4474);
IkReal gconst107=((1.0)*r10*x4474);
IkReal x4476=r12*r12;
IkReal x4477=((1.0)*sj0);
IkReal x4478=(cj0*r02);
IkReal x4479=x4464;
j4eval[0]=((IKabs((((sj0*x4476*x4479))+(((-1.0)*x4477*x4479))+((r12*x4478*x4479)))))+(IKabs(((((-1.0)*r12*x4477))+(((-1.0)*x4478))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4480=((-1.0)*r11);
CheckValue<IkReal> x4483 = IKatan2WithCheck(IkReal(x4480),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4483.valid){
continue;
}
IkReal x4481=((1.0)*(x4483.value));
IkReal x4482=x4464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4481)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4481)));
IkReal gconst106=(x4480*x4482);
IkReal gconst107=((1.0)*r10*x4482);
IkReal x4484=r12*r12;
IkReal x4485=((1.0)+(((-1.0)*x4484)));
IkReal x4486=(r22*sj1*sj2);
IkReal x4487=(cj1*cj2*r22);
CheckValue<IkReal> x4494=IKPowWithIntegerCheck(x4485,-1);
if(!x4494.valid){
continue;
}
IkReal x4488=x4494.value;
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(((-1.0)+x4484),-1);
if(!x4495.valid){
continue;
}
IkReal x4489=x4495.value;
IkReal x4490=((1.0)*x4488);
if((x4485) < -0.00001)
continue;
IkReal x4491=IKsqrt(x4485);
IkReal x4492=(r12*x4489*x4491);
IkReal x4493=((((-1.0)*x4490*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x4488))+(((-1.0)*(r22*r22)))+(((-1.0)*x4490*(r11*r11)*(r21*r21))));
j4eval[0]=x4493;
j4eval[1]=((IKabs(((((-1.0)*x4487))+x4486)))+(IKabs(((((-1.0)*x4486*x4492))+((x4487*x4492))))));
j4eval[2]=IKsign(x4493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4496=(sj1*sj2);
IkReal x4497=(gconst106*r21);
IkReal x4498=(gconst107*r20);
IkReal x4499=(cj1*cj2);
CheckValue<IkReal> x4500 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4499))+((r22*x4496)))),IkReal(((((-1.0)*x4496*x4498))+(((-1.0)*x4497*x4499))+((x4498*x4499))+((x4496*x4497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4500.valid){
continue;
}
CheckValue<IkReal> x4501=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4498*x4498)))+(((-1.0)*(x4497*x4497)))+(((-1.0)*(r22*r22)))+(((2.0)*x4497*x4498)))),-1);
if(!x4501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4500.value)+(((1.5707963267949)*(x4501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4502=IKsin(j4);
IkReal x4503=IKcos(j4);
IkReal x4504=(gconst107*r10);
IkReal x4505=(gconst107*r00);
IkReal x4506=((1.0)*cj2);
IkReal x4507=(gconst107*r20);
IkReal x4508=((1.0)*sj0);
IkReal x4509=(cj1*sj2);
IkReal x4510=((1.0)*x4503);
IkReal x4511=(gconst106*x4503);
IkReal x4512=(gconst106*x4502);
IkReal x4513=((1.0)*x4502);
evalcond[0]=(((r21*x4512))+(((-1.0)*x4507*x4513))+(((-1.0)*r22*x4510)));
evalcond[1]=(cj0+(((-1.0)*r12*x4510))+(((-1.0)*x4504*x4513))+((r11*x4512)));
evalcond[2]=((((-1.0)*r02*x4510))+(((-1.0)*x4508))+(((-1.0)*x4505*x4513))+((r01*x4512)));
evalcond[3]=((((-1.0)*cj1*x4506))+((r22*x4502))+((sj1*sj2))+((r21*x4511))+(((-1.0)*x4507*x4510)));
evalcond[4]=((((-1.0)*x4505*x4510))+((r02*x4502))+(((-1.0)*cj0*x4509))+((r01*x4511))+(((-1.0)*cj0*sj1*x4506)));
evalcond[5]=(((r12*x4502))+(((-1.0)*x4508*x4509))+(((-1.0)*x4504*x4510))+((r11*x4511))+(((-1.0)*sj0*sj1*x4506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4514=((1.0)*sj0);
IkReal x4515=((1.0)*gconst106);
CheckValue<IkReal> x4516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4515)))),-1);
if(!x4516.valid){
continue;
}
CheckValue<IkReal> x4517 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4514))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4515))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4514))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4516.value)))+(x4517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4518=IKsin(j4);
IkReal x4519=IKcos(j4);
IkReal x4520=(gconst107*r10);
IkReal x4521=(gconst107*r00);
IkReal x4522=((1.0)*cj2);
IkReal x4523=(gconst107*r20);
IkReal x4524=((1.0)*sj0);
IkReal x4525=(cj1*sj2);
IkReal x4526=((1.0)*x4519);
IkReal x4527=(gconst106*x4519);
IkReal x4528=(gconst106*x4518);
IkReal x4529=((1.0)*x4518);
evalcond[0]=(((r21*x4528))+(((-1.0)*r22*x4526))+(((-1.0)*x4523*x4529)));
evalcond[1]=((((-1.0)*r12*x4526))+((r11*x4528))+cj0+(((-1.0)*x4520*x4529)));
evalcond[2]=(((r01*x4528))+(((-1.0)*x4524))+(((-1.0)*x4521*x4529))+(((-1.0)*r02*x4526)));
evalcond[3]=(((r21*x4527))+((sj1*sj2))+(((-1.0)*cj1*x4522))+(((-1.0)*x4523*x4526))+((r22*x4518)));
evalcond[4]=(((r02*x4518))+((r01*x4527))+(((-1.0)*cj0*sj1*x4522))+(((-1.0)*x4521*x4526))+(((-1.0)*cj0*x4525)));
evalcond[5]=(((r11*x4527))+(((-1.0)*x4520*x4526))+((r12*x4518))+(((-1.0)*x4524*x4525))+(((-1.0)*sj0*sj1*x4522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4530=((1.0)*gconst107);
CheckValue<IkReal> x4531 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4530))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4531.valid){
continue;
}
CheckValue<IkReal> x4532=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4530)))),-1);
if(!x4532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4531.value)+(((1.5707963267949)*(x4532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4533=IKsin(j4);
IkReal x4534=IKcos(j4);
IkReal x4535=(gconst107*r10);
IkReal x4536=(gconst107*r00);
IkReal x4537=((1.0)*cj2);
IkReal x4538=(gconst107*r20);
IkReal x4539=((1.0)*sj0);
IkReal x4540=(cj1*sj2);
IkReal x4541=((1.0)*x4534);
IkReal x4542=(gconst106*x4534);
IkReal x4543=(gconst106*x4533);
IkReal x4544=((1.0)*x4533);
evalcond[0]=((((-1.0)*r22*x4541))+(((-1.0)*x4538*x4544))+((r21*x4543)));
evalcond[1]=(cj0+(((-1.0)*x4535*x4544))+(((-1.0)*r12*x4541))+((r11*x4543)));
evalcond[2]=((((-1.0)*r02*x4541))+(((-1.0)*x4539))+(((-1.0)*x4536*x4544))+((r01*x4543)));
evalcond[3]=((((-1.0)*cj1*x4537))+((sj1*sj2))+((r22*x4533))+(((-1.0)*x4538*x4541))+((r21*x4542)));
evalcond[4]=((((-1.0)*cj0*x4540))+(((-1.0)*x4536*x4541))+((r01*x4542))+((r02*x4533))+(((-1.0)*cj0*sj1*x4537)));
evalcond[5]=(((r12*x4533))+(((-1.0)*x4535*x4541))+((r11*x4542))+(((-1.0)*x4539*x4540))+(((-1.0)*sj0*sj1*x4537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4545=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4545;
j4eval[1]=IKsign(x4545);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4546=((1.0)*cj5);
IkReal x4547=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4546)));
j4eval[0]=x4547;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4546)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4548=(sj1*sj2);
IkReal x4549=(cj5*r10);
IkReal x4550=(r11*sj5);
IkReal x4551=(cj1*cj2);
IkReal x4552=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4552;
j4eval[1]=((IKabs((((r12*x4551))+(((-1.0)*r12*x4548)))))+(IKabs(((((-1.0)*x4550*x4551))+(((-1.0)*x4548*x4549))+((x4548*x4550))+((x4549*x4551))))));
j4eval[2]=IKsign(x4552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4553=(sj1*sj2);
IkReal x4554=(cj5*r10);
IkReal x4555=(r11*sj5);
IkReal x4556=(cj1*cj2);
CheckValue<IkReal> x4557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4557.valid){
continue;
}
CheckValue<IkReal> x4558 = IKatan2WithCheck(IkReal((((x4553*x4555))+(((-1.0)*x4555*x4556))+(((-1.0)*x4553*x4554))+((x4554*x4556)))),IkReal((((r12*x4556))+(((-1.0)*r12*x4553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4557.value)))+(x4558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4559=IKcos(j4);
IkReal x4560=IKsin(j4);
IkReal x4561=(cj5*r00);
IkReal x4562=(cj5*r10);
IkReal x4563=(r21*sj5);
IkReal x4564=((1.0)*cj2);
IkReal x4565=(cj5*r20);
IkReal x4566=((1.0)*x4559);
IkReal x4567=((1.0)*x4560);
IkReal x4568=(sj5*x4560);
IkReal x4569=(sj5*x4559);
evalcond[0]=(((r11*x4569))+((r12*x4560))+(((-1.0)*x4562*x4566)));
evalcond[1]=((((-1.0)*r22*x4566))+((x4560*x4563))+(((-1.0)*x4565*x4567)));
evalcond[2]=((((-1.0)*r02*x4566))+(((-1.0)*x4561*x4567))+((r01*x4568)));
evalcond[3]=((1.0)+((r11*x4568))+(((-1.0)*r12*x4566))+(((-1.0)*x4562*x4567)));
evalcond[4]=(((r22*x4560))+(((-1.0)*cj1*x4564))+((sj1*sj2))+((x4559*x4563))+(((-1.0)*x4565*x4566)));
evalcond[5]=((((-1.0)*sj1*x4564))+((r02*x4560))+(((-1.0)*cj1*sj2))+(((-1.0)*x4561*x4566))+((r01*x4569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4570=((1.0)*cj5);
CheckValue<IkReal> x4571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4570))+(((-1.0)*r00*sj5)))),-1);
if(!x4571.valid){
continue;
}
CheckValue<IkReal> x4572 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4571.value)))+(x4572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4573=IKcos(j4);
IkReal x4574=IKsin(j4);
IkReal x4575=(cj5*r00);
IkReal x4576=(cj5*r10);
IkReal x4577=(r21*sj5);
IkReal x4578=((1.0)*cj2);
IkReal x4579=(cj5*r20);
IkReal x4580=((1.0)*x4573);
IkReal x4581=((1.0)*x4574);
IkReal x4582=(sj5*x4574);
IkReal x4583=(sj5*x4573);
evalcond[0]=(((r12*x4574))+((r11*x4583))+(((-1.0)*x4576*x4580)));
evalcond[1]=((((-1.0)*r22*x4580))+(((-1.0)*x4579*x4581))+((x4574*x4577)));
evalcond[2]=((((-1.0)*x4575*x4581))+(((-1.0)*r02*x4580))+((r01*x4582)));
evalcond[3]=((1.0)+((r11*x4582))+(((-1.0)*r12*x4580))+(((-1.0)*x4576*x4581)));
evalcond[4]=((((-1.0)*x4579*x4580))+(((-1.0)*cj1*x4578))+((r22*x4574))+((sj1*sj2))+((x4573*x4577)));
evalcond[5]=((((-1.0)*x4575*x4580))+(((-1.0)*sj1*x4578))+((r02*x4574))+(((-1.0)*cj1*sj2))+((r01*x4583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4584.valid){
continue;
}
CheckValue<IkReal> x4585 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4584.value)))+(x4585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4586=IKcos(j4);
IkReal x4587=IKsin(j4);
IkReal x4588=(cj5*r00);
IkReal x4589=(cj5*r10);
IkReal x4590=(r21*sj5);
IkReal x4591=((1.0)*cj2);
IkReal x4592=(cj5*r20);
IkReal x4593=((1.0)*x4586);
IkReal x4594=((1.0)*x4587);
IkReal x4595=(sj5*x4587);
IkReal x4596=(sj5*x4586);
evalcond[0]=((((-1.0)*x4589*x4593))+((r11*x4596))+((r12*x4587)));
evalcond[1]=((((-1.0)*r22*x4593))+(((-1.0)*x4592*x4594))+((x4587*x4590)));
evalcond[2]=((((-1.0)*r02*x4593))+(((-1.0)*x4588*x4594))+((r01*x4595)));
evalcond[3]=((1.0)+(((-1.0)*x4589*x4594))+((r11*x4595))+(((-1.0)*r12*x4593)));
evalcond[4]=(((r22*x4587))+((sj1*sj2))+(((-1.0)*x4592*x4593))+(((-1.0)*cj1*x4591))+((x4586*x4590)));
evalcond[5]=(((r02*x4587))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4591))+(((-1.0)*x4588*x4593))+((r01*x4596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4597=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4597;
j4eval[1]=IKsign(x4597);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4598=((1.0)*cj5);
IkReal x4599=((((-1.0)*r21*x4598))+(((-1.0)*r20*sj5)));
j4eval[0]=x4599;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4598))))));
j4eval[2]=IKsign(x4599);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4600=cj5*cj5;
IkReal x4601=r11*r11;
IkReal x4602=(r11*sj5);
IkReal x4603=(cj5*r10);
IkReal x4604=((r12*r12)+(((-2.0)*x4602*x4603))+x4601+((x4600*(r10*r10)))+(((-1.0)*x4600*x4601)));
j4eval[0]=x4604;
j4eval[1]=IKsign(x4604);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4603))+x4602))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4605=cj5*cj5;
IkReal x4606=r11*r11;
IkReal x4607=(cj5*r10);
IkReal x4608=(r11*sj5);
CheckValue<IkReal> x4609 = IKatan2WithCheck(IkReal(((((-1.0)*x4607))+x4608)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4609.valid){
continue;
}
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4606+(((-1.0)*x4605*x4606))+(((-2.0)*x4607*x4608))+((x4605*(r10*r10))))),-1);
if(!x4610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4609.value)+(((1.5707963267949)*(x4610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4611=IKcos(j4);
IkReal x4612=IKsin(j4);
IkReal x4613=(cj5*r00);
IkReal x4614=(cj5*r10);
IkReal x4615=(r21*sj5);
IkReal x4616=(cj5*r20);
IkReal x4617=((1.0)*x4611);
IkReal x4618=((1.0)*x4612);
IkReal x4619=(sj5*x4612);
IkReal x4620=(sj5*x4611);
evalcond[0]=(((r11*x4620))+((r12*x4612))+(((-1.0)*x4614*x4617)));
evalcond[1]=((((-1.0)*r22*x4617))+(((-1.0)*x4616*x4618))+((x4612*x4615)));
evalcond[2]=((((-1.0)*r02*x4617))+((r01*x4619))+(((-1.0)*x4613*x4618)));
evalcond[3]=((-1.0)+((r11*x4619))+(((-1.0)*r12*x4617))+(((-1.0)*x4614*x4618)));
evalcond[4]=(((cj2*sj1))+((r02*x4612))+((cj1*sj2))+((r01*x4620))+(((-1.0)*x4613*x4617)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x4611*x4615))+((sj1*sj2))+((r22*x4612))+(((-1.0)*x4616*x4617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4621=((1.0)*cj5);
CheckValue<IkReal> x4622 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4622.valid){
continue;
}
CheckValue<IkReal> x4623=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4621))+(((-1.0)*r20*sj5)))),-1);
if(!x4623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4622.value)+(((1.5707963267949)*(x4623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4624=IKcos(j4);
IkReal x4625=IKsin(j4);
IkReal x4626=(cj5*r00);
IkReal x4627=(cj5*r10);
IkReal x4628=(r21*sj5);
IkReal x4629=(cj5*r20);
IkReal x4630=((1.0)*x4624);
IkReal x4631=((1.0)*x4625);
IkReal x4632=(sj5*x4625);
IkReal x4633=(sj5*x4624);
evalcond[0]=(((r12*x4625))+((r11*x4633))+(((-1.0)*x4627*x4630)));
evalcond[1]=(((x4625*x4628))+(((-1.0)*x4629*x4631))+(((-1.0)*r22*x4630)));
evalcond[2]=(((r01*x4632))+(((-1.0)*r02*x4630))+(((-1.0)*x4626*x4631)));
evalcond[3]=((-1.0)+((r11*x4632))+(((-1.0)*x4627*x4631))+(((-1.0)*r12*x4630)));
evalcond[4]=(((cj2*sj1))+((r01*x4633))+((cj1*sj2))+((r02*x4625))+(((-1.0)*x4626*x4630)));
evalcond[5]=(((x4624*x4628))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4625))+(((-1.0)*x4629*x4630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4634 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4634.valid){
continue;
}
CheckValue<IkReal> x4635=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4634.value)+(((1.5707963267949)*(x4635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4636=IKcos(j4);
IkReal x4637=IKsin(j4);
IkReal x4638=(cj5*r00);
IkReal x4639=(cj5*r10);
IkReal x4640=(r21*sj5);
IkReal x4641=(cj5*r20);
IkReal x4642=((1.0)*x4636);
IkReal x4643=((1.0)*x4637);
IkReal x4644=(sj5*x4637);
IkReal x4645=(sj5*x4636);
evalcond[0]=(((r12*x4637))+((r11*x4645))+(((-1.0)*x4639*x4642)));
evalcond[1]=((((-1.0)*r22*x4642))+(((-1.0)*x4641*x4643))+((x4637*x4640)));
evalcond[2]=((((-1.0)*r02*x4642))+((r01*x4644))+(((-1.0)*x4638*x4643)));
evalcond[3]=((-1.0)+((r11*x4644))+(((-1.0)*r12*x4642))+(((-1.0)*x4639*x4643)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4645))+((r02*x4637))+(((-1.0)*x4638*x4642)));
evalcond[5]=(((x4636*x4640))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4641*x4642))+((r22*x4637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4646=((-1.0)*r00);
IkReal x4648 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4648)==0){
continue;
}
IkReal x4647=pow(x4648,-0.5);
CheckValue<IkReal> x4649 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4646),IKFAST_ATAN2_MAGTHRESH);
if(!x4649.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4649.value));
IkReal gconst109=(r01*x4647);
IkReal gconst110=(x4646*x4647);
CheckValue<IkReal> x4650 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4650.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4650.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4651=((-1.0)*r00);
IkReal x4652=x4647;
CheckValue<IkReal> x4654 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4651),IKFAST_ATAN2_MAGTHRESH);
if(!x4654.valid){
continue;
}
IkReal x4653=((-1.0)*(x4654.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4653;
IkReal gconst108=x4653;
IkReal gconst109=(r01*x4652);
IkReal gconst110=(x4651*x4652);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4655=((1.0)*sj0);
IkReal x4656=((1.0)*gconst109);
CheckValue<IkReal> x4657 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4655)))),IkReal(((((-1.0)*cj0*r01*x4656))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4657.valid){
continue;
}
CheckValue<IkReal> x4658=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4656))+(((-1.0)*gconst110*r21)))),-1);
if(!x4658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4657.value)+(((1.5707963267949)*(x4658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4659=IKsin(j4);
IkReal x4660=IKcos(j4);
IkReal x4661=(gconst109*r21);
IkReal x4662=((1.0)*cj2);
IkReal x4663=((1.0)*sj0);
IkReal x4664=(cj1*sj2);
IkReal x4665=((1.0)*x4660);
IkReal x4666=(gconst109*x4659);
IkReal x4667=(gconst109*x4660);
IkReal x4668=((1.0)*gconst110*x4659);
evalcond[0]=((((-1.0)*r20*x4668))+((x4659*x4661))+(((-1.0)*r22*x4665)));
evalcond[1]=(cj0+(((-1.0)*r10*x4668))+((r11*x4666))+(((-1.0)*r12*x4665)));
evalcond[2]=(((r01*x4666))+(((-1.0)*r00*x4668))+(((-1.0)*x4663))+(((-1.0)*r02*x4665)));
evalcond[3]=((((-1.0)*gconst110*r20*x4665))+((sj1*sj2))+((r22*x4659))+((x4660*x4661))+(((-1.0)*cj1*x4662)));
evalcond[4]=((((-1.0)*cj0*x4664))+((r01*x4667))+((r02*x4659))+(((-1.0)*cj0*sj1*x4662))+(((-1.0)*gconst110*r00*x4665)));
evalcond[5]=(((r12*x4659))+(((-1.0)*gconst110*r10*x4665))+(((-1.0)*x4663*x4664))+((r11*x4667))+(((-1.0)*sj0*sj1*x4662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4669=((1.0)*gconst110);
CheckValue<IkReal> x4670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4669))+(((-1.0)*gconst109*r10)))),-1);
if(!x4670.valid){
continue;
}
CheckValue<IkReal> x4671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4669))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4670.value)))+(x4671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4672=IKsin(j4);
IkReal x4673=IKcos(j4);
IkReal x4674=(gconst109*r21);
IkReal x4675=((1.0)*cj2);
IkReal x4676=((1.0)*sj0);
IkReal x4677=(cj1*sj2);
IkReal x4678=((1.0)*x4673);
IkReal x4679=(gconst109*x4672);
IkReal x4680=(gconst109*x4673);
IkReal x4681=((1.0)*gconst110*x4672);
evalcond[0]=(((x4672*x4674))+(((-1.0)*r22*x4678))+(((-1.0)*r20*x4681)));
evalcond[1]=(cj0+((r11*x4679))+(((-1.0)*r12*x4678))+(((-1.0)*r10*x4681)));
evalcond[2]=((((-1.0)*r02*x4678))+(((-1.0)*r00*x4681))+(((-1.0)*x4676))+((r01*x4679)));
evalcond[3]=((((-1.0)*cj1*x4675))+((x4673*x4674))+((sj1*sj2))+((r22*x4672))+(((-1.0)*gconst110*r20*x4678)));
evalcond[4]=(((r02*x4672))+(((-1.0)*cj0*x4677))+(((-1.0)*cj0*sj1*x4675))+((r01*x4680))+(((-1.0)*gconst110*r00*x4678)));
evalcond[5]=((((-1.0)*gconst110*r10*x4678))+(((-1.0)*x4676*x4677))+(((-1.0)*sj0*sj1*x4675))+((r12*x4672))+((r11*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4682=((-1.0)*r01);
IkReal x4684 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4684)==0){
continue;
}
IkReal x4683=pow(x4684,-0.5);
CheckValue<IkReal> x4685 = IKatan2WithCheck(IkReal(x4682),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4685.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4685.value))));
IkReal gconst112=(x4682*x4683);
IkReal gconst113=((1.0)*r00*x4683);
CheckValue<IkReal> x4686 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4686.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4686.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4687=((-1.0)*r01);
CheckValue<IkReal> x4690 = IKatan2WithCheck(IkReal(x4687),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4690.valid){
continue;
}
IkReal x4688=((1.0)*(x4690.value));
IkReal x4689=x4683;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4688)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4688)));
IkReal gconst112=(x4687*x4689);
IkReal gconst113=((1.0)*r00*x4689);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4691=((-1.0)*r01);
CheckValue<IkReal> x4694 = IKatan2WithCheck(IkReal(x4691),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4694.valid){
continue;
}
IkReal x4692=((1.0)*(x4694.value));
IkReal x4693=x4683;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4692)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4692)));
IkReal gconst112=(x4691*x4693);
IkReal gconst113=((1.0)*r00*x4693);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4695=((-1.0)*r01);
CheckValue<IkReal> x4698 = IKatan2WithCheck(IkReal(x4695),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4698.valid){
continue;
}
IkReal x4696=((1.0)*(x4698.value));
IkReal x4697=x4683;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4696)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4696)));
IkReal gconst112=(x4695*x4697);
IkReal gconst113=((1.0)*r00*x4697);
IkReal x4699=r02*r02;
IkReal x4700=(r12*sj0);
IkReal x4701=((1.0)*cj0);
IkReal x4702=x4683;
j4eval[0]=((IKabs((((cj0*x4699*x4702))+((r02*x4700*x4702))+(((-1.0)*x4701*x4702)))))+(IKabs(((((-1.0)*x4700))+(((-1.0)*r02*x4701))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4703=((1.0)*sj0);
IkReal x4704=((1.0)*gconst112);
CheckValue<IkReal> x4705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4704)))),-1);
if(!x4705.valid){
continue;
}
CheckValue<IkReal> x4706 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4703))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4704))+(((-1.0)*gconst112*r11*x4703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4705.value)))+(x4706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4707=IKsin(j4);
IkReal x4708=IKcos(j4);
IkReal x4709=(gconst113*r20);
IkReal x4710=(gconst112*r21);
IkReal x4711=((1.0)*cj2);
IkReal x4712=(gconst113*r00);
IkReal x4713=(gconst113*r10);
IkReal x4714=((1.0)*sj0);
IkReal x4715=(cj1*sj2);
IkReal x4716=((1.0)*x4708);
IkReal x4717=((1.0)*x4707);
IkReal x4718=(gconst112*x4708);
IkReal x4719=(gconst112*x4707);
evalcond[0]=((((-1.0)*x4709*x4717))+(((-1.0)*r22*x4716))+((x4707*x4710)));
evalcond[1]=(cj0+(((-1.0)*r12*x4716))+(((-1.0)*x4713*x4717))+((r11*x4719)));
evalcond[2]=((((-1.0)*x4712*x4717))+(((-1.0)*r02*x4716))+((r01*x4719))+(((-1.0)*x4714)));
evalcond[3]=((((-1.0)*x4709*x4716))+((sj1*sj2))+(((-1.0)*cj1*x4711))+((x4708*x4710))+((r22*x4707)));
evalcond[4]=((((-1.0)*x4712*x4716))+(((-1.0)*cj0*x4715))+((r01*x4718))+(((-1.0)*cj0*sj1*x4711))+((r02*x4707)));
evalcond[5]=((((-1.0)*x4714*x4715))+(((-1.0)*sj0*sj1*x4711))+(((-1.0)*x4713*x4716))+((r11*x4718))+((r12*x4707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4720=((1.0)*gconst113);
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4720))+(((-1.0)*gconst112*r10)))),-1);
if(!x4721.valid){
continue;
}
CheckValue<IkReal> x4722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4721.value)))+(x4722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4723=IKsin(j4);
IkReal x4724=IKcos(j4);
IkReal x4725=(gconst113*r20);
IkReal x4726=(gconst112*r21);
IkReal x4727=((1.0)*cj2);
IkReal x4728=(gconst113*r00);
IkReal x4729=(gconst113*r10);
IkReal x4730=((1.0)*sj0);
IkReal x4731=(cj1*sj2);
IkReal x4732=((1.0)*x4724);
IkReal x4733=((1.0)*x4723);
IkReal x4734=(gconst112*x4724);
IkReal x4735=(gconst112*x4723);
evalcond[0]=(((x4723*x4726))+(((-1.0)*x4725*x4733))+(((-1.0)*r22*x4732)));
evalcond[1]=(((r11*x4735))+cj0+(((-1.0)*r12*x4732))+(((-1.0)*x4729*x4733)));
evalcond[2]=((((-1.0)*x4728*x4733))+(((-1.0)*x4730))+((r01*x4735))+(((-1.0)*r02*x4732)));
evalcond[3]=((((-1.0)*cj1*x4727))+((sj1*sj2))+(((-1.0)*x4725*x4732))+((x4724*x4726))+((r22*x4723)));
evalcond[4]=((((-1.0)*x4728*x4732))+((r02*x4723))+(((-1.0)*cj0*sj1*x4727))+(((-1.0)*cj0*x4731))+((r01*x4734)));
evalcond[5]=(((r11*x4734))+(((-1.0)*x4730*x4731))+(((-1.0)*sj0*sj1*x4727))+(((-1.0)*x4729*x4732))+((r12*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4736=((1.0)*gconst113);
CheckValue<IkReal> x4737 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4736))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4737.valid){
continue;
}
CheckValue<IkReal> x4738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4736))+(((-1.0)*gconst112*r00)))),-1);
if(!x4738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4737.value)+(((1.5707963267949)*(x4738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4739=IKsin(j4);
IkReal x4740=IKcos(j4);
IkReal x4741=(gconst113*r20);
IkReal x4742=(gconst112*r21);
IkReal x4743=((1.0)*cj2);
IkReal x4744=(gconst113*r00);
IkReal x4745=(gconst113*r10);
IkReal x4746=((1.0)*sj0);
IkReal x4747=(cj1*sj2);
IkReal x4748=((1.0)*x4740);
IkReal x4749=((1.0)*x4739);
IkReal x4750=(gconst112*x4740);
IkReal x4751=(gconst112*x4739);
evalcond[0]=((((-1.0)*r22*x4748))+(((-1.0)*x4741*x4749))+((x4739*x4742)));
evalcond[1]=((((-1.0)*r12*x4748))+cj0+((r11*x4751))+(((-1.0)*x4745*x4749)));
evalcond[2]=(((r01*x4751))+(((-1.0)*x4744*x4749))+(((-1.0)*x4746))+(((-1.0)*r02*x4748)));
evalcond[3]=(((x4740*x4742))+(((-1.0)*cj1*x4743))+((sj1*sj2))+(((-1.0)*x4741*x4748))+((r22*x4739)));
evalcond[4]=(((r01*x4750))+(((-1.0)*cj0*x4747))+(((-1.0)*x4744*x4748))+((r02*x4739))+(((-1.0)*cj0*sj1*x4743)));
evalcond[5]=(((r11*x4750))+(((-1.0)*x4746*x4747))+(((-1.0)*x4745*x4748))+(((-1.0)*sj0*sj1*x4743))+((r12*x4739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4752=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4752;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4753=((1.0)*cj5);
IkReal x4754=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4753)));
j4eval[0]=x4754;
j4eval[1]=((IKabs(((((-1.0)*r20*x4753))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4754);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4755=cj5*cj5;
IkReal x4756=r01*r01;
IkReal x4757=(cj5*r00);
IkReal x4758=(r01*sj5);
IkReal x4759=((((-1.0)*x4755*x4756))+((x4755*(r00*r00)))+(((-2.0)*x4757*x4758))+x4756+(r02*r02));
j4eval[0]=x4759;
j4eval[1]=IKsign(x4759);
j4eval[2]=((IKabs(r02))+(IKabs((x4758+(((-1.0)*x4757))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4760=cj5*cj5;
IkReal x4761=r01*r01;
IkReal x4762=(r01*sj5);
IkReal x4763=(cj5*r00);
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKsign((x4761+((x4760*(r00*r00)))+(((-2.0)*x4762*x4763))+(r02*r02)+(((-1.0)*x4760*x4761)))),-1);
if(!x4764.valid){
continue;
}
CheckValue<IkReal> x4765 = IKatan2WithCheck(IkReal(((((-1.0)*x4763))+x4762)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4764.value)))+(x4765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4766=IKcos(j4);
IkReal x4767=IKsin(j4);
IkReal x4768=(cj5*r00);
IkReal x4769=(cj5*r10);
IkReal x4770=(r21*sj5);
IkReal x4771=((1.0)*cj2);
IkReal x4772=(cj5*r20);
IkReal x4773=((1.0)*x4766);
IkReal x4774=((1.0)*x4767);
IkReal x4775=(sj5*x4767);
IkReal x4776=(sj5*x4766);
evalcond[0]=(((r02*x4767))+((r01*x4776))+(((-1.0)*x4768*x4773)));
evalcond[1]=((((-1.0)*r22*x4773))+((x4767*x4770))+(((-1.0)*x4772*x4774)));
evalcond[2]=((((-1.0)*x4769*x4774))+((r11*x4775))+(((-1.0)*r12*x4773)));
evalcond[3]=((-1.0)+((r01*x4775))+(((-1.0)*x4768*x4774))+(((-1.0)*r02*x4773)));
evalcond[4]=(((r22*x4767))+(((-1.0)*cj1*x4771))+((x4766*x4770))+((sj1*sj2))+(((-1.0)*x4772*x4773)));
evalcond[5]=((((-1.0)*x4769*x4773))+((r11*x4776))+(((-1.0)*sj1*x4771))+(((-1.0)*cj1*sj2))+((r12*x4767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4777=((1.0)*cj5);
CheckValue<IkReal> x4778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4777))+(((-1.0)*r10*sj5)))),-1);
if(!x4778.valid){
continue;
}
CheckValue<IkReal> x4779 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4778.value)))+(x4779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4780=IKcos(j4);
IkReal x4781=IKsin(j4);
IkReal x4782=(cj5*r00);
IkReal x4783=(cj5*r10);
IkReal x4784=(r21*sj5);
IkReal x4785=((1.0)*cj2);
IkReal x4786=(cj5*r20);
IkReal x4787=((1.0)*x4780);
IkReal x4788=((1.0)*x4781);
IkReal x4789=(sj5*x4781);
IkReal x4790=(sj5*x4780);
evalcond[0]=(((r02*x4781))+((r01*x4790))+(((-1.0)*x4782*x4787)));
evalcond[1]=((((-1.0)*x4786*x4788))+(((-1.0)*r22*x4787))+((x4781*x4784)));
evalcond[2]=((((-1.0)*x4783*x4788))+((r11*x4789))+(((-1.0)*r12*x4787)));
evalcond[3]=((-1.0)+((r01*x4789))+(((-1.0)*x4782*x4788))+(((-1.0)*r02*x4787)));
evalcond[4]=(((x4780*x4784))+((r22*x4781))+(((-1.0)*x4786*x4787))+((sj1*sj2))+(((-1.0)*cj1*x4785)));
evalcond[5]=(((r12*x4781))+(((-1.0)*x4783*x4787))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4785))+((r11*x4790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4791=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4791.valid){
continue;
}
CheckValue<IkReal> x4792 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4791.value)))+(x4792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4793=IKcos(j4);
IkReal x4794=IKsin(j4);
IkReal x4795=(cj5*r00);
IkReal x4796=(cj5*r10);
IkReal x4797=(r21*sj5);
IkReal x4798=((1.0)*cj2);
IkReal x4799=(cj5*r20);
IkReal x4800=((1.0)*x4793);
IkReal x4801=((1.0)*x4794);
IkReal x4802=(sj5*x4794);
IkReal x4803=(sj5*x4793);
evalcond[0]=(((r01*x4803))+((r02*x4794))+(((-1.0)*x4795*x4800)));
evalcond[1]=((((-1.0)*r22*x4800))+(((-1.0)*x4799*x4801))+((x4794*x4797)));
evalcond[2]=((((-1.0)*x4796*x4801))+(((-1.0)*r12*x4800))+((r11*x4802)));
evalcond[3]=((-1.0)+((r01*x4802))+(((-1.0)*r02*x4800))+(((-1.0)*x4795*x4801)));
evalcond[4]=(((x4793*x4797))+((sj1*sj2))+(((-1.0)*x4799*x4800))+(((-1.0)*cj1*x4798))+((r22*x4794)));
evalcond[5]=((((-1.0)*sj1*x4798))+(((-1.0)*x4796*x4800))+(((-1.0)*cj1*sj2))+((r12*x4794))+((r11*x4803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4804=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4804;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4805=((1.0)*cj5);
IkReal x4806=((((-1.0)*r21*x4805))+(((-1.0)*r20*sj5)));
j4eval[0]=x4806;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4805))))));
j4eval[2]=IKsign(x4806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4807=cj5*cj5;
IkReal x4808=r01*r01;
IkReal x4809=(r01*sj5);
IkReal x4810=(cj5*r00);
IkReal x4811=((((-1.0)*(r02*r02)))+(((-1.0)*x4807*(r00*r00)))+(((-1.0)*x4808))+((x4807*x4808))+(((2.0)*x4809*x4810)));
j4eval[0]=x4811;
j4eval[1]=IKsign(x4811);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4810))+x4809))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4812=cj5*cj5;
IkReal x4813=r01*r01;
IkReal x4814=(r01*sj5);
IkReal x4815=(cj5*r00);
CheckValue<IkReal> x4816=IKPowWithIntegerCheck(IKsign(((((2.0)*x4814*x4815))+((x4812*x4813))+(((-1.0)*x4813))+(((-1.0)*(r02*r02)))+(((-1.0)*x4812*(r00*r00))))),-1);
if(!x4816.valid){
continue;
}
CheckValue<IkReal> x4817 = IKatan2WithCheck(IkReal(((((-1.0)*x4815))+x4814)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4816.value)))+(x4817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4818=IKcos(j4);
IkReal x4819=IKsin(j4);
IkReal x4820=(cj5*r00);
IkReal x4821=(cj5*r10);
IkReal x4822=(r21*sj5);
IkReal x4823=(cj5*r20);
IkReal x4824=((1.0)*x4818);
IkReal x4825=((1.0)*x4819);
IkReal x4826=(sj5*x4819);
IkReal x4827=(sj5*x4818);
evalcond[0]=(((r02*x4819))+(((-1.0)*x4820*x4824))+((r01*x4827)));
evalcond[1]=(((x4819*x4822))+(((-1.0)*x4823*x4825))+(((-1.0)*r22*x4824)));
evalcond[2]=(((r11*x4826))+(((-1.0)*x4821*x4825))+(((-1.0)*r12*x4824)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4824))+(((-1.0)*x4820*x4825))+((r01*x4826)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4827))+((r12*x4819))+(((-1.0)*x4821*x4824)));
evalcond[5]=(((x4818*x4822))+(((-1.0)*x4823*x4824))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4828=((1.0)*cj5);
CheckValue<IkReal> x4829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4828))+(((-1.0)*r20*sj5)))),-1);
if(!x4829.valid){
continue;
}
CheckValue<IkReal> x4830 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4828))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4829.value)))+(x4830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4831=IKcos(j4);
IkReal x4832=IKsin(j4);
IkReal x4833=(cj5*r00);
IkReal x4834=(cj5*r10);
IkReal x4835=(r21*sj5);
IkReal x4836=(cj5*r20);
IkReal x4837=((1.0)*x4831);
IkReal x4838=((1.0)*x4832);
IkReal x4839=(sj5*x4832);
IkReal x4840=(sj5*x4831);
evalcond[0]=((((-1.0)*x4833*x4837))+((r01*x4840))+((r02*x4832)));
evalcond[1]=((((-1.0)*r22*x4837))+((x4832*x4835))+(((-1.0)*x4836*x4838)));
evalcond[2]=(((r11*x4839))+(((-1.0)*x4834*x4838))+(((-1.0)*r12*x4837)));
evalcond[3]=((1.0)+((r01*x4839))+(((-1.0)*x4833*x4838))+(((-1.0)*r02*x4837)));
evalcond[4]=(((r12*x4832))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4834*x4837))+((r11*x4840)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4832))+((x4831*x4835))+(((-1.0)*x4836*x4837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4841 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4841.valid){
continue;
}
CheckValue<IkReal> x4842=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4841.value)+(((1.5707963267949)*(x4842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4843=IKcos(j4);
IkReal x4844=IKsin(j4);
IkReal x4845=(cj5*r00);
IkReal x4846=(cj5*r10);
IkReal x4847=(r21*sj5);
IkReal x4848=(cj5*r20);
IkReal x4849=((1.0)*x4843);
IkReal x4850=((1.0)*x4844);
IkReal x4851=(sj5*x4844);
IkReal x4852=(sj5*x4843);
evalcond[0]=(((r02*x4844))+((r01*x4852))+(((-1.0)*x4845*x4849)));
evalcond[1]=(((x4844*x4847))+(((-1.0)*x4848*x4850))+(((-1.0)*r22*x4849)));
evalcond[2]=((((-1.0)*x4846*x4850))+(((-1.0)*r12*x4849))+((r11*x4851)));
evalcond[3]=((1.0)+((r01*x4851))+(((-1.0)*r02*x4849))+(((-1.0)*x4845*x4850)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4846*x4849))+((r12*x4844))+((r11*x4852)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4844))+(((-1.0)*x4848*x4849))+((x4843*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4853=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4853);
rxp1_1=(px*r21);
rxp1_2=(r11*x4853);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4854=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4854);
rxp1_1=(px*r21);
rxp1_2=(r11*x4854);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4855=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4855);
rxp1_1=(px*r21);
rxp1_2=(r11*x4855);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4858=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4858.valid){
continue;
}
IkReal x4856=x4858.value;
IkReal x4857=(sj0*x4856);
cj4array[0]=(((cj1*sj2*x4857))+((cj2*sj1*x4857)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4859=IKsin(j4);
IkReal x4860=IKcos(j4);
IkReal x4861=(r21*sj5);
IkReal x4862=((1.0)*cj5*r20);
evalcond[0]=(r02*x4859);
evalcond[1]=((((-1.0)*r02*x4860))+(((-1.0)*sj0)));
evalcond[2]=(((x4859*x4861))+(((-1.0)*x4859*x4862)));
evalcond[3]=(((r11*sj5*x4859))+(((-1.0)*cj5*r10*x4859)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4860*x4861))+(((-1.0)*x4860*x4862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4864=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4864.valid){
continue;
}
IkReal x4863=x4864.value;
cj4array[0]=(((cj1*cj2*x4863))+(((-1.0)*sj1*sj2*x4863)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4865=IKsin(j4);
IkReal x4866=IKcos(j4);
IkReal x4867=((1.0)*sj0);
IkReal x4868=((1.0)*cj5);
IkReal x4869=(sj5*x4865);
evalcond[0]=(r02*x4865);
evalcond[1]=((((-1.0)*r02*x4866))+(((-1.0)*x4867)));
evalcond[2]=((((-1.0)*r20*x4865*x4868))+((r21*x4869)));
evalcond[3]=(((r11*x4869))+(((-1.0)*r10*x4865*x4868)));
evalcond[4]=((((-1.0)*r10*x4866*x4868))+(((-1.0)*cj2*sj1*x4867))+((r11*sj5*x4866))+(((-1.0)*cj1*sj2*x4867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4870=IKPowWithIntegerCheck(r02,-1);
if(!x4870.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4870.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4871=IKsin(j4);
IkReal x4872=IKcos(j4);
IkReal x4873=((1.0)*cj1);
IkReal x4874=(r21*sj5);
IkReal x4875=((1.0)*cj5);
IkReal x4876=(r11*sj5);
evalcond[0]=(r02*x4871);
evalcond[1]=((((-1.0)*r20*x4871*x4875))+((x4871*x4874)));
evalcond[2]=((((-1.0)*r10*x4871*x4875))+((x4871*x4876)));
evalcond[3]=((((-1.0)*cj2*x4873))+((sj1*sj2))+((x4872*x4874))+(((-1.0)*r20*x4872*x4875)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x4872*x4876))+(((-1.0)*sj0*sj2*x4873))+(((-1.0)*r10*x4872*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4877=((1.0)*sj0);
IkReal x4878=((1.0)*cj0);
CheckValue<IkReal> x4879 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4877))+(((-1.0)*r02*x4878)))),IkReal(((((-1.0)*r01*sj5*x4878))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4879.valid){
continue;
}
CheckValue<IkReal> x4880=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4879.value)+(((1.5707963267949)*(x4880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4881=IKsin(j4);
IkReal x4882=IKcos(j4);
IkReal x4883=(cj5*r00);
IkReal x4884=(cj5*r10);
IkReal x4885=(r21*sj5);
IkReal x4886=((1.0)*cj2);
IkReal x4887=((1.0)*sj0);
IkReal x4888=(cj1*sj2);
IkReal x4889=(cj5*r20);
IkReal x4890=((1.0)*x4882);
IkReal x4891=((1.0)*x4881);
IkReal x4892=(sj5*x4881);
IkReal x4893=(sj5*x4882);
evalcond[0]=(((x4881*x4885))+(((-1.0)*x4889*x4891))+(((-1.0)*r22*x4890)));
evalcond[1]=(((r11*x4892))+(((-1.0)*r12*x4890))+cj0+(((-1.0)*x4884*x4891)));
evalcond[2]=((((-1.0)*x4887))+(((-1.0)*x4883*x4891))+(((-1.0)*r02*x4890))+((r01*x4892)));
evalcond[3]=((((-1.0)*cj1*x4886))+((sj1*sj2))+((r22*x4881))+(((-1.0)*x4889*x4890))+((x4882*x4885)));
evalcond[4]=((((-1.0)*cj0*x4888))+(((-1.0)*x4883*x4890))+((r02*x4881))+(((-1.0)*cj0*sj1*x4886))+((r01*x4893)));
evalcond[5]=(((r11*x4893))+((r12*x4881))+(((-1.0)*sj0*sj1*x4886))+(((-1.0)*x4884*x4890))+(((-1.0)*x4887*x4888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4894=((1.0)*cj5);
CheckValue<IkReal> x4895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4894))+(((-1.0)*r10*sj5)))),-1);
if(!x4895.valid){
continue;
}
CheckValue<IkReal> x4896 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4894))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4895.value)))+(x4896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4897=IKsin(j4);
IkReal x4898=IKcos(j4);
IkReal x4899=(cj5*r00);
IkReal x4900=(cj5*r10);
IkReal x4901=(r21*sj5);
IkReal x4902=((1.0)*cj2);
IkReal x4903=((1.0)*sj0);
IkReal x4904=(cj1*sj2);
IkReal x4905=(cj5*r20);
IkReal x4906=((1.0)*x4898);
IkReal x4907=((1.0)*x4897);
IkReal x4908=(sj5*x4897);
IkReal x4909=(sj5*x4898);
evalcond[0]=((((-1.0)*x4905*x4907))+(((-1.0)*r22*x4906))+((x4897*x4901)));
evalcond[1]=((((-1.0)*r12*x4906))+cj0+((r11*x4908))+(((-1.0)*x4900*x4907)));
evalcond[2]=((((-1.0)*x4899*x4907))+(((-1.0)*x4903))+(((-1.0)*r02*x4906))+((r01*x4908)));
evalcond[3]=((((-1.0)*x4905*x4906))+((sj1*sj2))+((r22*x4897))+((x4898*x4901))+(((-1.0)*cj1*x4902)));
evalcond[4]=((((-1.0)*x4899*x4906))+(((-1.0)*cj0*x4904))+((r02*x4897))+(((-1.0)*cj0*sj1*x4902))+((r01*x4909)));
evalcond[5]=(((r12*x4897))+(((-1.0)*sj0*sj1*x4902))+(((-1.0)*x4903*x4904))+((r11*x4909))+(((-1.0)*x4900*x4906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4910=((1.0)*cj5);
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4910))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
CheckValue<IkReal> x4912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4910)))),-1);
if(!x4912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4911.value)+(((1.5707963267949)*(x4912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4913=IKsin(j4);
IkReal x4914=IKcos(j4);
IkReal x4915=(cj5*r00);
IkReal x4916=(cj5*r10);
IkReal x4917=(r21*sj5);
IkReal x4918=((1.0)*cj2);
IkReal x4919=((1.0)*sj0);
IkReal x4920=(cj1*sj2);
IkReal x4921=(cj5*r20);
IkReal x4922=((1.0)*x4914);
IkReal x4923=((1.0)*x4913);
IkReal x4924=(sj5*x4913);
IkReal x4925=(sj5*x4914);
evalcond[0]=(((x4913*x4917))+(((-1.0)*r22*x4922))+(((-1.0)*x4921*x4923)));
evalcond[1]=(cj0+(((-1.0)*x4916*x4923))+(((-1.0)*r12*x4922))+((r11*x4924)));
evalcond[2]=((((-1.0)*r02*x4922))+(((-1.0)*x4919))+(((-1.0)*x4915*x4923))+((r01*x4924)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4921*x4922))+((x4914*x4917))+(((-1.0)*cj1*x4918))+((r22*x4913)));
evalcond[4]=((((-1.0)*cj0*sj1*x4918))+((r02*x4913))+(((-1.0)*x4915*x4922))+((r01*x4925))+(((-1.0)*cj0*x4920)));
evalcond[5]=((((-1.0)*x4916*x4922))+(((-1.0)*sj0*sj1*x4918))+(((-1.0)*x4919*x4920))+((r12*x4913))+((r11*x4925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4926=((1.0)*cj5);
IkReal x4927=((1.0)*sj5);
IkReal x4928=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4928;
j0eval[1]=((IKabs(((((-1.0)*r11*x4926))+(((-1.0)*r10*x4927)))))+(IKabs(((((-1.0)*r01*x4926))+(((-1.0)*r00*x4927))))));
j0eval[2]=IKsign(x4928);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4929=r21*r21;
IkReal x4930=cj5*cj5;
IkReal x4931=(cj2*sj1);
IkReal x4932=(cj1*sj2);
IkReal x4933=(r21*sj5);
IkReal x4934=((1.0)*cj5*r20);
IkReal x4935=((((-1.0)*x4930*(r20*r20)))+(((2.0)*cj5*r20*x4933))+(((-1.0)*x4929))+(((-1.0)*(r22*r22)))+((x4929*x4930)));
j4eval[0]=x4935;
j4eval[1]=((IKabs((((r22*x4931))+((r22*x4932)))))+(IKabs((((x4932*x4933))+(((-1.0)*x4931*x4934))+(((-1.0)*x4932*x4934))+((x4931*x4933))))));
j4eval[2]=IKsign(x4935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4936=cj1*cj1;
IkReal x4937=(cj2*sj2);
IkReal x4938=(cj2*sj1);
IkReal x4939=(cj1*sj1);
j0eval[0]=(x4937+x4939+(((-1.08418367346939)*sj2*x4936))+(((-2.0)*x4936*x4937))+(((-1.08418367346939)*cj1*x4938))+(((-2.0)*cj1*cj2*x4938)));
j0eval[1]=((((-1.0)*x4938))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.194110143641506)*px))+(((1.19239088236925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19239088236925)*px))+(((0.194110143641506)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.194110143641506)*px))+(((1.19239088236925)*py))))+IKsqr(((((1.19239088236925)*px))+(((0.194110143641506)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.194110143641506)*px))+(((1.19239088236925)*py))), ((((1.19239088236925)*px))+(((0.194110143641506)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4940=IKcos(j0);
IkReal x4941=IKsin(j0);
evalcond[0]=((((-0.133)*x4941))+(((0.817)*x4940))+(((-1.0)*px)));
evalcond[1]=((((0.817)*x4941))+(((-1.0)*py))+(((0.133)*x4940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4942=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4942;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4943=((1.0)*cj5);
IkReal x4944=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4943)));
j4eval[0]=x4944;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4943))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4945=((1.0)*cj5);
IkReal x4946=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4945)));
j4eval[0]=x4946;
j4eval[1]=IKsign(x4946);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x4945))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4947=((1.0)*cj5);
CheckValue<IkReal> x4948 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4947))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4948.valid){
continue;
}
CheckValue<IkReal> x4949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4947)))),-1);
if(!x4949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4948.value)+(((1.5707963267949)*(x4949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4950=IKcos(j4);
IkReal x4951=IKsin(j4);
IkReal x4952=((1.0)*sj0);
IkReal x4953=(cj5*r00);
IkReal x4954=(cj5*r10);
IkReal x4955=(cj5*r20);
IkReal x4956=((1.0)*x4950);
IkReal x4957=((1.0)*x4951);
IkReal x4958=(sj5*x4950);
IkReal x4959=(sj5*x4951);
evalcond[0]=(((r22*x4951))+(((-1.0)*x4955*x4956))+((r21*x4958)));
evalcond[1]=((((-1.0)*x4955*x4957))+(((-1.0)*r22*x4956))+((r21*x4959)));
evalcond[2]=(cj0+((r11*x4959))+(((-1.0)*r12*x4956))+(((-1.0)*x4954*x4957)));
evalcond[3]=(((r02*x4951))+((r01*x4958))+(((-1.0)*x4953*x4956))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4951))+(((-1.0)*x4952))+((r11*x4958))+(((-1.0)*x4954*x4956)));
evalcond[5]=((((-1.0)*x4952))+(((-1.0)*r02*x4956))+((r01*x4959))+(((-1.0)*x4953*x4957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4960=((1.0)*cj5);
CheckValue<IkReal> x4961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4960)))),-1);
if(!x4961.valid){
continue;
}
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4961.value)))+(x4962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4963=IKcos(j4);
IkReal x4964=IKsin(j4);
IkReal x4965=((1.0)*sj0);
IkReal x4966=(cj5*r00);
IkReal x4967=(cj5*r10);
IkReal x4968=(cj5*r20);
IkReal x4969=((1.0)*x4963);
IkReal x4970=((1.0)*x4964);
IkReal x4971=(sj5*x4963);
IkReal x4972=(sj5*x4964);
evalcond[0]=((((-1.0)*x4968*x4969))+((r22*x4964))+((r21*x4971)));
evalcond[1]=((((-1.0)*x4968*x4970))+(((-1.0)*r22*x4969))+((r21*x4972)));
evalcond[2]=(cj0+((r11*x4972))+(((-1.0)*r12*x4969))+(((-1.0)*x4967*x4970)));
evalcond[3]=(((r02*x4964))+(((-1.0)*x4966*x4969))+(((-1.0)*cj0))+((r01*x4971)));
evalcond[4]=(((r12*x4964))+(((-1.0)*x4965))+((r11*x4971))+(((-1.0)*x4967*x4969)));
evalcond[5]=((((-1.0)*x4965))+(((-1.0)*r02*x4969))+(((-1.0)*x4966*x4970))+((r01*x4972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
CheckValue<IkReal> x4974=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4973.value)+(((1.5707963267949)*(x4974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4975=IKcos(j4);
IkReal x4976=IKsin(j4);
IkReal x4977=((1.0)*sj0);
IkReal x4978=(cj5*r00);
IkReal x4979=(cj5*r10);
IkReal x4980=(cj5*r20);
IkReal x4981=((1.0)*x4975);
IkReal x4982=((1.0)*x4976);
IkReal x4983=(sj5*x4975);
IkReal x4984=(sj5*x4976);
evalcond[0]=(((r22*x4976))+((r21*x4983))+(((-1.0)*x4980*x4981)));
evalcond[1]=((((-1.0)*r22*x4981))+((r21*x4984))+(((-1.0)*x4980*x4982)));
evalcond[2]=(cj0+((r11*x4984))+(((-1.0)*r12*x4981))+(((-1.0)*x4979*x4982)));
evalcond[3]=(((r01*x4983))+((r02*x4976))+(((-1.0)*x4978*x4981))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4983))+((r12*x4976))+(((-1.0)*x4977))+(((-1.0)*x4979*x4981)));
evalcond[5]=(((r01*x4984))+(((-1.0)*x4977))+(((-1.0)*x4978*x4982))+(((-1.0)*r02*x4981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.75737565235914)*py))+(((-7.08275641708382)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.75737565235914)*px))+(((7.08275641708382)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.75737565235914)*py))+(((-7.08275641708382)*px))))+IKsqr(((((1.75737565235914)*px))+(((7.08275641708382)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.75737565235914)*py))+(((-7.08275641708382)*px))), ((((1.75737565235914)*px))+(((7.08275641708382)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4985=IKcos(j0);
IkReal x4986=IKsin(j0);
evalcond[0]=((((0.033)*x4985))+(((-0.133)*x4986))+(((-1.0)*px)));
evalcond[1]=((((0.033)*x4986))+(((0.133)*x4985))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4987=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4987;
j4eval[1]=IKsign(x4987);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4988=((1.0)*cj5);
IkReal x4989=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4988)));
j4eval[0]=x4989;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4988)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4990=cj5*cj5;
IkReal x4991=((1.0)*r20);
IkReal x4992=(r01*r21);
IkReal x4993=(r21*sj5);
IkReal x4994=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4992))+((cj5*r00*x4993))+((x4990*x4992))+(((-1.0)*r00*x4990*x4991)));
j4eval[0]=x4994;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4991))+((cj0*x4993))))));
j4eval[2]=IKsign(x4994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4995=cj5*cj5;
IkReal x4996=((1.0)*r20);
IkReal x4997=(r01*r21);
IkReal x4998=(r21*sj5);
CheckValue<IkReal> x4999 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4996))+((cj0*x4998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4999.valid){
continue;
}
CheckValue<IkReal> x5000=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x4995*x4997))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4995*x4996))+(((-1.0)*x4997))+((cj5*r00*x4998)))),-1);
if(!x5000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4999.value)+(((1.5707963267949)*(x5000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5001=IKcos(j4);
IkReal x5002=IKsin(j4);
IkReal x5003=(cj5*r00);
IkReal x5004=(cj5*r10);
IkReal x5005=(cj5*r20);
IkReal x5006=((1.0)*x5001);
IkReal x5007=((1.0)*x5002);
IkReal x5008=(sj5*x5001);
IkReal x5009=(sj5*x5002);
evalcond[0]=(((r22*x5002))+((r21*x5008))+(((-1.0)*x5005*x5006)));
evalcond[1]=(((r21*x5009))+(((-1.0)*x5005*x5007))+(((-1.0)*r22*x5006)));
evalcond[2]=((((-1.0)*x5003*x5006))+cj0+((r02*x5002))+((r01*x5008)));
evalcond[3]=(((r12*x5002))+sj0+((r11*x5008))+(((-1.0)*x5004*x5006)));
evalcond[4]=(((r11*x5009))+cj0+(((-1.0)*x5004*x5007))+(((-1.0)*r12*x5006)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5003*x5007))+((r01*x5009))+(((-1.0)*r02*x5006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5010=((1.0)*cj5);
CheckValue<IkReal> x5011=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5010)))),-1);
if(!x5011.valid){
continue;
}
CheckValue<IkReal> x5012 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5010)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5011.value)))+(x5012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5013=IKcos(j4);
IkReal x5014=IKsin(j4);
IkReal x5015=(cj5*r00);
IkReal x5016=(cj5*r10);
IkReal x5017=(cj5*r20);
IkReal x5018=((1.0)*x5013);
IkReal x5019=((1.0)*x5014);
IkReal x5020=(sj5*x5013);
IkReal x5021=(sj5*x5014);
evalcond[0]=((((-1.0)*x5017*x5018))+((r22*x5014))+((r21*x5020)));
evalcond[1]=((((-1.0)*x5017*x5019))+(((-1.0)*r22*x5018))+((r21*x5021)));
evalcond[2]=(cj0+((r02*x5014))+((r01*x5020))+(((-1.0)*x5015*x5018)));
evalcond[3]=(((r11*x5020))+sj0+(((-1.0)*x5016*x5018))+((r12*x5014)));
evalcond[4]=(((r11*x5021))+cj0+(((-1.0)*x5016*x5019))+(((-1.0)*r12*x5018)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5018))+((r01*x5021))+(((-1.0)*x5015*x5019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5022 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5022.valid){
continue;
}
CheckValue<IkReal> x5023=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5022.value)+(((1.5707963267949)*(x5023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5024=IKcos(j4);
IkReal x5025=IKsin(j4);
IkReal x5026=(cj5*r00);
IkReal x5027=(cj5*r10);
IkReal x5028=(cj5*r20);
IkReal x5029=((1.0)*x5024);
IkReal x5030=((1.0)*x5025);
IkReal x5031=(sj5*x5024);
IkReal x5032=(sj5*x5025);
evalcond[0]=((((-1.0)*x5028*x5029))+((r22*x5025))+((r21*x5031)));
evalcond[1]=((((-1.0)*x5028*x5030))+((r21*x5032))+(((-1.0)*r22*x5029)));
evalcond[2]=(((r02*x5025))+cj0+((r01*x5031))+(((-1.0)*x5026*x5029)));
evalcond[3]=(sj0+((r12*x5025))+((r11*x5031))+(((-1.0)*x5027*x5029)));
evalcond[4]=((((-1.0)*x5027*x5030))+cj0+((r11*x5032))+(((-1.0)*r12*x5029)));
evalcond[5]=((((-1.0)*r02*x5029))+(((-1.0)*sj0))+((r01*x5032))+(((-1.0)*x5026*x5030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5033=IKsin(j0);
IkReal x5034=IKcos(j0);
IkReal x5035=(r00*sj5);
IkReal x5036=(r10*sj5);
IkReal x5037=(cj5*r11);
IkReal x5038=(cj5*r01);
evalcond[0]=((((-1.0)*x5034))+x5038+x5035);
evalcond[1]=((((-1.0)*x5033))+x5036+x5037);
evalcond[2]=((((-1.0)*px))+(((-0.133)*x5033))+(((-0.099)*x5035))+(((-0.099)*x5038)));
evalcond[3]=((((-1.0)*py))+(((-0.099)*x5037))+(((-0.099)*x5036))+(((0.133)*x5034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5039=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5039;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5040=((1.0)*cj5);
IkReal x5041=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5040)));
j4eval[0]=x5041;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5040))+((r11*sj5))))));
j4eval[2]=IKsign(x5041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5042=cj5*cj5;
IkReal x5043=(r01*r11);
IkReal x5044=((1.0)*r00);
IkReal x5045=(r01*sj5);
IkReal x5046=((((-1.0)*r02*r12))+(((-1.0)*r10*x5042*x5044))+((x5042*x5043))+(((-1.0)*x5043))+((cj5*r10*x5045))+((cj5*r00*r11*sj5)));
j4eval[0]=x5046;
j4eval[1]=IKsign(x5046);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5045))+(((-1.0)*cj0*cj5*x5044))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5047=cj5*cj5;
IkReal x5048=(r01*r11);
IkReal x5049=(cj5*r00);
IkReal x5050=(r01*sj5);
CheckValue<IkReal> x5051 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5049))+((cj0*x5050)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5051.valid){
continue;
}
CheckValue<IkReal> x5052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((cj5*r10*x5050))+(((-1.0)*x5048))+((x5047*x5048))+(((-1.0)*r00*r10*x5047))+((r11*sj5*x5049)))),-1);
if(!x5052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5051.value)+(((1.5707963267949)*(x5052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5053=IKcos(j4);
IkReal x5054=IKsin(j4);
IkReal x5055=(cj5*r00);
IkReal x5056=(r01*sj5);
IkReal x5057=(cj5*r10);
IkReal x5058=(cj5*r20);
IkReal x5059=((1.0)*x5053);
IkReal x5060=((1.0)*x5054);
IkReal x5061=(sj5*x5054);
IkReal x5062=(sj5*x5053);
evalcond[0]=((((-1.0)*x5055*x5059))+((x5053*x5056))+((r02*x5054)));
evalcond[1]=(((r12*x5054))+((r11*x5062))+(((-1.0)*x5057*x5059)));
evalcond[2]=((((-1.0)*x5058*x5060))+(((-1.0)*r22*x5059))+((r21*x5061)));
evalcond[3]=((1.0)+((r22*x5054))+((r21*x5062))+(((-1.0)*x5058*x5059)));
evalcond[4]=(cj0+(((-1.0)*r12*x5059))+(((-1.0)*x5057*x5060))+((r11*x5061)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5055*x5060))+(((-1.0)*r02*x5059))+((x5054*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5063=((1.0)*cj5);
CheckValue<IkReal> x5064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5063)))),-1);
if(!x5064.valid){
continue;
}
CheckValue<IkReal> x5065 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5063)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5064.value)))+(x5065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5066=IKcos(j4);
IkReal x5067=IKsin(j4);
IkReal x5068=(cj5*r00);
IkReal x5069=(r01*sj5);
IkReal x5070=(cj5*r10);
IkReal x5071=(cj5*r20);
IkReal x5072=((1.0)*x5066);
IkReal x5073=((1.0)*x5067);
IkReal x5074=(sj5*x5067);
IkReal x5075=(sj5*x5066);
evalcond[0]=(((x5066*x5069))+((r02*x5067))+(((-1.0)*x5068*x5072)));
evalcond[1]=((((-1.0)*x5070*x5072))+((r12*x5067))+((r11*x5075)));
evalcond[2]=(((r21*x5074))+(((-1.0)*r22*x5072))+(((-1.0)*x5071*x5073)));
evalcond[3]=((1.0)+((r21*x5075))+((r22*x5067))+(((-1.0)*x5071*x5072)));
evalcond[4]=(cj0+(((-1.0)*x5070*x5073))+(((-1.0)*r12*x5072))+((r11*x5074)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5072))+((x5067*x5069))+(((-1.0)*x5068*x5073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5076 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5076.valid){
continue;
}
CheckValue<IkReal> x5077=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5076.value)+(((1.5707963267949)*(x5077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5078=IKcos(j4);
IkReal x5079=IKsin(j4);
IkReal x5080=(cj5*r00);
IkReal x5081=(r01*sj5);
IkReal x5082=(cj5*r10);
IkReal x5083=(cj5*r20);
IkReal x5084=((1.0)*x5078);
IkReal x5085=((1.0)*x5079);
IkReal x5086=(sj5*x5079);
IkReal x5087=(sj5*x5078);
evalcond[0]=((((-1.0)*x5080*x5084))+((r02*x5079))+((x5078*x5081)));
evalcond[1]=((((-1.0)*x5082*x5084))+((r11*x5087))+((r12*x5079)));
evalcond[2]=(((r21*x5086))+(((-1.0)*x5083*x5085))+(((-1.0)*r22*x5084)));
evalcond[3]=((1.0)+((r21*x5087))+(((-1.0)*x5083*x5084))+((r22*x5079)));
evalcond[4]=((((-1.0)*r12*x5084))+cj0+(((-1.0)*x5082*x5085))+((r11*x5086)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5080*x5085))+((x5079*x5081))+(((-1.0)*r02*x5084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.776175497365088)*px))+(((-2.28767515012868)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.776175497365088)*py))+(((-2.28767515012868)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.776175497365088)*px))+(((-2.28767515012868)*py))))+IKsqr(((((0.776175497365088)*py))+(((-2.28767515012868)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.776175497365088)*px))+(((-2.28767515012868)*py))), ((((0.776175497365088)*py))+(((-2.28767515012868)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5088=IKcos(j0);
IkReal x5089=IKsin(j0);
evalcond[0]=((((-0.133)*x5089))+(((-0.392)*x5088))+(((-1.0)*px)));
evalcond[1]=((((-0.392)*x5089))+(((-1.0)*py))+(((0.133)*x5088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5090=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5090;
j4eval[1]=IKsign(x5090);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5091=((1.0)*cj5);
IkReal x5092=((((-1.0)*r11*x5091))+(((-1.0)*r10*sj5)));
j4eval[0]=x5092;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5091)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5092);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5093=cj5*cj5;
IkReal x5094=((1.0)*r20);
IkReal x5095=(r01*r21);
IkReal x5096=(r21*sj5);
IkReal x5097=(((cj5*r01*r20*sj5))+((x5093*x5095))+(((-1.0)*r02*r22))+(((-1.0)*x5095))+((cj5*r00*x5096))+(((-1.0)*r00*x5093*x5094)));
j4eval[0]=x5097;
j4eval[1]=((IKabs((((cj0*x5096))+(((-1.0)*cj0*cj5*x5094)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5098=cj5*cj5;
IkReal x5099=((1.0)*r20);
IkReal x5100=(r01*r21);
IkReal x5101=(r21*sj5);
CheckValue<IkReal> x5102=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5098*x5100))+(((-1.0)*x5100))+(((-1.0)*r00*x5098*x5099))+((cj5*r00*x5101)))),-1);
if(!x5102.valid){
continue;
}
CheckValue<IkReal> x5103 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5101))+(((-1.0)*cj0*cj5*x5099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5102.value)))+(x5103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5104=IKcos(j4);
IkReal x5105=IKsin(j4);
IkReal x5106=(cj5*r00);
IkReal x5107=(cj5*r10);
IkReal x5108=(cj5*r20);
IkReal x5109=((1.0)*x5104);
IkReal x5110=((1.0)*x5105);
IkReal x5111=(sj5*x5104);
IkReal x5112=(sj5*x5105);
evalcond[0]=(((r22*x5105))+((r21*x5111))+(((-1.0)*x5108*x5109)));
evalcond[1]=((((-1.0)*r22*x5109))+((r21*x5112))+(((-1.0)*x5108*x5110)));
evalcond[2]=(((r01*x5111))+(((-1.0)*x5106*x5109))+cj0+((r02*x5105)));
evalcond[3]=(((r12*x5105))+sj0+(((-1.0)*x5107*x5109))+((r11*x5111)));
evalcond[4]=(cj0+(((-1.0)*x5107*x5110))+(((-1.0)*r12*x5109))+((r11*x5112)));
evalcond[5]=(((r01*x5112))+(((-1.0)*sj0))+(((-1.0)*r02*x5109))+(((-1.0)*x5106*x5110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5113=((1.0)*cj5);
CheckValue<IkReal> x5114=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5113)))),-1);
if(!x5114.valid){
continue;
}
CheckValue<IkReal> x5115 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5113)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5114.value)))+(x5115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5116=IKcos(j4);
IkReal x5117=IKsin(j4);
IkReal x5118=(cj5*r00);
IkReal x5119=(cj5*r10);
IkReal x5120=(cj5*r20);
IkReal x5121=((1.0)*x5116);
IkReal x5122=((1.0)*x5117);
IkReal x5123=(sj5*x5116);
IkReal x5124=(sj5*x5117);
evalcond[0]=(((r22*x5117))+((r21*x5123))+(((-1.0)*x5120*x5121)));
evalcond[1]=(((r21*x5124))+(((-1.0)*x5120*x5122))+(((-1.0)*r22*x5121)));
evalcond[2]=(cj0+((r02*x5117))+((r01*x5123))+(((-1.0)*x5118*x5121)));
evalcond[3]=(sj0+((r11*x5123))+(((-1.0)*x5119*x5121))+((r12*x5117)));
evalcond[4]=(cj0+((r11*x5124))+(((-1.0)*r12*x5121))+(((-1.0)*x5119*x5122)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5124))+(((-1.0)*x5118*x5122))+(((-1.0)*r02*x5121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5125 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5125.valid){
continue;
}
CheckValue<IkReal> x5126=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5125.value)+(((1.5707963267949)*(x5126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5127=IKcos(j4);
IkReal x5128=IKsin(j4);
IkReal x5129=(cj5*r00);
IkReal x5130=(cj5*r10);
IkReal x5131=(cj5*r20);
IkReal x5132=((1.0)*x5127);
IkReal x5133=((1.0)*x5128);
IkReal x5134=(sj5*x5127);
IkReal x5135=(sj5*x5128);
evalcond[0]=(((r22*x5128))+(((-1.0)*x5131*x5132))+((r21*x5134)));
evalcond[1]=((((-1.0)*x5131*x5133))+((r21*x5135))+(((-1.0)*r22*x5132)));
evalcond[2]=(cj0+((r01*x5134))+(((-1.0)*x5129*x5132))+((r02*x5128)));
evalcond[3]=(sj0+((r12*x5128))+((r11*x5134))+(((-1.0)*x5130*x5132)));
evalcond[4]=(cj0+((r11*x5135))+(((-1.0)*x5130*x5133))+(((-1.0)*r12*x5132)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5135))+(((-1.0)*x5129*x5133))+(((-1.0)*r02*x5132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5136=((1.0)*sj5);
IkReal x5137=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5136))+(((-1.0)*r11*x5137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5137))+(((-1.0)*r00*x5136)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5136))+(((-1.0)*r11*x5137))))+IKsqr(((((-1.0)*r01*x5137))+(((-1.0)*r00*x5136))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5136))+(((-1.0)*r11*x5137))), ((((-1.0)*r01*x5137))+(((-1.0)*r00*x5136))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5138=IKsin(j0);
IkReal x5139=IKcos(j0);
IkReal x5140=(r00*sj5);
IkReal x5141=(r10*sj5);
IkReal x5142=(cj5*r11);
IkReal x5143=(cj5*r01);
evalcond[0]=(x5143+x5140+x5139);
evalcond[1]=(x5142+x5141+x5138);
evalcond[2]=((((-1.0)*px))+(((-0.133)*x5138))+(((-0.099)*x5140))+(((-0.099)*x5143)));
evalcond[3]=((((-1.0)*py))+(((0.133)*x5139))+(((-0.099)*x5141))+(((-0.099)*x5142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5144=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5144;
j4eval[1]=IKsign(x5144);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5145=((1.0)*cj5);
IkReal x5146=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5145)));
j4eval[0]=x5146;
j4eval[1]=IKsign(x5146);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5145))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5147=cj5*cj5;
IkReal x5148=(r01*r11);
IkReal x5149=((1.0)*r00);
IkReal x5150=(r01*sj5);
IkReal x5151=(((cj5*r10*x5150))+((x5147*x5148))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5147*x5149))+(((-1.0)*x5148))+((cj5*r00*r11*sj5)));
j4eval[0]=x5151;
j4eval[1]=IKsign(x5151);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5150))+(((-1.0)*cj0*cj5*x5149))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5152=cj5*cj5;
IkReal x5153=(r01*r11);
IkReal x5154=(cj5*r00);
IkReal x5155=(r01*sj5);
CheckValue<IkReal> x5156 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5154))+((cj0*x5155)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5156.valid){
continue;
}
CheckValue<IkReal> x5157=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5155))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5152))+(((-1.0)*x5153))+((x5152*x5153))+((r11*sj5*x5154)))),-1);
if(!x5157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5156.value)+(((1.5707963267949)*(x5157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5158=IKcos(j4);
IkReal x5159=IKsin(j4);
IkReal x5160=(cj5*r00);
IkReal x5161=(r01*sj5);
IkReal x5162=(cj5*r10);
IkReal x5163=(cj5*r20);
IkReal x5164=((1.0)*x5158);
IkReal x5165=((1.0)*x5159);
IkReal x5166=(sj5*x5159);
IkReal x5167=(sj5*x5158);
evalcond[0]=((((-1.0)*x5160*x5164))+((x5158*x5161))+((r02*x5159)));
evalcond[1]=(((r12*x5159))+(((-1.0)*x5162*x5164))+((r11*x5167)));
evalcond[2]=((((-1.0)*r22*x5164))+((r21*x5166))+(((-1.0)*x5163*x5165)));
evalcond[3]=((-1.0)+((r21*x5167))+(((-1.0)*x5163*x5164))+((r22*x5159)));
evalcond[4]=(cj0+(((-1.0)*r12*x5164))+(((-1.0)*x5162*x5165))+((r11*x5166)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5160*x5165))+(((-1.0)*r02*x5164))+((x5159*x5161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5168=((1.0)*cj5);
CheckValue<IkReal> x5169 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5168)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5169.valid){
continue;
}
CheckValue<IkReal> x5170=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5168)))),-1);
if(!x5170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5169.value)+(((1.5707963267949)*(x5170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5171=IKcos(j4);
IkReal x5172=IKsin(j4);
IkReal x5173=(cj5*r00);
IkReal x5174=(r01*sj5);
IkReal x5175=(cj5*r10);
IkReal x5176=(cj5*r20);
IkReal x5177=((1.0)*x5171);
IkReal x5178=((1.0)*x5172);
IkReal x5179=(sj5*x5172);
IkReal x5180=(sj5*x5171);
evalcond[0]=((((-1.0)*x5173*x5177))+((r02*x5172))+((x5171*x5174)));
evalcond[1]=((((-1.0)*x5175*x5177))+((r12*x5172))+((r11*x5180)));
evalcond[2]=((((-1.0)*x5176*x5178))+(((-1.0)*r22*x5177))+((r21*x5179)));
evalcond[3]=((-1.0)+(((-1.0)*x5176*x5177))+((r21*x5180))+((r22*x5172)));
evalcond[4]=((((-1.0)*x5175*x5178))+cj0+(((-1.0)*r12*x5177))+((r11*x5179)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5173*x5178))+(((-1.0)*r02*x5177))+((x5172*x5174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5181=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5181.valid){
continue;
}
CheckValue<IkReal> x5182 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5181.value)))+(x5182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5183=IKcos(j4);
IkReal x5184=IKsin(j4);
IkReal x5185=(cj5*r00);
IkReal x5186=(r01*sj5);
IkReal x5187=(cj5*r10);
IkReal x5188=(cj5*r20);
IkReal x5189=((1.0)*x5183);
IkReal x5190=((1.0)*x5184);
IkReal x5191=(sj5*x5184);
IkReal x5192=(sj5*x5183);
evalcond[0]=(((x5183*x5186))+(((-1.0)*x5185*x5189))+((r02*x5184)));
evalcond[1]=(((r11*x5192))+(((-1.0)*x5187*x5189))+((r12*x5184)));
evalcond[2]=((((-1.0)*r22*x5189))+((r21*x5191))+(((-1.0)*x5188*x5190)));
evalcond[3]=((-1.0)+((r22*x5184))+(((-1.0)*x5188*x5189))+((r21*x5192)));
evalcond[4]=(cj0+((r11*x5191))+(((-1.0)*x5187*x5190))+(((-1.0)*r12*x5189)));
evalcond[5]=((((-1.0)*x5185*x5190))+(((-1.0)*sj0))+(((-1.0)*r02*x5189))+((x5184*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28767515012868)*py))+(((-0.776175497365088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28767515012868)*px))+(((0.776175497365088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28767515012868)*py))+(((-0.776175497365088)*px))))+IKsqr(((((2.28767515012868)*px))+(((0.776175497365088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28767515012868)*py))+(((-0.776175497365088)*px))), ((((2.28767515012868)*px))+(((0.776175497365088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5193=IKsin(j0);
IkReal x5194=IKcos(j0);
evalcond[0]=((((-0.133)*x5193))+(((-1.0)*px))+(((0.392)*x5194)));
evalcond[1]=((((-1.0)*py))+(((0.133)*x5194))+(((0.392)*x5193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5195=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5195;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5196=((1.0)*cj5);
IkReal x5197=((((-1.0)*r01*x5196))+(((-1.0)*r00*sj5)));
j4eval[0]=x5197;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5196))))));
j4eval[2]=IKsign(x5197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5198=((1.0)*cj5);
IkReal x5199=((((-1.0)*r01*x5198))+(((-1.0)*r00*sj5)));
j4eval[0]=x5199;
j4eval[1]=IKsign(x5199);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5198)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5200=((1.0)*cj5);
CheckValue<IkReal> x5201 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5200))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5201.valid){
continue;
}
CheckValue<IkReal> x5202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5200)))),-1);
if(!x5202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5201.value)+(((1.5707963267949)*(x5202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5203=IKcos(j4);
IkReal x5204=IKsin(j4);
IkReal x5205=((1.0)*sj0);
IkReal x5206=(cj5*r00);
IkReal x5207=(cj5*r10);
IkReal x5208=(cj5*r20);
IkReal x5209=((1.0)*x5203);
IkReal x5210=((1.0)*x5204);
IkReal x5211=(sj5*x5203);
IkReal x5212=(sj5*x5204);
evalcond[0]=(((r22*x5204))+(((-1.0)*x5208*x5209))+((r21*x5211)));
evalcond[1]=((((-1.0)*r22*x5209))+((r21*x5212))+(((-1.0)*x5208*x5210)));
evalcond[2]=(cj0+((r11*x5212))+(((-1.0)*r12*x5209))+(((-1.0)*x5207*x5210)));
evalcond[3]=(((r01*x5211))+(((-1.0)*x5206*x5209))+((r02*x5204))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5205))+((r11*x5211))+((r12*x5204))+(((-1.0)*x5207*x5209)));
evalcond[5]=((((-1.0)*x5205))+((r01*x5212))+(((-1.0)*r02*x5209))+(((-1.0)*x5206*x5210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5213=((1.0)*cj5);
CheckValue<IkReal> x5214 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5214.valid){
continue;
}
CheckValue<IkReal> x5215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5213)))),-1);
if(!x5215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5214.value)+(((1.5707963267949)*(x5215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5216=IKcos(j4);
IkReal x5217=IKsin(j4);
IkReal x5218=((1.0)*sj0);
IkReal x5219=(cj5*r00);
IkReal x5220=(cj5*r10);
IkReal x5221=(cj5*r20);
IkReal x5222=((1.0)*x5216);
IkReal x5223=((1.0)*x5217);
IkReal x5224=(sj5*x5216);
IkReal x5225=(sj5*x5217);
evalcond[0]=(((r21*x5224))+(((-1.0)*x5221*x5222))+((r22*x5217)));
evalcond[1]=(((r21*x5225))+(((-1.0)*x5221*x5223))+(((-1.0)*r22*x5222)));
evalcond[2]=(cj0+(((-1.0)*r12*x5222))+(((-1.0)*x5220*x5223))+((r11*x5225)));
evalcond[3]=((((-1.0)*x5219*x5222))+((r02*x5217))+((r01*x5224))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5218))+((r12*x5217))+(((-1.0)*x5220*x5222))+((r11*x5224)));
evalcond[5]=((((-1.0)*x5218))+(((-1.0)*x5219*x5223))+(((-1.0)*r02*x5222))+((r01*x5225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5226.value)+(((1.5707963267949)*(x5227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5228=IKcos(j4);
IkReal x5229=IKsin(j4);
IkReal x5230=((1.0)*sj0);
IkReal x5231=(cj5*r00);
IkReal x5232=(cj5*r10);
IkReal x5233=(cj5*r20);
IkReal x5234=((1.0)*x5228);
IkReal x5235=((1.0)*x5229);
IkReal x5236=(sj5*x5228);
IkReal x5237=(sj5*x5229);
evalcond[0]=(((r22*x5229))+((r21*x5236))+(((-1.0)*x5233*x5234)));
evalcond[1]=((((-1.0)*r22*x5234))+((r21*x5237))+(((-1.0)*x5233*x5235)));
evalcond[2]=(cj0+((r11*x5237))+(((-1.0)*r12*x5234))+(((-1.0)*x5232*x5235)));
evalcond[3]=(((r02*x5229))+((r01*x5236))+(((-1.0)*x5231*x5234))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5230))+((r11*x5236))+(((-1.0)*x5232*x5234))+((r12*x5229)));
evalcond[5]=((((-1.0)*x5230))+(((-1.0)*r02*x5234))+((r01*x5237))+(((-1.0)*x5231*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.19239088236925)*py))+(((-0.194110143641506)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.19239088236925)*px))+(((0.194110143641506)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.19239088236925)*py))+(((-0.194110143641506)*px))))+IKsqr(((((-1.19239088236925)*px))+(((0.194110143641506)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.19239088236925)*py))+(((-0.194110143641506)*px))), ((((-1.19239088236925)*px))+(((0.194110143641506)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5238=IKcos(j0);
IkReal x5239=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.133)*x5239))+(((-0.817)*x5238)));
evalcond[1]=((((0.133)*x5238))+(((-1.0)*py))+(((-0.817)*x5239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5240=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5240;
j4eval[1]=IKsign(x5240);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5241=((1.0)*cj5);
IkReal x5242=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5241)));
j4eval[0]=x5242;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5241))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5243=cj5*cj5;
IkReal x5244=((1.0)*r20);
IkReal x5245=(r01*r21);
IkReal x5246=(r21*sj5);
IkReal x5247=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5245))+(((-1.0)*r00*x5243*x5244))+((x5243*x5245))+((cj5*r00*x5246)));
j4eval[0]=x5247;
j4eval[1]=((IKabs((((cj0*x5246))+(((-1.0)*cj0*cj5*x5244)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5248=cj5*cj5;
IkReal x5249=((1.0)*r20);
IkReal x5250=(r01*r21);
IkReal x5251=(r21*sj5);
CheckValue<IkReal> x5252 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5251))+(((-1.0)*cj0*cj5*x5249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5252.valid){
continue;
}
CheckValue<IkReal> x5253=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x5251))+(((-1.0)*r02*r22))+(((-1.0)*x5250))+(((-1.0)*r00*x5248*x5249))+((x5248*x5250)))),-1);
if(!x5253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5252.value)+(((1.5707963267949)*(x5253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5254=IKcos(j4);
IkReal x5255=IKsin(j4);
IkReal x5256=(cj5*r00);
IkReal x5257=(cj5*r10);
IkReal x5258=(cj5*r20);
IkReal x5259=((1.0)*x5254);
IkReal x5260=((1.0)*x5255);
IkReal x5261=(sj5*x5254);
IkReal x5262=(sj5*x5255);
evalcond[0]=(((r22*x5255))+(((-1.0)*x5258*x5259))+((r21*x5261)));
evalcond[1]=((((-1.0)*x5258*x5260))+(((-1.0)*r22*x5259))+((r21*x5262)));
evalcond[2]=(cj0+((r01*x5261))+(((-1.0)*x5256*x5259))+((r02*x5255)));
evalcond[3]=(sj0+((r12*x5255))+((r11*x5261))+(((-1.0)*x5257*x5259)));
evalcond[4]=(cj0+((r11*x5262))+(((-1.0)*r12*x5259))+(((-1.0)*x5257*x5260)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5259))+((r01*x5262))+(((-1.0)*x5256*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5263=((1.0)*cj5);
CheckValue<IkReal> x5264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5263)))),-1);
if(!x5264.valid){
continue;
}
CheckValue<IkReal> x5265 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5263)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5264.value)))+(x5265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5266=IKcos(j4);
IkReal x5267=IKsin(j4);
IkReal x5268=(cj5*r00);
IkReal x5269=(cj5*r10);
IkReal x5270=(cj5*r20);
IkReal x5271=((1.0)*x5266);
IkReal x5272=((1.0)*x5267);
IkReal x5273=(sj5*x5266);
IkReal x5274=(sj5*x5267);
evalcond[0]=(((r21*x5273))+(((-1.0)*x5270*x5271))+((r22*x5267)));
evalcond[1]=(((r21*x5274))+(((-1.0)*x5270*x5272))+(((-1.0)*r22*x5271)));
evalcond[2]=(((r02*x5267))+cj0+((r01*x5273))+(((-1.0)*x5268*x5271)));
evalcond[3]=(sj0+((r12*x5267))+(((-1.0)*x5269*x5271))+((r11*x5273)));
evalcond[4]=(cj0+(((-1.0)*r12*x5271))+(((-1.0)*x5269*x5272))+((r11*x5274)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5274))+(((-1.0)*r02*x5271))+(((-1.0)*x5268*x5272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5275 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5275.valid){
continue;
}
CheckValue<IkReal> x5276=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5275.value)+(((1.5707963267949)*(x5276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5277=IKcos(j4);
IkReal x5278=IKsin(j4);
IkReal x5279=(cj5*r00);
IkReal x5280=(cj5*r10);
IkReal x5281=(cj5*r20);
IkReal x5282=((1.0)*x5277);
IkReal x5283=((1.0)*x5278);
IkReal x5284=(sj5*x5277);
IkReal x5285=(sj5*x5278);
evalcond[0]=((((-1.0)*x5281*x5282))+((r22*x5278))+((r21*x5284)));
evalcond[1]=((((-1.0)*r22*x5282))+(((-1.0)*x5281*x5283))+((r21*x5285)));
evalcond[2]=(((r02*x5278))+(((-1.0)*x5279*x5282))+cj0+((r01*x5284)));
evalcond[3]=(sj0+((r11*x5284))+(((-1.0)*x5280*x5282))+((r12*x5278)));
evalcond[4]=(cj0+(((-1.0)*r12*x5282))+((r11*x5285))+(((-1.0)*x5280*x5283)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5279*x5283))+((r01*x5285))+(((-1.0)*r02*x5282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.75737565235914)*py))+(((-7.08275641708382)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.75737565235914)*px))+(((7.08275641708382)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.75737565235914)*py))+(((-7.08275641708382)*px))))+IKsqr(((((-1.75737565235914)*px))+(((7.08275641708382)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.75737565235914)*py))+(((-7.08275641708382)*px))), ((((-1.75737565235914)*px))+(((7.08275641708382)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5286=IKcos(j0);
IkReal x5287=IKsin(j0);
evalcond[0]=((((-0.133)*x5287))+(((-1.0)*px))+(((-0.033)*x5286)));
evalcond[1]=((((0.133)*x5286))+(((-1.0)*py))+(((-0.033)*x5287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5288=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5288;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5289=((1.0)*cj5);
IkReal x5290=((((-1.0)*r01*x5289))+(((-1.0)*r00*sj5)));
j4eval[0]=x5290;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5289)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5291=((1.0)*cj5);
IkReal x5292=((((-1.0)*r01*x5291))+(((-1.0)*r00*sj5)));
j4eval[0]=x5292;
j4eval[1]=IKsign(x5292);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5291))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5293=((1.0)*cj5);
CheckValue<IkReal> x5294 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5293)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5294.valid){
continue;
}
CheckValue<IkReal> x5295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5293))+(((-1.0)*r00*sj5)))),-1);
if(!x5295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5294.value)+(((1.5707963267949)*(x5295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5296=IKcos(j4);
IkReal x5297=IKsin(j4);
IkReal x5298=((1.0)*sj0);
IkReal x5299=(cj5*r00);
IkReal x5300=(cj5*r10);
IkReal x5301=(cj5*r20);
IkReal x5302=((1.0)*x5296);
IkReal x5303=((1.0)*x5297);
IkReal x5304=(sj5*x5296);
IkReal x5305=(sj5*x5297);
evalcond[0]=(((r21*x5304))+((r22*x5297))+(((-1.0)*x5301*x5302)));
evalcond[1]=((((-1.0)*r22*x5302))+((r21*x5305))+(((-1.0)*x5301*x5303)));
evalcond[2]=(cj0+(((-1.0)*r12*x5302))+(((-1.0)*x5300*x5303))+((r11*x5305)));
evalcond[3]=(((r02*x5297))+((r01*x5304))+(((-1.0)*x5299*x5302))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5297))+(((-1.0)*x5300*x5302))+(((-1.0)*x5298))+((r11*x5304)));
evalcond[5]=((((-1.0)*x5298))+(((-1.0)*r02*x5302))+((r01*x5305))+(((-1.0)*x5299*x5303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5306=((1.0)*cj5);
CheckValue<IkReal> x5307 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5307.valid){
continue;
}
CheckValue<IkReal> x5308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5306)))),-1);
if(!x5308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5307.value)+(((1.5707963267949)*(x5308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5309=IKcos(j4);
IkReal x5310=IKsin(j4);
IkReal x5311=((1.0)*sj0);
IkReal x5312=(cj5*r00);
IkReal x5313=(cj5*r10);
IkReal x5314=(cj5*r20);
IkReal x5315=((1.0)*x5309);
IkReal x5316=((1.0)*x5310);
IkReal x5317=(sj5*x5309);
IkReal x5318=(sj5*x5310);
evalcond[0]=((((-1.0)*x5314*x5315))+((r22*x5310))+((r21*x5317)));
evalcond[1]=((((-1.0)*x5314*x5316))+((r21*x5318))+(((-1.0)*r22*x5315)));
evalcond[2]=((((-1.0)*r12*x5315))+cj0+(((-1.0)*x5313*x5316))+((r11*x5318)));
evalcond[3]=(((r01*x5317))+(((-1.0)*x5312*x5315))+((r02*x5310))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5311))+(((-1.0)*x5313*x5315))+((r11*x5317))+((r12*x5310)));
evalcond[5]=(((r01*x5318))+(((-1.0)*x5312*x5316))+(((-1.0)*x5311))+(((-1.0)*r02*x5315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5319 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5319.valid){
continue;
}
CheckValue<IkReal> x5320=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5319.value)+(((1.5707963267949)*(x5320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5321=IKcos(j4);
IkReal x5322=IKsin(j4);
IkReal x5323=((1.0)*sj0);
IkReal x5324=(cj5*r00);
IkReal x5325=(cj5*r10);
IkReal x5326=(cj5*r20);
IkReal x5327=((1.0)*x5321);
IkReal x5328=((1.0)*x5322);
IkReal x5329=(sj5*x5321);
IkReal x5330=(sj5*x5322);
evalcond[0]=((((-1.0)*x5326*x5327))+((r22*x5322))+((r21*x5329)));
evalcond[1]=((((-1.0)*x5326*x5328))+(((-1.0)*r22*x5327))+((r21*x5330)));
evalcond[2]=((((-1.0)*x5325*x5328))+cj0+((r11*x5330))+(((-1.0)*r12*x5327)));
evalcond[3]=(((r01*x5329))+(((-1.0)*x5324*x5327))+((r02*x5322))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5325*x5327))+((r11*x5329))+((r12*x5322))+(((-1.0)*x5323)));
evalcond[5]=((((-1.0)*r02*x5327))+((r01*x5330))+(((-1.0)*x5323))+(((-1.0)*x5324*x5328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5331=((1.0)*sj5);
IkReal x5332=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5332))+(((-1.0)*r10*x5331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5331))+(((-1.0)*r01*x5332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5332))+(((-1.0)*r10*x5331))))+IKsqr(((((-1.0)*r00*x5331))+(((-1.0)*r01*x5332))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5332))+(((-1.0)*r10*x5331))), ((((-1.0)*r00*x5331))+(((-1.0)*r01*x5332))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5333=IKsin(j0);
IkReal x5334=IKcos(j0);
IkReal x5335=(r00*sj5);
IkReal x5336=(r10*sj5);
IkReal x5337=(cj5*r11);
IkReal x5338=(cj5*r01);
evalcond[0]=(x5335+x5334+x5338);
evalcond[1]=(x5333+x5337+x5336);
evalcond[2]=((((-0.133)*x5333))+(((-1.0)*px))+(((-0.099)*x5338))+(((-0.099)*x5335)));
evalcond[3]=((((0.133)*x5334))+(((-1.0)*py))+(((-0.099)*x5336))+(((-0.099)*x5337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5339=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5339;
j4eval[1]=IKsign(x5339);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5340=((1.0)*cj5);
IkReal x5341=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5340)));
j4eval[0]=x5341;
j4eval[1]=IKsign(x5341);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5342=cj5*cj5;
IkReal x5343=(r01*r11);
IkReal x5344=((1.0)*r00);
IkReal x5345=(r01*sj5);
IkReal x5346=(((cj5*r10*x5345))+(((-1.0)*r10*x5342*x5344))+((x5342*x5343))+(((-1.0)*r02*r12))+(((-1.0)*x5343))+((cj5*r00*r11*sj5)));
j4eval[0]=x5346;
j4eval[1]=IKsign(x5346);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5345))+(((-1.0)*cj0*cj5*x5344))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5347=cj5*cj5;
IkReal x5348=(r01*r11);
IkReal x5349=(cj5*r00);
IkReal x5350=(r01*sj5);
CheckValue<IkReal> x5351=IKPowWithIntegerCheck(IKsign((((x5347*x5348))+(((-1.0)*r00*r10*x5347))+(((-1.0)*r02*r12))+((r11*sj5*x5349))+(((-1.0)*x5348))+((cj5*r10*x5350)))),-1);
if(!x5351.valid){
continue;
}
CheckValue<IkReal> x5352 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5349))+((cj0*x5350)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5351.value)))+(x5352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5353=IKcos(j4);
IkReal x5354=IKsin(j4);
IkReal x5355=(cj5*r00);
IkReal x5356=(r01*sj5);
IkReal x5357=(cj5*r10);
IkReal x5358=(cj5*r20);
IkReal x5359=((1.0)*x5353);
IkReal x5360=((1.0)*x5354);
IkReal x5361=(sj5*x5354);
IkReal x5362=(sj5*x5353);
evalcond[0]=((((-1.0)*x5355*x5359))+((x5353*x5356))+((r02*x5354)));
evalcond[1]=((((-1.0)*x5357*x5359))+((r12*x5354))+((r11*x5362)));
evalcond[2]=(((r21*x5361))+(((-1.0)*x5358*x5360))+(((-1.0)*r22*x5359)));
evalcond[3]=((-1.0)+(((-1.0)*x5358*x5359))+((r22*x5354))+((r21*x5362)));
evalcond[4]=(cj0+(((-1.0)*r12*x5359))+(((-1.0)*x5357*x5360))+((r11*x5361)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5359))+((x5354*x5356))+(((-1.0)*x5355*x5360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5363=((1.0)*cj5);
CheckValue<IkReal> x5364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5363)))),-1);
if(!x5364.valid){
continue;
}
CheckValue<IkReal> x5365 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5363)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5364.value)))+(x5365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5366=IKcos(j4);
IkReal x5367=IKsin(j4);
IkReal x5368=(cj5*r00);
IkReal x5369=(r01*sj5);
IkReal x5370=(cj5*r10);
IkReal x5371=(cj5*r20);
IkReal x5372=((1.0)*x5366);
IkReal x5373=((1.0)*x5367);
IkReal x5374=(sj5*x5367);
IkReal x5375=(sj5*x5366);
evalcond[0]=(((r02*x5367))+((x5366*x5369))+(((-1.0)*x5368*x5372)));
evalcond[1]=(((r12*x5367))+(((-1.0)*x5370*x5372))+((r11*x5375)));
evalcond[2]=((((-1.0)*r22*x5372))+((r21*x5374))+(((-1.0)*x5371*x5373)));
evalcond[3]=((-1.0)+((r22*x5367))+((r21*x5375))+(((-1.0)*x5371*x5372)));
evalcond[4]=(cj0+(((-1.0)*r12*x5372))+(((-1.0)*x5370*x5373))+((r11*x5374)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5372))+((x5367*x5369))+(((-1.0)*x5368*x5373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5376=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5376.valid){
continue;
}
CheckValue<IkReal> x5377 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5376.value)))+(x5377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5378=IKcos(j4);
IkReal x5379=IKsin(j4);
IkReal x5380=(cj5*r00);
IkReal x5381=(r01*sj5);
IkReal x5382=(cj5*r10);
IkReal x5383=(cj5*r20);
IkReal x5384=((1.0)*x5378);
IkReal x5385=((1.0)*x5379);
IkReal x5386=(sj5*x5379);
IkReal x5387=(sj5*x5378);
evalcond[0]=(((x5378*x5381))+((r02*x5379))+(((-1.0)*x5380*x5384)));
evalcond[1]=((((-1.0)*x5382*x5384))+((r11*x5387))+((r12*x5379)));
evalcond[2]=((((-1.0)*x5383*x5385))+(((-1.0)*r22*x5384))+((r21*x5386)));
evalcond[3]=((-1.0)+((r22*x5379))+(((-1.0)*x5383*x5384))+((r21*x5387)));
evalcond[4]=((((-1.0)*x5382*x5385))+cj0+((r11*x5386))+(((-1.0)*r12*x5384)));
evalcond[5]=((((-1.0)*sj0))+((x5379*x5381))+(((-1.0)*r02*x5384))+(((-1.0)*x5380*x5385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28767515012868)*py))+(((-0.776175497365088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28767515012868)*px))+(((0.776175497365088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28767515012868)*py))+(((-0.776175497365088)*px))))+IKsqr(((((2.28767515012868)*px))+(((0.776175497365088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28767515012868)*py))+(((-0.776175497365088)*px))), ((((2.28767515012868)*px))+(((0.776175497365088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5388=IKsin(j0);
IkReal x5389=IKcos(j0);
evalcond[0]=((((-0.133)*x5388))+(((-1.0)*px))+(((0.392)*x5389)));
evalcond[1]=((((-1.0)*py))+(((0.392)*x5388))+(((0.133)*x5389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5390=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5390;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5391=((1.0)*cj5);
IkReal x5392=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5391)));
j4eval[0]=x5392;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5391)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5393=((1.0)*cj5);
IkReal x5394=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5393)));
j4eval[0]=x5394;
j4eval[1]=IKsign(x5394);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x5393))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5395=((1.0)*cj5);
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5395))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
CheckValue<IkReal> x5397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5395)))),-1);
if(!x5397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5396.value)+(((1.5707963267949)*(x5397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5398=IKcos(j4);
IkReal x5399=IKsin(j4);
IkReal x5400=((1.0)*sj0);
IkReal x5401=(cj5*r00);
IkReal x5402=(cj5*r10);
IkReal x5403=(cj5*r20);
IkReal x5404=((1.0)*x5398);
IkReal x5405=((1.0)*x5399);
IkReal x5406=(sj5*x5398);
IkReal x5407=(sj5*x5399);
evalcond[0]=(((r21*x5406))+((r22*x5399))+(((-1.0)*x5403*x5404)));
evalcond[1]=(((r21*x5407))+(((-1.0)*x5403*x5405))+(((-1.0)*r22*x5404)));
evalcond[2]=(cj0+(((-1.0)*r12*x5404))+(((-1.0)*x5402*x5405))+((r11*x5407)));
evalcond[3]=(((r02*x5399))+((r01*x5406))+(((-1.0)*cj0))+(((-1.0)*x5401*x5404)));
evalcond[4]=((((-1.0)*x5402*x5404))+(((-1.0)*x5400))+((r12*x5399))+((r11*x5406)));
evalcond[5]=((((-1.0)*r02*x5404))+(((-1.0)*x5400))+((r01*x5407))+(((-1.0)*x5401*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5408=((1.0)*cj5);
CheckValue<IkReal> x5409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5408))+(((-1.0)*r00*sj5)))),-1);
if(!x5409.valid){
continue;
}
CheckValue<IkReal> x5410 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5408))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5409.value)))+(x5410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5411=IKcos(j4);
IkReal x5412=IKsin(j4);
IkReal x5413=((1.0)*sj0);
IkReal x5414=(cj5*r00);
IkReal x5415=(cj5*r10);
IkReal x5416=(cj5*r20);
IkReal x5417=((1.0)*x5411);
IkReal x5418=((1.0)*x5412);
IkReal x5419=(sj5*x5411);
IkReal x5420=(sj5*x5412);
evalcond[0]=((((-1.0)*x5416*x5417))+((r22*x5412))+((r21*x5419)));
evalcond[1]=((((-1.0)*x5416*x5418))+((r21*x5420))+(((-1.0)*r22*x5417)));
evalcond[2]=((((-1.0)*x5415*x5418))+cj0+(((-1.0)*r12*x5417))+((r11*x5420)));
evalcond[3]=((((-1.0)*x5414*x5417))+((r02*x5412))+((r01*x5419))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5419))+(((-1.0)*x5415*x5417))+(((-1.0)*x5413))+((r12*x5412)));
evalcond[5]=((((-1.0)*r02*x5417))+((r01*x5420))+(((-1.0)*x5414*x5418))+(((-1.0)*x5413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5421 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5421.valid){
continue;
}
CheckValue<IkReal> x5422=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5421.value)+(((1.5707963267949)*(x5422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5423=IKcos(j4);
IkReal x5424=IKsin(j4);
IkReal x5425=((1.0)*sj0);
IkReal x5426=(cj5*r00);
IkReal x5427=(cj5*r10);
IkReal x5428=(cj5*r20);
IkReal x5429=((1.0)*x5423);
IkReal x5430=((1.0)*x5424);
IkReal x5431=(sj5*x5423);
IkReal x5432=(sj5*x5424);
evalcond[0]=(((r22*x5424))+(((-1.0)*x5428*x5429))+((r21*x5431)));
evalcond[1]=((((-1.0)*x5428*x5430))+(((-1.0)*r22*x5429))+((r21*x5432)));
evalcond[2]=(cj0+(((-1.0)*x5427*x5430))+((r11*x5432))+(((-1.0)*r12*x5429)));
evalcond[3]=((((-1.0)*x5426*x5429))+((r02*x5424))+((r01*x5431))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5425))+((r12*x5424))+(((-1.0)*x5427*x5429))+((r11*x5431)));
evalcond[5]=((((-1.0)*x5425))+(((-1.0)*x5426*x5430))+(((-1.0)*r02*x5429))+((r01*x5432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5433=IKsin(j0);
IkReal x5434=IKcos(j0);
IkReal x5435=(r00*sj5);
IkReal x5436=(r10*sj5);
IkReal x5437=(cj5*r11);
IkReal x5438=(cj5*r01);
evalcond[0]=(x5435+x5438+(((-1.0)*x5434)));
evalcond[1]=(x5436+x5437+(((-1.0)*x5433)));
evalcond[2]=((((-0.133)*x5433))+(((-1.0)*px))+(((-0.099)*x5438))+(((-0.099)*x5435)));
evalcond[3]=((((-1.0)*py))+(((-0.099)*x5436))+(((-0.099)*x5437))+(((0.133)*x5434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5439=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5439;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5440=((1.0)*cj5);
IkReal x5441=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5440)));
j4eval[0]=x5441;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5440))+((r11*sj5))))));
j4eval[2]=IKsign(x5441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5442=cj5*cj5;
IkReal x5443=(r01*r11);
IkReal x5444=((1.0)*r00);
IkReal x5445=(r01*sj5);
IkReal x5446=((((-1.0)*x5443))+(((-1.0)*r10*x5442*x5444))+(((-1.0)*r02*r12))+((cj5*r10*x5445))+((x5442*x5443))+((cj5*r00*r11*sj5)));
j4eval[0]=x5446;
j4eval[1]=IKsign(x5446);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5444))+((cj0*x5445))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5447=cj5*cj5;
IkReal x5448=(r01*r11);
IkReal x5449=(cj5*r00);
IkReal x5450=(r01*sj5);
CheckValue<IkReal> x5451 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5449))+((cj0*x5450)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5451.valid){
continue;
}
CheckValue<IkReal> x5452=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5448))+(((-1.0)*r02*r12))+((cj5*r10*x5450))+(((-1.0)*r00*r10*x5447))+((r11*sj5*x5449))+((x5447*x5448)))),-1);
if(!x5452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5451.value)+(((1.5707963267949)*(x5452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5453=IKcos(j4);
IkReal x5454=IKsin(j4);
IkReal x5455=(cj5*r00);
IkReal x5456=(r01*sj5);
IkReal x5457=(cj5*r10);
IkReal x5458=(cj5*r20);
IkReal x5459=((1.0)*x5453);
IkReal x5460=((1.0)*x5454);
IkReal x5461=(sj5*x5454);
IkReal x5462=(sj5*x5453);
evalcond[0]=((((-1.0)*x5455*x5459))+((r02*x5454))+((x5453*x5456)));
evalcond[1]=(((r12*x5454))+((r11*x5462))+(((-1.0)*x5457*x5459)));
evalcond[2]=((((-1.0)*x5458*x5460))+((r21*x5461))+(((-1.0)*r22*x5459)));
evalcond[3]=((1.0)+(((-1.0)*x5458*x5459))+((r22*x5454))+((r21*x5462)));
evalcond[4]=((((-1.0)*r12*x5459))+cj0+((r11*x5461))+(((-1.0)*x5457*x5460)));
evalcond[5]=((((-1.0)*sj0))+((x5454*x5456))+(((-1.0)*r02*x5459))+(((-1.0)*x5455*x5460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5463=((1.0)*cj5);
CheckValue<IkReal> x5464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5463))+(((-1.0)*r00*sj5)))),-1);
if(!x5464.valid){
continue;
}
CheckValue<IkReal> x5465 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5463))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5464.value)))+(x5465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5466=IKcos(j4);
IkReal x5467=IKsin(j4);
IkReal x5468=(cj5*r00);
IkReal x5469=(r01*sj5);
IkReal x5470=(cj5*r10);
IkReal x5471=(cj5*r20);
IkReal x5472=((1.0)*x5466);
IkReal x5473=((1.0)*x5467);
IkReal x5474=(sj5*x5467);
IkReal x5475=(sj5*x5466);
evalcond[0]=(((x5466*x5469))+(((-1.0)*x5468*x5472))+((r02*x5467)));
evalcond[1]=(((r12*x5467))+(((-1.0)*x5470*x5472))+((r11*x5475)));
evalcond[2]=((((-1.0)*r22*x5472))+(((-1.0)*x5471*x5473))+((r21*x5474)));
evalcond[3]=((1.0)+((r22*x5467))+(((-1.0)*x5471*x5472))+((r21*x5475)));
evalcond[4]=(cj0+(((-1.0)*r12*x5472))+(((-1.0)*x5470*x5473))+((r11*x5474)));
evalcond[5]=(((x5467*x5469))+(((-1.0)*sj0))+(((-1.0)*x5468*x5473))+(((-1.0)*r02*x5472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
CheckValue<IkReal> x5477=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5476.value)+(((1.5707963267949)*(x5477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5478=IKcos(j4);
IkReal x5479=IKsin(j4);
IkReal x5480=(cj5*r00);
IkReal x5481=(r01*sj5);
IkReal x5482=(cj5*r10);
IkReal x5483=(cj5*r20);
IkReal x5484=((1.0)*x5478);
IkReal x5485=((1.0)*x5479);
IkReal x5486=(sj5*x5479);
IkReal x5487=(sj5*x5478);
evalcond[0]=(((x5478*x5481))+(((-1.0)*x5480*x5484))+((r02*x5479)));
evalcond[1]=(((r11*x5487))+((r12*x5479))+(((-1.0)*x5482*x5484)));
evalcond[2]=((((-1.0)*x5483*x5485))+(((-1.0)*r22*x5484))+((r21*x5486)));
evalcond[3]=((1.0)+(((-1.0)*x5483*x5484))+((r21*x5487))+((r22*x5479)));
evalcond[4]=((((-1.0)*r12*x5484))+cj0+((r11*x5486))+(((-1.0)*x5482*x5485)));
evalcond[5]=((((-1.0)*sj0))+((x5479*x5481))+(((-1.0)*x5480*x5485))+(((-1.0)*r02*x5484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.776175497365088)*px))+(((-2.28767515012868)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.776175497365088)*py))+(((-2.28767515012868)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.776175497365088)*px))+(((-2.28767515012868)*py))))+IKsqr(((((0.776175497365088)*py))+(((-2.28767515012868)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.776175497365088)*px))+(((-2.28767515012868)*py))), ((((0.776175497365088)*py))+(((-2.28767515012868)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5488=IKcos(j0);
IkReal x5489=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.392)*x5488))+(((-0.133)*x5489)));
evalcond[1]=((((0.133)*x5488))+(((-1.0)*py))+(((-0.392)*x5489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5490=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5490;
j4eval[1]=IKsign(x5490);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5491=((1.0)*cj5);
IkReal x5492=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5491)));
j4eval[0]=x5492;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5493=cj5*cj5;
IkReal x5494=((1.0)*r20);
IkReal x5495=(r01*r21);
IkReal x5496=(r21*sj5);
IkReal x5497=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5493*x5494))+((x5493*x5495))+((cj5*r00*x5496))+(((-1.0)*x5495)));
j4eval[0]=x5497;
j4eval[1]=((IKabs((((cj0*x5496))+(((-1.0)*cj0*cj5*x5494)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5498=cj5*cj5;
IkReal x5499=((1.0)*r20);
IkReal x5500=(r01*r21);
IkReal x5501=(r21*sj5);
CheckValue<IkReal> x5502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5499))+((cj0*x5501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5502.valid){
continue;
}
CheckValue<IkReal> x5503=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5498*x5500))+(((-1.0)*x5500))+(((-1.0)*r00*x5498*x5499))+((cj5*r00*x5501)))),-1);
if(!x5503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5502.value)+(((1.5707963267949)*(x5503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5504=IKcos(j4);
IkReal x5505=IKsin(j4);
IkReal x5506=(cj5*r00);
IkReal x5507=(cj5*r10);
IkReal x5508=(cj5*r20);
IkReal x5509=((1.0)*x5504);
IkReal x5510=((1.0)*x5505);
IkReal x5511=(sj5*x5504);
IkReal x5512=(sj5*x5505);
evalcond[0]=(((r21*x5511))+((r22*x5505))+(((-1.0)*x5508*x5509)));
evalcond[1]=((((-1.0)*r22*x5509))+((r21*x5512))+(((-1.0)*x5508*x5510)));
evalcond[2]=(cj0+((r02*x5505))+(((-1.0)*x5506*x5509))+((r01*x5511)));
evalcond[3]=(sj0+((r12*x5505))+(((-1.0)*x5507*x5509))+((r11*x5511)));
evalcond[4]=(cj0+(((-1.0)*r12*x5509))+(((-1.0)*x5507*x5510))+((r11*x5512)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5509))+(((-1.0)*x5506*x5510))+((r01*x5512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5513=((1.0)*cj5);
CheckValue<IkReal> x5514 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5513)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5514.valid){
continue;
}
CheckValue<IkReal> x5515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5513)))),-1);
if(!x5515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5514.value)+(((1.5707963267949)*(x5515.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5516=IKcos(j4);
IkReal x5517=IKsin(j4);
IkReal x5518=(cj5*r00);
IkReal x5519=(cj5*r10);
IkReal x5520=(cj5*r20);
IkReal x5521=((1.0)*x5516);
IkReal x5522=((1.0)*x5517);
IkReal x5523=(sj5*x5516);
IkReal x5524=(sj5*x5517);
evalcond[0]=(((r21*x5523))+((r22*x5517))+(((-1.0)*x5520*x5521)));
evalcond[1]=((((-1.0)*r22*x5521))+((r21*x5524))+(((-1.0)*x5520*x5522)));
evalcond[2]=(cj0+((r02*x5517))+((r01*x5523))+(((-1.0)*x5518*x5521)));
evalcond[3]=(sj0+((r12*x5517))+((r11*x5523))+(((-1.0)*x5519*x5521)));
evalcond[4]=(cj0+((r11*x5524))+(((-1.0)*x5519*x5522))+(((-1.0)*r12*x5521)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5521))+((r01*x5524))+(((-1.0)*x5518*x5522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
CheckValue<IkReal> x5526=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5525.value)+(((1.5707963267949)*(x5526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5527=IKcos(j4);
IkReal x5528=IKsin(j4);
IkReal x5529=(cj5*r00);
IkReal x5530=(cj5*r10);
IkReal x5531=(cj5*r20);
IkReal x5532=((1.0)*x5527);
IkReal x5533=((1.0)*x5528);
IkReal x5534=(sj5*x5527);
IkReal x5535=(sj5*x5528);
evalcond[0]=(((r22*x5528))+((r21*x5534))+(((-1.0)*x5531*x5532)));
evalcond[1]=((((-1.0)*r22*x5532))+((r21*x5535))+(((-1.0)*x5531*x5533)));
evalcond[2]=(((r02*x5528))+cj0+((r01*x5534))+(((-1.0)*x5529*x5532)));
evalcond[3]=(sj0+(((-1.0)*x5530*x5532))+((r11*x5534))+((r12*x5528)));
evalcond[4]=(cj0+(((-1.0)*x5530*x5533))+((r11*x5535))+(((-1.0)*r12*x5532)));
evalcond[5]=((((-1.0)*r02*x5532))+(((-1.0)*sj0))+((r01*x5535))+(((-1.0)*x5529*x5533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5536=cj1*cj1;
IkReal x5537=(r00*sj5);
IkReal x5538=(cj1*sj2);
IkReal x5539=(cj1*sj1);
IkReal x5540=(cj5*r01);
IkReal x5541=(cj2*sj2);
IkReal x5542=(cj2*sj1);
IkReal x5543=((1000.0)*py);
IkReal x5544=((99.0)*cj5*r11);
IkReal x5545=((99.0)*r10*sj5);
CheckValue<IkReal> x5546=IKPowWithIntegerCheck(((((392.0)*x5541))+(((-425.0)*cj2*x5539))+(((-784.0)*x5536*x5541))+(((-425.0)*sj2*x5536))+(((392.0)*x5539))+(((-784.0)*x5539*(cj2*cj2)))),-1);
if(!x5546.valid){
continue;
}
CheckValue<IkReal> x5547=IKPowWithIntegerCheck(((((-1.0)*x5538))+(((-1.0)*x5542))),-1);
if(!x5547.valid){
continue;
}
if( IKabs(((x5546.value)*(((((-1.0)*x5538*x5543))+(((-1.0)*x5538*x5545))+(((-1.0)*x5538*x5544))+(((133.0)*x5537))+(((-1.0)*x5542*x5543))+(((-1.0)*x5542*x5545))+(((-1.0)*x5542*x5544))+(((133.0)*x5540)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5547.value)*(((((-1.0)*x5537))+(((-1.0)*x5540)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5546.value)*(((((-1.0)*x5538*x5543))+(((-1.0)*x5538*x5545))+(((-1.0)*x5538*x5544))+(((133.0)*x5537))+(((-1.0)*x5542*x5543))+(((-1.0)*x5542*x5545))+(((-1.0)*x5542*x5544))+(((133.0)*x5540))))))+IKsqr(((x5547.value)*(((((-1.0)*x5537))+(((-1.0)*x5540))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5546.value)*(((((-1.0)*x5538*x5543))+(((-1.0)*x5538*x5545))+(((-1.0)*x5538*x5544))+(((133.0)*x5537))+(((-1.0)*x5542*x5543))+(((-1.0)*x5542*x5545))+(((-1.0)*x5542*x5544))+(((133.0)*x5540))))), ((x5547.value)*(((((-1.0)*x5537))+(((-1.0)*x5540))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5548=IKcos(j0);
IkReal x5549=IKsin(j0);
IkReal x5550=(cj5*r01);
IkReal x5551=(r00*sj5);
IkReal x5552=((0.392)*cj2);
IkReal x5553=((1.0)*cj2);
IkReal x5554=(cj5*r11);
IkReal x5555=((0.392)*sj2);
IkReal x5556=(r10*sj5);
IkReal x5557=((1.0)*cj1*sj2);
IkReal x5558=(cj1*x5548);
IkReal x5559=(cj1*x5549);
IkReal x5560=(sj1*x5548);
IkReal x5561=(sj1*x5549);
evalcond[0]=(x5551+x5550+(((-1.0)*x5548*x5557))+(((-1.0)*x5553*x5560)));
evalcond[1]=(x5554+x5556+(((-1.0)*x5549*x5557))+(((-1.0)*x5553*x5561)));
evalcond[2]=((((-0.133)*x5549))+(((-0.099)*x5550))+(((-0.099)*x5551))+(((-1.0)*x5555*x5560))+(((0.425)*x5558))+(((-1.0)*px))+((x5552*x5558)));
evalcond[3]=((((-0.099)*x5556))+(((-0.099)*x5554))+(((-1.0)*x5555*x5561))+(((0.425)*x5559))+(((-1.0)*py))+((x5552*x5559))+(((0.133)*x5548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5562=((1.0)*cj5);
IkReal x5563=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5562)));
j4eval[0]=x5563;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5562))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5564=((1.0)*cj5);
IkReal x5565=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5564)));
j4eval[0]=x5565;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5564))))));
j4eval[2]=IKsign(x5565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5566=((1.0)*sj0);
IkReal x5567=((1.0)*cj0);
IkReal x5568=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5568;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5567))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5566)))))+(IKabs(((((-1.0)*r12*x5566))+(((-1.0)*r02*x5567))))));
j4eval[2]=IKsign(x5568);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5569=((-1.0)*r20);
IkReal x5571 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5571)==0){
continue;
}
IkReal x5570=pow(x5571,-0.5);
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5569),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5572.value));
IkReal gconst115=(r21*x5570);
IkReal gconst116=(x5569*x5570);
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5573.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5574=((-1.0)*r20);
IkReal x5575=x5570;
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5574),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
IkReal x5576=((-1.0)*(x5577.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5576;
IkReal gconst114=x5576;
IkReal gconst115=(r21*x5575);
IkReal gconst116=(x5574*x5575);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5578=((-1.0)*r20);
IkReal x5579=x5570;
CheckValue<IkReal> x5581 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5578),IKFAST_ATAN2_MAGTHRESH);
if(!x5581.valid){
continue;
}
IkReal x5580=((-1.0)*(x5581.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5580;
IkReal gconst114=x5580;
IkReal gconst115=(r21*x5579);
IkReal gconst116=(x5578*x5579);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5582=((-1.0)*r20);
IkReal x5583=x5570;
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5582),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
IkReal x5584=((-1.0)*(x5585.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5584;
IkReal gconst114=x5584;
IkReal gconst115=(r21*x5583);
IkReal gconst116=(x5582*x5583);
IkReal x5586=((1.0)*(r22*r22));
CheckValue<IkReal> x5590=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5586))),-1);
if(!x5590.valid){
continue;
}
IkReal x5587=x5590.value;
IkReal x5588=((1.0)*x5587);
IkReal x5589=((((-1.0)*x5588*(r20*r20*r20*r20)))+(((-1.0)*x5588*(r21*r21*r21*r21)))+(((-1.0)*x5586))+(((-2.0)*x5587*(r20*r20)*(r21*r21))));
j4eval[0]=x5589;
j4eval[1]=IKsign(x5589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5591=(cj2*sj1);
IkReal x5592=(gconst115*r21);
IkReal x5593=(cj1*sj2);
IkReal x5594=((1.0)*gconst116*r20);
CheckValue<IkReal> x5595=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5592))+(((-1.0)*gconst116*r20*x5594))+(((-1.0)*(x5592*x5592)))+(((-1.0)*(r22*r22))))),-1);
if(!x5595.valid){
continue;
}
CheckValue<IkReal> x5596 = IKatan2WithCheck(IkReal((((r22*x5591))+((r22*x5593)))),IkReal((((x5592*x5593))+(((-1.0)*x5593*x5594))+(((-1.0)*x5591*x5594))+((x5591*x5592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5595.value)))+(x5596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5597=IKsin(j4);
IkReal x5598=IKcos(j4);
IkReal x5599=(sj1*sj2);
IkReal x5600=((1.0)*x5598);
IkReal x5601=((1.0)*cj1*cj2);
IkReal x5602=(gconst115*x5597);
IkReal x5603=(gconst115*x5598);
IkReal x5604=((1.0)*gconst116*x5597);
evalcond[0]=((((-1.0)*r22*x5600))+((r21*x5602))+(((-1.0)*r20*x5604)));
evalcond[1]=((((-1.0)*r10*x5604))+cj0+(((-1.0)*r12*x5600))+((r11*x5602)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5604))+((r01*x5602))+(((-1.0)*r02*x5600)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5600))+((r21*x5603))+((r22*x5597)));
evalcond[4]=((((-1.0)*cj0*x5601))+((cj0*x5599))+((r02*x5597))+((r01*x5603))+(((-1.0)*gconst116*r00*x5600)));
evalcond[5]=(((sj0*x5599))+((r12*x5597))+(((-1.0)*gconst116*r10*x5600))+(((-1.0)*sj0*x5601))+((r11*x5603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5605=((1.0)*gconst116);
CheckValue<IkReal> x5606=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5605)))),-1);
if(!x5606.valid){
continue;
}
CheckValue<IkReal> x5607 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5606.value)))+(x5607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5608=IKsin(j4);
IkReal x5609=IKcos(j4);
IkReal x5610=(sj1*sj2);
IkReal x5611=((1.0)*x5609);
IkReal x5612=((1.0)*cj1*cj2);
IkReal x5613=(gconst115*x5608);
IkReal x5614=(gconst115*x5609);
IkReal x5615=((1.0)*gconst116*x5608);
evalcond[0]=((((-1.0)*r22*x5611))+((r21*x5613))+(((-1.0)*r20*x5615)));
evalcond[1]=(cj0+(((-1.0)*r10*x5615))+(((-1.0)*r12*x5611))+((r11*x5613)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5615))+((r01*x5613))+(((-1.0)*r02*x5611)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5611))+((cj1*sj2))+((r21*x5614))+((r22*x5608)));
evalcond[4]=(((cj0*x5610))+((r02*x5608))+(((-1.0)*cj0*x5612))+((r01*x5614))+(((-1.0)*gconst116*r00*x5611)));
evalcond[5]=(((sj0*x5610))+(((-1.0)*gconst116*r10*x5611))+((r12*x5608))+(((-1.0)*sj0*x5612))+((r11*x5614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5616=((1.0)*gconst116);
CheckValue<IkReal> x5617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5616))+(((-1.0)*gconst115*r00)))),-1);
if(!x5617.valid){
continue;
}
CheckValue<IkReal> x5618 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5616))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5617.value)))+(x5618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5619=IKsin(j4);
IkReal x5620=IKcos(j4);
IkReal x5621=(sj1*sj2);
IkReal x5622=((1.0)*x5620);
IkReal x5623=((1.0)*cj1*cj2);
IkReal x5624=(gconst115*x5619);
IkReal x5625=(gconst115*x5620);
IkReal x5626=((1.0)*gconst116*x5619);
evalcond[0]=((((-1.0)*r22*x5622))+((r21*x5624))+(((-1.0)*r20*x5626)));
evalcond[1]=(cj0+(((-1.0)*r10*x5626))+(((-1.0)*r12*x5622))+((r11*x5624)));
evalcond[2]=((((-1.0)*r00*x5626))+(((-1.0)*sj0))+((r01*x5624))+(((-1.0)*r02*x5622)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5622))+((r21*x5625))+((r22*x5619)));
evalcond[4]=(((cj0*x5621))+((r02*x5619))+(((-1.0)*cj0*x5623))+((r01*x5625))+(((-1.0)*gconst116*r00*x5622)));
evalcond[5]=(((sj0*x5621))+(((-1.0)*gconst116*r10*x5622))+((r12*x5619))+((r11*x5625))+(((-1.0)*sj0*x5623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5627=((-1.0)*r21);
IkReal x5629 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5629)==0){
continue;
}
IkReal x5628=pow(x5629,-0.5);
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal(x5627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5630.value))));
IkReal gconst118=(x5627*x5628);
IkReal gconst119=((1.0)*r20*x5628);
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5631.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5632=((-1.0)*r21);
CheckValue<IkReal> x5635 = IKatan2WithCheck(IkReal(x5632),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5635.valid){
continue;
}
IkReal x5633=((1.0)*(x5635.value));
IkReal x5634=x5628;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5633)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5633)));
IkReal gconst118=(x5632*x5634);
IkReal gconst119=((1.0)*r20*x5634);
IkReal x5636=r22*r22;
IkReal x5637=((1.0)*x5636);
CheckValue<IkReal> x5641=IKPowWithIntegerCheck(((-1.0)+x5636),-1);
if(!x5641.valid){
continue;
}
IkReal x5638=x5641.value;
if((((1.0)+(((-1.0)*x5637)))) < -0.00001)
continue;
IkReal x5639=IKsqrt(((1.0)+(((-1.0)*x5637))));
IkReal x5640=(cj0*x5638*x5639);
j4eval[0]=((IKabs((x5640+(((-1.0)*x5637*x5640)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5642=((-1.0)*r21);
CheckValue<IkReal> x5645 = IKatan2WithCheck(IkReal(x5642),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5645.valid){
continue;
}
IkReal x5643=((1.0)*(x5645.value));
IkReal x5644=x5628;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5643)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5643)));
IkReal gconst118=(x5642*x5644);
IkReal gconst119=((1.0)*r20*x5644);
IkReal x5646=r22*r22;
IkReal x5647=((1.0)*x5646);
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(((-1.0)+x5646),-1);
if(!x5651.valid){
continue;
}
IkReal x5648=x5651.value;
if((((1.0)+(((-1.0)*x5647)))) < -0.00001)
continue;
IkReal x5649=IKsqrt(((1.0)+(((-1.0)*x5647))));
IkReal x5650=(sj0*x5648*x5649);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5650+(((-1.0)*x5647*x5650))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5652=((-1.0)*r21);
CheckValue<IkReal> x5655 = IKatan2WithCheck(IkReal(x5652),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5655.valid){
continue;
}
IkReal x5653=((1.0)*(x5655.value));
IkReal x5654=x5628;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5653)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5653)));
IkReal gconst118=(x5652*x5654);
IkReal gconst119=((1.0)*r20*x5654);
IkReal x5656=r22*r22;
IkReal x5657=(r12*sj0);
IkReal x5658=(cj0*r02);
CheckValue<IkReal> x5662=IKPowWithIntegerCheck(((-1.0)+x5656),-1);
if(!x5662.valid){
continue;
}
IkReal x5659=x5662.value;
if((((1.0)+(((-1.0)*x5656)))) < -0.00001)
continue;
IkReal x5660=IKsqrt(((1.0)+(((-1.0)*x5656))));
IkReal x5661=(r22*x5659*x5660);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5657*x5661))+((x5658*x5661)))))+(IKabs(((((-1.0)*x5657))+(((-1.0)*x5658))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5663=((1.0)*sj0);
IkReal x5664=((1.0)*gconst118);
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5663)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5664))+(((-1.0)*gconst118*r11*x5663))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
CheckValue<IkReal> x5666=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5664)))),-1);
if(!x5666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5665.value)+(((1.5707963267949)*(x5666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5667=IKsin(j4);
IkReal x5668=IKcos(j4);
IkReal x5669=(gconst118*r01);
IkReal x5670=(sj1*sj2);
IkReal x5671=(gconst119*r20);
IkReal x5672=(gconst119*r10);
IkReal x5673=(gconst119*r00);
IkReal x5674=(gconst118*r21);
IkReal x5675=(gconst118*r11);
IkReal x5676=((1.0)*x5668);
IkReal x5677=((1.0)*cj1*cj2);
IkReal x5678=((1.0)*x5667);
evalcond[0]=((((-1.0)*r22*x5676))+(((-1.0)*x5671*x5678))+((x5667*x5674)));
evalcond[1]=((((-1.0)*x5672*x5678))+cj0+(((-1.0)*r12*x5676))+((x5667*x5675)));
evalcond[2]=((((-1.0)*sj0))+((x5667*x5669))+(((-1.0)*x5673*x5678))+(((-1.0)*r02*x5676)));
evalcond[3]=(((cj2*sj1))+((x5668*x5674))+((r22*x5667))+((cj1*sj2))+(((-1.0)*x5671*x5676)));
evalcond[4]=(((cj0*x5670))+((r02*x5667))+((x5668*x5669))+(((-1.0)*cj0*x5677))+(((-1.0)*x5673*x5676)));
evalcond[5]=((((-1.0)*x5672*x5676))+((x5668*x5675))+((sj0*x5670))+((r12*x5667))+(((-1.0)*sj0*x5677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5679=((1.0)*gconst119);
CheckValue<IkReal> x5680=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5679)))),-1);
if(!x5680.valid){
continue;
}
CheckValue<IkReal> x5681 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5679))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5680.value)))+(x5681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5682=IKsin(j4);
IkReal x5683=IKcos(j4);
IkReal x5684=(gconst118*r01);
IkReal x5685=(sj1*sj2);
IkReal x5686=(gconst119*r20);
IkReal x5687=(gconst119*r10);
IkReal x5688=(gconst119*r00);
IkReal x5689=(gconst118*r21);
IkReal x5690=(gconst118*r11);
IkReal x5691=((1.0)*x5683);
IkReal x5692=((1.0)*cj1*cj2);
IkReal x5693=((1.0)*x5682);
evalcond[0]=((((-1.0)*x5686*x5693))+(((-1.0)*r22*x5691))+((x5682*x5689)));
evalcond[1]=(((x5682*x5690))+cj0+(((-1.0)*x5687*x5693))+(((-1.0)*r12*x5691)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5691))+(((-1.0)*x5688*x5693))+((x5682*x5684)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5686*x5691))+((r22*x5682))+((cj1*sj2))+((x5683*x5689)));
evalcond[4]=(((x5683*x5684))+(((-1.0)*cj0*x5692))+((r02*x5682))+(((-1.0)*x5688*x5691))+((cj0*x5685)));
evalcond[5]=(((x5683*x5690))+(((-1.0)*sj0*x5692))+(((-1.0)*x5687*x5691))+((sj0*x5685))+((r12*x5682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5694=((1.0)*gconst119);
CheckValue<IkReal> x5695 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5695.valid){
continue;
}
CheckValue<IkReal> x5696=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5694)))),-1);
if(!x5696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5695.value)+(((1.5707963267949)*(x5696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5697=IKsin(j4);
IkReal x5698=IKcos(j4);
IkReal x5699=(gconst118*r01);
IkReal x5700=(sj1*sj2);
IkReal x5701=(gconst119*r20);
IkReal x5702=(gconst119*r10);
IkReal x5703=(gconst119*r00);
IkReal x5704=(gconst118*r21);
IkReal x5705=(gconst118*r11);
IkReal x5706=((1.0)*x5698);
IkReal x5707=((1.0)*cj1*cj2);
IkReal x5708=((1.0)*x5697);
evalcond[0]=((((-1.0)*r22*x5706))+((x5697*x5704))+(((-1.0)*x5701*x5708)));
evalcond[1]=((((-1.0)*r12*x5706))+cj0+(((-1.0)*x5702*x5708))+((x5697*x5705)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5703*x5708))+(((-1.0)*r02*x5706))+((x5697*x5699)));
evalcond[3]=(((cj2*sj1))+((r22*x5697))+((cj1*sj2))+(((-1.0)*x5701*x5706))+((x5698*x5704)));
evalcond[4]=(((x5698*x5699))+((r02*x5697))+(((-1.0)*x5703*x5706))+(((-1.0)*cj0*x5707))+((cj0*x5700)));
evalcond[5]=((((-1.0)*x5702*x5706))+((sj0*x5700))+(((-1.0)*sj0*x5707))+((r12*x5697))+((x5698*x5705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5709=((-1.0)*r10);
IkReal x5711 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5711)==0){
continue;
}
IkReal x5710=pow(x5711,-0.5);
CheckValue<IkReal> x5712 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5709),IKFAST_ATAN2_MAGTHRESH);
if(!x5712.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5712.value));
IkReal gconst121=(r11*x5710);
IkReal gconst122=(x5709*x5710);
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5713.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5714=((-1.0)*r10);
IkReal x5715=x5710;
CheckValue<IkReal> x5717 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5714),IKFAST_ATAN2_MAGTHRESH);
if(!x5717.valid){
continue;
}
IkReal x5716=((-1.0)*(x5717.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5716;
IkReal gconst120=x5716;
IkReal gconst121=(r11*x5715);
IkReal gconst122=(x5714*x5715);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5718=((1.0)*sj0);
IkReal x5719=((1.0)*gconst121);
CheckValue<IkReal> x5720 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5718)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5718))+(((-1.0)*cj0*r01*x5719))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5720.valid){
continue;
}
CheckValue<IkReal> x5721=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5719)))),-1);
if(!x5721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5720.value)+(((1.5707963267949)*(x5721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5722=IKsin(j4);
IkReal x5723=IKcos(j4);
IkReal x5724=(gconst121*r11);
IkReal x5725=(sj1*sj2);
IkReal x5726=(gconst122*r00);
IkReal x5727=(gconst122*r10);
IkReal x5728=(gconst122*r20);
IkReal x5729=((1.0)*x5723);
IkReal x5730=((1.0)*cj1*cj2);
IkReal x5731=((1.0)*x5722);
IkReal x5732=(gconst121*x5722);
IkReal x5733=(gconst121*x5723);
evalcond[0]=(((r21*x5732))+(((-1.0)*x5728*x5731))+(((-1.0)*r22*x5729)));
evalcond[1]=(cj0+(((-1.0)*r12*x5729))+(((-1.0)*x5727*x5731))+((x5722*x5724)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5732))+(((-1.0)*r02*x5729))+(((-1.0)*x5726*x5731)));
evalcond[3]=(((cj2*sj1))+((r21*x5733))+(((-1.0)*x5728*x5729))+((cj1*sj2))+((r22*x5722)));
evalcond[4]=(((r01*x5733))+(((-1.0)*cj0*x5730))+((cj0*x5725))+(((-1.0)*x5726*x5729))+((r02*x5722)));
evalcond[5]=(((sj0*x5725))+((x5723*x5724))+(((-1.0)*x5727*x5729))+((r12*x5722))+(((-1.0)*sj0*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5734=((1.0)*gconst122);
CheckValue<IkReal> x5735=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5734)))),-1);
if(!x5735.valid){
continue;
}
CheckValue<IkReal> x5736 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5734))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5735.value)))+(x5736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5737=IKsin(j4);
IkReal x5738=IKcos(j4);
IkReal x5739=(gconst121*r11);
IkReal x5740=(sj1*sj2);
IkReal x5741=(gconst122*r00);
IkReal x5742=(gconst122*r10);
IkReal x5743=(gconst122*r20);
IkReal x5744=((1.0)*x5738);
IkReal x5745=((1.0)*cj1*cj2);
IkReal x5746=((1.0)*x5737);
IkReal x5747=(gconst121*x5737);
IkReal x5748=(gconst121*x5738);
evalcond[0]=((((-1.0)*r22*x5744))+((r21*x5747))+(((-1.0)*x5743*x5746)));
evalcond[1]=(cj0+((x5737*x5739))+(((-1.0)*x5742*x5746))+(((-1.0)*r12*x5744)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5747))+(((-1.0)*r02*x5744))+(((-1.0)*x5741*x5746)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5748))+(((-1.0)*x5743*x5744))+((r22*x5737)));
evalcond[4]=(((r01*x5748))+(((-1.0)*cj0*x5745))+(((-1.0)*x5741*x5744))+((r02*x5737))+((cj0*x5740)));
evalcond[5]=(((x5738*x5739))+((r12*x5737))+((sj0*x5740))+(((-1.0)*x5742*x5744))+(((-1.0)*sj0*x5745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5749=((-1.0)*r11);
IkReal x5751 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5751)==0){
continue;
}
IkReal x5750=pow(x5751,-0.5);
CheckValue<IkReal> x5752 = IKatan2WithCheck(IkReal(x5749),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5752.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5752.value))));
IkReal gconst124=(x5749*x5750);
IkReal gconst125=((1.0)*r10*x5750);
CheckValue<IkReal> x5753 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5753.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5753.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5754=((-1.0)*r11);
CheckValue<IkReal> x5757 = IKatan2WithCheck(IkReal(x5754),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5757.valid){
continue;
}
IkReal x5755=((1.0)*(x5757.value));
IkReal x5756=x5750;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5755)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5755)));
IkReal gconst124=(x5754*x5756);
IkReal gconst125=((1.0)*r10*x5756);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5758=((-1.0)*r11);
CheckValue<IkReal> x5761 = IKatan2WithCheck(IkReal(x5758),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5761.valid){
continue;
}
IkReal x5759=((1.0)*(x5761.value));
IkReal x5760=x5750;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5759)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5759)));
IkReal gconst124=(x5758*x5760);
IkReal gconst125=((1.0)*r10*x5760);
IkReal x5762=r12*r12;
IkReal x5763=((1.0)*sj0);
IkReal x5764=(cj0*r02);
IkReal x5765=x5750;
j4eval[0]=((IKabs(((((-1.0)*x5763*x5765))+((sj0*x5762*x5765))+((r12*x5764*x5765)))))+(IKabs(((((-1.0)*r12*x5763))+(((-1.0)*x5764))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5766=((-1.0)*r11);
CheckValue<IkReal> x5769 = IKatan2WithCheck(IkReal(x5766),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5769.valid){
continue;
}
IkReal x5767=((1.0)*(x5769.value));
IkReal x5768=x5750;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5767)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5767)));
IkReal gconst124=(x5766*x5768);
IkReal gconst125=((1.0)*r10*x5768);
IkReal x5770=r12*r12;
IkReal x5771=((1.0)+(((-1.0)*x5770)));
IkReal x5772=(cj2*r22*sj1);
IkReal x5773=(cj1*r22*sj2);
CheckValue<IkReal> x5780=IKPowWithIntegerCheck(x5771,-1);
if(!x5780.valid){
continue;
}
IkReal x5774=x5780.value;
CheckValue<IkReal> x5781=IKPowWithIntegerCheck(((-1.0)+x5770),-1);
if(!x5781.valid){
continue;
}
IkReal x5775=x5781.value;
IkReal x5776=((1.0)*x5774);
if((x5771) < -0.00001)
continue;
IkReal x5777=IKsqrt(x5771);
IkReal x5778=((1.0)*r12*x5775*x5777);
IkReal x5779=((((-1.0)*x5776*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x5774))+(((-1.0)*(r22*r22)))+(((-1.0)*x5776*(r10*r10)*(r20*r20))));
j4eval[0]=x5779;
j4eval[1]=IKsign(x5779);
j4eval[2]=((IKabs(((((-1.0)*x5772*x5778))+(((-1.0)*x5773*x5778)))))+(IKabs((x5773+x5772))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5782=(gconst124*r21);
IkReal x5783=(cj1*sj2);
IkReal x5784=(cj2*sj1);
IkReal x5785=(gconst125*r20);
CheckValue<IkReal> x5786=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5782*x5782)))+(((-1.0)*(x5785*x5785)))+(((-1.0)*(r22*r22)))+(((2.0)*x5782*x5785)))),-1);
if(!x5786.valid){
continue;
}
CheckValue<IkReal> x5787 = IKatan2WithCheck(IkReal((((r22*x5784))+((r22*x5783)))),IkReal(((((-1.0)*x5784*x5785))+((x5782*x5784))+((x5782*x5783))+(((-1.0)*x5783*x5785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5786.value)))+(x5787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5788=IKsin(j4);
IkReal x5789=IKcos(j4);
IkReal x5790=(sj1*sj2);
IkReal x5791=(gconst125*r20);
IkReal x5792=(gconst124*r01);
IkReal x5793=(gconst125*r00);
IkReal x5794=(gconst125*r10);
IkReal x5795=((1.0)*x5789);
IkReal x5796=((1.0)*cj1*cj2);
IkReal x5797=((1.0)*x5788);
IkReal x5798=(gconst124*x5788);
IkReal x5799=(gconst124*x5789);
evalcond[0]=(((r21*x5798))+(((-1.0)*x5791*x5797))+(((-1.0)*r22*x5795)));
evalcond[1]=(cj0+((r11*x5798))+(((-1.0)*x5794*x5797))+(((-1.0)*r12*x5795)));
evalcond[2]=((((-1.0)*x5793*x5797))+((x5788*x5792))+(((-1.0)*sj0))+(((-1.0)*r02*x5795)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5799))+(((-1.0)*x5791*x5795))+((r22*x5788)));
evalcond[4]=((((-1.0)*x5793*x5795))+((x5789*x5792))+(((-1.0)*cj0*x5796))+((cj0*x5790))+((r02*x5788)));
evalcond[5]=(((r12*x5788))+((r11*x5799))+(((-1.0)*x5794*x5795))+((sj0*x5790))+(((-1.0)*sj0*x5796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5800=((1.0)*sj0);
IkReal x5801=((1.0)*cj0);
CheckValue<IkReal> x5802 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5800))+(((-1.0)*r02*x5801)))),IkReal(((((-1.0)*gconst124*r11*x5800))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5802.valid){
continue;
}
CheckValue<IkReal> x5803=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5802.value)+(((1.5707963267949)*(x5803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5804=IKsin(j4);
IkReal x5805=IKcos(j4);
IkReal x5806=(sj1*sj2);
IkReal x5807=(gconst125*r20);
IkReal x5808=(gconst124*r01);
IkReal x5809=(gconst125*r00);
IkReal x5810=(gconst125*r10);
IkReal x5811=((1.0)*x5805);
IkReal x5812=((1.0)*cj1*cj2);
IkReal x5813=((1.0)*x5804);
IkReal x5814=(gconst124*x5804);
IkReal x5815=(gconst124*x5805);
evalcond[0]=(((r21*x5814))+(((-1.0)*x5807*x5813))+(((-1.0)*r22*x5811)));
evalcond[1]=((((-1.0)*r12*x5811))+cj0+(((-1.0)*x5810*x5813))+((r11*x5814)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5811))+(((-1.0)*x5809*x5813))+((x5804*x5808)));
evalcond[3]=(((r21*x5815))+((cj2*sj1))+((cj1*sj2))+((r22*x5804))+(((-1.0)*x5807*x5811)));
evalcond[4]=(((x5805*x5808))+(((-1.0)*cj0*x5812))+((cj0*x5806))+((r02*x5804))+(((-1.0)*x5809*x5811)));
evalcond[5]=((((-1.0)*sj0*x5812))+(((-1.0)*x5810*x5811))+((r11*x5815))+((r12*x5804))+((sj0*x5806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5816=((1.0)*gconst125);
CheckValue<IkReal> x5817=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5816)))),-1);
if(!x5817.valid){
continue;
}
CheckValue<IkReal> x5818 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5816))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5817.value)))+(x5818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5819=IKsin(j4);
IkReal x5820=IKcos(j4);
IkReal x5821=(sj1*sj2);
IkReal x5822=(gconst125*r20);
IkReal x5823=(gconst124*r01);
IkReal x5824=(gconst125*r00);
IkReal x5825=(gconst125*r10);
IkReal x5826=((1.0)*x5820);
IkReal x5827=((1.0)*cj1*cj2);
IkReal x5828=((1.0)*x5819);
IkReal x5829=(gconst124*x5819);
IkReal x5830=(gconst124*x5820);
evalcond[0]=((((-1.0)*r22*x5826))+((r21*x5829))+(((-1.0)*x5822*x5828)));
evalcond[1]=(cj0+((r11*x5829))+(((-1.0)*r12*x5826))+(((-1.0)*x5825*x5828)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5826))+(((-1.0)*x5824*x5828))+((x5819*x5823)));
evalcond[3]=(((r21*x5830))+((cj2*sj1))+((r22*x5819))+((cj1*sj2))+(((-1.0)*x5822*x5826)));
evalcond[4]=(((x5820*x5823))+((r02*x5819))+((cj0*x5821))+(((-1.0)*x5824*x5826))+(((-1.0)*cj0*x5827)));
evalcond[5]=(((sj0*x5821))+((r11*x5830))+((r12*x5819))+(((-1.0)*sj0*x5827))+(((-1.0)*x5825*x5826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5831=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5831;
j4eval[1]=IKsign(x5831);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5832=((1.0)*cj5);
IkReal x5833=((((-1.0)*r01*x5832))+(((-1.0)*r00*sj5)));
j4eval[0]=x5833;
j4eval[1]=((IKabs(((((-1.0)*r20*x5832))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5834=cj5*cj5;
IkReal x5835=r11*r11;
IkReal x5836=(cj5*r10);
IkReal x5837=(r11*sj5);
IkReal x5838=(((x5834*x5835))+(((-1.0)*x5834*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x5836*x5837))+(((-1.0)*x5835)));
j4eval[0]=x5838;
j4eval[1]=IKsign(x5838);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5836))+x5837))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5839=cj5*cj5;
IkReal x5840=r11*r11;
IkReal x5841=(cj5*r10);
IkReal x5842=(r11*sj5);
CheckValue<IkReal> x5843=IKPowWithIntegerCheck(IKsign(((((2.0)*x5841*x5842))+(((-1.0)*x5840))+(((-1.0)*(r12*r12)))+((x5839*x5840))+(((-1.0)*x5839*(r10*r10))))),-1);
if(!x5843.valid){
continue;
}
CheckValue<IkReal> x5844 = IKatan2WithCheck(IkReal(((((-1.0)*x5841))+x5842)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5843.value)))+(x5844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5845=IKcos(j4);
IkReal x5846=IKsin(j4);
IkReal x5847=(cj5*r00);
IkReal x5848=(cj5*r10);
IkReal x5849=(r21*sj5);
IkReal x5850=(cj5*r20);
IkReal x5851=((1.0)*x5845);
IkReal x5852=((1.0)*x5846);
IkReal x5853=(sj5*x5846);
IkReal x5854=(sj5*x5845);
evalcond[0]=(((r11*x5854))+((r12*x5846))+(((-1.0)*x5848*x5851)));
evalcond[1]=(((x5846*x5849))+(((-1.0)*r22*x5851))+(((-1.0)*x5850*x5852)));
evalcond[2]=((((-1.0)*x5847*x5852))+((r01*x5853))+(((-1.0)*r02*x5851)));
evalcond[3]=((1.0)+((r11*x5853))+(((-1.0)*r12*x5851))+(((-1.0)*x5848*x5852)));
evalcond[4]=(((cj2*sj1))+((x5845*x5849))+((cj1*sj2))+((r22*x5846))+(((-1.0)*x5850*x5851)));
evalcond[5]=((((-1.0)*x5847*x5851))+((r01*x5854))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5855=((1.0)*cj5);
CheckValue<IkReal> x5856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5855)))),-1);
if(!x5856.valid){
continue;
}
CheckValue<IkReal> x5857 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5855))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5856.value)))+(x5857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5858=IKcos(j4);
IkReal x5859=IKsin(j4);
IkReal x5860=(cj5*r00);
IkReal x5861=(cj5*r10);
IkReal x5862=(r21*sj5);
IkReal x5863=(cj5*r20);
IkReal x5864=((1.0)*x5858);
IkReal x5865=((1.0)*x5859);
IkReal x5866=(sj5*x5859);
IkReal x5867=(sj5*x5858);
evalcond[0]=((((-1.0)*x5861*x5864))+((r12*x5859))+((r11*x5867)));
evalcond[1]=((((-1.0)*r22*x5864))+(((-1.0)*x5863*x5865))+((x5859*x5862)));
evalcond[2]=((((-1.0)*r02*x5864))+(((-1.0)*x5860*x5865))+((r01*x5866)));
evalcond[3]=((1.0)+(((-1.0)*x5861*x5865))+((r11*x5866))+(((-1.0)*r12*x5864)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5863*x5864))+((r22*x5859))+((x5858*x5862)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5860*x5864))+((r02*x5859))+((r01*x5867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5868=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5868.valid){
continue;
}
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5868.value)))+(x5869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5870=IKcos(j4);
IkReal x5871=IKsin(j4);
IkReal x5872=(cj5*r00);
IkReal x5873=(cj5*r10);
IkReal x5874=(r21*sj5);
IkReal x5875=(cj5*r20);
IkReal x5876=((1.0)*x5870);
IkReal x5877=((1.0)*x5871);
IkReal x5878=(sj5*x5871);
IkReal x5879=(sj5*x5870);
evalcond[0]=((((-1.0)*x5873*x5876))+((r12*x5871))+((r11*x5879)));
evalcond[1]=((((-1.0)*x5875*x5877))+(((-1.0)*r22*x5876))+((x5871*x5874)));
evalcond[2]=((((-1.0)*x5872*x5877))+(((-1.0)*r02*x5876))+((r01*x5878)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5876))+(((-1.0)*x5873*x5877))+((r11*x5878)));
evalcond[4]=((((-1.0)*x5875*x5876))+((cj2*sj1))+((cj1*sj2))+((r22*x5871))+((x5870*x5874)));
evalcond[5]=((((-1.0)*x5872*x5876))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5871))+((r01*x5879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5880=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5880;
j4eval[1]=IKsign(x5880);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5881=((1.0)*cj5);
IkReal x5882=((((-1.0)*r21*x5881))+(((-1.0)*r20*sj5)));
j4eval[0]=x5882;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5881))))));
j4eval[2]=IKsign(x5882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5883=cj5*cj5;
IkReal x5884=r11*r11;
IkReal x5885=(r11*sj5);
IkReal x5886=(cj5*r10);
IkReal x5887=((r12*r12)+(((-2.0)*x5885*x5886))+(((-1.0)*x5883*x5884))+((x5883*(r10*r10)))+x5884);
j4eval[0]=x5887;
j4eval[1]=IKsign(x5887);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5886))+x5885))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5888=cj5*cj5;
IkReal x5889=r11*r11;
IkReal x5890=(cj5*r10);
IkReal x5891=(r11*sj5);
CheckValue<IkReal> x5892=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5888*x5889))+(((-2.0)*x5890*x5891))+x5889+((x5888*(r10*r10))))),-1);
if(!x5892.valid){
continue;
}
CheckValue<IkReal> x5893 = IKatan2WithCheck(IkReal(((((-1.0)*x5890))+x5891)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5892.value)))+(x5893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5894=IKcos(j4);
IkReal x5895=IKsin(j4);
IkReal x5896=(cj5*r00);
IkReal x5897=(cj5*r10);
IkReal x5898=(r21*sj5);
IkReal x5899=(cj5*r20);
IkReal x5900=((1.0)*x5894);
IkReal x5901=((1.0)*x5895);
IkReal x5902=(sj5*x5895);
IkReal x5903=(sj5*x5894);
evalcond[0]=((((-1.0)*x5897*x5900))+((r12*x5895))+((r11*x5903)));
evalcond[1]=((((-1.0)*r22*x5900))+((x5895*x5898))+(((-1.0)*x5899*x5901)));
evalcond[2]=((((-1.0)*x5896*x5901))+(((-1.0)*r02*x5900))+((r01*x5902)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5900))+(((-1.0)*x5897*x5901))+((r11*x5902)));
evalcond[4]=(((r22*x5895))+((cj2*sj1))+((cj1*sj2))+((x5894*x5898))+(((-1.0)*x5899*x5900)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5896*x5900))+((r02*x5895))+((cj1*cj2))+((r01*x5903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5904=((1.0)*cj5);
CheckValue<IkReal> x5905 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5904))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5905.valid){
continue;
}
CheckValue<IkReal> x5906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5904))+(((-1.0)*r20*sj5)))),-1);
if(!x5906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5905.value)+(((1.5707963267949)*(x5906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5907=IKcos(j4);
IkReal x5908=IKsin(j4);
IkReal x5909=(cj5*r00);
IkReal x5910=(cj5*r10);
IkReal x5911=(r21*sj5);
IkReal x5912=(cj5*r20);
IkReal x5913=((1.0)*x5907);
IkReal x5914=((1.0)*x5908);
IkReal x5915=(sj5*x5908);
IkReal x5916=(sj5*x5907);
evalcond[0]=(((r12*x5908))+(((-1.0)*x5910*x5913))+((r11*x5916)));
evalcond[1]=(((x5908*x5911))+(((-1.0)*x5912*x5914))+(((-1.0)*r22*x5913)));
evalcond[2]=(((r01*x5915))+(((-1.0)*x5909*x5914))+(((-1.0)*r02*x5913)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5913))+(((-1.0)*x5910*x5914))+((r11*x5915)));
evalcond[4]=(((cj2*sj1))+((r22*x5908))+((cj1*sj2))+(((-1.0)*x5912*x5913))+((x5907*x5911)));
evalcond[5]=(((r01*x5916))+(((-1.0)*sj1*sj2))+((r02*x5908))+(((-1.0)*x5909*x5913))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5917 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5917.valid){
continue;
}
CheckValue<IkReal> x5918=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5917.value)+(((1.5707963267949)*(x5918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5919=IKcos(j4);
IkReal x5920=IKsin(j4);
IkReal x5921=(cj5*r00);
IkReal x5922=(cj5*r10);
IkReal x5923=(r21*sj5);
IkReal x5924=(cj5*r20);
IkReal x5925=((1.0)*x5919);
IkReal x5926=((1.0)*x5920);
IkReal x5927=(sj5*x5920);
IkReal x5928=(sj5*x5919);
evalcond[0]=(((r11*x5928))+((r12*x5920))+(((-1.0)*x5922*x5925)));
evalcond[1]=((((-1.0)*r22*x5925))+((x5920*x5923))+(((-1.0)*x5924*x5926)));
evalcond[2]=((((-1.0)*r02*x5925))+((r01*x5927))+(((-1.0)*x5921*x5926)));
evalcond[3]=((-1.0)+((r11*x5927))+(((-1.0)*r12*x5925))+(((-1.0)*x5922*x5926)));
evalcond[4]=(((cj2*sj1))+((x5919*x5923))+((cj1*sj2))+((r22*x5920))+(((-1.0)*x5924*x5925)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x5928))+(((-1.0)*x5921*x5925))+((r02*x5920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5929=((-1.0)*r00);
IkReal x5931 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5931)==0){
continue;
}
IkReal x5930=pow(x5931,-0.5);
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5929),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5932.value));
IkReal gconst127=(r01*x5930);
IkReal gconst128=(x5929*x5930);
CheckValue<IkReal> x5933 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5933.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5933.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5934=((-1.0)*r00);
IkReal x5935=x5930;
CheckValue<IkReal> x5937 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5934),IKFAST_ATAN2_MAGTHRESH);
if(!x5937.valid){
continue;
}
IkReal x5936=((-1.0)*(x5937.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5936;
IkReal gconst126=x5936;
IkReal gconst127=(r01*x5935);
IkReal gconst128=(x5934*x5935);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5938=((1.0)*sj0);
IkReal x5939=((1.0)*gconst127);
CheckValue<IkReal> x5940=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5939)))),-1);
if(!x5940.valid){
continue;
}
CheckValue<IkReal> x5941 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5938)))),IkReal(((((-1.0)*cj0*r01*x5939))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5940.value)))+(x5941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5942=IKsin(j4);
IkReal x5943=IKcos(j4);
IkReal x5944=(gconst127*r01);
IkReal x5945=(sj1*sj2);
IkReal x5946=(gconst128*r10);
IkReal x5947=(gconst128*r00);
IkReal x5948=(gconst128*r20);
IkReal x5949=((1.0)*x5943);
IkReal x5950=((1.0)*cj1*cj2);
IkReal x5951=((1.0)*x5942);
IkReal x5952=(gconst127*x5943);
IkReal x5953=(gconst127*x5942);
evalcond[0]=((((-1.0)*r22*x5949))+((r21*x5953))+(((-1.0)*x5948*x5951)));
evalcond[1]=(cj0+((r11*x5953))+(((-1.0)*x5946*x5951))+(((-1.0)*r12*x5949)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5947*x5951))+((x5942*x5944))+(((-1.0)*r02*x5949)));
evalcond[3]=(((cj2*sj1))+((r21*x5952))+((cj1*sj2))+(((-1.0)*x5948*x5949))+((r22*x5942)));
evalcond[4]=(((x5943*x5944))+((cj0*x5945))+(((-1.0)*x5947*x5949))+(((-1.0)*cj0*x5950))+((r02*x5942)));
evalcond[5]=(((r11*x5952))+(((-1.0)*x5946*x5949))+((r12*x5942))+((sj0*x5945))+(((-1.0)*sj0*x5950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5954=((1.0)*gconst128);
CheckValue<IkReal> x5955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5954))+(((-1.0)*gconst127*r10)))),-1);
if(!x5955.valid){
continue;
}
CheckValue<IkReal> x5956 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5955.value)))+(x5956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5957=IKsin(j4);
IkReal x5958=IKcos(j4);
IkReal x5959=(gconst127*r01);
IkReal x5960=(sj1*sj2);
IkReal x5961=(gconst128*r10);
IkReal x5962=(gconst128*r00);
IkReal x5963=(gconst128*r20);
IkReal x5964=((1.0)*x5958);
IkReal x5965=((1.0)*cj1*cj2);
IkReal x5966=((1.0)*x5957);
IkReal x5967=(gconst127*x5958);
IkReal x5968=(gconst127*x5957);
evalcond[0]=((((-1.0)*r22*x5964))+((r21*x5968))+(((-1.0)*x5963*x5966)));
evalcond[1]=(cj0+(((-1.0)*x5961*x5966))+(((-1.0)*r12*x5964))+((r11*x5968)));
evalcond[2]=((((-1.0)*sj0))+((x5957*x5959))+(((-1.0)*r02*x5964))+(((-1.0)*x5962*x5966)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5967))+((r22*x5957))+(((-1.0)*x5963*x5964)));
evalcond[4]=(((cj0*x5960))+((r02*x5957))+(((-1.0)*cj0*x5965))+((x5958*x5959))+(((-1.0)*x5962*x5964)));
evalcond[5]=((((-1.0)*sj0*x5965))+((r12*x5957))+(((-1.0)*x5961*x5964))+((r11*x5967))+((sj0*x5960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5969=((-1.0)*r01);
IkReal x5971 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5971)==0){
continue;
}
IkReal x5970=pow(x5971,-0.5);
CheckValue<IkReal> x5972 = IKatan2WithCheck(IkReal(x5969),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5972.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5972.value))));
IkReal gconst130=(x5969*x5970);
IkReal gconst131=((1.0)*r00*x5970);
CheckValue<IkReal> x5973 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5973.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5973.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5974=((-1.0)*r01);
CheckValue<IkReal> x5977 = IKatan2WithCheck(IkReal(x5974),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5977.valid){
continue;
}
IkReal x5975=((1.0)*(x5977.value));
IkReal x5976=x5970;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5975)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5975)));
IkReal gconst130=(x5974*x5976);
IkReal gconst131=((1.0)*r00*x5976);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5978=((-1.0)*r01);
CheckValue<IkReal> x5981 = IKatan2WithCheck(IkReal(x5978),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5981.valid){
continue;
}
IkReal x5979=((1.0)*(x5981.value));
IkReal x5980=x5970;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5979)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5979)));
IkReal gconst130=(x5978*x5980);
IkReal gconst131=((1.0)*r00*x5980);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5982=((-1.0)*r01);
CheckValue<IkReal> x5985 = IKatan2WithCheck(IkReal(x5982),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5985.valid){
continue;
}
IkReal x5983=((1.0)*(x5985.value));
IkReal x5984=x5970;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5983)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5983)));
IkReal gconst130=(x5982*x5984);
IkReal gconst131=((1.0)*r00*x5984);
IkReal x5986=r02*r02;
IkReal x5987=(r12*sj0);
IkReal x5988=((1.0)*cj0);
IkReal x5989=x5970;
j4eval[0]=((IKabs((((r02*x5987*x5989))+((cj0*x5986*x5989))+(((-1.0)*x5988*x5989)))))+(IKabs(((((-1.0)*x5987))+(((-1.0)*r02*x5988))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5990=((1.0)*sj0);
IkReal x5991=((1.0)*gconst130);
CheckValue<IkReal> x5992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5991))+(((-1.0)*gconst131*r21)))),-1);
if(!x5992.valid){
continue;
}
CheckValue<IkReal> x5993 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5990))+(((-1.0)*cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*gconst130*r11*x5990))+(((-1.0)*cj0*r01*x5991))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5992.value)))+(x5993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5994=IKsin(j4);
IkReal x5995=IKcos(j4);
IkReal x5996=(gconst131*r10);
IkReal x5997=(sj1*sj2);
IkReal x5998=(gconst131*r20);
IkReal x5999=(gconst131*r00);
IkReal x6000=((1.0)*x5995);
IkReal x6001=((1.0)*cj1*cj2);
IkReal x6002=(gconst130*x5994);
IkReal x6003=((1.0)*x5994);
IkReal x6004=(gconst130*x5995);
evalcond[0]=(((r21*x6002))+(((-1.0)*x5998*x6003))+(((-1.0)*r22*x6000)));
evalcond[1]=(cj0+((r11*x6002))+(((-1.0)*x5996*x6003))+(((-1.0)*r12*x6000)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5999*x6003))+((r01*x6002))+(((-1.0)*r02*x6000)));
evalcond[3]=(((r21*x6004))+((cj2*sj1))+(((-1.0)*x5998*x6000))+((cj1*sj2))+((r22*x5994)));
evalcond[4]=(((r02*x5994))+(((-1.0)*cj0*x6001))+((cj0*x5997))+(((-1.0)*x5999*x6000))+((r01*x6004)));
evalcond[5]=(((r12*x5994))+(((-1.0)*sj0*x6001))+((sj0*x5997))+((r11*x6004))+(((-1.0)*x5996*x6000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6005=((1.0)*gconst131);
CheckValue<IkReal> x6006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6005))+(((-1.0)*gconst130*r10)))),-1);
if(!x6006.valid){
continue;
}
CheckValue<IkReal> x6007 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6006.value)))+(x6007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6008=IKsin(j4);
IkReal x6009=IKcos(j4);
IkReal x6010=(gconst131*r10);
IkReal x6011=(sj1*sj2);
IkReal x6012=(gconst131*r20);
IkReal x6013=(gconst131*r00);
IkReal x6014=((1.0)*x6009);
IkReal x6015=((1.0)*cj1*cj2);
IkReal x6016=(gconst130*x6008);
IkReal x6017=((1.0)*x6008);
IkReal x6018=(gconst130*x6009);
evalcond[0]=(((r21*x6016))+(((-1.0)*r22*x6014))+(((-1.0)*x6012*x6017)));
evalcond[1]=(((r11*x6016))+cj0+(((-1.0)*r12*x6014))+(((-1.0)*x6010*x6017)));
evalcond[2]=(((r01*x6016))+(((-1.0)*sj0))+(((-1.0)*r02*x6014))+(((-1.0)*x6013*x6017)));
evalcond[3]=(((cj2*sj1))+((r22*x6008))+((r21*x6018))+((cj1*sj2))+(((-1.0)*x6012*x6014)));
evalcond[4]=(((r01*x6018))+((cj0*x6011))+((r02*x6008))+(((-1.0)*x6013*x6014))+(((-1.0)*cj0*x6015)));
evalcond[5]=(((r12*x6008))+((r11*x6018))+(((-1.0)*x6010*x6014))+(((-1.0)*sj0*x6015))+((sj0*x6011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6019=((1.0)*gconst131);
CheckValue<IkReal> x6020 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6020.valid){
continue;
}
CheckValue<IkReal> x6021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6019))+(((-1.0)*gconst130*r00)))),-1);
if(!x6021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6020.value)+(((1.5707963267949)*(x6021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6022=IKsin(j4);
IkReal x6023=IKcos(j4);
IkReal x6024=(gconst131*r10);
IkReal x6025=(sj1*sj2);
IkReal x6026=(gconst131*r20);
IkReal x6027=(gconst131*r00);
IkReal x6028=((1.0)*x6023);
IkReal x6029=((1.0)*cj1*cj2);
IkReal x6030=(gconst130*x6022);
IkReal x6031=((1.0)*x6022);
IkReal x6032=(gconst130*x6023);
evalcond[0]=(((r21*x6030))+(((-1.0)*r22*x6028))+(((-1.0)*x6026*x6031)));
evalcond[1]=(cj0+((r11*x6030))+(((-1.0)*x6024*x6031))+(((-1.0)*r12*x6028)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6028))+(((-1.0)*x6027*x6031))+((r01*x6030)));
evalcond[3]=((((-1.0)*x6026*x6028))+((cj2*sj1))+((r21*x6032))+((cj1*sj2))+((r22*x6022)));
evalcond[4]=((((-1.0)*x6027*x6028))+((r02*x6022))+(((-1.0)*cj0*x6029))+((cj0*x6025))+((r01*x6032)));
evalcond[5]=(((sj0*x6025))+(((-1.0)*x6024*x6028))+((r11*x6032))+(((-1.0)*sj0*x6029))+((r12*x6022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6033=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6033;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6034=((1.0)*cj5);
IkReal x6035=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6034)));
j4eval[0]=x6035;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6034))))));
j4eval[2]=IKsign(x6035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6036=cj5*cj5;
IkReal x6037=r01*r01;
IkReal x6038=(cj5*r00);
IkReal x6039=(r01*sj5);
IkReal x6040=(x6037+(((-1.0)*x6036*x6037))+((x6036*(r00*r00)))+(((-2.0)*x6038*x6039))+(r02*r02));
j4eval[0]=x6040;
j4eval[1]=IKsign(x6040);
j4eval[2]=((IKabs(r02))+(IKabs((x6039+(((-1.0)*x6038))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6041=cj5*cj5;
IkReal x6042=r01*r01;
IkReal x6043=(r01*sj5);
IkReal x6044=(cj5*r00);
CheckValue<IkReal> x6045=IKPowWithIntegerCheck(IKsign((x6042+(((-2.0)*x6043*x6044))+(((-1.0)*x6041*x6042))+(r02*r02)+((x6041*(r00*r00))))),-1);
if(!x6045.valid){
continue;
}
CheckValue<IkReal> x6046 = IKatan2WithCheck(IkReal((x6043+(((-1.0)*x6044)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6045.value)))+(x6046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6047=IKcos(j4);
IkReal x6048=IKsin(j4);
IkReal x6049=(cj5*r00);
IkReal x6050=(cj5*r10);
IkReal x6051=(r21*sj5);
IkReal x6052=(cj5*r20);
IkReal x6053=((1.0)*x6047);
IkReal x6054=((1.0)*x6048);
IkReal x6055=(sj5*x6048);
IkReal x6056=(sj5*x6047);
evalcond[0]=(((r01*x6056))+(((-1.0)*x6049*x6053))+((r02*x6048)));
evalcond[1]=((((-1.0)*x6052*x6054))+(((-1.0)*r22*x6053))+((x6048*x6051)));
evalcond[2]=((((-1.0)*x6050*x6054))+(((-1.0)*r12*x6053))+((r11*x6055)));
evalcond[3]=((-1.0)+((r01*x6055))+(((-1.0)*r02*x6053))+(((-1.0)*x6049*x6054)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6052*x6053))+((cj1*sj2))+((r22*x6048))+((x6047*x6051)));
evalcond[5]=((((-1.0)*x6050*x6053))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6048))+((r11*x6056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6057=((1.0)*cj5);
CheckValue<IkReal> x6058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6057)))),-1);
if(!x6058.valid){
continue;
}
CheckValue<IkReal> x6059 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6058.value)))+(x6059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6060=IKcos(j4);
IkReal x6061=IKsin(j4);
IkReal x6062=(cj5*r00);
IkReal x6063=(cj5*r10);
IkReal x6064=(r21*sj5);
IkReal x6065=(cj5*r20);
IkReal x6066=((1.0)*x6060);
IkReal x6067=((1.0)*x6061);
IkReal x6068=(sj5*x6061);
IkReal x6069=(sj5*x6060);
evalcond[0]=(((r01*x6069))+((r02*x6061))+(((-1.0)*x6062*x6066)));
evalcond[1]=(((x6061*x6064))+(((-1.0)*r22*x6066))+(((-1.0)*x6065*x6067)));
evalcond[2]=(((r11*x6068))+(((-1.0)*x6063*x6067))+(((-1.0)*r12*x6066)));
evalcond[3]=((-1.0)+((r01*x6068))+(((-1.0)*r02*x6066))+(((-1.0)*x6062*x6067)));
evalcond[4]=(((cj2*sj1))+((x6060*x6064))+((cj1*sj2))+((r22*x6061))+(((-1.0)*x6065*x6066)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6069))+((r12*x6061))+(((-1.0)*x6063*x6066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6070=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6070.valid){
continue;
}
CheckValue<IkReal> x6071 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6070.value)))+(x6071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6072=IKcos(j4);
IkReal x6073=IKsin(j4);
IkReal x6074=(cj5*r00);
IkReal x6075=(cj5*r10);
IkReal x6076=(r21*sj5);
IkReal x6077=(cj5*r20);
IkReal x6078=((1.0)*x6072);
IkReal x6079=((1.0)*x6073);
IkReal x6080=(sj5*x6073);
IkReal x6081=(sj5*x6072);
evalcond[0]=(((r01*x6081))+(((-1.0)*x6074*x6078))+((r02*x6073)));
evalcond[1]=((((-1.0)*x6077*x6079))+(((-1.0)*r22*x6078))+((x6073*x6076)));
evalcond[2]=((((-1.0)*r12*x6078))+(((-1.0)*x6075*x6079))+((r11*x6080)));
evalcond[3]=((-1.0)+((r01*x6080))+(((-1.0)*r02*x6078))+(((-1.0)*x6074*x6079)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6073))+(((-1.0)*x6077*x6078))+((x6072*x6076)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6075*x6078))+((r11*x6081))+((r12*x6073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6082=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6082;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6083=((1.0)*cj5);
IkReal x6084=((((-1.0)*r21*x6083))+(((-1.0)*r20*sj5)));
j4eval[0]=x6084;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6083))))));
j4eval[2]=IKsign(x6084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6085=(r01*sj5);
IkReal x6086=(cj1*sj2);
IkReal x6087=(cj2*sj1);
IkReal x6088=((1.0)*r02);
IkReal x6089=((1.0)*cj5*r00);
IkReal x6090=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6090;
j4eval[1]=((IKabs(((((-1.0)*x6086*x6088))+(((-1.0)*x6087*x6088)))))+(IKabs((((x6085*x6087))+((x6085*x6086))+(((-1.0)*x6086*x6089))+(((-1.0)*x6087*x6089))))));
j4eval[2]=IKsign(x6090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6091=(r01*sj5);
IkReal x6092=(cj1*sj2);
IkReal x6093=(cj2*sj1);
IkReal x6094=((1.0)*r02);
IkReal x6095=((1.0)*cj5*r00);
CheckValue<IkReal> x6096 = IKatan2WithCheck(IkReal(((((-1.0)*x6093*x6095))+(((-1.0)*x6092*x6095))+((x6091*x6092))+((x6091*x6093)))),IkReal(((((-1.0)*x6093*x6094))+(((-1.0)*x6092*x6094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6096.valid){
continue;
}
CheckValue<IkReal> x6097=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6096.value)+(((1.5707963267949)*(x6097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6098=IKcos(j4);
IkReal x6099=IKsin(j4);
IkReal x6100=(cj5*r00);
IkReal x6101=(cj5*r10);
IkReal x6102=(r21*sj5);
IkReal x6103=(cj5*r20);
IkReal x6104=((1.0)*x6098);
IkReal x6105=((1.0)*x6099);
IkReal x6106=(sj5*x6099);
IkReal x6107=(sj5*x6098);
evalcond[0]=(((r01*x6107))+(((-1.0)*x6100*x6104))+((r02*x6099)));
evalcond[1]=((((-1.0)*x6103*x6105))+((x6099*x6102))+(((-1.0)*r22*x6104)));
evalcond[2]=(((r11*x6106))+(((-1.0)*x6101*x6105))+(((-1.0)*r12*x6104)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6104))+((r01*x6106))+(((-1.0)*x6100*x6105)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6103*x6104))+((cj1*sj2))+((r22*x6099))+((x6098*x6102)));
evalcond[5]=(((r11*x6107))+(((-1.0)*sj1*sj2))+(((-1.0)*x6101*x6104))+((r12*x6099))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6108=((1.0)*cj5);
CheckValue<IkReal> x6109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6108))+(((-1.0)*r20*sj5)))),-1);
if(!x6109.valid){
continue;
}
CheckValue<IkReal> x6110 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6109.value)))+(x6110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6111=IKcos(j4);
IkReal x6112=IKsin(j4);
IkReal x6113=(cj5*r00);
IkReal x6114=(cj5*r10);
IkReal x6115=(r21*sj5);
IkReal x6116=(cj5*r20);
IkReal x6117=((1.0)*x6111);
IkReal x6118=((1.0)*x6112);
IkReal x6119=(sj5*x6112);
IkReal x6120=(sj5*x6111);
evalcond[0]=(((r01*x6120))+((r02*x6112))+(((-1.0)*x6113*x6117)));
evalcond[1]=((((-1.0)*r22*x6117))+(((-1.0)*x6116*x6118))+((x6112*x6115)));
evalcond[2]=((((-1.0)*r12*x6117))+((r11*x6119))+(((-1.0)*x6114*x6118)));
evalcond[3]=((1.0)+(((-1.0)*x6113*x6118))+(((-1.0)*r02*x6117))+((r01*x6119)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6116*x6117))+((x6111*x6115))+((r22*x6112)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6112))+(((-1.0)*x6114*x6117))+((cj1*cj2))+((r11*x6120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6121 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6121.valid){
continue;
}
CheckValue<IkReal> x6122=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6121.value)+(((1.5707963267949)*(x6122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6123=IKcos(j4);
IkReal x6124=IKsin(j4);
IkReal x6125=(cj5*r00);
IkReal x6126=(cj5*r10);
IkReal x6127=(r21*sj5);
IkReal x6128=(cj5*r20);
IkReal x6129=((1.0)*x6123);
IkReal x6130=((1.0)*x6124);
IkReal x6131=(sj5*x6124);
IkReal x6132=(sj5*x6123);
evalcond[0]=((((-1.0)*x6125*x6129))+((r02*x6124))+((r01*x6132)));
evalcond[1]=(((x6124*x6127))+(((-1.0)*r22*x6129))+(((-1.0)*x6128*x6130)));
evalcond[2]=(((r11*x6131))+(((-1.0)*x6126*x6130))+(((-1.0)*r12*x6129)));
evalcond[3]=((1.0)+(((-1.0)*x6125*x6130))+(((-1.0)*r02*x6129))+((r01*x6131)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6128*x6129))+((x6123*x6127))+((r22*x6124)));
evalcond[5]=(((r11*x6132))+((r12*x6124))+(((-1.0)*x6126*x6129))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6133=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6133);
rxp1_1=(px*r21);
rxp1_2=(r11*x6133);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6134=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6134);
rxp1_1=(px*r21);
rxp1_2=(r11*x6134);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6135=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6135);
rxp1_1=(px*r21);
rxp1_2=(r11*x6135);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6138=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6138.valid){
continue;
}
IkReal x6136=x6138.value;
IkReal x6137=(sj0*x6136);
cj4array[0]=(((cj1*cj2*x6137))+(((-1.0)*sj1*sj2*x6137)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6139=IKsin(j4);
IkReal x6140=IKcos(j4);
IkReal x6141=(r21*sj5);
IkReal x6142=((1.0)*cj5*r20);
evalcond[0]=(r02*x6139);
evalcond[1]=((((-1.0)*r02*x6140))+(((-1.0)*sj0)));
evalcond[2]=(((x6139*x6141))+(((-1.0)*x6139*x6142)));
evalcond[3]=(((r11*sj5*x6139))+(((-1.0)*cj5*r10*x6139)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6140*x6142))+((x6140*x6141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6145=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6145.valid){
continue;
}
IkReal x6143=x6145.value;
IkReal x6144=((1.0)*x6143);
cj4array[0]=((((-1.0)*cj2*sj1*x6144))+(((-1.0)*cj1*sj2*x6144)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6146=IKsin(j4);
IkReal x6147=IKcos(j4);
IkReal x6148=((1.0)*sj0);
IkReal x6149=((1.0)*cj5);
IkReal x6150=(sj5*x6146);
evalcond[0]=(r02*x6146);
evalcond[1]=((((-1.0)*x6148))+(((-1.0)*r02*x6147)));
evalcond[2]=((((-1.0)*r20*x6146*x6149))+((r21*x6150)));
evalcond[3]=((((-1.0)*r10*x6146*x6149))+((r11*x6150)));
evalcond[4]=(((r11*sj5*x6147))+(((-1.0)*r10*x6147*x6149))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6151=IKPowWithIntegerCheck(r02,-1);
if(!x6151.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6151.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6152=IKsin(j4);
IkReal x6153=IKcos(j4);
IkReal x6154=(r21*sj5);
IkReal x6155=((1.0)*cj5);
IkReal x6156=(r11*sj5);
evalcond[0]=(r02*x6152);
evalcond[1]=(((x6152*x6154))+(((-1.0)*r20*x6152*x6155)));
evalcond[2]=(((x6152*x6156))+(((-1.0)*r10*x6152*x6155)));
evalcond[3]=(((cj2*sj1))+((x6153*x6154))+((cj1*sj2))+(((-1.0)*r20*x6153*x6155)));
evalcond[4]=(((x6153*x6156))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6153*x6155))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6157=((1.0)*sj0);
IkReal x6158=((1.0)*cj0);
CheckValue<IkReal> x6159 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6158))+(((-1.0)*r12*x6157)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6158))+(((-1.0)*r11*sj5*x6157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6159.valid){
continue;
}
CheckValue<IkReal> x6160=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6159.value)+(((1.5707963267949)*(x6160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6161=IKsin(j4);
IkReal x6162=IKcos(j4);
IkReal x6163=(cj5*r00);
IkReal x6164=(cj5*r10);
IkReal x6165=(r21*sj5);
IkReal x6166=(sj1*sj2);
IkReal x6167=(cj5*r20);
IkReal x6168=((1.0)*x6162);
IkReal x6169=((1.0)*cj1*cj2);
IkReal x6170=((1.0)*x6161);
IkReal x6171=(sj5*x6161);
IkReal x6172=(sj5*x6162);
evalcond[0]=((((-1.0)*x6167*x6170))+((x6161*x6165))+(((-1.0)*r22*x6168)));
evalcond[1]=((((-1.0)*x6164*x6170))+cj0+((r11*x6171))+(((-1.0)*r12*x6168)));
evalcond[2]=((((-1.0)*x6163*x6170))+(((-1.0)*sj0))+((r01*x6171))+(((-1.0)*r02*x6168)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6167*x6168))+((cj1*sj2))+((x6162*x6165))+((r22*x6161)));
evalcond[4]=((((-1.0)*cj0*x6169))+((r02*x6161))+((r01*x6172))+((cj0*x6166))+(((-1.0)*x6163*x6168)));
evalcond[5]=((((-1.0)*sj0*x6169))+((sj0*x6166))+((r12*x6161))+((r11*x6172))+(((-1.0)*x6164*x6168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6173=((1.0)*cj5);
CheckValue<IkReal> x6174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6173)))),-1);
if(!x6174.valid){
continue;
}
CheckValue<IkReal> x6175 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6173))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6174.value)))+(x6175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6176=IKsin(j4);
IkReal x6177=IKcos(j4);
IkReal x6178=(cj5*r00);
IkReal x6179=(cj5*r10);
IkReal x6180=(r21*sj5);
IkReal x6181=(sj1*sj2);
IkReal x6182=(cj5*r20);
IkReal x6183=((1.0)*x6177);
IkReal x6184=((1.0)*cj1*cj2);
IkReal x6185=((1.0)*x6176);
IkReal x6186=(sj5*x6176);
IkReal x6187=(sj5*x6177);
evalcond[0]=((((-1.0)*r22*x6183))+(((-1.0)*x6182*x6185))+((x6176*x6180)));
evalcond[1]=(cj0+(((-1.0)*r12*x6183))+(((-1.0)*x6179*x6185))+((r11*x6186)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6178*x6185))+(((-1.0)*r02*x6183))+((r01*x6186)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6182*x6183))+((x6177*x6180))+((cj1*sj2))+((r22*x6176)));
evalcond[4]=((((-1.0)*x6178*x6183))+((r01*x6187))+((r02*x6176))+((cj0*x6181))+(((-1.0)*cj0*x6184)));
evalcond[5]=(((r12*x6176))+(((-1.0)*x6179*x6183))+((r11*x6187))+((sj0*x6181))+(((-1.0)*sj0*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6188=((1.0)*cj5);
CheckValue<IkReal> x6189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6188))+(((-1.0)*r00*sj5)))),-1);
if(!x6189.valid){
continue;
}
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6189.value)))+(x6190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6191=IKsin(j4);
IkReal x6192=IKcos(j4);
IkReal x6193=(cj5*r00);
IkReal x6194=(cj5*r10);
IkReal x6195=(r21*sj5);
IkReal x6196=(sj1*sj2);
IkReal x6197=(cj5*r20);
IkReal x6198=((1.0)*x6192);
IkReal x6199=((1.0)*cj1*cj2);
IkReal x6200=((1.0)*x6191);
IkReal x6201=(sj5*x6191);
IkReal x6202=(sj5*x6192);
evalcond[0]=(((x6191*x6195))+(((-1.0)*x6197*x6200))+(((-1.0)*r22*x6198)));
evalcond[1]=(cj0+(((-1.0)*r12*x6198))+(((-1.0)*x6194*x6200))+((r11*x6201)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6201))+(((-1.0)*x6193*x6200))+(((-1.0)*r02*x6198)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6197*x6198))+((r22*x6191))+((x6192*x6195)));
evalcond[4]=(((r01*x6202))+((r02*x6191))+(((-1.0)*x6193*x6198))+(((-1.0)*cj0*x6199))+((cj0*x6196)));
evalcond[5]=((((-1.0)*sj0*x6199))+((r12*x6191))+((sj0*x6196))+(((-1.0)*x6194*x6198))+((r11*x6202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6203=r21*r21;
IkReal x6204=cj5*cj5;
IkReal x6205=(cj2*sj1);
IkReal x6206=(cj1*sj2);
IkReal x6207=(r21*sj5);
IkReal x6208=((1.0)*cj5*r20);
CheckValue<IkReal> x6209=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6204*(r20*r20)))+((x6203*x6204))+(((-1.0)*x6203))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x6207)))),-1);
if(!x6209.valid){
continue;
}
CheckValue<IkReal> x6210 = IKatan2WithCheck(IkReal((((r22*x6205))+((r22*x6206)))),IkReal(((((-1.0)*x6206*x6208))+(((-1.0)*x6205*x6208))+((x6206*x6207))+((x6205*x6207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6209.value)))+(x6210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6211=IKsin(j4);
IkReal x6212=IKcos(j4);
IkReal x6213=(r21*sj5);
IkReal x6214=(cj5*r20);
IkReal x6215=((1.0)*x6212);
evalcond[0]=(((x6211*x6213))+(((-1.0)*x6211*x6214))+(((-1.0)*r22*x6215)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x6212*x6213))+(((-1.0)*x6214*x6215))+((r22*x6211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6216=(cj5*sj4);
IkReal x6217=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6217))+(((-1.0)*r00*x6216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6216))+(((-1.0)*r11*x6217))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6217))+(((-1.0)*r00*x6216))))+IKsqr((((r10*x6216))+(((-1.0)*r11*x6217))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6217))+(((-1.0)*r00*x6216))), (((r10*x6216))+(((-1.0)*r11*x6217))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6218=IKcos(j0);
IkReal x6219=IKsin(j0);
IkReal x6220=((0.392)*sj1);
IkReal x6221=(cj5*r01);
IkReal x6222=((1.0)*cj1);
IkReal x6223=(r11*sj5);
IkReal x6224=(r00*sj5);
IkReal x6225=((0.392)*cj2);
IkReal x6226=((1.0)*sj1);
IkReal x6227=(cj5*r11);
IkReal x6228=((1.0)*cj4);
IkReal x6229=(r01*sj5);
IkReal x6230=(r10*sj5);
IkReal x6231=(sj2*x6219);
IkReal x6232=(sj2*x6218);
IkReal x6233=(cj5*x6228);
IkReal x6234=(cj1*x6218);
IkReal x6235=(cj1*x6219);
IkReal x6236=(cj2*x6218);
IkReal x6237=((1.0)*cj5*sj4);
IkReal x6238=(cj2*x6219);
evalcond[0]=(x6218+(((-1.0)*r10*x6237))+(((-1.0)*r12*x6228))+((sj4*x6223)));
evalcond[1]=((((-1.0)*x6219))+((sj4*x6229))+(((-1.0)*r00*x6237))+(((-1.0)*r02*x6228)));
evalcond[2]=((((-1.0)*x6222*x6232))+x6221+x6224+(((-1.0)*x6226*x6236)));
evalcond[3]=((((-1.0)*x6222*x6231))+x6227+x6230+(((-1.0)*x6226*x6238)));
evalcond[4]=((((-1.0)*x6222*x6236))+((sj1*x6232))+((r02*sj4))+(((-1.0)*r00*x6233))+((cj4*x6229)));
evalcond[5]=((((-1.0)*x6222*x6238))+(((-1.0)*r10*x6233))+((sj1*x6231))+((r12*sj4))+((cj4*x6223)));
evalcond[6]=(((x6225*x6234))+(((-0.133)*x6219))+(((-0.099)*x6224))+(((-0.099)*x6221))+(((-1.0)*px))+(((0.425)*x6234))+(((-1.0)*x6220*x6232)));
evalcond[7]=(((x6225*x6235))+(((-0.099)*x6230))+(((-0.099)*x6227))+(((-1.0)*py))+(((0.425)*x6235))+(((0.133)*x6218))+(((-1.0)*x6220*x6231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6239=((1.0)*cj5);
IkReal x6240=((1.0)*sj5);
CheckValue<IkReal> x6241 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6239))+(((-1.0)*r10*x6240)))),IkReal(((((-1.0)*r00*x6240))+(((-1.0)*r01*x6239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6241.valid){
continue;
}
CheckValue<IkReal> x6242=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6242.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6241.value)+(((1.5707963267949)*(x6242.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6243=IKcos(j0);
IkReal x6244=IKsin(j0);
IkReal x6245=(cj5*r01);
IkReal x6246=(r00*sj5);
IkReal x6247=((0.392)*cj2);
IkReal x6248=((1.0)*cj2);
IkReal x6249=(cj5*r11);
IkReal x6250=((0.392)*sj2);
IkReal x6251=(r10*sj5);
IkReal x6252=((1.0)*cj1*sj2);
IkReal x6253=(cj1*x6243);
IkReal x6254=(cj1*x6244);
IkReal x6255=(sj1*x6243);
IkReal x6256=(sj1*x6244);
evalcond[0]=(x6245+x6246+(((-1.0)*x6243*x6252))+(((-1.0)*x6248*x6255)));
evalcond[1]=(x6249+x6251+(((-1.0)*x6244*x6252))+(((-1.0)*x6248*x6256)));
evalcond[2]=((((-1.0)*x6250*x6255))+(((-1.0)*px))+(((-0.099)*x6245))+(((-0.099)*x6246))+(((0.425)*x6253))+(((-0.133)*x6244))+((x6247*x6253)));
evalcond[3]=((((-0.099)*x6251))+(((-1.0)*x6250*x6256))+(((-1.0)*py))+(((-0.099)*x6249))+(((0.425)*x6254))+(((0.133)*x6243))+((x6247*x6254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6257=((1.0)*cj5);
IkReal x6258=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6257)));
j4eval[0]=x6258;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6257))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6259=((1.0)*cj5);
IkReal x6260=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6259)));
j4eval[0]=x6260;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6259))))));
j4eval[2]=IKsign(x6260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6261=((1.0)*sj0);
IkReal x6262=((1.0)*cj0);
IkReal x6263=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6263;
j4eval[1]=((IKabs(((((-1.0)*r02*x6262))+(((-1.0)*r12*x6261)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6261))+(((-1.0)*r01*sj5*x6262))))));
j4eval[2]=IKsign(x6263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6264=((-1.0)*r20);
IkReal x6266 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6266)==0){
continue;
}
IkReal x6265=pow(x6266,-0.5);
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6264),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6267.value));
IkReal gconst115=(r21*x6265);
IkReal gconst116=(x6264*x6265);
CheckValue<IkReal> x6268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6268.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6268.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6269=((-1.0)*r20);
IkReal x6270=x6265;
CheckValue<IkReal> x6272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6269),IKFAST_ATAN2_MAGTHRESH);
if(!x6272.valid){
continue;
}
IkReal x6271=((-1.0)*(x6272.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6271;
IkReal gconst114=x6271;
IkReal gconst115=(r21*x6270);
IkReal gconst116=(x6269*x6270);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6273=((-1.0)*r20);
IkReal x6274=x6265;
CheckValue<IkReal> x6276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6273),IKFAST_ATAN2_MAGTHRESH);
if(!x6276.valid){
continue;
}
IkReal x6275=((-1.0)*(x6276.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6275;
IkReal gconst114=x6275;
IkReal gconst115=(r21*x6274);
IkReal gconst116=(x6273*x6274);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6277=((-1.0)*r20);
IkReal x6278=x6265;
CheckValue<IkReal> x6280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6277),IKFAST_ATAN2_MAGTHRESH);
if(!x6280.valid){
continue;
}
IkReal x6279=((-1.0)*(x6280.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6279;
IkReal gconst114=x6279;
IkReal gconst115=(r21*x6278);
IkReal gconst116=(x6277*x6278);
IkReal x6281=((1.0)*(r22*r22));
CheckValue<IkReal> x6285=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6281))),-1);
if(!x6285.valid){
continue;
}
IkReal x6282=x6285.value;
IkReal x6283=((1.0)*x6282);
IkReal x6284=((((-1.0)*x6283*(r20*r20*r20*r20)))+(((-2.0)*x6282*(r20*r20)*(r21*r21)))+(((-1.0)*x6281))+(((-1.0)*x6283*(r21*r21*r21*r21))));
j4eval[0]=x6284;
j4eval[1]=IKsign(x6284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6286=(cj2*sj1);
IkReal x6287=(gconst115*r21);
IkReal x6288=(cj1*sj2);
IkReal x6289=((1.0)*gconst116*r20);
CheckValue<IkReal> x6290 = IKatan2WithCheck(IkReal((((r22*x6288))+((r22*x6286)))),IkReal(((((-1.0)*x6288*x6289))+((x6286*x6287))+(((-1.0)*x6286*x6289))+((x6287*x6288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6290.valid){
continue;
}
CheckValue<IkReal> x6291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6289))+(((2.0)*gconst116*r20*x6287))+(((-1.0)*(x6287*x6287)))+(((-1.0)*(r22*r22))))),-1);
if(!x6291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6290.value)+(((1.5707963267949)*(x6291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6292=IKsin(j4);
IkReal x6293=IKcos(j4);
IkReal x6294=(sj1*sj2);
IkReal x6295=((1.0)*x6293);
IkReal x6296=((1.0)*cj1*cj2);
IkReal x6297=(gconst115*x6292);
IkReal x6298=(gconst115*x6293);
IkReal x6299=((1.0)*gconst116*x6292);
evalcond[0]=((((-1.0)*r20*x6299))+(((-1.0)*r22*x6295))+((r21*x6297)));
evalcond[1]=(cj0+((r11*x6297))+(((-1.0)*r10*x6299))+(((-1.0)*r12*x6295)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6299))+((r01*x6297))+(((-1.0)*r02*x6295)));
evalcond[3]=(((cj2*sj1))+((r22*x6292))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6295))+((r21*x6298)));
evalcond[4]=(((r01*x6298))+(((-1.0)*gconst116*r00*x6295))+((cj0*x6294))+((r02*x6292))+(((-1.0)*cj0*x6296)));
evalcond[5]=(((r11*x6298))+((r12*x6292))+(((-1.0)*gconst116*r10*x6295))+((sj0*x6294))+(((-1.0)*sj0*x6296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6300=((1.0)*gconst116);
CheckValue<IkReal> x6301 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6300))+(((-1.0)*gconst115*r10)))),-1);
if(!x6302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6301.value)+(((1.5707963267949)*(x6302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j4);
IkReal x6304=IKcos(j4);
IkReal x6305=(sj1*sj2);
IkReal x6306=((1.0)*x6304);
IkReal x6307=((1.0)*cj1*cj2);
IkReal x6308=(gconst115*x6303);
IkReal x6309=(gconst115*x6304);
IkReal x6310=((1.0)*gconst116*x6303);
evalcond[0]=(((r21*x6308))+(((-1.0)*r20*x6310))+(((-1.0)*r22*x6306)));
evalcond[1]=(cj0+(((-1.0)*r12*x6306))+(((-1.0)*r10*x6310))+((r11*x6308)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6306))+((r01*x6308))+(((-1.0)*r00*x6310)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6303))+((r21*x6309))+(((-1.0)*gconst116*r20*x6306)));
evalcond[4]=(((r01*x6309))+((r02*x6303))+((cj0*x6305))+(((-1.0)*gconst116*r00*x6306))+(((-1.0)*cj0*x6307)));
evalcond[5]=(((r11*x6309))+(((-1.0)*sj0*x6307))+((r12*x6303))+(((-1.0)*gconst116*r10*x6306))+((sj0*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6311=((1.0)*gconst116);
CheckValue<IkReal> x6312=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6311)))),-1);
if(!x6312.valid){
continue;
}
CheckValue<IkReal> x6313 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6312.value)))+(x6313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6314=IKsin(j4);
IkReal x6315=IKcos(j4);
IkReal x6316=(sj1*sj2);
IkReal x6317=((1.0)*x6315);
IkReal x6318=((1.0)*cj1*cj2);
IkReal x6319=(gconst115*x6314);
IkReal x6320=(gconst115*x6315);
IkReal x6321=((1.0)*gconst116*x6314);
evalcond[0]=((((-1.0)*r22*x6317))+(((-1.0)*r20*x6321))+((r21*x6319)));
evalcond[1]=(cj0+(((-1.0)*r12*x6317))+((r11*x6319))+(((-1.0)*r10*x6321)));
evalcond[2]=((((-1.0)*r00*x6321))+(((-1.0)*sj0))+(((-1.0)*r02*x6317))+((r01*x6319)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6314))+(((-1.0)*gconst116*r20*x6317))+((r21*x6320)));
evalcond[4]=(((r02*x6314))+((cj0*x6316))+((r01*x6320))+(((-1.0)*gconst116*r00*x6317))+(((-1.0)*cj0*x6318)));
evalcond[5]=(((r11*x6320))+(((-1.0)*sj0*x6318))+(((-1.0)*gconst116*r10*x6317))+((r12*x6314))+((sj0*x6316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6322=((-1.0)*r21);
IkReal x6324 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6324)==0){
continue;
}
IkReal x6323=pow(x6324,-0.5);
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal(x6322),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6325.value))));
IkReal gconst118=(x6322*x6323);
IkReal gconst119=((1.0)*r20*x6323);
CheckValue<IkReal> x6326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6326.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6326.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6327=((-1.0)*r21);
CheckValue<IkReal> x6330 = IKatan2WithCheck(IkReal(x6327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6330.valid){
continue;
}
IkReal x6328=((1.0)*(x6330.value));
IkReal x6329=x6323;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6328)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6328)));
IkReal gconst118=(x6327*x6329);
IkReal gconst119=((1.0)*r20*x6329);
IkReal x6331=r22*r22;
IkReal x6332=((1.0)*x6331);
CheckValue<IkReal> x6336=IKPowWithIntegerCheck(((-1.0)+x6331),-1);
if(!x6336.valid){
continue;
}
IkReal x6333=x6336.value;
if((((1.0)+(((-1.0)*x6332)))) < -0.00001)
continue;
IkReal x6334=IKsqrt(((1.0)+(((-1.0)*x6332))));
IkReal x6335=(cj0*x6333*x6334);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6335+(((-1.0)*x6332*x6335))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6337=((-1.0)*r21);
CheckValue<IkReal> x6340 = IKatan2WithCheck(IkReal(x6337),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6340.valid){
continue;
}
IkReal x6338=((1.0)*(x6340.value));
IkReal x6339=x6323;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6338)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6338)));
IkReal gconst118=(x6337*x6339);
IkReal gconst119=((1.0)*r20*x6339);
IkReal x6341=r22*r22;
IkReal x6342=((1.0)*x6341);
CheckValue<IkReal> x6346=IKPowWithIntegerCheck(((-1.0)+x6341),-1);
if(!x6346.valid){
continue;
}
IkReal x6343=x6346.value;
if((((1.0)+(((-1.0)*x6342)))) < -0.00001)
continue;
IkReal x6344=IKsqrt(((1.0)+(((-1.0)*x6342))));
IkReal x6345=(sj0*x6343*x6344);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6345+(((-1.0)*x6342*x6345))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6347=((-1.0)*r21);
CheckValue<IkReal> x6350 = IKatan2WithCheck(IkReal(x6347),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6350.valid){
continue;
}
IkReal x6348=((1.0)*(x6350.value));
IkReal x6349=x6323;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6348)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6348)));
IkReal gconst118=(x6347*x6349);
IkReal gconst119=((1.0)*r20*x6349);
IkReal x6351=r22*r22;
IkReal x6352=(r12*sj0);
IkReal x6353=(cj0*r02);
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(((-1.0)+x6351),-1);
if(!x6357.valid){
continue;
}
IkReal x6354=x6357.value;
if((((1.0)+(((-1.0)*x6351)))) < -0.00001)
continue;
IkReal x6355=IKsqrt(((1.0)+(((-1.0)*x6351))));
IkReal x6356=(r22*x6354*x6355);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6353))+(((-1.0)*x6352)))))+(IKabs((((x6353*x6356))+((x6352*x6356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6358=((1.0)*sj0);
IkReal x6359=((1.0)*gconst118);
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6358)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6358))+(((-1.0)*cj0*r01*x6359))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6359)))),-1);
if(!x6361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6360.value)+(((1.5707963267949)*(x6361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6362=IKsin(j4);
IkReal x6363=IKcos(j4);
IkReal x6364=(gconst118*r01);
IkReal x6365=(sj1*sj2);
IkReal x6366=(gconst119*r20);
IkReal x6367=(gconst119*r10);
IkReal x6368=(gconst119*r00);
IkReal x6369=(gconst118*r21);
IkReal x6370=(gconst118*r11);
IkReal x6371=((1.0)*x6363);
IkReal x6372=((1.0)*cj1*cj2);
IkReal x6373=((1.0)*x6362);
evalcond[0]=((((-1.0)*x6366*x6373))+((x6362*x6369))+(((-1.0)*r22*x6371)));
evalcond[1]=(cj0+((x6362*x6370))+(((-1.0)*x6367*x6373))+(((-1.0)*r12*x6371)));
evalcond[2]=((((-1.0)*x6368*x6373))+(((-1.0)*sj0))+((x6362*x6364))+(((-1.0)*r02*x6371)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6366*x6371))+((cj1*sj2))+((x6363*x6369))+((r22*x6362)));
evalcond[4]=((((-1.0)*x6368*x6371))+((x6363*x6364))+((cj0*x6365))+((r02*x6362))+(((-1.0)*cj0*x6372)));
evalcond[5]=((((-1.0)*sj0*x6372))+((r12*x6362))+((sj0*x6365))+(((-1.0)*x6367*x6371))+((x6363*x6370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6374=((1.0)*gconst119);
CheckValue<IkReal> x6375=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6374)))),-1);
if(!x6375.valid){
continue;
}
CheckValue<IkReal> x6376 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6374))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6375.value)))+(x6376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6377=IKsin(j4);
IkReal x6378=IKcos(j4);
IkReal x6379=(gconst118*r01);
IkReal x6380=(sj1*sj2);
IkReal x6381=(gconst119*r20);
IkReal x6382=(gconst119*r10);
IkReal x6383=(gconst119*r00);
IkReal x6384=(gconst118*r21);
IkReal x6385=(gconst118*r11);
IkReal x6386=((1.0)*x6378);
IkReal x6387=((1.0)*cj1*cj2);
IkReal x6388=((1.0)*x6377);
evalcond[0]=((((-1.0)*x6381*x6388))+(((-1.0)*r22*x6386))+((x6377*x6384)));
evalcond[1]=(cj0+(((-1.0)*r12*x6386))+(((-1.0)*x6382*x6388))+((x6377*x6385)));
evalcond[2]=(((x6377*x6379))+(((-1.0)*sj0))+(((-1.0)*x6383*x6388))+(((-1.0)*r02*x6386)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6381*x6386))+((cj1*sj2))+((x6378*x6384))+((r22*x6377)));
evalcond[4]=(((x6378*x6379))+(((-1.0)*x6383*x6386))+((cj0*x6380))+(((-1.0)*cj0*x6387))+((r02*x6377)));
evalcond[5]=(((sj0*x6380))+(((-1.0)*x6382*x6386))+((r12*x6377))+((x6378*x6385))+(((-1.0)*sj0*x6387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6389=((1.0)*gconst119);
CheckValue<IkReal> x6390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6389)))),-1);
if(!x6390.valid){
continue;
}
CheckValue<IkReal> x6391 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6390.value)))+(x6391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6392=IKsin(j4);
IkReal x6393=IKcos(j4);
IkReal x6394=(gconst118*r01);
IkReal x6395=(sj1*sj2);
IkReal x6396=(gconst119*r20);
IkReal x6397=(gconst119*r10);
IkReal x6398=(gconst119*r00);
IkReal x6399=(gconst118*r21);
IkReal x6400=(gconst118*r11);
IkReal x6401=((1.0)*x6393);
IkReal x6402=((1.0)*cj1*cj2);
IkReal x6403=((1.0)*x6392);
evalcond[0]=(((x6392*x6399))+(((-1.0)*x6396*x6403))+(((-1.0)*r22*x6401)));
evalcond[1]=(cj0+((x6392*x6400))+(((-1.0)*r12*x6401))+(((-1.0)*x6397*x6403)));
evalcond[2]=(((x6392*x6394))+(((-1.0)*sj0))+(((-1.0)*r02*x6401))+(((-1.0)*x6398*x6403)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6396*x6401))+((cj1*sj2))+((x6393*x6399))+((r22*x6392)));
evalcond[4]=(((cj0*x6395))+((x6393*x6394))+(((-1.0)*cj0*x6402))+(((-1.0)*x6398*x6401))+((r02*x6392)));
evalcond[5]=(((x6393*x6400))+((r12*x6392))+((sj0*x6395))+(((-1.0)*sj0*x6402))+(((-1.0)*x6397*x6401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6404=((-1.0)*r10);
IkReal x6406 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6406)==0){
continue;
}
IkReal x6405=pow(x6406,-0.5);
CheckValue<IkReal> x6407 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6404),IKFAST_ATAN2_MAGTHRESH);
if(!x6407.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6407.value));
IkReal gconst121=(r11*x6405);
IkReal gconst122=(x6404*x6405);
CheckValue<IkReal> x6408 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6408.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6408.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6409=((-1.0)*r10);
IkReal x6410=x6405;
CheckValue<IkReal> x6412 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6409),IKFAST_ATAN2_MAGTHRESH);
if(!x6412.valid){
continue;
}
IkReal x6411=((-1.0)*(x6412.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6411;
IkReal gconst120=x6411;
IkReal gconst121=(r11*x6410);
IkReal gconst122=(x6409*x6410);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6413=((1.0)*sj0);
IkReal x6414=((1.0)*gconst121);
CheckValue<IkReal> x6415 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6413)))),IkReal(((((-1.0)*cj0*r01*x6414))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6413))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6415.valid){
continue;
}
CheckValue<IkReal> x6416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6414))+(((-1.0)*gconst122*r21)))),-1);
if(!x6416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6415.value)+(((1.5707963267949)*(x6416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6417=IKsin(j4);
IkReal x6418=IKcos(j4);
IkReal x6419=(gconst121*r11);
IkReal x6420=(sj1*sj2);
IkReal x6421=(gconst122*r00);
IkReal x6422=(gconst122*r10);
IkReal x6423=(gconst122*r20);
IkReal x6424=((1.0)*x6418);
IkReal x6425=((1.0)*cj1*cj2);
IkReal x6426=((1.0)*x6417);
IkReal x6427=(gconst121*x6417);
IkReal x6428=(gconst121*x6418);
evalcond[0]=(((r21*x6427))+(((-1.0)*r22*x6424))+(((-1.0)*x6423*x6426)));
evalcond[1]=((((-1.0)*x6422*x6426))+cj0+((x6417*x6419))+(((-1.0)*r12*x6424)));
evalcond[2]=((((-1.0)*x6421*x6426))+(((-1.0)*sj0))+((r01*x6427))+(((-1.0)*r02*x6424)));
evalcond[3]=(((r21*x6428))+((cj2*sj1))+((cj1*sj2))+((r22*x6417))+(((-1.0)*x6423*x6424)));
evalcond[4]=(((r02*x6417))+(((-1.0)*x6421*x6424))+(((-1.0)*cj0*x6425))+((r01*x6428))+((cj0*x6420)));
evalcond[5]=((((-1.0)*x6422*x6424))+(((-1.0)*sj0*x6425))+((r12*x6417))+((x6418*x6419))+((sj0*x6420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6429=((1.0)*gconst122);
CheckValue<IkReal> x6430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6429))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6430.valid){
continue;
}
CheckValue<IkReal> x6431=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6429)))),-1);
if(!x6431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6430.value)+(((1.5707963267949)*(x6431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6432=IKsin(j4);
IkReal x6433=IKcos(j4);
IkReal x6434=(gconst121*r11);
IkReal x6435=(sj1*sj2);
IkReal x6436=(gconst122*r00);
IkReal x6437=(gconst122*r10);
IkReal x6438=(gconst122*r20);
IkReal x6439=((1.0)*x6433);
IkReal x6440=((1.0)*cj1*cj2);
IkReal x6441=((1.0)*x6432);
IkReal x6442=(gconst121*x6432);
IkReal x6443=(gconst121*x6433);
evalcond[0]=((((-1.0)*x6438*x6441))+(((-1.0)*r22*x6439))+((r21*x6442)));
evalcond[1]=(cj0+(((-1.0)*r12*x6439))+((x6432*x6434))+(((-1.0)*x6437*x6441)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6439))+(((-1.0)*x6436*x6441))+((r01*x6442)));
evalcond[3]=(((r22*x6432))+((cj2*sj1))+(((-1.0)*x6438*x6439))+((cj1*sj2))+((r21*x6443)));
evalcond[4]=(((r01*x6443))+((cj0*x6435))+((r02*x6432))+(((-1.0)*cj0*x6440))+(((-1.0)*x6436*x6439)));
evalcond[5]=((((-1.0)*sj0*x6440))+((r12*x6432))+((x6433*x6434))+(((-1.0)*x6437*x6439))+((sj0*x6435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6444=((-1.0)*r11);
IkReal x6446 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6446)==0){
continue;
}
IkReal x6445=pow(x6446,-0.5);
CheckValue<IkReal> x6447 = IKatan2WithCheck(IkReal(x6444),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6447.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6447.value))));
IkReal gconst124=(x6444*x6445);
IkReal gconst125=((1.0)*r10*x6445);
CheckValue<IkReal> x6448 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6448.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6448.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6449=((-1.0)*r11);
CheckValue<IkReal> x6452 = IKatan2WithCheck(IkReal(x6449),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6452.valid){
continue;
}
IkReal x6450=((1.0)*(x6452.value));
IkReal x6451=x6445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6450)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6450)));
IkReal gconst124=(x6449*x6451);
IkReal gconst125=((1.0)*r10*x6451);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6453=((-1.0)*r11);
CheckValue<IkReal> x6456 = IKatan2WithCheck(IkReal(x6453),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6456.valid){
continue;
}
IkReal x6454=((1.0)*(x6456.value));
IkReal x6455=x6445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6454)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6454)));
IkReal gconst124=(x6453*x6455);
IkReal gconst125=((1.0)*r10*x6455);
IkReal x6457=r12*r12;
IkReal x6458=((1.0)*sj0);
IkReal x6459=(cj0*r02);
IkReal x6460=x6445;
j4eval[0]=((IKabs(((((-1.0)*x6459))+(((-1.0)*r12*x6458)))))+(IKabs(((((-1.0)*x6458*x6460))+((sj0*x6457*x6460))+((r12*x6459*x6460))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6461=((-1.0)*r11);
CheckValue<IkReal> x6464 = IKatan2WithCheck(IkReal(x6461),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6464.valid){
continue;
}
IkReal x6462=((1.0)*(x6464.value));
IkReal x6463=x6445;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6462)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6462)));
IkReal gconst124=(x6461*x6463);
IkReal gconst125=((1.0)*r10*x6463);
IkReal x6465=r12*r12;
IkReal x6466=((1.0)+(((-1.0)*x6465)));
IkReal x6467=(cj2*r22*sj1);
IkReal x6468=(cj1*r22*sj2);
CheckValue<IkReal> x6475=IKPowWithIntegerCheck(x6466,-1);
if(!x6475.valid){
continue;
}
IkReal x6469=x6475.value;
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(((-1.0)+x6465),-1);
if(!x6476.valid){
continue;
}
IkReal x6470=x6476.value;
IkReal x6471=((1.0)*x6469);
if((x6466) < -0.00001)
continue;
IkReal x6472=IKsqrt(x6466);
IkReal x6473=((1.0)*r12*x6470*x6472);
IkReal x6474=((((-1.0)*x6471*(r11*r11)*(r21*r21)))+(((-1.0)*x6471*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6469)));
j4eval[0]=x6474;
j4eval[1]=IKsign(x6474);
j4eval[2]=((IKabs(((((-1.0)*x6467*x6473))+(((-1.0)*x6468*x6473)))))+(IKabs((x6468+x6467))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6477=(gconst124*r21);
IkReal x6478=(cj1*sj2);
IkReal x6479=(cj2*sj1);
IkReal x6480=(gconst125*r20);
CheckValue<IkReal> x6481 = IKatan2WithCheck(IkReal((((r22*x6479))+((r22*x6478)))),IkReal(((((-1.0)*x6478*x6480))+(((-1.0)*x6479*x6480))+((x6477*x6478))+((x6477*x6479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6481.valid){
continue;
}
CheckValue<IkReal> x6482=IKPowWithIntegerCheck(IKsign(((((2.0)*x6477*x6480))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6480*x6480)))+(((-1.0)*(x6477*x6477))))),-1);
if(!x6482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6481.value)+(((1.5707963267949)*(x6482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6483=IKsin(j4);
IkReal x6484=IKcos(j4);
IkReal x6485=(sj1*sj2);
IkReal x6486=(gconst125*r20);
IkReal x6487=(gconst124*r01);
IkReal x6488=(gconst125*r00);
IkReal x6489=(gconst125*r10);
IkReal x6490=((1.0)*x6484);
IkReal x6491=((1.0)*cj1*cj2);
IkReal x6492=((1.0)*x6483);
IkReal x6493=(gconst124*x6483);
IkReal x6494=(gconst124*x6484);
evalcond[0]=((((-1.0)*r22*x6490))+(((-1.0)*x6486*x6492))+((r21*x6493)));
evalcond[1]=(cj0+((r11*x6493))+(((-1.0)*x6489*x6492))+(((-1.0)*r12*x6490)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6488*x6492))+(((-1.0)*r02*x6490))+((x6483*x6487)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6486*x6490))+((cj1*sj2))+((r22*x6483))+((r21*x6494)));
evalcond[4]=((((-1.0)*x6488*x6490))+((cj0*x6485))+((r02*x6483))+(((-1.0)*cj0*x6491))+((x6484*x6487)));
evalcond[5]=(((r11*x6494))+(((-1.0)*x6489*x6490))+(((-1.0)*sj0*x6491))+((r12*x6483))+((sj0*x6485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6495=((1.0)*sj0);
IkReal x6496=((1.0)*cj0);
CheckValue<IkReal> x6497=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6497.valid){
continue;
}
CheckValue<IkReal> x6498 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6496))+(((-1.0)*r12*x6495)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6495))+(((-1.0)*gconst124*r01*x6496))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6497.value)))+(x6498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6499=IKsin(j4);
IkReal x6500=IKcos(j4);
IkReal x6501=(sj1*sj2);
IkReal x6502=(gconst125*r20);
IkReal x6503=(gconst124*r01);
IkReal x6504=(gconst125*r00);
IkReal x6505=(gconst125*r10);
IkReal x6506=((1.0)*x6500);
IkReal x6507=((1.0)*cj1*cj2);
IkReal x6508=((1.0)*x6499);
IkReal x6509=(gconst124*x6499);
IkReal x6510=(gconst124*x6500);
evalcond[0]=(((r21*x6509))+(((-1.0)*r22*x6506))+(((-1.0)*x6502*x6508)));
evalcond[1]=((((-1.0)*r12*x6506))+cj0+((r11*x6509))+(((-1.0)*x6505*x6508)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6506))+((x6499*x6503))+(((-1.0)*x6504*x6508)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6502*x6506))+((r21*x6510))+((r22*x6499)));
evalcond[4]=(((x6500*x6503))+((r02*x6499))+(((-1.0)*cj0*x6507))+((cj0*x6501))+(((-1.0)*x6504*x6506)));
evalcond[5]=(((sj0*x6501))+((r11*x6510))+((r12*x6499))+(((-1.0)*sj0*x6507))+(((-1.0)*x6505*x6506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6511=((1.0)*gconst125);
CheckValue<IkReal> x6512 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6511))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6512.valid){
continue;
}
CheckValue<IkReal> x6513=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6511)))),-1);
if(!x6513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6512.value)+(((1.5707963267949)*(x6513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6514=IKsin(j4);
IkReal x6515=IKcos(j4);
IkReal x6516=(sj1*sj2);
IkReal x6517=(gconst125*r20);
IkReal x6518=(gconst124*r01);
IkReal x6519=(gconst125*r00);
IkReal x6520=(gconst125*r10);
IkReal x6521=((1.0)*x6515);
IkReal x6522=((1.0)*cj1*cj2);
IkReal x6523=((1.0)*x6514);
IkReal x6524=(gconst124*x6514);
IkReal x6525=(gconst124*x6515);
evalcond[0]=((((-1.0)*r22*x6521))+(((-1.0)*x6517*x6523))+((r21*x6524)));
evalcond[1]=(cj0+(((-1.0)*r12*x6521))+(((-1.0)*x6520*x6523))+((r11*x6524)));
evalcond[2]=(((x6514*x6518))+(((-1.0)*sj0))+(((-1.0)*x6519*x6523))+(((-1.0)*r02*x6521)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6517*x6521))+((r21*x6525))+((r22*x6514)));
evalcond[4]=(((x6515*x6518))+((cj0*x6516))+(((-1.0)*x6519*x6521))+(((-1.0)*cj0*x6522))+((r02*x6514)));
evalcond[5]=(((r12*x6514))+(((-1.0)*x6520*x6521))+((sj0*x6516))+((r11*x6525))+(((-1.0)*sj0*x6522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6526=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6526;
j4eval[1]=IKsign(x6526);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6527=((1.0)*cj5);
IkReal x6528=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6527)));
j4eval[0]=x6528;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6527)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6529=cj5*cj5;
IkReal x6530=r11*r11;
IkReal x6531=(cj5*r10);
IkReal x6532=(r11*sj5);
IkReal x6533=((((2.0)*x6531*x6532))+(((-1.0)*x6530))+(((-1.0)*(r12*r12)))+((x6529*x6530))+(((-1.0)*x6529*(r10*r10))));
j4eval[0]=x6533;
j4eval[1]=IKsign(x6533);
j4eval[2]=((IKabs(r12))+(IKabs((x6532+(((-1.0)*x6531))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6534=cj5*cj5;
IkReal x6535=r11*r11;
IkReal x6536=(cj5*r10);
IkReal x6537=(r11*sj5);
CheckValue<IkReal> x6538 = IKatan2WithCheck(IkReal((x6537+(((-1.0)*x6536)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6538.valid){
continue;
}
CheckValue<IkReal> x6539=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6535))+(((-1.0)*x6534*(r10*r10)))+(((-1.0)*(r12*r12)))+((x6534*x6535))+(((2.0)*x6536*x6537)))),-1);
if(!x6539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6538.value)+(((1.5707963267949)*(x6539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6540=IKcos(j4);
IkReal x6541=IKsin(j4);
IkReal x6542=(cj5*r00);
IkReal x6543=(cj5*r10);
IkReal x6544=(r21*sj5);
IkReal x6545=(cj5*r20);
IkReal x6546=((1.0)*x6540);
IkReal x6547=((1.0)*x6541);
IkReal x6548=(sj5*x6541);
IkReal x6549=(sj5*x6540);
evalcond[0]=(((r11*x6549))+((r12*x6541))+(((-1.0)*x6543*x6546)));
evalcond[1]=((((-1.0)*x6545*x6547))+(((-1.0)*r22*x6546))+((x6541*x6544)));
evalcond[2]=((((-1.0)*x6542*x6547))+(((-1.0)*r02*x6546))+((r01*x6548)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6546))+((r11*x6548))+(((-1.0)*x6543*x6547)));
evalcond[4]=((((-1.0)*x6545*x6546))+((cj2*sj1))+((cj1*sj2))+((x6540*x6544))+((r22*x6541)));
evalcond[5]=((((-1.0)*x6542*x6546))+((r02*x6541))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6550=((1.0)*cj5);
CheckValue<IkReal> x6551 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6551.valid){
continue;
}
CheckValue<IkReal> x6552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6550)))),-1);
if(!x6552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6551.value)+(((1.5707963267949)*(x6552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6553=IKcos(j4);
IkReal x6554=IKsin(j4);
IkReal x6555=(cj5*r00);
IkReal x6556=(cj5*r10);
IkReal x6557=(r21*sj5);
IkReal x6558=(cj5*r20);
IkReal x6559=((1.0)*x6553);
IkReal x6560=((1.0)*x6554);
IkReal x6561=(sj5*x6554);
IkReal x6562=(sj5*x6553);
evalcond[0]=(((r11*x6562))+((r12*x6554))+(((-1.0)*x6556*x6559)));
evalcond[1]=((((-1.0)*r22*x6559))+((x6554*x6557))+(((-1.0)*x6558*x6560)));
evalcond[2]=((((-1.0)*x6555*x6560))+(((-1.0)*r02*x6559))+((r01*x6561)));
evalcond[3]=((1.0)+(((-1.0)*x6556*x6560))+((r11*x6561))+(((-1.0)*r12*x6559)));
evalcond[4]=(((cj2*sj1))+((x6553*x6557))+((cj1*sj2))+((r22*x6554))+(((-1.0)*x6558*x6559)));
evalcond[5]=((((-1.0)*x6555*x6559))+((r02*x6554))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6563=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6563.valid){
continue;
}
CheckValue<IkReal> x6564 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6563.value)))+(x6564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6565=IKcos(j4);
IkReal x6566=IKsin(j4);
IkReal x6567=(cj5*r00);
IkReal x6568=(cj5*r10);
IkReal x6569=(r21*sj5);
IkReal x6570=(cj5*r20);
IkReal x6571=((1.0)*x6565);
IkReal x6572=((1.0)*x6566);
IkReal x6573=(sj5*x6566);
IkReal x6574=(sj5*x6565);
evalcond[0]=(((r12*x6566))+((r11*x6574))+(((-1.0)*x6568*x6571)));
evalcond[1]=((((-1.0)*r22*x6571))+((x6566*x6569))+(((-1.0)*x6570*x6572)));
evalcond[2]=(((r01*x6573))+(((-1.0)*x6567*x6572))+(((-1.0)*r02*x6571)));
evalcond[3]=((1.0)+((r11*x6573))+(((-1.0)*r12*x6571))+(((-1.0)*x6568*x6572)));
evalcond[4]=(((cj2*sj1))+((r22*x6566))+((cj1*sj2))+((x6565*x6569))+(((-1.0)*x6570*x6571)));
evalcond[5]=(((r01*x6574))+(((-1.0)*x6567*x6571))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6575=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6575;
j4eval[1]=IKsign(x6575);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6576=((1.0)*cj5);
IkReal x6577=((((-1.0)*r21*x6576))+(((-1.0)*r20*sj5)));
j4eval[0]=x6577;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6576))))));
j4eval[2]=IKsign(x6577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6578=cj5*cj5;
IkReal x6579=r11*r11;
IkReal x6580=(r11*sj5);
IkReal x6581=(cj5*r10);
IkReal x6582=((((-1.0)*x6578*x6579))+(r12*r12)+x6579+((x6578*(r10*r10)))+(((-2.0)*x6580*x6581)));
j4eval[0]=x6582;
j4eval[1]=IKsign(x6582);
j4eval[2]=((IKabs(((((-1.0)*x6581))+x6580)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6583=cj5*cj5;
IkReal x6584=r11*r11;
IkReal x6585=(cj5*r10);
IkReal x6586=(r11*sj5);
CheckValue<IkReal> x6587 = IKatan2WithCheck(IkReal(((((-1.0)*x6585))+x6586)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6587.valid){
continue;
}
CheckValue<IkReal> x6588=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6583*x6584))+(r12*r12)+x6584+(((-2.0)*x6585*x6586))+((x6583*(r10*r10))))),-1);
if(!x6588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6587.value)+(((1.5707963267949)*(x6588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6589=IKcos(j4);
IkReal x6590=IKsin(j4);
IkReal x6591=(cj5*r00);
IkReal x6592=(cj5*r10);
IkReal x6593=(r21*sj5);
IkReal x6594=(cj5*r20);
IkReal x6595=((1.0)*x6589);
IkReal x6596=((1.0)*x6590);
IkReal x6597=(sj5*x6590);
IkReal x6598=(sj5*x6589);
evalcond[0]=(((r12*x6590))+((r11*x6598))+(((-1.0)*x6592*x6595)));
evalcond[1]=((((-1.0)*x6594*x6596))+((x6590*x6593))+(((-1.0)*r22*x6595)));
evalcond[2]=((((-1.0)*r02*x6595))+(((-1.0)*x6591*x6596))+((r01*x6597)));
evalcond[3]=((-1.0)+((r11*x6597))+(((-1.0)*r12*x6595))+(((-1.0)*x6592*x6596)));
evalcond[4]=(((cj2*sj1))+((r22*x6590))+((cj1*sj2))+((x6589*x6593))+(((-1.0)*x6594*x6595)));
evalcond[5]=(((r02*x6590))+(((-1.0)*sj1*sj2))+(((-1.0)*x6591*x6595))+((r01*x6598))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6599=((1.0)*cj5);
CheckValue<IkReal> x6600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6599))+(((-1.0)*r20*sj5)))),-1);
if(!x6600.valid){
continue;
}
CheckValue<IkReal> x6601 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6599))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6600.value)))+(x6601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6602=IKcos(j4);
IkReal x6603=IKsin(j4);
IkReal x6604=(cj5*r00);
IkReal x6605=(cj5*r10);
IkReal x6606=(r21*sj5);
IkReal x6607=(cj5*r20);
IkReal x6608=((1.0)*x6602);
IkReal x6609=((1.0)*x6603);
IkReal x6610=(sj5*x6603);
IkReal x6611=(sj5*x6602);
evalcond[0]=(((r11*x6611))+(((-1.0)*x6605*x6608))+((r12*x6603)));
evalcond[1]=((((-1.0)*r22*x6608))+(((-1.0)*x6607*x6609))+((x6603*x6606)));
evalcond[2]=(((r01*x6610))+(((-1.0)*r02*x6608))+(((-1.0)*x6604*x6609)));
evalcond[3]=((-1.0)+((r11*x6610))+(((-1.0)*r12*x6608))+(((-1.0)*x6605*x6609)));
evalcond[4]=(((cj2*sj1))+((r22*x6603))+((cj1*sj2))+(((-1.0)*x6607*x6608))+((x6602*x6606)));
evalcond[5]=(((r01*x6611))+(((-1.0)*sj1*sj2))+(((-1.0)*x6604*x6608))+((r02*x6603))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6612 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6612.valid){
continue;
}
CheckValue<IkReal> x6613=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6612.value)+(((1.5707963267949)*(x6613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6614=IKcos(j4);
IkReal x6615=IKsin(j4);
IkReal x6616=(cj5*r00);
IkReal x6617=(cj5*r10);
IkReal x6618=(r21*sj5);
IkReal x6619=(cj5*r20);
IkReal x6620=((1.0)*x6614);
IkReal x6621=((1.0)*x6615);
IkReal x6622=(sj5*x6615);
IkReal x6623=(sj5*x6614);
evalcond[0]=((((-1.0)*x6617*x6620))+((r12*x6615))+((r11*x6623)));
evalcond[1]=((((-1.0)*x6619*x6621))+(((-1.0)*r22*x6620))+((x6615*x6618)));
evalcond[2]=(((r01*x6622))+(((-1.0)*r02*x6620))+(((-1.0)*x6616*x6621)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6620))+(((-1.0)*x6617*x6621))+((r11*x6622)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6619*x6620))+((cj1*sj2))+((x6614*x6618))+((r22*x6615)));
evalcond[5]=(((r02*x6615))+((r01*x6623))+(((-1.0)*sj1*sj2))+(((-1.0)*x6616*x6620))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6624=((-1.0)*r00);
IkReal x6626 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6626)==0){
continue;
}
IkReal x6625=pow(x6626,-0.5);
CheckValue<IkReal> x6627 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6624),IKFAST_ATAN2_MAGTHRESH);
if(!x6627.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6627.value));
IkReal gconst127=(r01*x6625);
IkReal gconst128=(x6624*x6625);
CheckValue<IkReal> x6628 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6628.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6628.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6629=((-1.0)*r00);
IkReal x6630=x6625;
CheckValue<IkReal> x6632 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6629),IKFAST_ATAN2_MAGTHRESH);
if(!x6632.valid){
continue;
}
IkReal x6631=((-1.0)*(x6632.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6631;
IkReal gconst126=x6631;
IkReal gconst127=(r01*x6630);
IkReal gconst128=(x6629*x6630);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6633=((1.0)*sj0);
IkReal x6634=((1.0)*gconst127);
CheckValue<IkReal> x6635 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6633)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6633))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6635.valid){
continue;
}
CheckValue<IkReal> x6636=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6634)))),-1);
if(!x6636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6635.value)+(((1.5707963267949)*(x6636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6637=IKsin(j4);
IkReal x6638=IKcos(j4);
IkReal x6639=(gconst127*r01);
IkReal x6640=(sj1*sj2);
IkReal x6641=(gconst128*r10);
IkReal x6642=(gconst128*r00);
IkReal x6643=(gconst128*r20);
IkReal x6644=((1.0)*x6638);
IkReal x6645=((1.0)*cj1*cj2);
IkReal x6646=((1.0)*x6637);
IkReal x6647=(gconst127*x6638);
IkReal x6648=(gconst127*x6637);
evalcond[0]=((((-1.0)*r22*x6644))+((r21*x6648))+(((-1.0)*x6643*x6646)));
evalcond[1]=(cj0+(((-1.0)*x6641*x6646))+((r11*x6648))+(((-1.0)*r12*x6644)));
evalcond[2]=((((-1.0)*sj0))+((x6637*x6639))+(((-1.0)*x6642*x6646))+(((-1.0)*r02*x6644)));
evalcond[3]=(((cj2*sj1))+((r21*x6647))+((cj1*sj2))+((r22*x6637))+(((-1.0)*x6643*x6644)));
evalcond[4]=(((x6638*x6639))+(((-1.0)*x6642*x6644))+(((-1.0)*cj0*x6645))+((cj0*x6640))+((r02*x6637)));
evalcond[5]=((((-1.0)*x6641*x6644))+((r11*x6647))+((r12*x6637))+(((-1.0)*sj0*x6645))+((sj0*x6640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6649=((1.0)*gconst128);
CheckValue<IkReal> x6650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6649))+(((-1.0)*gconst127*r10)))),-1);
if(!x6650.valid){
continue;
}
CheckValue<IkReal> x6651 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6650.value)))+(x6651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6652=IKsin(j4);
IkReal x6653=IKcos(j4);
IkReal x6654=(gconst127*r01);
IkReal x6655=(sj1*sj2);
IkReal x6656=(gconst128*r10);
IkReal x6657=(gconst128*r00);
IkReal x6658=(gconst128*r20);
IkReal x6659=((1.0)*x6653);
IkReal x6660=((1.0)*cj1*cj2);
IkReal x6661=((1.0)*x6652);
IkReal x6662=(gconst127*x6653);
IkReal x6663=(gconst127*x6652);
evalcond[0]=((((-1.0)*r22*x6659))+(((-1.0)*x6658*x6661))+((r21*x6663)));
evalcond[1]=(cj0+(((-1.0)*r12*x6659))+((r11*x6663))+(((-1.0)*x6656*x6661)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6657*x6661))+((x6652*x6654))+(((-1.0)*r02*x6659)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6658*x6659))+((cj1*sj2))+((r21*x6662))+((r22*x6652)));
evalcond[4]=((((-1.0)*x6657*x6659))+((r02*x6652))+((x6653*x6654))+(((-1.0)*cj0*x6660))+((cj0*x6655)));
evalcond[5]=(((r12*x6652))+(((-1.0)*sj0*x6660))+((r11*x6662))+((sj0*x6655))+(((-1.0)*x6656*x6659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6664=((-1.0)*r01);
IkReal x6666 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6666)==0){
continue;
}
IkReal x6665=pow(x6666,-0.5);
CheckValue<IkReal> x6667 = IKatan2WithCheck(IkReal(x6664),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6667.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6667.value))));
IkReal gconst130=(x6664*x6665);
IkReal gconst131=((1.0)*r00*x6665);
CheckValue<IkReal> x6668 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6668.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6668.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6669=((-1.0)*r01);
CheckValue<IkReal> x6672 = IKatan2WithCheck(IkReal(x6669),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6672.valid){
continue;
}
IkReal x6670=((1.0)*(x6672.value));
IkReal x6671=x6665;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6670)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6670)));
IkReal gconst130=(x6669*x6671);
IkReal gconst131=((1.0)*r00*x6671);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6673=((-1.0)*r01);
CheckValue<IkReal> x6676 = IKatan2WithCheck(IkReal(x6673),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6676.valid){
continue;
}
IkReal x6674=((1.0)*(x6676.value));
IkReal x6675=x6665;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6674)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6674)));
IkReal gconst130=(x6673*x6675);
IkReal gconst131=((1.0)*r00*x6675);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6677=((-1.0)*r01);
CheckValue<IkReal> x6680 = IKatan2WithCheck(IkReal(x6677),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6680.valid){
continue;
}
IkReal x6678=((1.0)*(x6680.value));
IkReal x6679=x6665;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6678)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6678)));
IkReal gconst130=(x6677*x6679);
IkReal gconst131=((1.0)*r00*x6679);
IkReal x6681=r02*r02;
IkReal x6682=(r12*sj0);
IkReal x6683=((1.0)*cj0);
IkReal x6684=x6665;
j4eval[0]=((IKabs(((((-1.0)*r02*x6683))+(((-1.0)*x6682)))))+(IKabs((((cj0*x6681*x6684))+(((-1.0)*x6683*x6684))+((r02*x6682*x6684))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6685=((1.0)*sj0);
IkReal x6686=((1.0)*gconst130);
CheckValue<IkReal> x6687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6686))+(((-1.0)*gconst131*r21)))),-1);
if(!x6687.valid){
continue;
}
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6685)))),IkReal(((((-1.0)*gconst130*r11*x6685))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6686))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6687.value)))+(x6688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6689=IKsin(j4);
IkReal x6690=IKcos(j4);
IkReal x6691=(gconst131*r10);
IkReal x6692=(sj1*sj2);
IkReal x6693=(gconst131*r20);
IkReal x6694=(gconst131*r00);
IkReal x6695=((1.0)*x6690);
IkReal x6696=((1.0)*cj1*cj2);
IkReal x6697=(gconst130*x6689);
IkReal x6698=((1.0)*x6689);
IkReal x6699=(gconst130*x6690);
evalcond[0]=((((-1.0)*x6693*x6698))+((r21*x6697))+(((-1.0)*r22*x6695)));
evalcond[1]=(((r11*x6697))+cj0+(((-1.0)*r12*x6695))+(((-1.0)*x6691*x6698)));
evalcond[2]=((((-1.0)*x6694*x6698))+(((-1.0)*sj0))+(((-1.0)*r02*x6695))+((r01*x6697)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6689))+(((-1.0)*x6693*x6695))+((r21*x6699)));
evalcond[4]=((((-1.0)*x6694*x6695))+((r02*x6689))+((cj0*x6692))+(((-1.0)*cj0*x6696))+((r01*x6699)));
evalcond[5]=(((r12*x6689))+((r11*x6699))+(((-1.0)*sj0*x6696))+((sj0*x6692))+(((-1.0)*x6691*x6695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6700=((1.0)*gconst131);
CheckValue<IkReal> x6701 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6701.valid){
continue;
}
CheckValue<IkReal> x6702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6700)))),-1);
if(!x6702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6701.value)+(((1.5707963267949)*(x6702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6703=IKsin(j4);
IkReal x6704=IKcos(j4);
IkReal x6705=(gconst131*r10);
IkReal x6706=(sj1*sj2);
IkReal x6707=(gconst131*r20);
IkReal x6708=(gconst131*r00);
IkReal x6709=((1.0)*x6704);
IkReal x6710=((1.0)*cj1*cj2);
IkReal x6711=(gconst130*x6703);
IkReal x6712=((1.0)*x6703);
IkReal x6713=(gconst130*x6704);
evalcond[0]=((((-1.0)*r22*x6709))+(((-1.0)*x6707*x6712))+((r21*x6711)));
evalcond[1]=(cj0+((r11*x6711))+(((-1.0)*x6705*x6712))+(((-1.0)*r12*x6709)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6709))+(((-1.0)*x6708*x6712))+((r01*x6711)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6713))+((r22*x6703))+(((-1.0)*x6707*x6709)));
evalcond[4]=((((-1.0)*x6708*x6709))+(((-1.0)*cj0*x6710))+((cj0*x6706))+((r01*x6713))+((r02*x6703)));
evalcond[5]=((((-1.0)*sj0*x6710))+(((-1.0)*x6705*x6709))+((r11*x6713))+((sj0*x6706))+((r12*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6714=((1.0)*gconst131);
CheckValue<IkReal> x6715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6714))+(((-1.0)*gconst130*r00)))),-1);
if(!x6715.valid){
continue;
}
CheckValue<IkReal> x6716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6714))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6715.value)))+(x6716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6717=IKsin(j4);
IkReal x6718=IKcos(j4);
IkReal x6719=(gconst131*r10);
IkReal x6720=(sj1*sj2);
IkReal x6721=(gconst131*r20);
IkReal x6722=(gconst131*r00);
IkReal x6723=((1.0)*x6718);
IkReal x6724=((1.0)*cj1*cj2);
IkReal x6725=(gconst130*x6717);
IkReal x6726=((1.0)*x6717);
IkReal x6727=(gconst130*x6718);
evalcond[0]=((((-1.0)*r22*x6723))+(((-1.0)*x6721*x6726))+((r21*x6725)));
evalcond[1]=(((r11*x6725))+cj0+(((-1.0)*x6719*x6726))+(((-1.0)*r12*x6723)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6722*x6726))+(((-1.0)*r02*x6723))+((r01*x6725)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6717))+(((-1.0)*x6721*x6723))+((r21*x6727)));
evalcond[4]=(((cj0*x6720))+((r02*x6717))+(((-1.0)*cj0*x6724))+(((-1.0)*x6722*x6723))+((r01*x6727)));
evalcond[5]=(((r11*x6727))+(((-1.0)*sj0*x6724))+(((-1.0)*x6719*x6723))+((sj0*x6720))+((r12*x6717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6728=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6728;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6729=((1.0)*cj5);
IkReal x6730=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6729)));
j4eval[0]=x6730;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6729))+((r21*sj5))))));
j4eval[2]=IKsign(x6730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6731=cj5*cj5;
IkReal x6732=r01*r01;
IkReal x6733=(cj5*r00);
IkReal x6734=(r01*sj5);
IkReal x6735=((((-2.0)*x6733*x6734))+x6732+((x6731*(r00*r00)))+(r02*r02)+(((-1.0)*x6731*x6732)));
j4eval[0]=x6735;
j4eval[1]=IKsign(x6735);
j4eval[2]=((IKabs(((((-1.0)*x6733))+x6734)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6736=cj5*cj5;
IkReal x6737=r01*r01;
IkReal x6738=(r01*sj5);
IkReal x6739=(cj5*r00);
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(((((-1.0)*x6739))+x6738)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
CheckValue<IkReal> x6741=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6738*x6739))+x6737+((x6736*(r00*r00)))+(((-1.0)*x6736*x6737))+(r02*r02))),-1);
if(!x6741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6740.value)+(((1.5707963267949)*(x6741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6742=IKcos(j4);
IkReal x6743=IKsin(j4);
IkReal x6744=(cj5*r00);
IkReal x6745=(cj5*r10);
IkReal x6746=(r21*sj5);
IkReal x6747=(cj5*r20);
IkReal x6748=((1.0)*x6742);
IkReal x6749=((1.0)*x6743);
IkReal x6750=(sj5*x6743);
IkReal x6751=(sj5*x6742);
evalcond[0]=(((r02*x6743))+(((-1.0)*x6744*x6748))+((r01*x6751)));
evalcond[1]=((((-1.0)*r22*x6748))+(((-1.0)*x6747*x6749))+((x6743*x6746)));
evalcond[2]=((((-1.0)*r12*x6748))+((r11*x6750))+(((-1.0)*x6745*x6749)));
evalcond[3]=((-1.0)+(((-1.0)*x6744*x6749))+((r01*x6750))+(((-1.0)*r02*x6748)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6747*x6748))+((x6742*x6746))+((cj1*sj2))+((r22*x6743)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6751))+((r12*x6743))+(((-1.0)*x6745*x6748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6752=((1.0)*cj5);
CheckValue<IkReal> x6753 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6752))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6753.valid){
continue;
}
CheckValue<IkReal> x6754=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6752)))),-1);
if(!x6754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6753.value)+(((1.5707963267949)*(x6754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6755=IKcos(j4);
IkReal x6756=IKsin(j4);
IkReal x6757=(cj5*r00);
IkReal x6758=(cj5*r10);
IkReal x6759=(r21*sj5);
IkReal x6760=(cj5*r20);
IkReal x6761=((1.0)*x6755);
IkReal x6762=((1.0)*x6756);
IkReal x6763=(sj5*x6756);
IkReal x6764=(sj5*x6755);
evalcond[0]=(((r01*x6764))+((r02*x6756))+(((-1.0)*x6757*x6761)));
evalcond[1]=((((-1.0)*x6760*x6762))+((x6756*x6759))+(((-1.0)*r22*x6761)));
evalcond[2]=((((-1.0)*x6758*x6762))+((r11*x6763))+(((-1.0)*r12*x6761)));
evalcond[3]=((-1.0)+((r01*x6763))+(((-1.0)*r02*x6761))+(((-1.0)*x6757*x6762)));
evalcond[4]=((((-1.0)*x6760*x6761))+((cj2*sj1))+((r22*x6756))+((cj1*sj2))+((x6755*x6759)));
evalcond[5]=((((-1.0)*x6758*x6761))+((r12*x6756))+(((-1.0)*cj1*cj2))+((r11*x6764))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6765.valid){
continue;
}
CheckValue<IkReal> x6766 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6765.value)))+(x6766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6767=IKcos(j4);
IkReal x6768=IKsin(j4);
IkReal x6769=(cj5*r00);
IkReal x6770=(cj5*r10);
IkReal x6771=(r21*sj5);
IkReal x6772=(cj5*r20);
IkReal x6773=((1.0)*x6767);
IkReal x6774=((1.0)*x6768);
IkReal x6775=(sj5*x6768);
IkReal x6776=(sj5*x6767);
evalcond[0]=((((-1.0)*x6769*x6773))+((r02*x6768))+((r01*x6776)));
evalcond[1]=((((-1.0)*r22*x6773))+(((-1.0)*x6772*x6774))+((x6768*x6771)));
evalcond[2]=(((r11*x6775))+(((-1.0)*x6770*x6774))+(((-1.0)*r12*x6773)));
evalcond[3]=((-1.0)+(((-1.0)*x6769*x6774))+(((-1.0)*r02*x6773))+((r01*x6775)));
evalcond[4]=(((cj2*sj1))+((r22*x6768))+((cj1*sj2))+(((-1.0)*x6772*x6773))+((x6767*x6771)));
evalcond[5]=(((r11*x6776))+((r12*x6768))+(((-1.0)*x6770*x6773))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6777=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6777;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6778=((1.0)*cj5);
IkReal x6779=((((-1.0)*r21*x6778))+(((-1.0)*r20*sj5)));
j4eval[0]=x6779;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6778))))));
j4eval[2]=IKsign(x6779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6780=(r01*sj5);
IkReal x6781=(cj1*sj2);
IkReal x6782=(cj2*sj1);
IkReal x6783=((1.0)*r02);
IkReal x6784=((1.0)*cj5*r00);
IkReal x6785=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6785;
j4eval[1]=((IKabs(((((-1.0)*x6782*x6783))+(((-1.0)*x6781*x6783)))))+(IKabs(((((-1.0)*x6782*x6784))+(((-1.0)*x6781*x6784))+((x6780*x6781))+((x6780*x6782))))));
j4eval[2]=IKsign(x6785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6786=(r01*sj5);
IkReal x6787=(cj1*sj2);
IkReal x6788=(cj2*sj1);
IkReal x6789=((1.0)*r02);
IkReal x6790=((1.0)*cj5*r00);
CheckValue<IkReal> x6791 = IKatan2WithCheck(IkReal(((((-1.0)*x6788*x6790))+(((-1.0)*x6787*x6790))+((x6786*x6787))+((x6786*x6788)))),IkReal(((((-1.0)*x6787*x6789))+(((-1.0)*x6788*x6789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6791.valid){
continue;
}
CheckValue<IkReal> x6792=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6791.value)+(((1.5707963267949)*(x6792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6793=IKcos(j4);
IkReal x6794=IKsin(j4);
IkReal x6795=(cj5*r00);
IkReal x6796=(cj5*r10);
IkReal x6797=(r21*sj5);
IkReal x6798=(cj5*r20);
IkReal x6799=((1.0)*x6793);
IkReal x6800=((1.0)*x6794);
IkReal x6801=(sj5*x6794);
IkReal x6802=(sj5*x6793);
evalcond[0]=(((r02*x6794))+(((-1.0)*x6795*x6799))+((r01*x6802)));
evalcond[1]=(((x6794*x6797))+(((-1.0)*r22*x6799))+(((-1.0)*x6798*x6800)));
evalcond[2]=((((-1.0)*x6796*x6800))+((r11*x6801))+(((-1.0)*r12*x6799)));
evalcond[3]=((1.0)+(((-1.0)*x6795*x6800))+((r01*x6801))+(((-1.0)*r02*x6799)));
evalcond[4]=(((cj2*sj1))+((r22*x6794))+((x6793*x6797))+((cj1*sj2))+(((-1.0)*x6798*x6799)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6802))+((r12*x6794))+((cj1*cj2))+(((-1.0)*x6796*x6799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6803=((1.0)*cj5);
CheckValue<IkReal> x6804 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6804.valid){
continue;
}
CheckValue<IkReal> x6805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6803))+(((-1.0)*r20*sj5)))),-1);
if(!x6805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6804.value)+(((1.5707963267949)*(x6805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6806=IKcos(j4);
IkReal x6807=IKsin(j4);
IkReal x6808=(cj5*r00);
IkReal x6809=(cj5*r10);
IkReal x6810=(r21*sj5);
IkReal x6811=(cj5*r20);
IkReal x6812=((1.0)*x6806);
IkReal x6813=((1.0)*x6807);
IkReal x6814=(sj5*x6807);
IkReal x6815=(sj5*x6806);
evalcond[0]=((((-1.0)*x6808*x6812))+((r01*x6815))+((r02*x6807)));
evalcond[1]=(((x6807*x6810))+(((-1.0)*x6811*x6813))+(((-1.0)*r22*x6812)));
evalcond[2]=(((r11*x6814))+(((-1.0)*x6809*x6813))+(((-1.0)*r12*x6812)));
evalcond[3]=((1.0)+(((-1.0)*x6808*x6813))+(((-1.0)*r02*x6812))+((r01*x6814)));
evalcond[4]=(((cj2*sj1))+((r22*x6807))+((cj1*sj2))+(((-1.0)*x6811*x6812))+((x6806*x6810)));
evalcond[5]=(((r11*x6815))+(((-1.0)*sj1*sj2))+(((-1.0)*x6809*x6812))+((r12*x6807))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6816 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6816.valid){
continue;
}
CheckValue<IkReal> x6817=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6816.value)+(((1.5707963267949)*(x6817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6818=IKcos(j4);
IkReal x6819=IKsin(j4);
IkReal x6820=(cj5*r00);
IkReal x6821=(cj5*r10);
IkReal x6822=(r21*sj5);
IkReal x6823=(cj5*r20);
IkReal x6824=((1.0)*x6818);
IkReal x6825=((1.0)*x6819);
IkReal x6826=(sj5*x6819);
IkReal x6827=(sj5*x6818);
evalcond[0]=(((r01*x6827))+((r02*x6819))+(((-1.0)*x6820*x6824)));
evalcond[1]=((((-1.0)*x6823*x6825))+((x6819*x6822))+(((-1.0)*r22*x6824)));
evalcond[2]=((((-1.0)*r12*x6824))+((r11*x6826))+(((-1.0)*x6821*x6825)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6824))+((r01*x6826))+(((-1.0)*x6820*x6825)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6823*x6824))+((cj1*sj2))+((r22*x6819))+((x6818*x6822)));
evalcond[5]=(((r12*x6819))+(((-1.0)*sj1*sj2))+((r11*x6827))+((cj1*cj2))+(((-1.0)*x6821*x6824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6828=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6828);
rxp1_1=(px*r21);
rxp1_2=(r11*x6828);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6829=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6829);
rxp1_1=(px*r21);
rxp1_2=(r11*x6829);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6830=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6830);
rxp1_1=(px*r21);
rxp1_2=(r11*x6830);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6833=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6833.valid){
continue;
}
IkReal x6831=x6833.value;
IkReal x6832=(sj0*x6831);
cj4array[0]=(((cj1*cj2*x6832))+(((-1.0)*sj1*sj2*x6832)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6834=IKsin(j4);
IkReal x6835=IKcos(j4);
IkReal x6836=(r21*sj5);
IkReal x6837=((1.0)*cj5*r20);
evalcond[0]=(r02*x6834);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6835)));
evalcond[2]=(((x6834*x6836))+(((-1.0)*x6834*x6837)));
evalcond[3]=((((-1.0)*cj5*r10*x6834))+((r11*sj5*x6834)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6835*x6836))+(((-1.0)*x6835*x6837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6840=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6840.valid){
continue;
}
IkReal x6838=x6840.value;
IkReal x6839=((1.0)*x6838);
cj4array[0]=((((-1.0)*cj2*sj1*x6839))+(((-1.0)*cj1*sj2*x6839)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6841=IKsin(j4);
IkReal x6842=IKcos(j4);
IkReal x6843=((1.0)*sj0);
IkReal x6844=((1.0)*cj5);
IkReal x6845=(sj5*x6841);
evalcond[0]=(r02*x6841);
evalcond[1]=((((-1.0)*x6843))+(((-1.0)*r02*x6842)));
evalcond[2]=((((-1.0)*r20*x6841*x6844))+((r21*x6845)));
evalcond[3]=(((r11*x6845))+(((-1.0)*r10*x6841*x6844)));
evalcond[4]=(((r11*sj5*x6842))+(((-1.0)*cj1*cj2*x6843))+((sj0*sj1*sj2))+(((-1.0)*r10*x6842*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6846=IKPowWithIntegerCheck(r02,-1);
if(!x6846.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6846.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6847=IKsin(j4);
IkReal x6848=IKcos(j4);
IkReal x6849=(r21*sj5);
IkReal x6850=((1.0)*cj5);
IkReal x6851=(r11*sj5);
evalcond[0]=(r02*x6847);
evalcond[1]=(((x6847*x6849))+(((-1.0)*r20*x6847*x6850)));
evalcond[2]=((((-1.0)*r10*x6847*x6850))+((x6847*x6851)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6848*x6849))+(((-1.0)*r20*x6848*x6850)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6848*x6851))+(((-1.0)*r10*x6848*x6850))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6852=((1.0)*sj0);
IkReal x6853=((1.0)*cj0);
CheckValue<IkReal> x6854 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6853))+(((-1.0)*r12*x6852)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6852))+(((-1.0)*r01*sj5*x6853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6854.valid){
continue;
}
CheckValue<IkReal> x6855=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6854.value)+(((1.5707963267949)*(x6855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6856=IKsin(j4);
IkReal x6857=IKcos(j4);
IkReal x6858=(cj5*r00);
IkReal x6859=(cj5*r10);
IkReal x6860=(r21*sj5);
IkReal x6861=(sj1*sj2);
IkReal x6862=(cj5*r20);
IkReal x6863=((1.0)*x6857);
IkReal x6864=((1.0)*cj1*cj2);
IkReal x6865=((1.0)*x6856);
IkReal x6866=(sj5*x6856);
IkReal x6867=(sj5*x6857);
evalcond[0]=((((-1.0)*x6862*x6865))+(((-1.0)*r22*x6863))+((x6856*x6860)));
evalcond[1]=(((r11*x6866))+cj0+(((-1.0)*r12*x6863))+(((-1.0)*x6859*x6865)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6863))+((r01*x6866))+(((-1.0)*x6858*x6865)));
evalcond[3]=(((cj2*sj1))+((r22*x6856))+((cj1*sj2))+(((-1.0)*x6862*x6863))+((x6857*x6860)));
evalcond[4]=(((r02*x6856))+((cj0*x6861))+((r01*x6867))+(((-1.0)*x6858*x6863))+(((-1.0)*cj0*x6864)));
evalcond[5]=(((sj0*x6861))+((r11*x6867))+((r12*x6856))+(((-1.0)*sj0*x6864))+(((-1.0)*x6859*x6863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6868=((1.0)*cj5);
CheckValue<IkReal> x6869 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6868))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6869.valid){
continue;
}
CheckValue<IkReal> x6870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6868)))),-1);
if(!x6870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6869.value)+(((1.5707963267949)*(x6870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6871=IKsin(j4);
IkReal x6872=IKcos(j4);
IkReal x6873=(cj5*r00);
IkReal x6874=(cj5*r10);
IkReal x6875=(r21*sj5);
IkReal x6876=(sj1*sj2);
IkReal x6877=(cj5*r20);
IkReal x6878=((1.0)*x6872);
IkReal x6879=((1.0)*cj1*cj2);
IkReal x6880=((1.0)*x6871);
IkReal x6881=(sj5*x6871);
IkReal x6882=(sj5*x6872);
evalcond[0]=((((-1.0)*r22*x6878))+((x6871*x6875))+(((-1.0)*x6877*x6880)));
evalcond[1]=(((r11*x6881))+cj0+(((-1.0)*r12*x6878))+(((-1.0)*x6874*x6880)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6873*x6880))+(((-1.0)*r02*x6878))+((r01*x6881)));
evalcond[3]=(((cj2*sj1))+((r22*x6871))+(((-1.0)*x6877*x6878))+((cj1*sj2))+((x6872*x6875)));
evalcond[4]=(((r02*x6871))+((cj0*x6876))+(((-1.0)*x6873*x6878))+((r01*x6882))+(((-1.0)*cj0*x6879)));
evalcond[5]=(((sj0*x6876))+((r11*x6882))+((r12*x6871))+(((-1.0)*x6874*x6878))+(((-1.0)*sj0*x6879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6883=((1.0)*cj5);
CheckValue<IkReal> x6884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6883)))),-1);
if(!x6884.valid){
continue;
}
CheckValue<IkReal> x6885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6884.value)))+(x6885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6886=IKsin(j4);
IkReal x6887=IKcos(j4);
IkReal x6888=(cj5*r00);
IkReal x6889=(cj5*r10);
IkReal x6890=(r21*sj5);
IkReal x6891=(sj1*sj2);
IkReal x6892=(cj5*r20);
IkReal x6893=((1.0)*x6887);
IkReal x6894=((1.0)*cj1*cj2);
IkReal x6895=((1.0)*x6886);
IkReal x6896=(sj5*x6886);
IkReal x6897=(sj5*x6887);
evalcond[0]=(((x6886*x6890))+(((-1.0)*x6892*x6895))+(((-1.0)*r22*x6893)));
evalcond[1]=((((-1.0)*x6889*x6895))+cj0+(((-1.0)*r12*x6893))+((r11*x6896)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6888*x6895))+(((-1.0)*r02*x6893))+((r01*x6896)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6892*x6893))+((r22*x6886))+((x6887*x6890)));
evalcond[4]=((((-1.0)*cj0*x6894))+(((-1.0)*x6888*x6893))+((r02*x6886))+((cj0*x6891))+((r01*x6897)));
evalcond[5]=((((-1.0)*x6889*x6893))+((sj0*x6891))+(((-1.0)*sj0*x6894))+((r11*x6897))+((r12*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6898=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6898;
j0eval[1]=IKsign(x6898);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6899=cj5*cj5;
IkReal x6900=r21*r21;
IkReal x6901=(cj2*sj1);
IkReal x6902=(cj1*sj2);
IkReal x6903=(r21*sj5);
IkReal x6904=((1.0)*cj5*r20);
IkReal x6905=((r22*r22)+(((-1.0)*x6899*x6900))+x6900+(((-2.0)*cj5*r20*x6903))+((x6899*(r20*r20))));
j4eval[0]=x6905;
j4eval[1]=IKsign(x6905);
j4eval[2]=((IKabs((((x6901*x6903))+((x6902*x6903))+(((-1.0)*x6901*x6904))+(((-1.0)*x6902*x6904)))))+(IKabs((((r22*x6902))+((r22*x6901))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6906=cj1*cj1;
IkReal x6907=(cj2*sj2);
IkReal x6908=(cj2*sj1);
IkReal x6909=(cj1*sj1);
j0eval[0]=((((-1.08418367346939)*sj2*x6906))+(((-2.0)*cj1*cj2*x6908))+(((-2.0)*x6906*x6907))+x6907+x6909+(((-1.08418367346939)*cj1*x6908)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6908)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.194110143641506)*px))+(((1.19239088236925)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19239088236925)*px))+(((0.194110143641506)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.194110143641506)*px))+(((1.19239088236925)*py))))+IKsqr(((((1.19239088236925)*px))+(((0.194110143641506)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.194110143641506)*px))+(((1.19239088236925)*py))), ((((1.19239088236925)*px))+(((0.194110143641506)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6910=IKcos(j0);
IkReal x6911=IKsin(j0);
evalcond[0]=((((0.817)*x6910))+(((-1.0)*px))+(((-0.133)*x6911)));
evalcond[1]=((((0.817)*x6911))+(((-1.0)*py))+(((0.133)*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6912=((1.0)*cj5);
IkReal x6913=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6912)));
j4eval[0]=x6913;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6912)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6914=((1.0)*cj5);
IkReal x6915=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6914)));
j4eval[0]=x6915;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6914))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6916=cj5*cj5;
IkReal x6917=((1.0)*sj5);
IkReal x6918=(cj5*r20);
IkReal x6919=(r11*r21);
IkReal x6920=(((r12*r22))+(((-1.0)*x6916*x6919))+(((-1.0)*r11*x6917*x6918))+((r10*r20*x6916))+(((-1.0)*cj5*r10*r21*x6917))+x6919);
j4eval[0]=x6920;
j4eval[1]=IKsign(x6920);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6917))+((cj0*x6918)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6921=cj5*cj5;
IkReal x6922=((1.0)*sj5);
IkReal x6923=(cj5*r20);
IkReal x6924=(r11*r21);
CheckValue<IkReal> x6925=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6922))+(((-1.0)*r11*x6922*x6923))+((r12*r22))+(((-1.0)*x6921*x6924))+x6924+((r10*r20*x6921)))),-1);
if(!x6925.valid){
continue;
}
CheckValue<IkReal> x6926 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6922))+((cj0*x6923)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6925.value)))+(x6926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6927=IKsin(j4);
IkReal x6928=IKcos(j4);
IkReal x6929=((1.0)*sj0);
IkReal x6930=(cj5*r00);
IkReal x6931=(r11*sj5);
IkReal x6932=(cj5*r10);
IkReal x6933=(r21*sj5);
IkReal x6934=(cj5*r20);
IkReal x6935=(r01*sj5);
IkReal x6936=((1.0)*x6928);
IkReal x6937=((1.0)*x6927);
evalcond[0]=(((x6927*x6933))+(((-1.0)*r22*x6936))+(((-1.0)*x6934*x6937)));
evalcond[1]=((((-1.0)*r22*x6937))+((x6928*x6934))+(((-1.0)*x6933*x6936)));
evalcond[2]=(((x6927*x6931))+(((-1.0)*x6932*x6937))+cj0+(((-1.0)*r12*x6936)));
evalcond[3]=(((x6927*x6935))+(((-1.0)*x6930*x6937))+(((-1.0)*r02*x6936))+(((-1.0)*x6929)));
evalcond[4]=((((-1.0)*r02*x6937))+(((-1.0)*x6935*x6936))+((x6928*x6930))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6937))+((x6928*x6932))+(((-1.0)*x6929))+(((-1.0)*x6931*x6936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6938=((1.0)*cj5);
CheckValue<IkReal> x6939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6938)))),-1);
if(!x6939.valid){
continue;
}
CheckValue<IkReal> x6940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6939.value)))+(x6940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6941=IKsin(j4);
IkReal x6942=IKcos(j4);
IkReal x6943=((1.0)*sj0);
IkReal x6944=(cj5*r00);
IkReal x6945=(r11*sj5);
IkReal x6946=(cj5*r10);
IkReal x6947=(r21*sj5);
IkReal x6948=(cj5*r20);
IkReal x6949=(r01*sj5);
IkReal x6950=((1.0)*x6942);
IkReal x6951=((1.0)*x6941);
evalcond[0]=(((x6941*x6947))+(((-1.0)*x6948*x6951))+(((-1.0)*r22*x6950)));
evalcond[1]=(((x6942*x6948))+(((-1.0)*r22*x6951))+(((-1.0)*x6947*x6950)));
evalcond[2]=(cj0+(((-1.0)*r12*x6950))+((x6941*x6945))+(((-1.0)*x6946*x6951)));
evalcond[3]=(((x6941*x6949))+(((-1.0)*x6943))+(((-1.0)*r02*x6950))+(((-1.0)*x6944*x6951)));
evalcond[4]=(((x6942*x6944))+(((-1.0)*r02*x6951))+(((-1.0)*x6949*x6950))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6951))+(((-1.0)*x6943))+((x6942*x6946))+(((-1.0)*x6945*x6950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6952=((1.0)*cj5);
CheckValue<IkReal> x6953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6952)))),-1);
if(!x6953.valid){
continue;
}
CheckValue<IkReal> x6954 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6953.value)))+(x6954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6955=IKsin(j4);
IkReal x6956=IKcos(j4);
IkReal x6957=((1.0)*sj0);
IkReal x6958=(cj5*r00);
IkReal x6959=(r11*sj5);
IkReal x6960=(cj5*r10);
IkReal x6961=(r21*sj5);
IkReal x6962=(cj5*r20);
IkReal x6963=(r01*sj5);
IkReal x6964=((1.0)*x6956);
IkReal x6965=((1.0)*x6955);
evalcond[0]=(((x6955*x6961))+(((-1.0)*r22*x6964))+(((-1.0)*x6962*x6965)));
evalcond[1]=((((-1.0)*x6961*x6964))+((x6956*x6962))+(((-1.0)*r22*x6965)));
evalcond[2]=(cj0+(((-1.0)*r12*x6964))+((x6955*x6959))+(((-1.0)*x6960*x6965)));
evalcond[3]=(((x6955*x6963))+(((-1.0)*r02*x6964))+(((-1.0)*x6958*x6965))+(((-1.0)*x6957)));
evalcond[4]=(((x6956*x6958))+(((-1.0)*r02*x6965))+(((-1.0)*x6963*x6964))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6959*x6964))+(((-1.0)*x6957))+(((-1.0)*r12*x6965))+((x6956*x6960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.75737565235914)*py))+(((-7.08275641708382)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.75737565235914)*px))+(((7.08275641708382)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.75737565235914)*py))+(((-7.08275641708382)*px))))+IKsqr(((((1.75737565235914)*px))+(((7.08275641708382)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.75737565235914)*py))+(((-7.08275641708382)*px))), ((((1.75737565235914)*px))+(((7.08275641708382)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6966=IKcos(j0);
IkReal x6967=IKsin(j0);
evalcond[0]=((((-0.133)*x6967))+(((-1.0)*px))+(((0.033)*x6966)));
evalcond[1]=((((-1.0)*py))+(((0.033)*x6967))+(((0.133)*x6966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6968=((1.0)*cj5);
IkReal x6969=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6968)));
j4eval[0]=x6969;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6968))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6970=cj5*cj5;
IkReal x6971=((1.0)*r21);
IkReal x6972=(cj5*sj5);
IkReal x6973=((1.0)*r20);
IkReal x6974=((((-1.0)*r01*x6972*x6973))+(((-1.0)*r00*x6971*x6972))+((r01*r21))+((r00*r20*x6970))+((r02*r22))+(((-1.0)*r01*x6970*x6971)));
j4eval[0]=x6974;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6973))))));
j4eval[2]=IKsign(x6974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6975=cj5*cj5;
IkReal x6976=(r21*sj5);
IkReal x6977=(r11*r21);
IkReal x6978=((1.0)*cj5*r20);
IkReal x6979=(((r10*r20*x6975))+(((-1.0)*cj5*r10*x6976))+(((-1.0)*r11*sj5*x6978))+((r12*r22))+(((-1.0)*x6975*x6977))+x6977);
j4eval[0]=x6979;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6976))+(((-1.0)*sj0*x6978))))));
j4eval[2]=IKsign(x6979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6980=cj5*cj5;
IkReal x6981=(r21*sj5);
IkReal x6982=(r11*r21);
IkReal x6983=((1.0)*cj5*r20);
CheckValue<IkReal> x6984 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6983))+((sj0*x6981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6984.valid){
continue;
}
CheckValue<IkReal> x6985=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*r11*sj5*x6983))+(((-1.0)*cj5*r10*x6981))+x6982+((r10*r20*x6980))+(((-1.0)*x6980*x6982)))),-1);
if(!x6985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6984.value)+(((1.5707963267949)*(x6985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6986=IKsin(j4);
IkReal x6987=IKcos(j4);
IkReal x6988=(r11*sj5);
IkReal x6989=(cj5*r00);
IkReal x6990=(cj5*r10);
IkReal x6991=(r21*sj5);
IkReal x6992=(cj5*r20);
IkReal x6993=(r01*sj5);
IkReal x6994=((1.0)*x6987);
IkReal x6995=((1.0)*x6986);
evalcond[0]=(((x6986*x6991))+(((-1.0)*r22*x6994))+(((-1.0)*x6992*x6995)));
evalcond[1]=(((x6987*x6992))+(((-1.0)*r22*x6995))+(((-1.0)*x6991*x6994)));
evalcond[2]=((((-1.0)*r12*x6994))+cj0+((x6986*x6988))+(((-1.0)*x6990*x6995)));
evalcond[3]=((((-1.0)*x6993*x6994))+cj0+((x6987*x6989))+(((-1.0)*r02*x6995)));
evalcond[4]=((((-1.0)*r12*x6995))+sj0+((x6987*x6990))+(((-1.0)*x6988*x6994)));
evalcond[5]=(((x6986*x6993))+(((-1.0)*sj0))+(((-1.0)*r02*x6994))+(((-1.0)*x6989*x6995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6996=cj5*cj5;
IkReal x6997=((1.0)*r21);
IkReal x6998=(cj5*sj5);
IkReal x6999=((1.0)*r20);
CheckValue<IkReal> x7000=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x6996))+((r02*r22))+(((-1.0)*r00*x6997*x6998))+(((-1.0)*r01*x6998*x6999))+(((-1.0)*r01*x6996*x6997)))),-1);
if(!x7000.valid){
continue;
}
CheckValue<IkReal> x7001 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7000.value)))+(x7001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7002=IKsin(j4);
IkReal x7003=IKcos(j4);
IkReal x7004=(r11*sj5);
IkReal x7005=(cj5*r00);
IkReal x7006=(cj5*r10);
IkReal x7007=(r21*sj5);
IkReal x7008=(cj5*r20);
IkReal x7009=(r01*sj5);
IkReal x7010=((1.0)*x7003);
IkReal x7011=((1.0)*x7002);
evalcond[0]=((((-1.0)*r22*x7010))+((x7002*x7007))+(((-1.0)*x7008*x7011)));
evalcond[1]=((((-1.0)*r22*x7011))+((x7003*x7008))+(((-1.0)*x7007*x7010)));
evalcond[2]=(cj0+((x7002*x7004))+(((-1.0)*r12*x7010))+(((-1.0)*x7006*x7011)));
evalcond[3]=((((-1.0)*x7009*x7010))+cj0+((x7003*x7005))+(((-1.0)*r02*x7011)));
evalcond[4]=(sj0+((x7003*x7006))+(((-1.0)*r12*x7011))+(((-1.0)*x7004*x7010)));
evalcond[5]=((((-1.0)*sj0))+((x7002*x7009))+(((-1.0)*r02*x7010))+(((-1.0)*x7005*x7011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7012=((1.0)*cj5);
CheckValue<IkReal> x7013 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7013.valid){
continue;
}
CheckValue<IkReal> x7014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7012)))),-1);
if(!x7014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7013.value)+(((1.5707963267949)*(x7014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7015=IKsin(j4);
IkReal x7016=IKcos(j4);
IkReal x7017=(r11*sj5);
IkReal x7018=(cj5*r00);
IkReal x7019=(cj5*r10);
IkReal x7020=(r21*sj5);
IkReal x7021=(cj5*r20);
IkReal x7022=(r01*sj5);
IkReal x7023=((1.0)*x7016);
IkReal x7024=((1.0)*x7015);
evalcond[0]=((((-1.0)*r22*x7023))+(((-1.0)*x7021*x7024))+((x7015*x7020)));
evalcond[1]=((((-1.0)*r22*x7024))+((x7016*x7021))+(((-1.0)*x7020*x7023)));
evalcond[2]=((((-1.0)*r12*x7023))+cj0+((x7015*x7017))+(((-1.0)*x7019*x7024)));
evalcond[3]=(cj0+(((-1.0)*r02*x7024))+((x7016*x7018))+(((-1.0)*x7022*x7023)));
evalcond[4]=((((-1.0)*r12*x7024))+sj0+((x7016*x7019))+(((-1.0)*x7017*x7023)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7018*x7024))+(((-1.0)*r02*x7023))+((x7015*x7022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7025=((1.0)*sj5);
IkReal x7026=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7026))+(((-1.0)*r10*x7025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7025))+(((-1.0)*r01*x7026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7026))+(((-1.0)*r10*x7025))))+IKsqr(((((-1.0)*r00*x7025))+(((-1.0)*r01*x7026))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7026))+(((-1.0)*r10*x7025))), ((((-1.0)*r00*x7025))+(((-1.0)*r01*x7026))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7027=IKsin(j0);
IkReal x7028=IKcos(j0);
IkReal x7029=((1.0)*cj5);
IkReal x7030=((1.0)*sj5);
IkReal x7031=((0.099)*sj5);
IkReal x7032=((0.099)*cj5);
evalcond[0]=((((-1.0)*x7028))+(((-1.0)*r00*x7030))+(((-1.0)*r01*x7029)));
evalcond[1]=((((-1.0)*r11*x7029))+(((-1.0)*x7027))+(((-1.0)*r10*x7030)));
evalcond[2]=((((-1.0)*r01*x7032))+(((-1.0)*r00*x7031))+(((-1.0)*px))+(((-0.133)*x7027)));
evalcond[3]=((((0.133)*x7028))+(((-1.0)*r11*x7032))+(((-1.0)*py))+(((-1.0)*r10*x7031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7033=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7033;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7034=((1.0)*cj5);
IkReal x7035=((((-1.0)*r01*x7034))+(((-1.0)*r00*sj5)));
j4eval[0]=x7035;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7034)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7036=cj5*cj5;
IkReal x7037=r21*r21;
IkReal x7038=(r21*sj5);
IkReal x7039=(cj5*r20);
IkReal x7040=(x7037+(r22*r22)+(((-1.0)*x7036*x7037))+((x7036*(r20*r20)))+(((-2.0)*x7038*x7039)));
j4eval[0]=x7040;
j4eval[1]=IKsign(x7040);
j4eval[2]=((IKabs((x7038+(((-1.0)*x7039)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7041=cj5*cj5;
IkReal x7042=r21*r21;
IkReal x7043=(r21*sj5);
IkReal x7044=(cj5*r20);
CheckValue<IkReal> x7045 = IKatan2WithCheck(IkReal(r22),IkReal((x7043+(((-1.0)*x7044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7045.valid){
continue;
}
CheckValue<IkReal> x7046=IKPowWithIntegerCheck(IKsign((((x7041*(r20*r20)))+x7042+(r22*r22)+(((-1.0)*x7041*x7042))+(((-2.0)*x7043*x7044)))),-1);
if(!x7046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7045.value)+(((1.5707963267949)*(x7046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7047=IKsin(j4);
IkReal x7048=IKcos(j4);
IkReal x7049=(r11*sj5);
IkReal x7050=(r21*sj5);
IkReal x7051=(cj5*r00);
IkReal x7052=(cj5*r20);
IkReal x7053=(r01*sj5);
IkReal x7054=(cj5*r10);
IkReal x7055=((1.0)*x7048);
IkReal x7056=((1.0)*x7047);
evalcond[0]=((((-1.0)*r22*x7055))+(((-1.0)*x7052*x7056))+((x7047*x7050)));
evalcond[1]=((((-1.0)*x7053*x7055))+((x7048*x7051))+(((-1.0)*r02*x7056)));
evalcond[2]=((((-1.0)*x7049*x7055))+(((-1.0)*r12*x7056))+((x7048*x7054)));
evalcond[3]=((((-1.0)*x7054*x7056))+((x7047*x7049))+cj0+(((-1.0)*r12*x7055)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7056))+((x7048*x7052))+(((-1.0)*x7050*x7055)));
evalcond[5]=((((-1.0)*sj0))+((x7047*x7053))+(((-1.0)*x7051*x7056))+(((-1.0)*r02*x7055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7057=((1.0)*cj5);
CheckValue<IkReal> x7058 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7057))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7058.valid){
continue;
}
CheckValue<IkReal> x7059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7057))+(((-1.0)*r00*sj5)))),-1);
if(!x7059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7058.value)+(((1.5707963267949)*(x7059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7060=IKsin(j4);
IkReal x7061=IKcos(j4);
IkReal x7062=(r11*sj5);
IkReal x7063=(r21*sj5);
IkReal x7064=(cj5*r00);
IkReal x7065=(cj5*r20);
IkReal x7066=(r01*sj5);
IkReal x7067=(cj5*r10);
IkReal x7068=((1.0)*x7061);
IkReal x7069=((1.0)*x7060);
evalcond[0]=((((-1.0)*x7065*x7069))+((x7060*x7063))+(((-1.0)*r22*x7068)));
evalcond[1]=((((-1.0)*x7066*x7068))+((x7061*x7064))+(((-1.0)*r02*x7069)));
evalcond[2]=((((-1.0)*x7062*x7068))+(((-1.0)*r12*x7069))+((x7061*x7067)));
evalcond[3]=(cj0+(((-1.0)*r12*x7068))+(((-1.0)*x7067*x7069))+((x7060*x7062)));
evalcond[4]=((1.0)+(((-1.0)*x7063*x7068))+((x7061*x7065))+(((-1.0)*r22*x7069)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7064*x7069))+((x7060*x7066))+(((-1.0)*r02*x7068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7070 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7070.valid){
continue;
}
CheckValue<IkReal> x7071=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7070.value)+(((1.5707963267949)*(x7071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7072=IKsin(j4);
IkReal x7073=IKcos(j4);
IkReal x7074=(r11*sj5);
IkReal x7075=(r21*sj5);
IkReal x7076=(cj5*r00);
IkReal x7077=(cj5*r20);
IkReal x7078=(r01*sj5);
IkReal x7079=(cj5*r10);
IkReal x7080=((1.0)*x7073);
IkReal x7081=((1.0)*x7072);
evalcond[0]=(((x7072*x7075))+(((-1.0)*r22*x7080))+(((-1.0)*x7077*x7081)));
evalcond[1]=(((x7073*x7076))+(((-1.0)*r02*x7081))+(((-1.0)*x7078*x7080)));
evalcond[2]=(((x7073*x7079))+(((-1.0)*r12*x7081))+(((-1.0)*x7074*x7080)));
evalcond[3]=(cj0+(((-1.0)*x7079*x7081))+((x7072*x7074))+(((-1.0)*r12*x7080)));
evalcond[4]=((1.0)+((x7073*x7077))+(((-1.0)*x7075*x7080))+(((-1.0)*r22*x7081)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7076*x7081))+((x7072*x7078))+(((-1.0)*r02*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.776175497365088)*px))+(((-2.28767515012868)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.776175497365088)*py))+(((-2.28767515012868)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.776175497365088)*px))+(((-2.28767515012868)*py))))+IKsqr(((((0.776175497365088)*py))+(((-2.28767515012868)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.776175497365088)*px))+(((-2.28767515012868)*py))), ((((0.776175497365088)*py))+(((-2.28767515012868)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7082=IKcos(j0);
IkReal x7083=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.392)*x7082))+(((-0.133)*x7083)));
evalcond[1]=((((-1.0)*py))+(((0.133)*x7082))+(((-0.392)*x7083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7084=((1.0)*cj5);
IkReal x7085=((((-1.0)*r01*x7084))+(((-1.0)*r00*sj5)));
j4eval[0]=x7085;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7084))))));
j4eval[2]=IKsign(x7085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7086=cj5*cj5;
IkReal x7087=((1.0)*r21);
IkReal x7088=(cj5*sj5);
IkReal x7089=((1.0)*r20);
IkReal x7090=((((-1.0)*r01*x7086*x7087))+((r01*r21))+(((-1.0)*r00*x7087*x7088))+((r00*r20*x7086))+(((-1.0)*r01*x7088*x7089))+((r02*r22)));
j4eval[0]=x7090;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7089))))));
j4eval[2]=IKsign(x7090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7091=cj5*cj5;
IkReal x7092=(r21*sj5);
IkReal x7093=(r11*r21);
IkReal x7094=((1.0)*cj5*r20);
IkReal x7095=(x7093+(((-1.0)*cj5*r10*x7092))+((r12*r22))+((r10*r20*x7091))+(((-1.0)*r11*sj5*x7094))+(((-1.0)*x7091*x7093)));
j4eval[0]=x7095;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7092))+(((-1.0)*sj0*x7094))))));
j4eval[2]=IKsign(x7095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7096=cj5*cj5;
IkReal x7097=(r21*sj5);
IkReal x7098=(r11*r21);
IkReal x7099=((1.0)*cj5*r20);
CheckValue<IkReal> x7100 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7097))+(((-1.0)*sj0*x7099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7100.valid){
continue;
}
CheckValue<IkReal> x7101=IKPowWithIntegerCheck(IKsign((x7098+(((-1.0)*cj5*r10*x7097))+(((-1.0)*x7096*x7098))+((r12*r22))+((r10*r20*x7096))+(((-1.0)*r11*sj5*x7099)))),-1);
if(!x7101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7100.value)+(((1.5707963267949)*(x7101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7102=IKsin(j4);
IkReal x7103=IKcos(j4);
IkReal x7104=(r11*sj5);
IkReal x7105=(cj5*r00);
IkReal x7106=(cj5*r10);
IkReal x7107=(r21*sj5);
IkReal x7108=(cj5*r20);
IkReal x7109=(r01*sj5);
IkReal x7110=((1.0)*x7103);
IkReal x7111=((1.0)*x7102);
evalcond[0]=(((x7102*x7107))+(((-1.0)*r22*x7110))+(((-1.0)*x7108*x7111)));
evalcond[1]=((((-1.0)*x7107*x7110))+(((-1.0)*r22*x7111))+((x7103*x7108)));
evalcond[2]=(((x7102*x7104))+cj0+(((-1.0)*r12*x7110))+(((-1.0)*x7106*x7111)));
evalcond[3]=(cj0+(((-1.0)*r02*x7111))+(((-1.0)*x7109*x7110))+((x7103*x7105)));
evalcond[4]=((((-1.0)*x7104*x7110))+sj0+(((-1.0)*r12*x7111))+((x7103*x7106)));
evalcond[5]=(((x7102*x7109))+(((-1.0)*sj0))+(((-1.0)*r02*x7110))+(((-1.0)*x7105*x7111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7112=cj5*cj5;
IkReal x7113=((1.0)*r21);
IkReal x7114=(cj5*sj5);
IkReal x7115=((1.0)*r20);
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7113*x7114))+((r01*r21))+(((-1.0)*r01*x7114*x7115))+(((-1.0)*r01*x7112*x7113))+((r00*r20*x7112))+((r02*r22)))),-1);
if(!x7116.valid){
continue;
}
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7116.value)))+(x7117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7118=IKsin(j4);
IkReal x7119=IKcos(j4);
IkReal x7120=(r11*sj5);
IkReal x7121=(cj5*r00);
IkReal x7122=(cj5*r10);
IkReal x7123=(r21*sj5);
IkReal x7124=(cj5*r20);
IkReal x7125=(r01*sj5);
IkReal x7126=((1.0)*x7119);
IkReal x7127=((1.0)*x7118);
evalcond[0]=((((-1.0)*r22*x7126))+((x7118*x7123))+(((-1.0)*x7124*x7127)));
evalcond[1]=((((-1.0)*x7123*x7126))+((x7119*x7124))+(((-1.0)*r22*x7127)));
evalcond[2]=(cj0+(((-1.0)*x7122*x7127))+((x7118*x7120))+(((-1.0)*r12*x7126)));
evalcond[3]=(cj0+((x7119*x7121))+(((-1.0)*r02*x7127))+(((-1.0)*x7125*x7126)));
evalcond[4]=((((-1.0)*x7120*x7126))+sj0+((x7119*x7122))+(((-1.0)*r12*x7127)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7121*x7127))+((x7118*x7125))+(((-1.0)*r02*x7126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7128=((1.0)*cj5);
CheckValue<IkReal> x7129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7128)))),-1);
if(!x7129.valid){
continue;
}
CheckValue<IkReal> x7130 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7129.value)))+(x7130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7131=IKsin(j4);
IkReal x7132=IKcos(j4);
IkReal x7133=(r11*sj5);
IkReal x7134=(cj5*r00);
IkReal x7135=(cj5*r10);
IkReal x7136=(r21*sj5);
IkReal x7137=(cj5*r20);
IkReal x7138=(r01*sj5);
IkReal x7139=((1.0)*x7132);
IkReal x7140=((1.0)*x7131);
evalcond[0]=((((-1.0)*r22*x7139))+(((-1.0)*x7137*x7140))+((x7131*x7136)));
evalcond[1]=((((-1.0)*r22*x7140))+(((-1.0)*x7136*x7139))+((x7132*x7137)));
evalcond[2]=((((-1.0)*r12*x7139))+cj0+(((-1.0)*x7135*x7140))+((x7131*x7133)));
evalcond[3]=(cj0+(((-1.0)*x7138*x7139))+((x7132*x7134))+(((-1.0)*r02*x7140)));
evalcond[4]=(sj0+((x7132*x7135))+(((-1.0)*r12*x7140))+(((-1.0)*x7133*x7139)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7134*x7140))+((x7131*x7138))+(((-1.0)*r02*x7139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7141=IKsin(j0);
IkReal x7142=IKcos(j0);
IkReal x7143=((1.0)*cj5);
IkReal x7144=((1.0)*sj5);
IkReal x7145=((0.099)*sj5);
IkReal x7146=((0.099)*cj5);
evalcond[0]=(x7142+(((-1.0)*r01*x7143))+(((-1.0)*r00*x7144)));
evalcond[1]=(x7141+(((-1.0)*r11*x7143))+(((-1.0)*r10*x7144)));
evalcond[2]=((((-1.0)*r01*x7146))+(((-1.0)*px))+(((-0.133)*x7141))+(((-1.0)*r00*x7145)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r11*x7146))+(((0.133)*x7142))+(((-1.0)*r10*x7145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7147=((1.0)*sj5);
IkReal x7148=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7147)));
j4eval[0]=x7148;
j4eval[1]=IKsign(x7148);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7147))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7149=((1.0)*cj5);
IkReal x7150=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7149)));
j4eval[0]=x7150;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7149))))));
j4eval[2]=IKsign(x7150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7151=r21*r21;
IkReal x7152=cj5*cj5;
IkReal x7153=(r21*sj5);
IkReal x7154=(cj5*r20);
IkReal x7155=((((-1.0)*x7152*(r20*r20)))+(((2.0)*x7153*x7154))+(((-1.0)*x7151))+(((-1.0)*(r22*r22)))+((x7151*x7152)));
j4eval[0]=x7155;
j4eval[1]=((IKabs((x7153+(((-1.0)*x7154)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7156=r21*r21;
IkReal x7157=cj5*cj5;
IkReal x7158=(r21*sj5);
IkReal x7159=(cj5*r20);
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal(r22),IkReal((x7158+(((-1.0)*x7159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
CheckValue<IkReal> x7161=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7157*(r20*r20)))+(((2.0)*x7158*x7159))+(((-1.0)*x7156))+(((-1.0)*(r22*r22)))+((x7156*x7157)))),-1);
if(!x7161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7160.value)+(((1.5707963267949)*(x7161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7162=IKsin(j4);
IkReal x7163=IKcos(j4);
IkReal x7164=(r11*sj5);
IkReal x7165=(r21*sj5);
IkReal x7166=(cj5*r00);
IkReal x7167=(cj5*r20);
IkReal x7168=(r01*sj5);
IkReal x7169=(cj5*r10);
IkReal x7170=((1.0)*x7163);
IkReal x7171=((1.0)*x7162);
evalcond[0]=(((x7162*x7165))+(((-1.0)*x7167*x7171))+(((-1.0)*r22*x7170)));
evalcond[1]=((((-1.0)*x7168*x7170))+(((-1.0)*r02*x7171))+((x7163*x7166)));
evalcond[2]=((((-1.0)*r12*x7171))+(((-1.0)*x7164*x7170))+((x7163*x7169)));
evalcond[3]=(((x7162*x7164))+(((-1.0)*x7169*x7171))+cj0+(((-1.0)*r12*x7170)));
evalcond[4]=((-1.0)+(((-1.0)*x7165*x7170))+(((-1.0)*r22*x7171))+((x7163*x7167)));
evalcond[5]=(((x7162*x7168))+(((-1.0)*sj0))+(((-1.0)*r02*x7170))+(((-1.0)*x7166*x7171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7172=((1.0)*cj5);
CheckValue<IkReal> x7173 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7172))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7173.valid){
continue;
}
CheckValue<IkReal> x7174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7172)))),-1);
if(!x7174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7173.value)+(((1.5707963267949)*(x7174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7175=IKsin(j4);
IkReal x7176=IKcos(j4);
IkReal x7177=(r11*sj5);
IkReal x7178=(r21*sj5);
IkReal x7179=(cj5*r00);
IkReal x7180=(cj5*r20);
IkReal x7181=(r01*sj5);
IkReal x7182=(cj5*r10);
IkReal x7183=((1.0)*x7176);
IkReal x7184=((1.0)*x7175);
evalcond[0]=((((-1.0)*x7180*x7184))+(((-1.0)*r22*x7183))+((x7175*x7178)));
evalcond[1]=(((x7176*x7179))+(((-1.0)*x7181*x7183))+(((-1.0)*r02*x7184)));
evalcond[2]=(((x7176*x7182))+(((-1.0)*x7177*x7183))+(((-1.0)*r12*x7184)));
evalcond[3]=(cj0+(((-1.0)*x7182*x7184))+(((-1.0)*r12*x7183))+((x7175*x7177)));
evalcond[4]=((-1.0)+(((-1.0)*x7178*x7183))+((x7176*x7180))+(((-1.0)*r22*x7184)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7179*x7184))+(((-1.0)*r02*x7183))+((x7175*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7185=((1.0)*sj5);
CheckValue<IkReal> x7186=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7185)))),-1);
if(!x7186.valid){
continue;
}
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7185))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7186.value)))+(x7187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7188=IKsin(j4);
IkReal x7189=IKcos(j4);
IkReal x7190=(r11*sj5);
IkReal x7191=(r21*sj5);
IkReal x7192=(cj5*r00);
IkReal x7193=(cj5*r20);
IkReal x7194=(r01*sj5);
IkReal x7195=(cj5*r10);
IkReal x7196=((1.0)*x7189);
IkReal x7197=((1.0)*x7188);
evalcond[0]=((((-1.0)*x7193*x7197))+(((-1.0)*r22*x7196))+((x7188*x7191)));
evalcond[1]=(((x7189*x7192))+(((-1.0)*x7194*x7196))+(((-1.0)*r02*x7197)));
evalcond[2]=(((x7189*x7195))+(((-1.0)*x7190*x7196))+(((-1.0)*r12*x7197)));
evalcond[3]=(cj0+(((-1.0)*x7195*x7197))+(((-1.0)*r12*x7196))+((x7188*x7190)));
evalcond[4]=((-1.0)+((x7189*x7193))+(((-1.0)*x7191*x7196))+(((-1.0)*r22*x7197)));
evalcond[5]=((((-1.0)*sj0))+((x7188*x7194))+(((-1.0)*r02*x7196))+(((-1.0)*x7192*x7197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28767515012868)*py))+(((-0.776175497365088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28767515012868)*px))+(((0.776175497365088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28767515012868)*py))+(((-0.776175497365088)*px))))+IKsqr(((((2.28767515012868)*px))+(((0.776175497365088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28767515012868)*py))+(((-0.776175497365088)*px))), ((((2.28767515012868)*px))+(((0.776175497365088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7198=IKsin(j0);
IkReal x7199=IKcos(j0);
evalcond[0]=((((0.392)*x7199))+(((-1.0)*px))+(((-0.133)*x7198)));
evalcond[1]=((((0.133)*x7199))+(((0.392)*x7198))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7200=((1.0)*cj5);
IkReal x7201=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7200)));
j4eval[0]=x7201;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7200))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7202=((1.0)*cj5);
IkReal x7203=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7202)));
j4eval[0]=x7203;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7202))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7204=cj5*cj5;
IkReal x7205=((1.0)*sj5);
IkReal x7206=(cj5*r20);
IkReal x7207=(r11*r21);
IkReal x7208=(x7207+((r10*r20*x7204))+(((-1.0)*r11*x7205*x7206))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7205))+(((-1.0)*x7204*x7207)));
j4eval[0]=x7208;
j4eval[1]=IKsign(x7208);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7205))+((cj0*x7206))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7209=cj5*cj5;
IkReal x7210=((1.0)*sj5);
IkReal x7211=(cj5*r20);
IkReal x7212=(r11*r21);
CheckValue<IkReal> x7213=IKPowWithIntegerCheck(IKsign((x7212+(((-1.0)*x7209*x7212))+((r10*r20*x7209))+(((-1.0)*cj5*r10*r21*x7210))+((r12*r22))+(((-1.0)*r11*x7210*x7211)))),-1);
if(!x7213.valid){
continue;
}
CheckValue<IkReal> x7214 = IKatan2WithCheck(IkReal((((cj0*x7211))+(((-1.0)*cj0*r21*x7210)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7213.value)))+(x7214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7215=IKsin(j4);
IkReal x7216=IKcos(j4);
IkReal x7217=((1.0)*sj0);
IkReal x7218=(cj5*r00);
IkReal x7219=(r11*sj5);
IkReal x7220=(cj5*r10);
IkReal x7221=(r21*sj5);
IkReal x7222=(cj5*r20);
IkReal x7223=(r01*sj5);
IkReal x7224=((1.0)*x7216);
IkReal x7225=((1.0)*x7215);
evalcond[0]=(((x7215*x7221))+(((-1.0)*x7222*x7225))+(((-1.0)*r22*x7224)));
evalcond[1]=((((-1.0)*x7221*x7224))+((x7216*x7222))+(((-1.0)*r22*x7225)));
evalcond[2]=(cj0+(((-1.0)*r12*x7224))+((x7215*x7219))+(((-1.0)*x7220*x7225)));
evalcond[3]=((((-1.0)*r02*x7224))+(((-1.0)*x7217))+((x7215*x7223))+(((-1.0)*x7218*x7225)));
evalcond[4]=((((-1.0)*r02*x7225))+((x7216*x7218))+(((-1.0)*x7223*x7224))+(((-1.0)*cj0)));
evalcond[5]=(((x7216*x7220))+(((-1.0)*x7217))+(((-1.0)*r12*x7225))+(((-1.0)*x7219*x7224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7226=((1.0)*cj5);
CheckValue<IkReal> x7227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7226)))),-1);
if(!x7227.valid){
continue;
}
CheckValue<IkReal> x7228 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7227.value)))+(x7228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7229=IKsin(j4);
IkReal x7230=IKcos(j4);
IkReal x7231=((1.0)*sj0);
IkReal x7232=(cj5*r00);
IkReal x7233=(r11*sj5);
IkReal x7234=(cj5*r10);
IkReal x7235=(r21*sj5);
IkReal x7236=(cj5*r20);
IkReal x7237=(r01*sj5);
IkReal x7238=((1.0)*x7230);
IkReal x7239=((1.0)*x7229);
evalcond[0]=(((x7229*x7235))+(((-1.0)*x7236*x7239))+(((-1.0)*r22*x7238)));
evalcond[1]=(((x7230*x7236))+(((-1.0)*r22*x7239))+(((-1.0)*x7235*x7238)));
evalcond[2]=(((x7229*x7233))+cj0+(((-1.0)*x7234*x7239))+(((-1.0)*r12*x7238)));
evalcond[3]=(((x7229*x7237))+(((-1.0)*x7232*x7239))+(((-1.0)*x7231))+(((-1.0)*r02*x7238)));
evalcond[4]=(((x7230*x7232))+(((-1.0)*x7237*x7238))+(((-1.0)*r02*x7239))+(((-1.0)*cj0)));
evalcond[5]=(((x7230*x7234))+(((-1.0)*x7233*x7238))+(((-1.0)*x7231))+(((-1.0)*r12*x7239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7240=((1.0)*cj5);
CheckValue<IkReal> x7241 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7241.valid){
continue;
}
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7240)))),-1);
if(!x7242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7241.value)+(((1.5707963267949)*(x7242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7243=IKsin(j4);
IkReal x7244=IKcos(j4);
IkReal x7245=((1.0)*sj0);
IkReal x7246=(cj5*r00);
IkReal x7247=(r11*sj5);
IkReal x7248=(cj5*r10);
IkReal x7249=(r21*sj5);
IkReal x7250=(cj5*r20);
IkReal x7251=(r01*sj5);
IkReal x7252=((1.0)*x7244);
IkReal x7253=((1.0)*x7243);
evalcond[0]=(((x7243*x7249))+(((-1.0)*r22*x7252))+(((-1.0)*x7250*x7253)));
evalcond[1]=(((x7244*x7250))+(((-1.0)*x7249*x7252))+(((-1.0)*r22*x7253)));
evalcond[2]=(cj0+(((-1.0)*r12*x7252))+((x7243*x7247))+(((-1.0)*x7248*x7253)));
evalcond[3]=(((x7243*x7251))+(((-1.0)*x7246*x7253))+(((-1.0)*r02*x7252))+(((-1.0)*x7245)));
evalcond[4]=((((-1.0)*x7251*x7252))+((x7244*x7246))+(((-1.0)*r02*x7253))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7247*x7252))+((x7244*x7248))+(((-1.0)*r12*x7253))+(((-1.0)*x7245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.19239088236925)*py))+(((-0.194110143641506)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.19239088236925)*px))+(((0.194110143641506)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.19239088236925)*py))+(((-0.194110143641506)*px))))+IKsqr(((((-1.19239088236925)*px))+(((0.194110143641506)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.19239088236925)*py))+(((-0.194110143641506)*px))), ((((-1.19239088236925)*px))+(((0.194110143641506)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7254=IKcos(j0);
IkReal x7255=IKsin(j0);
evalcond[0]=((((-0.817)*x7254))+(((-1.0)*px))+(((-0.133)*x7255)));
evalcond[1]=((((-0.817)*x7255))+(((-1.0)*py))+(((0.133)*x7254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7256=((1.0)*cj5);
IkReal x7257=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7256)));
j4eval[0]=x7257;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7256))))));
j4eval[2]=IKsign(x7257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7258=cj5*cj5;
IkReal x7259=((1.0)*r21);
IkReal x7260=(cj5*sj5);
IkReal x7261=((1.0)*r20);
IkReal x7262=((((-1.0)*r01*x7260*x7261))+((r01*r21))+(((-1.0)*r00*x7259*x7260))+(((-1.0)*r01*x7258*x7259))+((r02*r22))+((r00*r20*x7258)));
j4eval[0]=x7262;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7261)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7263=cj5*cj5;
IkReal x7264=(r21*sj5);
IkReal x7265=(r11*r21);
IkReal x7266=((1.0)*cj5*r20);
IkReal x7267=((((-1.0)*r11*sj5*x7266))+(((-1.0)*cj5*r10*x7264))+x7265+(((-1.0)*x7263*x7265))+((r12*r22))+((r10*r20*x7263)));
j4eval[0]=x7267;
j4eval[1]=((IKabs((((sj0*x7264))+(((-1.0)*sj0*x7266)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7268=cj5*cj5;
IkReal x7269=(r21*sj5);
IkReal x7270=(r11*r21);
IkReal x7271=((1.0)*cj5*r20);
CheckValue<IkReal> x7272 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7269))+(((-1.0)*sj0*x7271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7272.valid){
continue;
}
CheckValue<IkReal> x7273=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7269))+x7270+(((-1.0)*r11*sj5*x7271))+((r12*r22))+((r10*r20*x7268))+(((-1.0)*x7268*x7270)))),-1);
if(!x7273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7272.value)+(((1.5707963267949)*(x7273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7274=IKsin(j4);
IkReal x7275=IKcos(j4);
IkReal x7276=(r11*sj5);
IkReal x7277=(cj5*r00);
IkReal x7278=(cj5*r10);
IkReal x7279=(r21*sj5);
IkReal x7280=(cj5*r20);
IkReal x7281=(r01*sj5);
IkReal x7282=((1.0)*x7275);
IkReal x7283=((1.0)*x7274);
evalcond[0]=((((-1.0)*x7280*x7283))+((x7274*x7279))+(((-1.0)*r22*x7282)));
evalcond[1]=(((x7275*x7280))+(((-1.0)*x7279*x7282))+(((-1.0)*r22*x7283)));
evalcond[2]=(cj0+(((-1.0)*x7278*x7283))+(((-1.0)*r12*x7282))+((x7274*x7276)));
evalcond[3]=(cj0+((x7275*x7277))+(((-1.0)*x7281*x7282))+(((-1.0)*r02*x7283)));
evalcond[4]=(sj0+((x7275*x7278))+(((-1.0)*x7276*x7282))+(((-1.0)*r12*x7283)));
evalcond[5]=((((-1.0)*sj0))+((x7274*x7281))+(((-1.0)*x7277*x7283))+(((-1.0)*r02*x7282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7284=cj5*cj5;
IkReal x7285=((1.0)*r21);
IkReal x7286=(cj5*sj5);
IkReal x7287=((1.0)*r20);
CheckValue<IkReal> x7288 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7288.valid){
continue;
}
CheckValue<IkReal> x7289=IKPowWithIntegerCheck(IKsign((((r00*r20*x7284))+((r01*r21))+(((-1.0)*r00*x7285*x7286))+(((-1.0)*r01*x7284*x7285))+((r02*r22))+(((-1.0)*r01*x7286*x7287)))),-1);
if(!x7289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7288.value)+(((1.5707963267949)*(x7289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7290=IKsin(j4);
IkReal x7291=IKcos(j4);
IkReal x7292=(r11*sj5);
IkReal x7293=(cj5*r00);
IkReal x7294=(cj5*r10);
IkReal x7295=(r21*sj5);
IkReal x7296=(cj5*r20);
IkReal x7297=(r01*sj5);
IkReal x7298=((1.0)*x7291);
IkReal x7299=((1.0)*x7290);
evalcond[0]=((((-1.0)*r22*x7298))+(((-1.0)*x7296*x7299))+((x7290*x7295)));
evalcond[1]=((((-1.0)*r22*x7299))+(((-1.0)*x7295*x7298))+((x7291*x7296)));
evalcond[2]=(cj0+(((-1.0)*x7294*x7299))+((x7290*x7292))+(((-1.0)*r12*x7298)));
evalcond[3]=(cj0+(((-1.0)*r02*x7299))+((x7291*x7293))+(((-1.0)*x7297*x7298)));
evalcond[4]=(sj0+((x7291*x7294))+(((-1.0)*r12*x7299))+(((-1.0)*x7292*x7298)));
evalcond[5]=((((-1.0)*sj0))+((x7290*x7297))+(((-1.0)*r02*x7298))+(((-1.0)*x7293*x7299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7300=((1.0)*cj5);
CheckValue<IkReal> x7301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7300)))),-1);
if(!x7301.valid){
continue;
}
CheckValue<IkReal> x7302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7301.value)))+(x7302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7303=IKsin(j4);
IkReal x7304=IKcos(j4);
IkReal x7305=(r11*sj5);
IkReal x7306=(cj5*r00);
IkReal x7307=(cj5*r10);
IkReal x7308=(r21*sj5);
IkReal x7309=(cj5*r20);
IkReal x7310=(r01*sj5);
IkReal x7311=((1.0)*x7304);
IkReal x7312=((1.0)*x7303);
evalcond[0]=((((-1.0)*x7309*x7312))+((x7303*x7308))+(((-1.0)*r22*x7311)));
evalcond[1]=(((x7304*x7309))+(((-1.0)*x7308*x7311))+(((-1.0)*r22*x7312)));
evalcond[2]=(cj0+((x7303*x7305))+(((-1.0)*r12*x7311))+(((-1.0)*x7307*x7312)));
evalcond[3]=(cj0+((x7304*x7306))+(((-1.0)*x7310*x7311))+(((-1.0)*r02*x7312)));
evalcond[4]=(sj0+((x7304*x7307))+(((-1.0)*r12*x7312))+(((-1.0)*x7305*x7311)));
evalcond[5]=((((-1.0)*sj0))+((x7303*x7310))+(((-1.0)*x7306*x7312))+(((-1.0)*r02*x7311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.75737565235914)*py))+(((-7.08275641708382)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.75737565235914)*px))+(((7.08275641708382)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.75737565235914)*py))+(((-7.08275641708382)*px))))+IKsqr(((((-1.75737565235914)*px))+(((7.08275641708382)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.75737565235914)*py))+(((-7.08275641708382)*px))), ((((-1.75737565235914)*px))+(((7.08275641708382)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7313=IKcos(j0);
IkReal x7314=IKsin(j0);
evalcond[0]=((((-0.133)*x7314))+(((-1.0)*px))+(((-0.033)*x7313)));
evalcond[1]=((((-1.0)*py))+(((-0.033)*x7314))+(((0.133)*x7313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7315=((1.0)*cj5);
IkReal x7316=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7315)));
j4eval[0]=x7316;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7315))))));
j4eval[2]=IKsign(x7316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7317=((1.0)*cj5);
IkReal x7318=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7317)));
j4eval[0]=x7318;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7317))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7318);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7319=cj5*cj5;
IkReal x7320=((1.0)*sj5);
IkReal x7321=(cj5*r20);
IkReal x7322=(r11*r21);
IkReal x7323=(x7322+(((-1.0)*cj5*r10*r21*x7320))+((r12*r22))+((r10*r20*x7319))+(((-1.0)*x7319*x7322))+(((-1.0)*r11*x7320*x7321)));
j4eval[0]=x7323;
j4eval[1]=IKsign(x7323);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7320))+((cj0*x7321))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7324=cj5*cj5;
IkReal x7325=((1.0)*sj5);
IkReal x7326=(cj5*r20);
IkReal x7327=(r11*r21);
CheckValue<IkReal> x7328 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7325))+((cj0*x7326)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7328.valid){
continue;
}
CheckValue<IkReal> x7329=IKPowWithIntegerCheck(IKsign((x7327+(((-1.0)*x7324*x7327))+(((-1.0)*r11*x7325*x7326))+(((-1.0)*cj5*r10*r21*x7325))+((r12*r22))+((r10*r20*x7324)))),-1);
if(!x7329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7328.value)+(((1.5707963267949)*(x7329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7330=IKsin(j4);
IkReal x7331=IKcos(j4);
IkReal x7332=((1.0)*sj0);
IkReal x7333=(cj5*r00);
IkReal x7334=(r11*sj5);
IkReal x7335=(cj5*r10);
IkReal x7336=(r21*sj5);
IkReal x7337=(cj5*r20);
IkReal x7338=(r01*sj5);
IkReal x7339=((1.0)*x7331);
IkReal x7340=((1.0)*x7330);
evalcond[0]=((((-1.0)*x7337*x7340))+((x7330*x7336))+(((-1.0)*r22*x7339)));
evalcond[1]=((((-1.0)*r22*x7340))+(((-1.0)*x7336*x7339))+((x7331*x7337)));
evalcond[2]=(cj0+(((-1.0)*r12*x7339))+((x7330*x7334))+(((-1.0)*x7335*x7340)));
evalcond[3]=((((-1.0)*r02*x7339))+((x7330*x7338))+(((-1.0)*x7333*x7340))+(((-1.0)*x7332)));
evalcond[4]=((((-1.0)*x7338*x7339))+(((-1.0)*r02*x7340))+((x7331*x7333))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7340))+((x7331*x7335))+(((-1.0)*x7332))+(((-1.0)*x7334*x7339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7341=((1.0)*cj5);
CheckValue<IkReal> x7342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7341)))),-1);
if(!x7342.valid){
continue;
}
CheckValue<IkReal> x7343 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7342.value)))+(x7343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7344=IKsin(j4);
IkReal x7345=IKcos(j4);
IkReal x7346=((1.0)*sj0);
IkReal x7347=(cj5*r00);
IkReal x7348=(r11*sj5);
IkReal x7349=(cj5*r10);
IkReal x7350=(r21*sj5);
IkReal x7351=(cj5*r20);
IkReal x7352=(r01*sj5);
IkReal x7353=((1.0)*x7345);
IkReal x7354=((1.0)*x7344);
evalcond[0]=((((-1.0)*r22*x7353))+(((-1.0)*x7351*x7354))+((x7344*x7350)));
evalcond[1]=((((-1.0)*r22*x7354))+((x7345*x7351))+(((-1.0)*x7350*x7353)));
evalcond[2]=(cj0+((x7344*x7348))+(((-1.0)*r12*x7353))+(((-1.0)*x7349*x7354)));
evalcond[3]=(((x7344*x7352))+(((-1.0)*x7346))+(((-1.0)*r02*x7353))+(((-1.0)*x7347*x7354)));
evalcond[4]=(((x7345*x7347))+(((-1.0)*r02*x7354))+(((-1.0)*x7352*x7353))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7354))+((x7345*x7349))+(((-1.0)*x7346))+(((-1.0)*x7348*x7353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7355=((1.0)*cj5);
CheckValue<IkReal> x7356 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7356.valid){
continue;
}
CheckValue<IkReal> x7357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7355))+(((-1.0)*r00*sj5)))),-1);
if(!x7357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7356.value)+(((1.5707963267949)*(x7357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7358=IKsin(j4);
IkReal x7359=IKcos(j4);
IkReal x7360=((1.0)*sj0);
IkReal x7361=(cj5*r00);
IkReal x7362=(r11*sj5);
IkReal x7363=(cj5*r10);
IkReal x7364=(r21*sj5);
IkReal x7365=(cj5*r20);
IkReal x7366=(r01*sj5);
IkReal x7367=((1.0)*x7359);
IkReal x7368=((1.0)*x7358);
evalcond[0]=(((x7358*x7364))+(((-1.0)*x7365*x7368))+(((-1.0)*r22*x7367)));
evalcond[1]=(((x7359*x7365))+(((-1.0)*x7364*x7367))+(((-1.0)*r22*x7368)));
evalcond[2]=(cj0+(((-1.0)*x7363*x7368))+((x7358*x7362))+(((-1.0)*r12*x7367)));
evalcond[3]=(((x7358*x7366))+(((-1.0)*x7360))+(((-1.0)*r02*x7367))+(((-1.0)*x7361*x7368)));
evalcond[4]=(((x7359*x7361))+(((-1.0)*x7366*x7367))+(((-1.0)*r02*x7368))+(((-1.0)*cj0)));
evalcond[5]=(((x7359*x7363))+(((-1.0)*r12*x7368))+(((-1.0)*x7360))+(((-1.0)*x7362*x7367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7369=IKsin(j0);
IkReal x7370=IKcos(j0);
IkReal x7371=((1.0)*cj5);
IkReal x7372=((1.0)*sj5);
IkReal x7373=((0.099)*sj5);
IkReal x7374=((0.099)*cj5);
evalcond[0]=((((-1.0)*r01*x7371))+x7370+(((-1.0)*r00*x7372)));
evalcond[1]=(x7369+(((-1.0)*r11*x7371))+(((-1.0)*r10*x7372)));
evalcond[2]=((((-1.0)*r01*x7374))+(((-1.0)*px))+(((-0.133)*x7369))+(((-1.0)*r00*x7373)));
evalcond[3]=((((-1.0)*r11*x7374))+(((-1.0)*py))+(((0.133)*x7370))+(((-1.0)*r10*x7373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7375=((1.0)*sj5);
IkReal x7376=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7375)));
j4eval[0]=x7376;
j4eval[1]=IKsign(x7376);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7375))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7377=((1.0)*cj5);
IkReal x7378=((((-1.0)*r01*x7377))+(((-1.0)*r00*sj5)));
j4eval[0]=x7378;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7377)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7379=r21*r21;
IkReal x7380=cj5*cj5;
IkReal x7381=(r21*sj5);
IkReal x7382=(cj5*r20);
IkReal x7383=(((x7379*x7380))+(((2.0)*x7381*x7382))+(((-1.0)*(r22*r22)))+(((-1.0)*x7379))+(((-1.0)*x7380*(r20*r20))));
j4eval[0]=x7383;
j4eval[1]=((IKabs((x7381+(((-1.0)*x7382)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7384=r21*r21;
IkReal x7385=cj5*cj5;
IkReal x7386=(r21*sj5);
IkReal x7387=(cj5*r20);
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7385*(r20*r20)))+(((-1.0)*x7384))+(((2.0)*x7386*x7387))+((x7384*x7385))+(((-1.0)*(r22*r22))))),-1);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal(r22),IkReal((x7386+(((-1.0)*x7387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7388.value)))+(x7389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7390=IKsin(j4);
IkReal x7391=IKcos(j4);
IkReal x7392=(r11*sj5);
IkReal x7393=(r21*sj5);
IkReal x7394=(cj5*r00);
IkReal x7395=(cj5*r20);
IkReal x7396=(r01*sj5);
IkReal x7397=(cj5*r10);
IkReal x7398=((1.0)*x7391);
IkReal x7399=((1.0)*x7390);
evalcond[0]=((((-1.0)*r22*x7398))+(((-1.0)*x7395*x7399))+((x7390*x7393)));
evalcond[1]=((((-1.0)*r02*x7399))+(((-1.0)*x7396*x7398))+((x7391*x7394)));
evalcond[2]=((((-1.0)*r12*x7399))+(((-1.0)*x7392*x7398))+((x7391*x7397)));
evalcond[3]=((((-1.0)*r12*x7398))+cj0+(((-1.0)*x7397*x7399))+((x7390*x7392)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7399))+(((-1.0)*x7393*x7398))+((x7391*x7395)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7394*x7399))+(((-1.0)*r02*x7398))+((x7390*x7396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7400=((1.0)*cj5);
CheckValue<IkReal> x7401 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7401.valid){
continue;
}
CheckValue<IkReal> x7402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7400))+(((-1.0)*r00*sj5)))),-1);
if(!x7402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7401.value)+(((1.5707963267949)*(x7402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7403=IKsin(j4);
IkReal x7404=IKcos(j4);
IkReal x7405=(r11*sj5);
IkReal x7406=(r21*sj5);
IkReal x7407=(cj5*r00);
IkReal x7408=(cj5*r20);
IkReal x7409=(r01*sj5);
IkReal x7410=(cj5*r10);
IkReal x7411=((1.0)*x7404);
IkReal x7412=((1.0)*x7403);
evalcond[0]=(((x7403*x7406))+(((-1.0)*x7408*x7412))+(((-1.0)*r22*x7411)));
evalcond[1]=((((-1.0)*x7409*x7411))+((x7404*x7407))+(((-1.0)*r02*x7412)));
evalcond[2]=((((-1.0)*r12*x7412))+(((-1.0)*x7405*x7411))+((x7404*x7410)));
evalcond[3]=((((-1.0)*r12*x7411))+cj0+((x7403*x7405))+(((-1.0)*x7410*x7412)));
evalcond[4]=((-1.0)+((x7404*x7408))+(((-1.0)*r22*x7412))+(((-1.0)*x7406*x7411)));
evalcond[5]=((((-1.0)*sj0))+((x7403*x7409))+(((-1.0)*x7407*x7412))+(((-1.0)*r02*x7411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7413=((1.0)*sj5);
CheckValue<IkReal> x7414=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7413)))),-1);
if(!x7414.valid){
continue;
}
CheckValue<IkReal> x7415 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7413))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7414.value)))+(x7415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7416=IKsin(j4);
IkReal x7417=IKcos(j4);
IkReal x7418=(r11*sj5);
IkReal x7419=(r21*sj5);
IkReal x7420=(cj5*r00);
IkReal x7421=(cj5*r20);
IkReal x7422=(r01*sj5);
IkReal x7423=(cj5*r10);
IkReal x7424=((1.0)*x7417);
IkReal x7425=((1.0)*x7416);
evalcond[0]=((((-1.0)*x7421*x7425))+(((-1.0)*r22*x7424))+((x7416*x7419)));
evalcond[1]=((((-1.0)*x7422*x7424))+(((-1.0)*r02*x7425))+((x7417*x7420)));
evalcond[2]=((((-1.0)*r12*x7425))+(((-1.0)*x7418*x7424))+((x7417*x7423)));
evalcond[3]=(cj0+(((-1.0)*r12*x7424))+((x7416*x7418))+(((-1.0)*x7423*x7425)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7425))+(((-1.0)*x7419*x7424))+((x7417*x7421)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7424))+(((-1.0)*x7420*x7425))+((x7416*x7422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28767515012868)*py))+(((-0.776175497365088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.28767515012868)*px))+(((0.776175497365088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28767515012868)*py))+(((-0.776175497365088)*px))))+IKsqr(((((2.28767515012868)*px))+(((0.776175497365088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28767515012868)*py))+(((-0.776175497365088)*px))), ((((2.28767515012868)*px))+(((0.776175497365088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7426=IKsin(j0);
IkReal x7427=IKcos(j0);
evalcond[0]=((((0.392)*x7427))+(((-1.0)*px))+(((-0.133)*x7426)));
evalcond[1]=((((0.392)*x7426))+(((-1.0)*py))+(((0.133)*x7427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7428=((1.0)*cj5);
IkReal x7429=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7428)));
j4eval[0]=x7429;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7428))))));
j4eval[2]=IKsign(x7429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7430=((1.0)*cj5);
IkReal x7431=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7430)));
j4eval[0]=x7431;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7430))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7431);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7432=cj5*cj5;
IkReal x7433=((1.0)*sj5);
IkReal x7434=(cj5*r20);
IkReal x7435=(r11*r21);
IkReal x7436=((((-1.0)*cj5*r10*r21*x7433))+((r12*r22))+(((-1.0)*x7432*x7435))+((r10*r20*x7432))+x7435+(((-1.0)*r11*x7433*x7434)));
j4eval[0]=x7436;
j4eval[1]=IKsign(x7436);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7433))+((cj0*x7434)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7437=cj5*cj5;
IkReal x7438=((1.0)*sj5);
IkReal x7439=(cj5*r20);
IkReal x7440=(r11*r21);
CheckValue<IkReal> x7441=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7438))+((r12*r22))+((r10*r20*x7437))+x7440+(((-1.0)*r11*x7438*x7439))+(((-1.0)*x7437*x7440)))),-1);
if(!x7441.valid){
continue;
}
CheckValue<IkReal> x7442 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7438))+((cj0*x7439)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7441.value)))+(x7442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7443=IKsin(j4);
IkReal x7444=IKcos(j4);
IkReal x7445=((1.0)*sj0);
IkReal x7446=(cj5*r00);
IkReal x7447=(r11*sj5);
IkReal x7448=(cj5*r10);
IkReal x7449=(r21*sj5);
IkReal x7450=(cj5*r20);
IkReal x7451=(r01*sj5);
IkReal x7452=((1.0)*x7444);
IkReal x7453=((1.0)*x7443);
evalcond[0]=((((-1.0)*x7450*x7453))+((x7443*x7449))+(((-1.0)*r22*x7452)));
evalcond[1]=(((x7444*x7450))+(((-1.0)*x7449*x7452))+(((-1.0)*r22*x7453)));
evalcond[2]=(cj0+((x7443*x7447))+(((-1.0)*r12*x7452))+(((-1.0)*x7448*x7453)));
evalcond[3]=((((-1.0)*x7445))+((x7443*x7451))+(((-1.0)*x7446*x7453))+(((-1.0)*r02*x7452)));
evalcond[4]=(((x7444*x7446))+(((-1.0)*x7451*x7452))+(((-1.0)*r02*x7453))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7445))+((x7444*x7448))+(((-1.0)*x7447*x7452))+(((-1.0)*r12*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7454=((1.0)*cj5);
CheckValue<IkReal> x7455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7454)))),-1);
if(!x7455.valid){
continue;
}
CheckValue<IkReal> x7456 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7455.value)))+(x7456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7457=IKsin(j4);
IkReal x7458=IKcos(j4);
IkReal x7459=((1.0)*sj0);
IkReal x7460=(cj5*r00);
IkReal x7461=(r11*sj5);
IkReal x7462=(cj5*r10);
IkReal x7463=(r21*sj5);
IkReal x7464=(cj5*r20);
IkReal x7465=(r01*sj5);
IkReal x7466=((1.0)*x7458);
IkReal x7467=((1.0)*x7457);
evalcond[0]=(((x7457*x7463))+(((-1.0)*x7464*x7467))+(((-1.0)*r22*x7466)));
evalcond[1]=(((x7458*x7464))+(((-1.0)*r22*x7467))+(((-1.0)*x7463*x7466)));
evalcond[2]=(((x7457*x7461))+cj0+(((-1.0)*r12*x7466))+(((-1.0)*x7462*x7467)));
evalcond[3]=(((x7457*x7465))+(((-1.0)*x7459))+(((-1.0)*r02*x7466))+(((-1.0)*x7460*x7467)));
evalcond[4]=(((x7458*x7460))+(((-1.0)*r02*x7467))+(((-1.0)*x7465*x7466))+(((-1.0)*cj0)));
evalcond[5]=(((x7458*x7462))+(((-1.0)*x7459))+(((-1.0)*r12*x7467))+(((-1.0)*x7461*x7466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7468=((1.0)*cj5);
CheckValue<IkReal> x7469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7468)))),-1);
if(!x7469.valid){
continue;
}
CheckValue<IkReal> x7470 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7469.value)))+(x7470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7471=IKsin(j4);
IkReal x7472=IKcos(j4);
IkReal x7473=((1.0)*sj0);
IkReal x7474=(cj5*r00);
IkReal x7475=(r11*sj5);
IkReal x7476=(cj5*r10);
IkReal x7477=(r21*sj5);
IkReal x7478=(cj5*r20);
IkReal x7479=(r01*sj5);
IkReal x7480=((1.0)*x7472);
IkReal x7481=((1.0)*x7471);
evalcond[0]=((((-1.0)*x7478*x7481))+((x7471*x7477))+(((-1.0)*r22*x7480)));
evalcond[1]=(((x7472*x7478))+(((-1.0)*r22*x7481))+(((-1.0)*x7477*x7480)));
evalcond[2]=((((-1.0)*x7476*x7481))+cj0+((x7471*x7475))+(((-1.0)*r12*x7480)));
evalcond[3]=((((-1.0)*x7474*x7481))+(((-1.0)*x7473))+((x7471*x7479))+(((-1.0)*r02*x7480)));
evalcond[4]=((((-1.0)*x7479*x7480))+((x7472*x7474))+(((-1.0)*r02*x7481))+(((-1.0)*cj0)));
evalcond[5]=(((x7472*x7476))+(((-1.0)*x7475*x7480))+(((-1.0)*x7473))+(((-1.0)*r12*x7481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7482=((1.0)*sj5);
IkReal x7483=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7482))+(((-1.0)*r11*x7483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7483))+(((-1.0)*r00*x7482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7482))+(((-1.0)*r11*x7483))))+IKsqr(((((-1.0)*r01*x7483))+(((-1.0)*r00*x7482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7482))+(((-1.0)*r11*x7483))), ((((-1.0)*r01*x7483))+(((-1.0)*r00*x7482))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7484=IKsin(j0);
IkReal x7485=IKcos(j0);
IkReal x7486=((1.0)*cj5);
IkReal x7487=((1.0)*sj5);
IkReal x7488=((0.099)*sj5);
IkReal x7489=((0.099)*cj5);
evalcond[0]=((((-1.0)*x7485))+(((-1.0)*r01*x7486))+(((-1.0)*r00*x7487)));
evalcond[1]=((((-1.0)*x7484))+(((-1.0)*r10*x7487))+(((-1.0)*r11*x7486)));
evalcond[2]=((((-0.133)*x7484))+(((-1.0)*r01*x7489))+(((-1.0)*px))+(((-1.0)*r00*x7488)));
evalcond[3]=((((0.133)*x7485))+(((-1.0)*py))+(((-1.0)*r10*x7488))+(((-1.0)*r11*x7489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7490=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7490;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7491=((1.0)*cj5);
IkReal x7492=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7491)));
j4eval[0]=x7492;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7493=cj5*cj5;
IkReal x7494=r21*r21;
IkReal x7495=(r21*sj5);
IkReal x7496=(cj5*r20);
IkReal x7497=((((-1.0)*x7493*x7494))+(r22*r22)+((x7493*(r20*r20)))+x7494+(((-2.0)*x7495*x7496)));
j4eval[0]=x7497;
j4eval[1]=IKsign(x7497);
j4eval[2]=((IKabs(((((-1.0)*x7496))+x7495)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7498=cj5*cj5;
IkReal x7499=r21*r21;
IkReal x7500=(r21*sj5);
IkReal x7501=(cj5*r20);
CheckValue<IkReal> x7502=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7498*x7499))+((x7498*(r20*r20)))+(r22*r22)+(((-2.0)*x7500*x7501))+x7499)),-1);
if(!x7502.valid){
continue;
}
CheckValue<IkReal> x7503 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7501))+x7500)),IKFAST_ATAN2_MAGTHRESH);
if(!x7503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7502.value)))+(x7503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7504=IKsin(j4);
IkReal x7505=IKcos(j4);
IkReal x7506=(r11*sj5);
IkReal x7507=(r21*sj5);
IkReal x7508=(cj5*r00);
IkReal x7509=(cj5*r20);
IkReal x7510=(r01*sj5);
IkReal x7511=(cj5*r10);
IkReal x7512=((1.0)*x7505);
IkReal x7513=((1.0)*x7504);
evalcond[0]=(((x7504*x7507))+(((-1.0)*x7509*x7513))+(((-1.0)*r22*x7512)));
evalcond[1]=(((x7505*x7508))+(((-1.0)*x7510*x7512))+(((-1.0)*r02*x7513)));
evalcond[2]=(((x7505*x7511))+(((-1.0)*x7506*x7512))+(((-1.0)*r12*x7513)));
evalcond[3]=(cj0+((x7504*x7506))+(((-1.0)*x7511*x7513))+(((-1.0)*r12*x7512)));
evalcond[4]=((1.0)+((x7505*x7509))+(((-1.0)*x7507*x7512))+(((-1.0)*r22*x7513)));
evalcond[5]=((((-1.0)*sj0))+((x7504*x7510))+(((-1.0)*x7508*x7513))+(((-1.0)*r02*x7512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7514=((1.0)*cj5);
CheckValue<IkReal> x7515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7514))+(((-1.0)*r00*sj5)))),-1);
if(!x7515.valid){
continue;
}
CheckValue<IkReal> x7516 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7515.value)))+(x7516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7517=IKsin(j4);
IkReal x7518=IKcos(j4);
IkReal x7519=(r11*sj5);
IkReal x7520=(r21*sj5);
IkReal x7521=(cj5*r00);
IkReal x7522=(cj5*r20);
IkReal x7523=(r01*sj5);
IkReal x7524=(cj5*r10);
IkReal x7525=((1.0)*x7518);
IkReal x7526=((1.0)*x7517);
evalcond[0]=((((-1.0)*x7522*x7526))+((x7517*x7520))+(((-1.0)*r22*x7525)));
evalcond[1]=(((x7518*x7521))+(((-1.0)*x7523*x7525))+(((-1.0)*r02*x7526)));
evalcond[2]=(((x7518*x7524))+(((-1.0)*x7519*x7525))+(((-1.0)*r12*x7526)));
evalcond[3]=(cj0+((x7517*x7519))+(((-1.0)*x7524*x7526))+(((-1.0)*r12*x7525)));
evalcond[4]=((1.0)+((x7518*x7522))+(((-1.0)*x7520*x7525))+(((-1.0)*r22*x7526)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7525))+(((-1.0)*x7521*x7526))+((x7517*x7523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
CheckValue<IkReal> x7528=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7527.value)+(((1.5707963267949)*(x7528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7529=IKsin(j4);
IkReal x7530=IKcos(j4);
IkReal x7531=(r11*sj5);
IkReal x7532=(r21*sj5);
IkReal x7533=(cj5*r00);
IkReal x7534=(cj5*r20);
IkReal x7535=(r01*sj5);
IkReal x7536=(cj5*r10);
IkReal x7537=((1.0)*x7530);
IkReal x7538=((1.0)*x7529);
evalcond[0]=((((-1.0)*r22*x7537))+(((-1.0)*x7534*x7538))+((x7529*x7532)));
evalcond[1]=(((x7530*x7533))+(((-1.0)*x7535*x7537))+(((-1.0)*r02*x7538)));
evalcond[2]=((((-1.0)*r12*x7538))+((x7530*x7536))+(((-1.0)*x7531*x7537)));
evalcond[3]=(cj0+(((-1.0)*r12*x7537))+(((-1.0)*x7536*x7538))+((x7529*x7531)));
evalcond[4]=((1.0)+(((-1.0)*x7532*x7537))+((x7530*x7534))+(((-1.0)*r22*x7538)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7533*x7538))+((x7529*x7535))+(((-1.0)*r02*x7537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.776175497365088)*px))+(((-2.28767515012868)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.776175497365088)*py))+(((-2.28767515012868)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.776175497365088)*px))+(((-2.28767515012868)*py))))+IKsqr(((((0.776175497365088)*py))+(((-2.28767515012868)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.776175497365088)*px))+(((-2.28767515012868)*py))), ((((0.776175497365088)*py))+(((-2.28767515012868)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7539=IKcos(j0);
IkReal x7540=IKsin(j0);
evalcond[0]=((((-0.392)*x7539))+(((-1.0)*px))+(((-0.133)*x7540)));
evalcond[1]=((((-0.392)*x7540))+(((0.133)*x7539))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7541=((1.0)*cj5);
IkReal x7542=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7541)));
j4eval[0]=x7542;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7541))))));
j4eval[2]=IKsign(x7542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7543=cj5*cj5;
IkReal x7544=((1.0)*r21);
IkReal x7545=(cj5*sj5);
IkReal x7546=((1.0)*r20);
IkReal x7547=(((r00*r20*x7543))+(((-1.0)*r01*x7545*x7546))+((r01*r21))+(((-1.0)*r00*x7544*x7545))+((r02*r22))+(((-1.0)*r01*x7543*x7544)));
j4eval[0]=x7547;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7546))))));
j4eval[2]=IKsign(x7547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7548=cj5*cj5;
IkReal x7549=(r21*sj5);
IkReal x7550=(r11*r21);
IkReal x7551=((1.0)*cj5*r20);
IkReal x7552=((((-1.0)*r11*sj5*x7551))+((r10*r20*x7548))+(((-1.0)*x7548*x7550))+((r12*r22))+x7550+(((-1.0)*cj5*r10*x7549)));
j4eval[0]=x7552;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7549))+(((-1.0)*sj0*x7551))))));
j4eval[2]=IKsign(x7552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7553=cj5*cj5;
IkReal x7554=(r21*sj5);
IkReal x7555=(r11*r21);
IkReal x7556=((1.0)*cj5*r20);
CheckValue<IkReal> x7557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7556))+((r10*r20*x7553))+(((-1.0)*x7553*x7555))+((r12*r22))+x7555+(((-1.0)*cj5*r10*x7554)))),-1);
if(!x7557.valid){
continue;
}
CheckValue<IkReal> x7558 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7554))+(((-1.0)*sj0*x7556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7557.value)))+(x7558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7559=IKsin(j4);
IkReal x7560=IKcos(j4);
IkReal x7561=(r11*sj5);
IkReal x7562=(cj5*r00);
IkReal x7563=(cj5*r10);
IkReal x7564=(r21*sj5);
IkReal x7565=(cj5*r20);
IkReal x7566=(r01*sj5);
IkReal x7567=((1.0)*x7560);
IkReal x7568=((1.0)*x7559);
evalcond[0]=((((-1.0)*x7565*x7568))+(((-1.0)*r22*x7567))+((x7559*x7564)));
evalcond[1]=((((-1.0)*x7564*x7567))+(((-1.0)*r22*x7568))+((x7560*x7565)));
evalcond[2]=((((-1.0)*x7563*x7568))+cj0+((x7559*x7561))+(((-1.0)*r12*x7567)));
evalcond[3]=((((-1.0)*r02*x7568))+cj0+(((-1.0)*x7566*x7567))+((x7560*x7562)));
evalcond[4]=(sj0+((x7560*x7563))+(((-1.0)*r12*x7568))+(((-1.0)*x7561*x7567)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7562*x7568))+(((-1.0)*r02*x7567))+((x7559*x7566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7569=cj5*cj5;
IkReal x7570=((1.0)*r21);
IkReal x7571=(cj5*sj5);
IkReal x7572=((1.0)*r20);
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(IKsign((((r00*r20*x7569))+((r01*r21))+(((-1.0)*r01*x7571*x7572))+((r02*r22))+(((-1.0)*r01*x7569*x7570))+(((-1.0)*r00*x7570*x7571)))),-1);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7573.value)))+(x7574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7575=IKsin(j4);
IkReal x7576=IKcos(j4);
IkReal x7577=(r11*sj5);
IkReal x7578=(cj5*r00);
IkReal x7579=(cj5*r10);
IkReal x7580=(r21*sj5);
IkReal x7581=(cj5*r20);
IkReal x7582=(r01*sj5);
IkReal x7583=((1.0)*x7576);
IkReal x7584=((1.0)*x7575);
evalcond[0]=((((-1.0)*r22*x7583))+(((-1.0)*x7581*x7584))+((x7575*x7580)));
evalcond[1]=(((x7576*x7581))+(((-1.0)*r22*x7584))+(((-1.0)*x7580*x7583)));
evalcond[2]=(cj0+((x7575*x7577))+(((-1.0)*r12*x7583))+(((-1.0)*x7579*x7584)));
evalcond[3]=(cj0+((x7576*x7578))+(((-1.0)*r02*x7584))+(((-1.0)*x7582*x7583)));
evalcond[4]=(sj0+((x7576*x7579))+(((-1.0)*x7577*x7583))+(((-1.0)*r12*x7584)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7583))+(((-1.0)*x7578*x7584))+((x7575*x7582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7585=((1.0)*cj5);
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7585))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
CheckValue<IkReal> x7587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7585))+(((-1.0)*r00*sj5)))),-1);
if(!x7587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7586.value)+(((1.5707963267949)*(x7587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7588=IKsin(j4);
IkReal x7589=IKcos(j4);
IkReal x7590=(r11*sj5);
IkReal x7591=(cj5*r00);
IkReal x7592=(cj5*r10);
IkReal x7593=(r21*sj5);
IkReal x7594=(cj5*r20);
IkReal x7595=(r01*sj5);
IkReal x7596=((1.0)*x7589);
IkReal x7597=((1.0)*x7588);
evalcond[0]=(((x7588*x7593))+(((-1.0)*r22*x7596))+(((-1.0)*x7594*x7597)));
evalcond[1]=(((x7589*x7594))+(((-1.0)*r22*x7597))+(((-1.0)*x7593*x7596)));
evalcond[2]=(((x7588*x7590))+(((-1.0)*x7592*x7597))+cj0+(((-1.0)*r12*x7596)));
evalcond[3]=(cj0+((x7589*x7591))+(((-1.0)*x7595*x7596))+(((-1.0)*r02*x7597)));
evalcond[4]=(sj0+(((-1.0)*x7590*x7596))+(((-1.0)*r12*x7597))+((x7589*x7592)));
evalcond[5]=(((x7588*x7595))+(((-1.0)*sj0))+(((-1.0)*x7591*x7597))+(((-1.0)*r02*x7596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7598=cj1*cj1;
IkReal x7599=(cj1*sj2);
IkReal x7600=(r00*sj5);
IkReal x7601=(cj2*sj1);
IkReal x7602=(cj2*sj2);
IkReal x7603=(cj1*sj1);
IkReal x7604=(cj5*r01);
IkReal x7605=((1000.0)*py);
IkReal x7606=((99.0)*cj5*r11);
IkReal x7607=((99.0)*r10*sj5);
CheckValue<IkReal> x7608=IKPowWithIntegerCheck(((((-784.0)*cj1*cj2*x7601))+(((-784.0)*x7598*x7602))+(((392.0)*x7602))+(((392.0)*x7603))+(((-425.0)*cj1*x7601))+(((-425.0)*sj2*x7598))),-1);
if(!x7608.valid){
continue;
}
CheckValue<IkReal> x7609=IKPowWithIntegerCheck(((((-1.0)*x7599))+(((-1.0)*x7601))),-1);
if(!x7609.valid){
continue;
}
if( IKabs(((x7608.value)*(((((-1.0)*x7601*x7607))+(((-1.0)*x7601*x7606))+(((-1.0)*x7601*x7605))+(((-133.0)*x7600))+(((-133.0)*x7604))+(((-1.0)*x7599*x7607))+(((-1.0)*x7599*x7606))+(((-1.0)*x7599*x7605)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7609.value)*((x7604+x7600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7608.value)*(((((-1.0)*x7601*x7607))+(((-1.0)*x7601*x7606))+(((-1.0)*x7601*x7605))+(((-133.0)*x7600))+(((-133.0)*x7604))+(((-1.0)*x7599*x7607))+(((-1.0)*x7599*x7606))+(((-1.0)*x7599*x7605))))))+IKsqr(((x7609.value)*((x7604+x7600))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7608.value)*(((((-1.0)*x7601*x7607))+(((-1.0)*x7601*x7606))+(((-1.0)*x7601*x7605))+(((-133.0)*x7600))+(((-133.0)*x7604))+(((-1.0)*x7599*x7607))+(((-1.0)*x7599*x7606))+(((-1.0)*x7599*x7605))))), ((x7609.value)*((x7604+x7600))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7610=IKcos(j0);
IkReal x7611=IKsin(j0);
IkReal x7612=(r00*sj5);
IkReal x7613=((1.0)*cj5);
IkReal x7614=(r10*sj5);
IkReal x7615=((1.0)*cj2);
IkReal x7616=((0.392)*sj2);
IkReal x7617=((0.425)*cj1);
IkReal x7618=((0.099)*cj5);
IkReal x7619=((1.0)*cj1*sj2);
IkReal x7620=((0.392)*cj1*cj2);
IkReal x7621=(sj1*x7610);
IkReal x7622=(sj1*x7611);
evalcond[0]=((((-1.0)*x7615*x7621))+(((-1.0)*x7610*x7619))+(((-1.0)*r01*x7613))+(((-1.0)*x7612)));
evalcond[1]=((((-1.0)*x7615*x7622))+(((-1.0)*r11*x7613))+(((-1.0)*x7611*x7619))+(((-1.0)*x7614)));
evalcond[2]=((((-1.0)*x7616*x7621))+(((-0.099)*x7612))+(((-1.0)*r01*x7618))+(((-0.133)*x7611))+(((-1.0)*px))+((x7610*x7620))+((x7610*x7617)));
evalcond[3]=((((-1.0)*x7616*x7622))+(((0.133)*x7610))+(((-1.0)*r11*x7618))+(((-0.099)*x7614))+(((-1.0)*py))+((x7611*x7620))+((x7611*x7617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7623=((1.0)*cj5);
IkReal x7624=((((-1.0)*r01*x7623))+(((-1.0)*r00*sj5)));
j4eval[0]=x7624;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7623)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7625=((1.0)*cj5);
IkReal x7626=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7625)));
j4eval[0]=x7626;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7625))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7627=((1.0)*sj0);
IkReal x7628=((1.0)*cj0);
IkReal x7629=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7629;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x7627))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7628))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r12*x7627))+(((-1.0)*r02*x7628))))));
j4eval[2]=IKsign(x7629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7630=((-1.0)*r20);
IkReal x7632 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7632)==0){
continue;
}
IkReal x7631=pow(x7632,-0.5);
CheckValue<IkReal> x7633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7630),IKFAST_ATAN2_MAGTHRESH);
if(!x7633.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7633.value));
IkReal gconst133=(r21*x7631);
IkReal gconst134=(x7630*x7631);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7635=((-1.0)*r20);
IkReal x7636=x7631;
CheckValue<IkReal> x7638 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7635),IKFAST_ATAN2_MAGTHRESH);
if(!x7638.valid){
continue;
}
IkReal x7637=((-1.0)*(x7638.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7637;
IkReal gconst132=x7637;
IkReal gconst133=(r21*x7636);
IkReal gconst134=(x7635*x7636);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7639=((-1.0)*r20);
IkReal x7640=x7631;
CheckValue<IkReal> x7642 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7639),IKFAST_ATAN2_MAGTHRESH);
if(!x7642.valid){
continue;
}
IkReal x7641=((-1.0)*(x7642.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7641;
IkReal gconst132=x7641;
IkReal gconst133=(r21*x7640);
IkReal gconst134=(x7639*x7640);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7643=((-1.0)*r20);
IkReal x7644=x7631;
CheckValue<IkReal> x7646 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7643),IKFAST_ATAN2_MAGTHRESH);
if(!x7646.valid){
continue;
}
IkReal x7645=((-1.0)*(x7646.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7645;
IkReal gconst132=x7645;
IkReal gconst133=(r21*x7644);
IkReal gconst134=(x7643*x7644);
IkReal x7647=r22*r22;
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7647))),-1);
if(!x7650.valid){
continue;
}
IkReal x7648=x7650.value;
IkReal x7649=(((x7648*(r20*r20*r20*r20)))+((x7648*(r21*r21*r21*r21)))+(((2.0)*x7648*(r20*r20)*(r21*r21)))+x7647);
j4eval[0]=x7649;
j4eval[1]=IKsign(x7649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7651=(gconst133*r21);
IkReal x7652=(cj1*sj2);
IkReal x7653=(gconst134*r20);
IkReal x7654=(cj2*sj1);
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7651*x7653))+(x7651*x7651)+(x7653*x7653))),-1);
if(!x7655.valid){
continue;
}
CheckValue<IkReal> x7656 = IKatan2WithCheck(IkReal((((r22*x7652))+((r22*x7654)))),IkReal((((x7651*x7652))+((x7651*x7654))+(((-1.0)*x7653*x7654))+(((-1.0)*x7652*x7653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7655.value)))+(x7656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7657=IKsin(j4);
IkReal x7658=IKcos(j4);
IkReal x7659=(sj1*sj2);
IkReal x7660=(gconst133*r11);
IkReal x7661=(gconst133*r21);
IkReal x7662=(gconst133*r01);
IkReal x7663=((1.0)*x7658);
IkReal x7664=(gconst134*x7658);
IkReal x7665=((1.0)*x7657);
IkReal x7666=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7665))+(((-1.0)*r22*x7663))+((x7657*x7661)));
evalcond[1]=((((-1.0)*gconst134*r10*x7665))+(((-1.0)*r12*x7663))+cj0+((x7657*x7660)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7663))+(((-1.0)*gconst134*r00*x7665))+((x7657*x7662)));
evalcond[3]=(((cj2*sj1))+((r20*x7664))+((cj1*sj2))+(((-1.0)*r22*x7665))+(((-1.0)*x7661*x7663)));
evalcond[4]=((((-1.0)*cj0*x7666))+((r00*x7664))+(((-1.0)*r02*x7665))+((cj0*x7659))+(((-1.0)*x7662*x7663)));
evalcond[5]=((((-1.0)*r12*x7665))+((r10*x7664))+(((-1.0)*x7660*x7663))+(((-1.0)*sj0*x7666))+((sj0*x7659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7667=((1.0)*gconst134);
CheckValue<IkReal> x7668 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7667))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7668.valid){
continue;
}
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7667)))),-1);
if(!x7669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7668.value)+(((1.5707963267949)*(x7669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7670=IKsin(j4);
IkReal x7671=IKcos(j4);
IkReal x7672=(sj1*sj2);
IkReal x7673=(gconst133*r11);
IkReal x7674=(gconst133*r21);
IkReal x7675=(gconst133*r01);
IkReal x7676=((1.0)*x7671);
IkReal x7677=(gconst134*x7671);
IkReal x7678=((1.0)*x7670);
IkReal x7679=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7678))+((x7670*x7674))+(((-1.0)*r22*x7676)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7678))+(((-1.0)*r12*x7676))+((x7670*x7673)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7676))+(((-1.0)*gconst134*r00*x7678))+((x7670*x7675)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7674*x7676))+((cj1*sj2))+((r20*x7677))+(((-1.0)*r22*x7678)));
evalcond[4]=((((-1.0)*r02*x7678))+(((-1.0)*cj0*x7679))+((cj0*x7672))+((r00*x7677))+(((-1.0)*x7675*x7676)));
evalcond[5]=(((sj0*x7672))+(((-1.0)*sj0*x7679))+(((-1.0)*x7673*x7676))+(((-1.0)*r12*x7678))+((r10*x7677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7680=((1.0)*gconst134);
CheckValue<IkReal> x7681=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7680)))),-1);
if(!x7681.valid){
continue;
}
CheckValue<IkReal> x7682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x7680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7681.value)))+(x7682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7683=IKsin(j4);
IkReal x7684=IKcos(j4);
IkReal x7685=(sj1*sj2);
IkReal x7686=(gconst133*r11);
IkReal x7687=(gconst133*r21);
IkReal x7688=(gconst133*r01);
IkReal x7689=((1.0)*x7684);
IkReal x7690=(gconst134*x7684);
IkReal x7691=((1.0)*x7683);
IkReal x7692=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7691))+(((-1.0)*r22*x7689))+((x7683*x7687)));
evalcond[1]=((((-1.0)*gconst134*r10*x7691))+cj0+((x7683*x7686))+(((-1.0)*r12*x7689)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7691))+((x7683*x7688))+(((-1.0)*r02*x7689)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7687*x7689))+((cj1*sj2))+(((-1.0)*r22*x7691))+((r20*x7690)));
evalcond[4]=((((-1.0)*r02*x7691))+(((-1.0)*cj0*x7692))+((cj0*x7685))+((r00*x7690))+(((-1.0)*x7688*x7689)));
evalcond[5]=(((sj0*x7685))+((r10*x7690))+(((-1.0)*x7686*x7689))+(((-1.0)*r12*x7691))+(((-1.0)*sj0*x7692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7693=((-1.0)*r21);
IkReal x7695 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7695)==0){
continue;
}
IkReal x7694=pow(x7695,-0.5);
CheckValue<IkReal> x7696 = IKatan2WithCheck(IkReal(x7693),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7696.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7696.value))));
IkReal gconst136=(x7693*x7694);
IkReal gconst137=((1.0)*r20*x7694);
CheckValue<IkReal> x7697 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7697.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7697.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7698=((-1.0)*r21);
CheckValue<IkReal> x7701 = IKatan2WithCheck(IkReal(x7698),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7701.valid){
continue;
}
IkReal x7699=((1.0)*(x7701.value));
IkReal x7700=x7694;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7699)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7699)));
IkReal gconst136=(x7698*x7700);
IkReal gconst137=((1.0)*r20*x7700);
IkReal x7702=r22*r22;
IkReal x7703=((1.0)*x7702);
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(((-1.0)+x7702),-1);
if(!x7707.valid){
continue;
}
IkReal x7704=x7707.value;
if((((1.0)+(((-1.0)*x7703)))) < -0.00001)
continue;
IkReal x7705=IKsqrt(((1.0)+(((-1.0)*x7703))));
IkReal x7706=(cj0*x7704*x7705);
j4eval[0]=((IKabs(((((-1.0)*x7703*x7706))+x7706)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7708=((-1.0)*r21);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(x7708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal x7709=((1.0)*(x7711.value));
IkReal x7710=x7694;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7709)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7709)));
IkReal gconst136=(x7708*x7710);
IkReal gconst137=((1.0)*r20*x7710);
IkReal x7712=r22*r22;
IkReal x7713=((1.0)*x7712);
CheckValue<IkReal> x7717=IKPowWithIntegerCheck(((-1.0)+x7712),-1);
if(!x7717.valid){
continue;
}
IkReal x7714=x7717.value;
if((((1.0)+(((-1.0)*x7713)))) < -0.00001)
continue;
IkReal x7715=IKsqrt(((1.0)+(((-1.0)*x7713))));
IkReal x7716=(sj0*x7714*x7715);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7716+(((-1.0)*x7713*x7716))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7718=((-1.0)*r21);
CheckValue<IkReal> x7721 = IKatan2WithCheck(IkReal(x7718),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7721.valid){
continue;
}
IkReal x7719=((1.0)*(x7721.value));
IkReal x7720=x7694;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7719)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7719)));
IkReal gconst136=(x7718*x7720);
IkReal gconst137=((1.0)*r20*x7720);
IkReal x7722=r22*r22;
IkReal x7723=(r12*sj0);
IkReal x7724=(cj0*r02);
CheckValue<IkReal> x7728=IKPowWithIntegerCheck(((-1.0)+x7722),-1);
if(!x7728.valid){
continue;
}
IkReal x7725=x7728.value;
if((((1.0)+(((-1.0)*x7722)))) < -0.00001)
continue;
IkReal x7726=IKsqrt(((1.0)+(((-1.0)*x7722))));
IkReal x7727=(r22*x7725*x7726);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7724))+(((-1.0)*x7723)))))+(IKabs((((x7724*x7727))+((x7723*x7727))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7729=((1.0)*sj0);
IkReal x7730=((1.0)*cj0);
CheckValue<IkReal> x7731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7731.valid){
continue;
}
CheckValue<IkReal> x7732 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7730))+(((-1.0)*r12*x7729)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7729))+(((-1.0)*gconst136*r01*x7730))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7731.value)))+(x7732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7733=IKsin(j4);
IkReal x7734=IKcos(j4);
IkReal x7735=(gconst136*r01);
IkReal x7736=(gconst137*r10);
IkReal x7737=(sj1*sj2);
IkReal x7738=(gconst137*r20);
IkReal x7739=(gconst136*r11);
IkReal x7740=(gconst136*r21);
IkReal x7741=(gconst137*r00);
IkReal x7742=((1.0)*x7734);
IkReal x7743=((1.0)*cj1*cj2);
IkReal x7744=((1.0)*x7733);
evalcond[0]=((((-1.0)*r22*x7742))+((x7733*x7740))+(((-1.0)*x7738*x7744)));
evalcond[1]=(((x7733*x7739))+cj0+(((-1.0)*r12*x7742))+(((-1.0)*x7736*x7744)));
evalcond[2]=((((-1.0)*sj0))+((x7733*x7735))+(((-1.0)*r02*x7742))+(((-1.0)*x7741*x7744)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7744))+((cj1*sj2))+(((-1.0)*x7740*x7742))+((x7734*x7738)));
evalcond[4]=((((-1.0)*r02*x7744))+((cj0*x7737))+(((-1.0)*x7735*x7742))+(((-1.0)*cj0*x7743))+((x7734*x7741)));
evalcond[5]=((((-1.0)*x7739*x7742))+(((-1.0)*r12*x7744))+((sj0*x7737))+((x7734*x7736))+(((-1.0)*sj0*x7743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7745=((1.0)*gconst137);
CheckValue<IkReal> x7746=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7745)))),-1);
if(!x7746.valid){
continue;
}
CheckValue<IkReal> x7747 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7745))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7746.value)))+(x7747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7748=IKsin(j4);
IkReal x7749=IKcos(j4);
IkReal x7750=(gconst136*r01);
IkReal x7751=(gconst137*r10);
IkReal x7752=(sj1*sj2);
IkReal x7753=(gconst137*r20);
IkReal x7754=(gconst136*r11);
IkReal x7755=(gconst136*r21);
IkReal x7756=(gconst137*r00);
IkReal x7757=((1.0)*x7749);
IkReal x7758=((1.0)*cj1*cj2);
IkReal x7759=((1.0)*x7748);
evalcond[0]=((((-1.0)*r22*x7757))+(((-1.0)*x7753*x7759))+((x7748*x7755)));
evalcond[1]=(cj0+(((-1.0)*r12*x7757))+((x7748*x7754))+(((-1.0)*x7751*x7759)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7757))+(((-1.0)*x7756*x7759))+((x7748*x7750)));
evalcond[3]=((((-1.0)*r22*x7759))+((cj2*sj1))+(((-1.0)*x7755*x7757))+((cj1*sj2))+((x7749*x7753)));
evalcond[4]=((((-1.0)*r02*x7759))+(((-1.0)*cj0*x7758))+((cj0*x7752))+((x7749*x7756))+(((-1.0)*x7750*x7757)));
evalcond[5]=((((-1.0)*x7754*x7757))+((sj0*x7752))+(((-1.0)*r12*x7759))+((x7749*x7751))+(((-1.0)*sj0*x7758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7760=((1.0)*gconst137);
CheckValue<IkReal> x7761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7760))+(((-1.0)*gconst136*r00)))),-1);
if(!x7761.valid){
continue;
}
CheckValue<IkReal> x7762 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7761.value)))+(x7762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7763=IKsin(j4);
IkReal x7764=IKcos(j4);
IkReal x7765=(gconst136*r01);
IkReal x7766=(gconst137*r10);
IkReal x7767=(sj1*sj2);
IkReal x7768=(gconst137*r20);
IkReal x7769=(gconst136*r11);
IkReal x7770=(gconst136*r21);
IkReal x7771=(gconst137*r00);
IkReal x7772=((1.0)*x7764);
IkReal x7773=((1.0)*cj1*cj2);
IkReal x7774=((1.0)*x7763);
evalcond[0]=((((-1.0)*r22*x7772))+(((-1.0)*x7768*x7774))+((x7763*x7770)));
evalcond[1]=((((-1.0)*x7766*x7774))+cj0+((x7763*x7769))+(((-1.0)*r12*x7772)));
evalcond[2]=((((-1.0)*x7771*x7774))+(((-1.0)*r02*x7772))+(((-1.0)*sj0))+((x7763*x7765)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7774))+((cj1*sj2))+((x7764*x7768))+(((-1.0)*x7770*x7772)));
evalcond[4]=((((-1.0)*r02*x7774))+(((-1.0)*cj0*x7773))+((x7764*x7771))+((cj0*x7767))+(((-1.0)*x7765*x7772)));
evalcond[5]=((((-1.0)*x7769*x7772))+((sj0*x7767))+((x7764*x7766))+(((-1.0)*sj0*x7773))+(((-1.0)*r12*x7774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7775=((-1.0)*r10);
IkReal x7777 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7777)==0){
continue;
}
IkReal x7776=pow(x7777,-0.5);
CheckValue<IkReal> x7778 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7775),IKFAST_ATAN2_MAGTHRESH);
if(!x7778.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7778.value));
IkReal gconst139=(r11*x7776);
IkReal gconst140=(x7775*x7776);
CheckValue<IkReal> x7779 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7779.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7779.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7780=((-1.0)*r10);
IkReal x7781=x7776;
CheckValue<IkReal> x7783 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7780),IKFAST_ATAN2_MAGTHRESH);
if(!x7783.valid){
continue;
}
IkReal x7782=((-1.0)*(x7783.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7782;
IkReal gconst138=x7782;
IkReal gconst139=(r11*x7781);
IkReal gconst140=(x7780*x7781);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7784=((1.0)*sj0);
IkReal x7785=((1.0)*gconst139);
CheckValue<IkReal> x7786 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7784)))),IkReal(((((-1.0)*gconst139*r11*x7784))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7785))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7786.valid){
continue;
}
CheckValue<IkReal> x7787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7785)))),-1);
if(!x7787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7786.value)+(((1.5707963267949)*(x7787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7788=IKsin(j4);
IkReal x7789=IKcos(j4);
IkReal x7790=(gconst140*r00);
IkReal x7791=(sj1*sj2);
IkReal x7792=(gconst139*r11);
IkReal x7793=(gconst139*r01);
IkReal x7794=(gconst139*r21);
IkReal x7795=((1.0)*x7789);
IkReal x7796=((1.0)*x7788);
IkReal x7797=((1.0)*cj1*cj2);
IkReal x7798=(gconst140*x7789);
evalcond[0]=((((-1.0)*r22*x7795))+((x7788*x7794))+(((-1.0)*gconst140*r20*x7796)));
evalcond[1]=(((x7788*x7792))+cj0+(((-1.0)*r12*x7795))+(((-1.0)*gconst140*r10*x7796)));
evalcond[2]=((((-1.0)*sj0))+((x7788*x7793))+(((-1.0)*x7790*x7796))+(((-1.0)*r02*x7795)));
evalcond[3]=((((-1.0)*r22*x7796))+((cj2*sj1))+((cj1*sj2))+((r20*x7798))+(((-1.0)*x7794*x7795)));
evalcond[4]=((((-1.0)*cj0*x7797))+(((-1.0)*x7793*x7795))+((x7789*x7790))+((cj0*x7791))+(((-1.0)*r02*x7796)));
evalcond[5]=(((r10*x7798))+(((-1.0)*x7792*x7795))+(((-1.0)*r12*x7796))+(((-1.0)*sj0*x7797))+((sj0*x7791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7799=((1.0)*gconst140);
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7799)))),-1);
if(!x7801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7800.value)+(((1.5707963267949)*(x7801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7802=IKsin(j4);
IkReal x7803=IKcos(j4);
IkReal x7804=(gconst140*r00);
IkReal x7805=(sj1*sj2);
IkReal x7806=(gconst139*r11);
IkReal x7807=(gconst139*r01);
IkReal x7808=(gconst139*r21);
IkReal x7809=((1.0)*x7803);
IkReal x7810=((1.0)*x7802);
IkReal x7811=((1.0)*cj1*cj2);
IkReal x7812=(gconst140*x7803);
evalcond[0]=(((x7802*x7808))+(((-1.0)*r22*x7809))+(((-1.0)*gconst140*r20*x7810)));
evalcond[1]=(((x7802*x7806))+(((-1.0)*gconst140*r10*x7810))+cj0+(((-1.0)*r12*x7809)));
evalcond[2]=(((x7802*x7807))+(((-1.0)*sj0))+(((-1.0)*r02*x7809))+(((-1.0)*x7804*x7810)));
evalcond[3]=(((cj2*sj1))+((r20*x7812))+((cj1*sj2))+(((-1.0)*r22*x7810))+(((-1.0)*x7808*x7809)));
evalcond[4]=(((cj0*x7805))+((x7803*x7804))+(((-1.0)*x7807*x7809))+(((-1.0)*r02*x7810))+(((-1.0)*cj0*x7811)));
evalcond[5]=(((r10*x7812))+((sj0*x7805))+(((-1.0)*r12*x7810))+(((-1.0)*sj0*x7811))+(((-1.0)*x7806*x7809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7813=((-1.0)*r11);
IkReal x7815 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7815)==0){
continue;
}
IkReal x7814=pow(x7815,-0.5);
CheckValue<IkReal> x7816 = IKatan2WithCheck(IkReal(x7813),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7816.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7816.value))));
IkReal gconst142=(x7813*x7814);
IkReal gconst143=((1.0)*r10*x7814);
CheckValue<IkReal> x7817 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7817.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7817.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7818=((-1.0)*r11);
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(x7818),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
IkReal x7819=((1.0)*(x7821.value));
IkReal x7820=x7814;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7819)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7819)));
IkReal gconst142=(x7818*x7820);
IkReal gconst143=((1.0)*r10*x7820);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7822=((-1.0)*r11);
CheckValue<IkReal> x7825 = IKatan2WithCheck(IkReal(x7822),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7825.valid){
continue;
}
IkReal x7823=((1.0)*(x7825.value));
IkReal x7824=x7814;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7823)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7823)));
IkReal gconst142=(x7822*x7824);
IkReal gconst143=((1.0)*r10*x7824);
IkReal x7826=r12*r12;
IkReal x7827=((1.0)*sj0);
IkReal x7828=(cj0*r02);
IkReal x7829=x7814;
j4eval[0]=((IKabs(((((-1.0)*x7828))+(((-1.0)*r12*x7827)))))+(IKabs(((((-1.0)*x7827*x7829))+((r12*x7828*x7829))+((sj0*x7826*x7829))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7830=((-1.0)*r11);
CheckValue<IkReal> x7833 = IKatan2WithCheck(IkReal(x7830),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7833.valid){
continue;
}
IkReal x7831=((1.0)*(x7833.value));
IkReal x7832=x7814;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7831)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7831)));
IkReal gconst142=(x7830*x7832);
IkReal gconst143=((1.0)*r10*x7832);
IkReal x7834=r12*r12;
IkReal x7835=(cj1*r22*sj2);
IkReal x7836=(cj2*r22*sj1);
CheckValue<IkReal> x7840=IKPowWithIntegerCheck(((-1.0)+x7834),-1);
if(!x7840.valid){
continue;
}
IkReal x7837=x7840.value;
if((((1.0)+(((-1.0)*x7834)))) < -0.00001)
continue;
IkReal x7838=IKsqrt(((1.0)+(((-1.0)*x7834))));
IkReal x7839=((1.0)*r12*x7837*x7838);
j4eval[0]=((IKabs(((((-1.0)*x7836*x7839))+(((-1.0)*x7835*x7839)))))+(IKabs((x7835+x7836))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7841=(gconst142*r21);
IkReal x7842=(cj1*sj2);
IkReal x7843=(cj2*sj1);
IkReal x7844=(gconst143*r20);
CheckValue<IkReal> x7845 = IKatan2WithCheck(IkReal((((r22*x7843))+((r22*x7842)))),IkReal(((((-1.0)*x7842*x7844))+(((-1.0)*x7843*x7844))+((x7841*x7842))+((x7841*x7843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7845.valid){
continue;
}
CheckValue<IkReal> x7846=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7844*x7844)+(((-2.0)*x7841*x7844))+(x7841*x7841))),-1);
if(!x7846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7845.value)+(((1.5707963267949)*(x7846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7847=IKsin(j4);
IkReal x7848=IKcos(j4);
IkReal x7849=(sj1*sj2);
IkReal x7850=(gconst143*r20);
IkReal x7851=((1.0)*x7848);
IkReal x7852=((1.0)*cj1*cj2);
IkReal x7853=((1.0)*x7847);
IkReal x7854=(gconst142*x7847);
IkReal x7855=(gconst143*x7848);
evalcond[0]=((((-1.0)*x7850*x7853))+((r21*x7854))+(((-1.0)*r22*x7851)));
evalcond[1]=(((r11*x7854))+cj0+(((-1.0)*gconst143*r10*x7853))+(((-1.0)*r12*x7851)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7854))+(((-1.0)*r02*x7851))+(((-1.0)*gconst143*r00*x7853)));
evalcond[3]=(((cj2*sj1))+((x7848*x7850))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7851))+(((-1.0)*r22*x7853)));
evalcond[4]=((((-1.0)*cj0*x7852))+((cj0*x7849))+((r00*x7855))+(((-1.0)*r02*x7853))+(((-1.0)*gconst142*r01*x7851)));
evalcond[5]=((((-1.0)*sj0*x7852))+(((-1.0)*gconst142*r11*x7851))+((r10*x7855))+(((-1.0)*r12*x7853))+((sj0*x7849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7856=((1.0)*sj0);
IkReal x7857=((1.0)*gconst142);
CheckValue<IkReal> x7858=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7857)))),-1);
if(!x7858.valid){
continue;
}
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7856)))),IkReal(((((-1.0)*gconst142*r11*x7856))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7857))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7858.value)))+(x7859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7860=IKsin(j4);
IkReal x7861=IKcos(j4);
IkReal x7862=(sj1*sj2);
IkReal x7863=(gconst143*r20);
IkReal x7864=((1.0)*x7861);
IkReal x7865=((1.0)*cj1*cj2);
IkReal x7866=((1.0)*x7860);
IkReal x7867=(gconst142*x7860);
IkReal x7868=(gconst143*x7861);
evalcond[0]=((((-1.0)*x7863*x7866))+((r21*x7867))+(((-1.0)*r22*x7864)));
evalcond[1]=(cj0+((r11*x7867))+(((-1.0)*r12*x7864))+(((-1.0)*gconst143*r10*x7866)));
evalcond[2]=((((-1.0)*gconst143*r00*x7866))+(((-1.0)*sj0))+((r01*x7867))+(((-1.0)*r02*x7864)));
evalcond[3]=(((cj2*sj1))+((x7861*x7863))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7864))+(((-1.0)*r22*x7866)));
evalcond[4]=(((cj0*x7862))+(((-1.0)*gconst142*r01*x7864))+((r00*x7868))+(((-1.0)*r02*x7866))+(((-1.0)*cj0*x7865)));
evalcond[5]=(((sj0*x7862))+(((-1.0)*r12*x7866))+(((-1.0)*sj0*x7865))+((r10*x7868))+(((-1.0)*gconst142*r11*x7864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7869=((1.0)*gconst143);
CheckValue<IkReal> x7870 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7869))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7870.valid){
continue;
}
CheckValue<IkReal> x7871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7869))+(((-1.0)*gconst142*r00)))),-1);
if(!x7871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7870.value)+(((1.5707963267949)*(x7871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7872=IKsin(j4);
IkReal x7873=IKcos(j4);
IkReal x7874=(sj1*sj2);
IkReal x7875=(gconst143*r20);
IkReal x7876=((1.0)*x7873);
IkReal x7877=((1.0)*cj1*cj2);
IkReal x7878=((1.0)*x7872);
IkReal x7879=(gconst142*x7872);
IkReal x7880=(gconst143*x7873);
evalcond[0]=((((-1.0)*r22*x7876))+(((-1.0)*x7875*x7878))+((r21*x7879)));
evalcond[1]=(cj0+((r11*x7879))+(((-1.0)*r12*x7876))+(((-1.0)*gconst143*r10*x7878)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7879))+(((-1.0)*r02*x7876))+(((-1.0)*gconst143*r00*x7878)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7878))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7876))+((x7873*x7875)));
evalcond[4]=(((cj0*x7874))+((r00*x7880))+(((-1.0)*gconst142*r01*x7876))+(((-1.0)*r02*x7878))+(((-1.0)*cj0*x7877)));
evalcond[5]=((((-1.0)*gconst142*r11*x7876))+((r10*x7880))+(((-1.0)*r12*x7878))+((sj0*x7874))+(((-1.0)*sj0*x7877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7881=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7881;
j4eval[1]=IKsign(x7881);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7882=((1.0)*cj5);
IkReal x7883=((((-1.0)*r01*x7882))+(((-1.0)*r00*sj5)));
j4eval[0]=x7883;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7882))))));
j4eval[2]=IKsign(x7883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7884=cj5*cj5;
IkReal x7885=r11*r11;
IkReal x7886=(r11*sj5);
IkReal x7887=(cj5*r10);
IkReal x7888=((r12*r12)+((x7884*(r10*r10)))+x7885+(((-2.0)*x7886*x7887))+(((-1.0)*x7884*x7885)));
j4eval[0]=x7888;
j4eval[1]=IKsign(x7888);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7886))+x7887))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7889=cj5*cj5;
IkReal x7890=r11*r11;
IkReal x7891=(cj5*r10);
IkReal x7892=(r11*sj5);
CheckValue<IkReal> x7893 = IKatan2WithCheck(IkReal((x7891+(((-1.0)*x7892)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7893.valid){
continue;
}
CheckValue<IkReal> x7894=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7890+((x7889*(r10*r10)))+(((-1.0)*x7889*x7890))+(((-2.0)*x7891*x7892)))),-1);
if(!x7894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7893.value)+(((1.5707963267949)*(x7894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7895=IKsin(j4);
IkReal x7896=IKcos(j4);
IkReal x7897=(cj5*r10);
IkReal x7898=(r01*sj5);
IkReal x7899=(cj5*r00);
IkReal x7900=(cj5*r20);
IkReal x7901=((1.0)*x7896);
IkReal x7902=((1.0)*x7895);
IkReal x7903=(sj5*x7895);
evalcond[0]=(((r21*x7903))+(((-1.0)*r22*x7901))+(((-1.0)*x7900*x7902)));
evalcond[1]=((((-1.0)*x7899*x7902))+((x7895*x7898))+(((-1.0)*r02*x7901)));
evalcond[2]=((((-1.0)*r12*x7902))+((x7896*x7897))+(((-1.0)*r11*sj5*x7901)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7901))+(((-1.0)*x7897*x7902))+((r11*x7903)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7902))+((x7896*x7900))+(((-1.0)*r21*sj5*x7901)));
evalcond[5]=((((-1.0)*x7898*x7901))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7896*x7899))+(((-1.0)*r02*x7902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7904=((1.0)*cj5);
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7904))+(((-1.0)*r00*sj5)))),-1);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7905.value)+(((1.5707963267949)*(x7906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKsin(j4);
IkReal x7908=IKcos(j4);
IkReal x7909=(cj5*r10);
IkReal x7910=(r01*sj5);
IkReal x7911=(cj5*r00);
IkReal x7912=(cj5*r20);
IkReal x7913=((1.0)*x7908);
IkReal x7914=((1.0)*x7907);
IkReal x7915=(sj5*x7907);
evalcond[0]=(((r21*x7915))+(((-1.0)*r22*x7913))+(((-1.0)*x7912*x7914)));
evalcond[1]=((((-1.0)*r02*x7913))+(((-1.0)*x7911*x7914))+((x7907*x7910)));
evalcond[2]=(((x7908*x7909))+(((-1.0)*r11*sj5*x7913))+(((-1.0)*r12*x7914)));
evalcond[3]=((1.0)+((r11*x7915))+(((-1.0)*r12*x7913))+(((-1.0)*x7909*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7914))+(((-1.0)*r21*sj5*x7913))+((x7908*x7912)));
evalcond[5]=((((-1.0)*r02*x7914))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7910*x7913))+((x7908*x7911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7916=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7916.valid){
continue;
}
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7916.value)))+(x7917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7918=IKsin(j4);
IkReal x7919=IKcos(j4);
IkReal x7920=(cj5*r10);
IkReal x7921=(r01*sj5);
IkReal x7922=(cj5*r00);
IkReal x7923=(cj5*r20);
IkReal x7924=((1.0)*x7919);
IkReal x7925=((1.0)*x7918);
IkReal x7926=(sj5*x7918);
evalcond[0]=((((-1.0)*r22*x7924))+(((-1.0)*x7923*x7925))+((r21*x7926)));
evalcond[1]=((((-1.0)*r02*x7924))+(((-1.0)*x7922*x7925))+((x7918*x7921)));
evalcond[2]=((((-1.0)*r11*sj5*x7924))+(((-1.0)*r12*x7925))+((x7919*x7920)));
evalcond[3]=((1.0)+(((-1.0)*x7920*x7925))+(((-1.0)*r12*x7924))+((r11*x7926)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7925))+(((-1.0)*r21*sj5*x7924))+((x7919*x7923)));
evalcond[5]=((((-1.0)*x7921*x7924))+(((-1.0)*r02*x7925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7919*x7922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7927=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7927;
j4eval[1]=IKsign(x7927);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7928=((1.0)*cj5);
IkReal x7929=((((-1.0)*r21*x7928))+(((-1.0)*r20*sj5)));
j4eval[0]=x7929;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7928))))));
j4eval[2]=IKsign(x7929);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7930=cj5*cj5;
IkReal x7931=r11*r11;
IkReal x7932=(cj5*r10);
IkReal x7933=(r11*sj5);
IkReal x7934=(((x7930*x7931))+(((-1.0)*x7930*(r10*r10)))+(((-1.0)*x7931))+(((2.0)*x7932*x7933))+(((-1.0)*(r12*r12))));
j4eval[0]=x7934;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7933))+x7932))));
j4eval[2]=IKsign(x7934);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7935=cj5*cj5;
IkReal x7936=r11*r11;
IkReal x7937=(cj5*r10);
IkReal x7938=(r11*sj5);
CheckValue<IkReal> x7939 = IKatan2WithCheck(IkReal(((((-1.0)*x7938))+x7937)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7939.valid){
continue;
}
CheckValue<IkReal> x7940=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7935*(r10*r10)))+(((-1.0)*x7936))+(((-1.0)*(r12*r12)))+(((2.0)*x7937*x7938))+((x7935*x7936)))),-1);
if(!x7940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7939.value)+(((1.5707963267949)*(x7940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7941=IKsin(j4);
IkReal x7942=IKcos(j4);
IkReal x7943=(cj5*r10);
IkReal x7944=(r01*sj5);
IkReal x7945=(cj5*r00);
IkReal x7946=(cj5*r20);
IkReal x7947=((1.0)*x7942);
IkReal x7948=((1.0)*x7941);
IkReal x7949=(sj5*x7941);
evalcond[0]=(((r21*x7949))+(((-1.0)*r22*x7947))+(((-1.0)*x7946*x7948)));
evalcond[1]=((((-1.0)*r02*x7947))+((x7941*x7944))+(((-1.0)*x7945*x7948)));
evalcond[2]=((((-1.0)*r11*sj5*x7947))+(((-1.0)*r12*x7948))+((x7942*x7943)));
evalcond[3]=((-1.0)+((r11*x7949))+(((-1.0)*r12*x7947))+(((-1.0)*x7943*x7948)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7948))+(((-1.0)*r21*sj5*x7947))+((cj1*sj2))+((x7942*x7946)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7948))+((x7942*x7945))+(((-1.0)*x7944*x7947))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7950=((1.0)*cj5);
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
CheckValue<IkReal> x7952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7950))+(((-1.0)*r20*sj5)))),-1);
if(!x7952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7951.value)+(((1.5707963267949)*(x7952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7953=IKsin(j4);
IkReal x7954=IKcos(j4);
IkReal x7955=(cj5*r10);
IkReal x7956=(r01*sj5);
IkReal x7957=(cj5*r00);
IkReal x7958=(cj5*r20);
IkReal x7959=((1.0)*x7954);
IkReal x7960=((1.0)*x7953);
IkReal x7961=(sj5*x7953);
evalcond[0]=(((r21*x7961))+(((-1.0)*r22*x7959))+(((-1.0)*x7958*x7960)));
evalcond[1]=((((-1.0)*x7957*x7960))+(((-1.0)*r02*x7959))+((x7953*x7956)));
evalcond[2]=((((-1.0)*r11*sj5*x7959))+((x7954*x7955))+(((-1.0)*r12*x7960)));
evalcond[3]=((-1.0)+((r11*x7961))+(((-1.0)*x7955*x7960))+(((-1.0)*r12*x7959)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7960))+((cj1*sj2))+((x7954*x7958))+(((-1.0)*r21*sj5*x7959)));
evalcond[5]=((((-1.0)*x7956*x7959))+(((-1.0)*sj1*sj2))+((x7954*x7957))+(((-1.0)*r02*x7960))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
CheckValue<IkReal> x7963=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7962.value)+(((1.5707963267949)*(x7963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7964=IKsin(j4);
IkReal x7965=IKcos(j4);
IkReal x7966=(cj5*r10);
IkReal x7967=(r01*sj5);
IkReal x7968=(cj5*r00);
IkReal x7969=(cj5*r20);
IkReal x7970=((1.0)*x7965);
IkReal x7971=((1.0)*x7964);
IkReal x7972=(sj5*x7964);
evalcond[0]=((((-1.0)*r22*x7970))+(((-1.0)*x7969*x7971))+((r21*x7972)));
evalcond[1]=(((x7964*x7967))+(((-1.0)*x7968*x7971))+(((-1.0)*r02*x7970)));
evalcond[2]=(((x7965*x7966))+(((-1.0)*r11*sj5*x7970))+(((-1.0)*r12*x7971)));
evalcond[3]=((-1.0)+(((-1.0)*x7966*x7971))+((r11*x7972))+(((-1.0)*r12*x7970)));
evalcond[4]=(((cj2*sj1))+((x7965*x7969))+(((-1.0)*r22*x7971))+((cj1*sj2))+(((-1.0)*r21*sj5*x7970)));
evalcond[5]=(((x7965*x7968))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7971))+(((-1.0)*x7967*x7970))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7973=((-1.0)*r00);
IkReal x7975 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7975)==0){
continue;
}
IkReal x7974=pow(x7975,-0.5);
CheckValue<IkReal> x7976 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7973),IKFAST_ATAN2_MAGTHRESH);
if(!x7976.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7976.value));
IkReal gconst145=(r01*x7974);
IkReal gconst146=(x7973*x7974);
CheckValue<IkReal> x7977 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7977.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7978=((-1.0)*r00);
IkReal x7979=x7974;
CheckValue<IkReal> x7981 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7978),IKFAST_ATAN2_MAGTHRESH);
if(!x7981.valid){
continue;
}
IkReal x7980=((-1.0)*(x7981.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7980;
IkReal gconst144=x7980;
IkReal gconst145=(r01*x7979);
IkReal gconst146=(x7978*x7979);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7982=((1.0)*sj0);
IkReal x7983=((1.0)*gconst145);
CheckValue<IkReal> x7984 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7982))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7982))+(((-1.0)*cj0*r01*x7983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7984.valid){
continue;
}
CheckValue<IkReal> x7985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7983))+(((-1.0)*gconst146*r21)))),-1);
if(!x7985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7984.value)+(((1.5707963267949)*(x7985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7986=IKsin(j4);
IkReal x7987=IKcos(j4);
IkReal x7988=(gconst146*r10);
IkReal x7989=(sj1*sj2);
IkReal x7990=(gconst146*r20);
IkReal x7991=(gconst146*r00);
IkReal x7992=((1.0)*x7987);
IkReal x7993=((1.0)*x7986);
IkReal x7994=(gconst145*x7986);
IkReal x7995=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x7990*x7993))+((r21*x7994))+(((-1.0)*r22*x7992)));
evalcond[1]=(((r11*x7994))+(((-1.0)*r12*x7992))+cj0+(((-1.0)*x7988*x7993)));
evalcond[2]=((((-1.0)*x7991*x7993))+(((-1.0)*sj0))+((r01*x7994))+(((-1.0)*r02*x7992)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x7992))+((cj1*sj2))+(((-1.0)*r22*x7993))+((x7987*x7990)));
evalcond[4]=((((-1.0)*gconst145*r01*x7992))+((cj0*x7989))+(((-1.0)*cj0*x7995))+(((-1.0)*r02*x7993))+((x7987*x7991)));
evalcond[5]=((((-1.0)*r12*x7993))+(((-1.0)*gconst145*r11*x7992))+((sj0*x7989))+(((-1.0)*sj0*x7995))+((x7987*x7988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7996=((1.0)*gconst146);
CheckValue<IkReal> x7997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7996))+(((-1.0)*gconst145*r10)))),-1);
if(!x7997.valid){
continue;
}
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7996))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7997.value)))+(x7998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7999=IKsin(j4);
IkReal x8000=IKcos(j4);
IkReal x8001=(gconst146*r10);
IkReal x8002=(sj1*sj2);
IkReal x8003=(gconst146*r20);
IkReal x8004=(gconst146*r00);
IkReal x8005=((1.0)*x8000);
IkReal x8006=((1.0)*x7999);
IkReal x8007=(gconst145*x7999);
IkReal x8008=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8007))+(((-1.0)*x8003*x8006))+(((-1.0)*r22*x8005)));
evalcond[1]=(cj0+((r11*x8007))+(((-1.0)*r12*x8005))+(((-1.0)*x8001*x8006)));
evalcond[2]=(((r01*x8007))+(((-1.0)*sj0))+(((-1.0)*x8004*x8006))+(((-1.0)*r02*x8005)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8005))+((x8000*x8003))+((cj1*sj2))+(((-1.0)*r22*x8006)));
evalcond[4]=((((-1.0)*cj0*x8008))+((x8000*x8004))+((cj0*x8002))+(((-1.0)*gconst145*r01*x8005))+(((-1.0)*r02*x8006)));
evalcond[5]=(((sj0*x8002))+((x8000*x8001))+(((-1.0)*gconst145*r11*x8005))+(((-1.0)*r12*x8006))+(((-1.0)*sj0*x8008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8009=((-1.0)*r01);
IkReal x8011 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8011)==0){
continue;
}
IkReal x8010=pow(x8011,-0.5);
CheckValue<IkReal> x8012 = IKatan2WithCheck(IkReal(x8009),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8012.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8012.value))));
IkReal gconst148=(x8009*x8010);
IkReal gconst149=((1.0)*r00*x8010);
CheckValue<IkReal> x8013 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8013.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8013.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8014=((-1.0)*r01);
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(x8014),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
IkReal x8015=((1.0)*(x8017.value));
IkReal x8016=x8010;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8015)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8015)));
IkReal gconst148=(x8014*x8016);
IkReal gconst149=((1.0)*r00*x8016);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8018=((-1.0)*r01);
CheckValue<IkReal> x8021 = IKatan2WithCheck(IkReal(x8018),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8021.valid){
continue;
}
IkReal x8019=((1.0)*(x8021.value));
IkReal x8020=x8010;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8019)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8019)));
IkReal gconst148=(x8018*x8020);
IkReal gconst149=((1.0)*r00*x8020);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8022=((-1.0)*r01);
CheckValue<IkReal> x8025 = IKatan2WithCheck(IkReal(x8022),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8025.valid){
continue;
}
IkReal x8023=((1.0)*(x8025.value));
IkReal x8024=x8010;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8023)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8023)));
IkReal gconst148=(x8022*x8024);
IkReal gconst149=((1.0)*r00*x8024);
IkReal x8026=r02*r02;
IkReal x8027=(r12*sj0);
IkReal x8028=((1.0)*cj0);
IkReal x8029=x8010;
j4eval[0]=((IKabs((((r02*x8027*x8029))+((cj0*x8026*x8029))+(((-1.0)*x8028*x8029)))))+(IKabs(((((-1.0)*x8027))+(((-1.0)*r02*x8028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8030=((1.0)*sj0);
IkReal x8031=((1.0)*gconst148);
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8030))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8031))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
CheckValue<IkReal> x8033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8031))+(((-1.0)*gconst149*r21)))),-1);
if(!x8033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8032.value)+(((1.5707963267949)*(x8033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8034=IKsin(j4);
IkReal x8035=IKcos(j4);
IkReal x8036=(gconst148*r11);
IkReal x8037=(sj1*sj2);
IkReal x8038=((1.0)*x8035);
IkReal x8039=(gconst149*x8035);
IkReal x8040=(gconst148*x8034);
IkReal x8041=((1.0)*cj1*cj2);
IkReal x8042=((1.0)*x8034);
evalcond[0]=((((-1.0)*gconst149*r20*x8042))+((r21*x8040))+(((-1.0)*r22*x8038)));
evalcond[1]=(((x8034*x8036))+cj0+(((-1.0)*r12*x8038))+(((-1.0)*gconst149*r10*x8042)));
evalcond[2]=(((r01*x8040))+(((-1.0)*sj0))+(((-1.0)*r02*x8038))+(((-1.0)*gconst149*r00*x8042)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8038))+((cj1*sj2))+((r20*x8039))+(((-1.0)*r22*x8042)));
evalcond[4]=((((-1.0)*cj0*x8041))+(((-1.0)*gconst148*r01*x8038))+((cj0*x8037))+(((-1.0)*r02*x8042))+((r00*x8039)));
evalcond[5]=(((r10*x8039))+((sj0*x8037))+(((-1.0)*sj0*x8041))+(((-1.0)*x8036*x8038))+(((-1.0)*r12*x8042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8043=((1.0)*gconst149);
CheckValue<IkReal> x8044 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8043))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8044.valid){
continue;
}
CheckValue<IkReal> x8045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8043))+(((-1.0)*gconst148*r10)))),-1);
if(!x8045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8044.value)+(((1.5707963267949)*(x8045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8046=IKsin(j4);
IkReal x8047=IKcos(j4);
IkReal x8048=(gconst148*r11);
IkReal x8049=(sj1*sj2);
IkReal x8050=((1.0)*x8047);
IkReal x8051=(gconst149*x8047);
IkReal x8052=(gconst148*x8046);
IkReal x8053=((1.0)*cj1*cj2);
IkReal x8054=((1.0)*x8046);
evalcond[0]=((((-1.0)*gconst149*r20*x8054))+(((-1.0)*r22*x8050))+((r21*x8052)));
evalcond[1]=((((-1.0)*r12*x8050))+cj0+(((-1.0)*gconst149*r10*x8054))+((x8046*x8048)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8050))+(((-1.0)*gconst149*r00*x8054))+((r01*x8052)));
evalcond[3]=(((cj2*sj1))+((r20*x8051))+(((-1.0)*gconst148*r21*x8050))+((cj1*sj2))+(((-1.0)*r22*x8054)));
evalcond[4]=(((r00*x8051))+(((-1.0)*gconst148*r01*x8050))+(((-1.0)*r02*x8054))+((cj0*x8049))+(((-1.0)*cj0*x8053)));
evalcond[5]=((((-1.0)*r12*x8054))+(((-1.0)*sj0*x8053))+((r10*x8051))+((sj0*x8049))+(((-1.0)*x8048*x8050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8055=((1.0)*gconst149);
CheckValue<IkReal> x8056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8056.valid){
continue;
}
CheckValue<IkReal> x8057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8055)))),-1);
if(!x8057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8056.value)+(((1.5707963267949)*(x8057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8058=IKsin(j4);
IkReal x8059=IKcos(j4);
IkReal x8060=(gconst148*r11);
IkReal x8061=(sj1*sj2);
IkReal x8062=((1.0)*x8059);
IkReal x8063=(gconst149*x8059);
IkReal x8064=(gconst148*x8058);
IkReal x8065=((1.0)*cj1*cj2);
IkReal x8066=((1.0)*x8058);
evalcond[0]=(((r21*x8064))+(((-1.0)*gconst149*r20*x8066))+(((-1.0)*r22*x8062)));
evalcond[1]=(cj0+(((-1.0)*r12*x8062))+((x8058*x8060))+(((-1.0)*gconst149*r10*x8066)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8064))+(((-1.0)*gconst149*r00*x8066))+(((-1.0)*r02*x8062)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8062))+((r20*x8063))+(((-1.0)*r22*x8066)));
evalcond[4]=((((-1.0)*cj0*x8065))+((r00*x8063))+((cj0*x8061))+(((-1.0)*gconst148*r01*x8062))+(((-1.0)*r02*x8066)));
evalcond[5]=(((r10*x8063))+(((-1.0)*sj0*x8065))+(((-1.0)*r12*x8066))+(((-1.0)*x8060*x8062))+((sj0*x8061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8067=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8067;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8068=((1.0)*cj5);
IkReal x8069=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8068)));
j4eval[0]=x8069;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8068)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8070=cj5*cj5;
IkReal x8071=r01*r01;
IkReal x8072=(r01*sj5);
IkReal x8073=(cj5*r00);
IkReal x8074=((((-1.0)*x8071))+(((-1.0)*x8070*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8070*x8071))+(((2.0)*x8072*x8073)));
j4eval[0]=x8074;
j4eval[1]=IKsign(x8074);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8072))+x8073))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8075=cj5*cj5;
IkReal x8076=r01*r01;
IkReal x8077=(r01*sj5);
IkReal x8078=(cj5*r00);
CheckValue<IkReal> x8079=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8076))+((x8075*x8076))+(((2.0)*x8077*x8078))+(((-1.0)*(r02*r02)))+(((-1.0)*x8075*(r00*r00))))),-1);
if(!x8079.valid){
continue;
}
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal(((((-1.0)*x8077))+x8078)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8079.value)))+(x8080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8081=IKsin(j4);
IkReal x8082=IKcos(j4);
IkReal x8083=(cj5*r10);
IkReal x8084=(r01*sj5);
IkReal x8085=(cj5*r00);
IkReal x8086=(cj5*r20);
IkReal x8087=((1.0)*x8082);
IkReal x8088=((1.0)*x8081);
IkReal x8089=(sj5*x8081);
evalcond[0]=((((-1.0)*x8086*x8088))+((r21*x8089))+(((-1.0)*r22*x8087)));
evalcond[1]=((((-1.0)*x8083*x8088))+((r11*x8089))+(((-1.0)*r12*x8087)));
evalcond[2]=((((-1.0)*r02*x8088))+((x8082*x8085))+(((-1.0)*x8084*x8087)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8087))+((x8081*x8084))+(((-1.0)*x8085*x8088)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8087))+((cj1*sj2))+((x8082*x8086))+(((-1.0)*r22*x8088)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8087))+((x8082*x8083))+(((-1.0)*r12*x8088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8090=((1.0)*cj5);
CheckValue<IkReal> x8091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8090)))),-1);
if(!x8091.valid){
continue;
}
CheckValue<IkReal> x8092 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8091.value)))+(x8092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8093=IKsin(j4);
IkReal x8094=IKcos(j4);
IkReal x8095=(cj5*r10);
IkReal x8096=(r01*sj5);
IkReal x8097=(cj5*r00);
IkReal x8098=(cj5*r20);
IkReal x8099=((1.0)*x8094);
IkReal x8100=((1.0)*x8093);
IkReal x8101=(sj5*x8093);
evalcond[0]=((((-1.0)*x8098*x8100))+(((-1.0)*r22*x8099))+((r21*x8101)));
evalcond[1]=(((r11*x8101))+(((-1.0)*x8095*x8100))+(((-1.0)*r12*x8099)));
evalcond[2]=((((-1.0)*r02*x8100))+((x8094*x8097))+(((-1.0)*x8096*x8099)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8099))+((x8093*x8096))+(((-1.0)*x8097*x8100)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8099))+((cj1*sj2))+(((-1.0)*r22*x8100))+((x8094*x8098)));
evalcond[5]=((((-1.0)*r11*sj5*x8099))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8094*x8095))+(((-1.0)*r12*x8100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8102=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8102.value)))+(x8103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8104=IKsin(j4);
IkReal x8105=IKcos(j4);
IkReal x8106=(cj5*r10);
IkReal x8107=(r01*sj5);
IkReal x8108=(cj5*r00);
IkReal x8109=(cj5*r20);
IkReal x8110=((1.0)*x8105);
IkReal x8111=((1.0)*x8104);
IkReal x8112=(sj5*x8104);
evalcond[0]=((((-1.0)*x8109*x8111))+((r21*x8112))+(((-1.0)*r22*x8110)));
evalcond[1]=((((-1.0)*r12*x8110))+((r11*x8112))+(((-1.0)*x8106*x8111)));
evalcond[2]=((((-1.0)*r02*x8111))+((x8105*x8108))+(((-1.0)*x8107*x8110)));
evalcond[3]=((-1.0)+(((-1.0)*x8108*x8111))+(((-1.0)*r02*x8110))+((x8104*x8107)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8110))+((cj1*sj2))+((x8105*x8109))+(((-1.0)*r22*x8111)));
evalcond[5]=((((-1.0)*r11*sj5*x8110))+(((-1.0)*r12*x8111))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8105*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8113=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8113;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8114=((1.0)*cj5);
IkReal x8115=((((-1.0)*r21*x8114))+(((-1.0)*r20*sj5)));
j4eval[0]=x8115;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8114))))));
j4eval[2]=IKsign(x8115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8116=cj5*cj5;
IkReal x8117=r01*r01;
IkReal x8118=(cj5*r00);
IkReal x8119=(r01*sj5);
IkReal x8120=(((x8116*(r00*r00)))+(((-2.0)*x8118*x8119))+(r02*r02)+(((-1.0)*x8116*x8117))+x8117);
j4eval[0]=x8120;
j4eval[1]=((IKabs(r02))+(IKabs((x8118+(((-1.0)*x8119))))));
j4eval[2]=IKsign(x8120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8121=cj5*cj5;
IkReal x8122=r01*r01;
IkReal x8123=(r01*sj5);
IkReal x8124=(cj5*r00);
CheckValue<IkReal> x8125 = IKatan2WithCheck(IkReal((x8124+(((-1.0)*x8123)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8125.valid){
continue;
}
CheckValue<IkReal> x8126=IKPowWithIntegerCheck(IKsign((((x8121*(r00*r00)))+(((-2.0)*x8123*x8124))+(((-1.0)*x8121*x8122))+(r02*r02)+x8122)),-1);
if(!x8126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8125.value)+(((1.5707963267949)*(x8126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8127=IKsin(j4);
IkReal x8128=IKcos(j4);
IkReal x8129=(cj5*r10);
IkReal x8130=(r01*sj5);
IkReal x8131=(cj5*r00);
IkReal x8132=(cj5*r20);
IkReal x8133=((1.0)*x8128);
IkReal x8134=((1.0)*x8127);
IkReal x8135=(sj5*x8127);
evalcond[0]=((((-1.0)*x8132*x8134))+(((-1.0)*r22*x8133))+((r21*x8135)));
evalcond[1]=(((r11*x8135))+(((-1.0)*r12*x8133))+(((-1.0)*x8129*x8134)));
evalcond[2]=((((-1.0)*r02*x8134))+(((-1.0)*x8130*x8133))+((x8128*x8131)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8133))+(((-1.0)*x8131*x8134))+((x8127*x8130)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8134))+(((-1.0)*r21*sj5*x8133))+((cj1*sj2))+((x8128*x8132)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8134))+(((-1.0)*r11*sj5*x8133))+((cj1*cj2))+((x8128*x8129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8136=((1.0)*cj5);
CheckValue<IkReal> x8137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8136))+(((-1.0)*r20*sj5)))),-1);
if(!x8137.valid){
continue;
}
CheckValue<IkReal> x8138 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8137.value)))+(x8138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8139=IKsin(j4);
IkReal x8140=IKcos(j4);
IkReal x8141=(cj5*r10);
IkReal x8142=(r01*sj5);
IkReal x8143=(cj5*r00);
IkReal x8144=(cj5*r20);
IkReal x8145=((1.0)*x8140);
IkReal x8146=((1.0)*x8139);
IkReal x8147=(sj5*x8139);
evalcond[0]=((((-1.0)*x8144*x8146))+(((-1.0)*r22*x8145))+((r21*x8147)));
evalcond[1]=((((-1.0)*x8141*x8146))+((r11*x8147))+(((-1.0)*r12*x8145)));
evalcond[2]=(((x8140*x8143))+(((-1.0)*r02*x8146))+(((-1.0)*x8142*x8145)));
evalcond[3]=((1.0)+(((-1.0)*x8143*x8146))+(((-1.0)*r02*x8145))+((x8139*x8142)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8140*x8144))+(((-1.0)*r22*x8146))+(((-1.0)*r21*sj5*x8145)));
evalcond[5]=((((-1.0)*r11*sj5*x8145))+(((-1.0)*sj1*sj2))+((x8140*x8141))+(((-1.0)*r12*x8146))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8148 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8148.valid){
continue;
}
CheckValue<IkReal> x8149=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8148.value)+(((1.5707963267949)*(x8149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8150=IKsin(j4);
IkReal x8151=IKcos(j4);
IkReal x8152=(cj5*r10);
IkReal x8153=(r01*sj5);
IkReal x8154=(cj5*r00);
IkReal x8155=(cj5*r20);
IkReal x8156=((1.0)*x8151);
IkReal x8157=((1.0)*x8150);
IkReal x8158=(sj5*x8150);
evalcond[0]=((((-1.0)*r22*x8156))+(((-1.0)*x8155*x8157))+((r21*x8158)));
evalcond[1]=(((r11*x8158))+(((-1.0)*r12*x8156))+(((-1.0)*x8152*x8157)));
evalcond[2]=((((-1.0)*x8153*x8156))+(((-1.0)*r02*x8157))+((x8151*x8154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8156))+((x8150*x8153))+(((-1.0)*x8154*x8157)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8151*x8155))+(((-1.0)*r21*sj5*x8156))+(((-1.0)*r22*x8157)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8156))+((x8151*x8152))+((cj1*cj2))+(((-1.0)*r12*x8157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8159=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8159);
rxp1_1=(px*r21);
rxp1_2=(r11*x8159);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8160=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8160);
rxp1_1=(px*r21);
rxp1_2=(r11*x8160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8161=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8161);
rxp1_1=(px*r21);
rxp1_2=(r11*x8161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8164=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8164.valid){
continue;
}
IkReal x8162=x8164.value;
IkReal x8163=(sj0*x8162);
cj4array[0]=((((-1.0)*sj1*sj2*x8163))+((cj1*cj2*x8163)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8165=IKsin(j4);
IkReal x8166=IKcos(j4);
IkReal x8167=(r21*sj5);
IkReal x8168=(cj5*r20);
IkReal x8169=((1.0)*x8165);
IkReal x8170=((1.0)*x8166);
evalcond[0]=((-1.0)*r02*x8165);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8170)));
evalcond[2]=(((x8165*x8167))+(((-1.0)*x8168*x8169)));
evalcond[3]=(((r11*sj5*x8165))+(((-1.0)*cj5*r10*x8169)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8167*x8170))+((x8166*x8168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8173=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8173.valid){
continue;
}
IkReal x8171=x8173.value;
IkReal x8172=((1.0)*x8171);
cj4array[0]=((((-1.0)*cj2*sj1*x8172))+(((-1.0)*cj1*sj2*x8172)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8174=IKsin(j4);
IkReal x8175=IKcos(j4);
IkReal x8176=(r11*sj5);
IkReal x8177=((1.0)*sj0);
IkReal x8178=((1.0)*x8175);
IkReal x8179=((1.0)*cj5*x8174);
evalcond[0]=((-1.0)*r02*x8174);
evalcond[1]=((((-1.0)*x8177))+(((-1.0)*r02*x8178)));
evalcond[2]=((((-1.0)*r20*x8179))+((r21*sj5*x8174)));
evalcond[3]=(((x8174*x8176))+(((-1.0)*r10*x8179)));
evalcond[4]=((((-1.0)*x8176*x8178))+((cj5*r10*x8175))+(((-1.0)*cj1*cj2*x8177))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8180=IKPowWithIntegerCheck(r02,-1);
if(!x8180.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8180.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8181=IKsin(j4);
IkReal x8182=IKcos(j4);
IkReal x8183=(cj5*x8182);
IkReal x8184=(sj5*x8181);
IkReal x8185=((1.0)*sj5*x8182);
IkReal x8186=((1.0)*cj5*x8181);
evalcond[0]=((-1.0)*r02*x8181);
evalcond[1]=(((r21*x8184))+(((-1.0)*r20*x8186)));
evalcond[2]=(((r11*x8184))+(((-1.0)*r10*x8186)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8185))+((r20*x8183)));
evalcond[4]=(((r10*x8183))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8185))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8187=((1.0)*sj0);
IkReal x8188=((1.0)*cj0);
CheckValue<IkReal> x8189 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8188))+(((-1.0)*r12*x8187)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8188))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8189.valid){
continue;
}
CheckValue<IkReal> x8190=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8189.value)+(((1.5707963267949)*(x8190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8191=IKsin(j4);
IkReal x8192=IKcos(j4);
IkReal x8193=(cj5*r10);
IkReal x8194=(sj1*sj2);
IkReal x8195=(r01*sj5);
IkReal x8196=(cj5*r00);
IkReal x8197=(cj5*r20);
IkReal x8198=((1.0)*x8192);
IkReal x8199=((1.0)*cj1*cj2);
IkReal x8200=((1.0)*x8191);
IkReal x8201=(sj5*x8191);
evalcond[0]=((((-1.0)*r22*x8198))+((r21*x8201))+(((-1.0)*x8197*x8200)));
evalcond[1]=(((r11*x8201))+cj0+(((-1.0)*x8193*x8200))+(((-1.0)*r12*x8198)));
evalcond[2]=((((-1.0)*r02*x8198))+(((-1.0)*sj0))+(((-1.0)*x8196*x8200))+((x8191*x8195)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8198))+(((-1.0)*r22*x8200))+((x8192*x8197)));
evalcond[4]=((((-1.0)*r02*x8200))+(((-1.0)*x8195*x8198))+((x8192*x8196))+(((-1.0)*cj0*x8199))+((cj0*x8194)));
evalcond[5]=(((sj0*x8194))+(((-1.0)*r12*x8200))+(((-1.0)*sj0*x8199))+(((-1.0)*r11*sj5*x8198))+((x8192*x8193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8202=((1.0)*cj5);
CheckValue<IkReal> x8203 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8203.valid){
continue;
}
CheckValue<IkReal> x8204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8202)))),-1);
if(!x8204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8203.value)+(((1.5707963267949)*(x8204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8205=IKsin(j4);
IkReal x8206=IKcos(j4);
IkReal x8207=(cj5*r10);
IkReal x8208=(sj1*sj2);
IkReal x8209=(r01*sj5);
IkReal x8210=(cj5*r00);
IkReal x8211=(cj5*r20);
IkReal x8212=((1.0)*x8206);
IkReal x8213=((1.0)*cj1*cj2);
IkReal x8214=((1.0)*x8205);
IkReal x8215=(sj5*x8205);
evalcond[0]=((((-1.0)*x8211*x8214))+(((-1.0)*r22*x8212))+((r21*x8215)));
evalcond[1]=(((r11*x8215))+cj0+(((-1.0)*r12*x8212))+(((-1.0)*x8207*x8214)));
evalcond[2]=((((-1.0)*sj0))+((x8205*x8209))+(((-1.0)*r02*x8212))+(((-1.0)*x8210*x8214)));
evalcond[3]=(((x8206*x8211))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8212))+(((-1.0)*r22*x8214)));
evalcond[4]=(((x8206*x8210))+(((-1.0)*cj0*x8213))+(((-1.0)*x8209*x8212))+((cj0*x8208))+(((-1.0)*r02*x8214)));
evalcond[5]=(((sj0*x8208))+((x8206*x8207))+(((-1.0)*r12*x8214))+(((-1.0)*sj0*x8213))+(((-1.0)*r11*sj5*x8212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8216=((1.0)*cj5);
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
CheckValue<IkReal> x8218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8216))+(((-1.0)*r00*sj5)))),-1);
if(!x8218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8217.value)+(((1.5707963267949)*(x8218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8219=IKsin(j4);
IkReal x8220=IKcos(j4);
IkReal x8221=(cj5*r10);
IkReal x8222=(sj1*sj2);
IkReal x8223=(r01*sj5);
IkReal x8224=(cj5*r00);
IkReal x8225=(cj5*r20);
IkReal x8226=((1.0)*x8220);
IkReal x8227=((1.0)*cj1*cj2);
IkReal x8228=((1.0)*x8219);
IkReal x8229=(sj5*x8219);
evalcond[0]=((((-1.0)*x8225*x8228))+((r21*x8229))+(((-1.0)*r22*x8226)));
evalcond[1]=(cj0+((r11*x8229))+(((-1.0)*x8221*x8228))+(((-1.0)*r12*x8226)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8226))+(((-1.0)*x8224*x8228))+((x8219*x8223)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8220*x8225))+(((-1.0)*r21*sj5*x8226))+(((-1.0)*r22*x8228)));
evalcond[4]=((((-1.0)*x8223*x8226))+((cj0*x8222))+(((-1.0)*r02*x8228))+((x8220*x8224))+(((-1.0)*cj0*x8227)));
evalcond[5]=((((-1.0)*r11*sj5*x8226))+((x8220*x8221))+(((-1.0)*r12*x8228))+(((-1.0)*sj0*x8227))+((sj0*x8222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8230=cj5*cj5;
IkReal x8231=r21*r21;
IkReal x8232=(cj2*sj1);
IkReal x8233=(cj1*sj2);
IkReal x8234=(r21*sj5);
IkReal x8235=((1.0)*cj5*r20);
CheckValue<IkReal> x8236=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8230*x8231))+(r22*r22)+((x8230*(r20*r20)))+x8231+(((-2.0)*cj5*r20*x8234)))),-1);
if(!x8236.valid){
continue;
}
CheckValue<IkReal> x8237 = IKatan2WithCheck(IkReal((((r22*x8233))+((r22*x8232)))),IkReal(((((-1.0)*x8233*x8235))+((x8232*x8234))+(((-1.0)*x8232*x8235))+((x8233*x8234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8236.value)))+(x8237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8238=IKsin(j4);
IkReal x8239=IKcos(j4);
IkReal x8240=(r21*sj5);
IkReal x8241=(cj5*r20);
IkReal x8242=((1.0)*x8239);
IkReal x8243=((1.0)*x8238);
evalcond[0]=((((-1.0)*x8241*x8243))+(((-1.0)*r22*x8242))+((x8238*x8240)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x8240*x8242))+((cj1*sj2))+(((-1.0)*r22*x8243))+((x8239*x8241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8244=(cj5*sj4);
IkReal x8245=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8245))+(((-1.0)*r00*x8244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8244))+(((-1.0)*r11*x8245))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8245))+(((-1.0)*r00*x8244))))+IKsqr((((r10*x8244))+(((-1.0)*r11*x8245))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8245))+(((-1.0)*r00*x8244))), (((r10*x8244))+(((-1.0)*r11*x8245))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8246=IKcos(j0);
IkReal x8247=IKsin(j0);
IkReal x8248=(cj4*cj5);
IkReal x8249=((0.392)*sj1);
IkReal x8250=((1.0)*cj1);
IkReal x8251=(r11*sj5);
IkReal x8252=(r00*sj5);
IkReal x8253=((1.0)*cj5);
IkReal x8254=((1.0)*sj4);
IkReal x8255=((0.392)*cj1);
IkReal x8256=((1.0)*sj5);
IkReal x8257=((1.0)*sj1);
IkReal x8258=((0.425)*cj1);
IkReal x8259=((1.0)*cj4);
IkReal x8260=((0.099)*cj5);
IkReal x8261=(sj2*x8247);
IkReal x8262=(sj2*x8246);
IkReal x8263=(cj2*x8246);
IkReal x8264=(cj2*x8247);
evalcond[0]=((((-1.0)*r12*x8259))+((sj4*x8251))+(((-1.0)*r10*sj4*x8253))+x8246);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*r00*sj4*x8253))+(((-1.0)*r02*x8259))+(((-1.0)*x8247)));
evalcond[2]=((((-1.0)*x8252))+(((-1.0)*x8250*x8262))+(((-1.0)*r01*x8253))+(((-1.0)*x8257*x8263)));
evalcond[3]=((((-1.0)*r10*x8256))+(((-1.0)*x8250*x8261))+(((-1.0)*r11*x8253))+(((-1.0)*x8257*x8264)));
evalcond[4]=((((-1.0)*x8250*x8263))+(((-1.0)*cj4*r01*x8256))+((sj1*x8262))+(((-1.0)*r02*x8254))+((r00*x8248)));
evalcond[5]=(((r10*x8248))+(((-1.0)*r12*x8254))+(((-1.0)*x8250*x8264))+(((-1.0)*x8251*x8259))+((sj1*x8261)));
evalcond[6]=((((-0.099)*x8252))+((x8255*x8263))+(((-1.0)*px))+(((-0.133)*x8247))+(((-1.0)*x8249*x8262))+(((-1.0)*r01*x8260))+((x8246*x8258)));
evalcond[7]=(((x8247*x8258))+((x8255*x8264))+(((0.133)*x8246))+(((-0.099)*r10*sj5))+(((-1.0)*py))+(((-1.0)*x8249*x8261))+(((-1.0)*r11*x8260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
CheckValue<IkReal> x8266=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8266.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8265.value)+(((1.5707963267949)*(x8266.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8267=IKcos(j0);
IkReal x8268=IKsin(j0);
IkReal x8269=(r00*sj5);
IkReal x8270=((1.0)*cj5);
IkReal x8271=(r10*sj5);
IkReal x8272=((1.0)*cj2);
IkReal x8273=((0.392)*sj2);
IkReal x8274=((0.425)*cj1);
IkReal x8275=((0.099)*cj5);
IkReal x8276=((1.0)*cj1*sj2);
IkReal x8277=((0.392)*cj1*cj2);
IkReal x8278=(sj1*x8267);
IkReal x8279=(sj1*x8268);
evalcond[0]=((((-1.0)*x8267*x8276))+(((-1.0)*x8272*x8278))+(((-1.0)*x8269))+(((-1.0)*r01*x8270)));
evalcond[1]=((((-1.0)*x8272*x8279))+(((-1.0)*x8268*x8276))+(((-1.0)*r11*x8270))+(((-1.0)*x8271)));
evalcond[2]=((((-1.0)*x8273*x8278))+(((-1.0)*px))+(((-0.133)*x8268))+(((-0.099)*x8269))+((x8267*x8274))+((x8267*x8277))+(((-1.0)*r01*x8275)));
evalcond[3]=(((x8268*x8274))+((x8268*x8277))+(((-1.0)*x8273*x8279))+(((0.133)*x8267))+(((-1.0)*py))+(((-0.099)*x8271))+(((-1.0)*r11*x8275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8280=((1.0)*cj5);
IkReal x8281=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8280)));
j4eval[0]=x8281;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8280))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8282=((1.0)*cj5);
IkReal x8283=((((-1.0)*r11*x8282))+(((-1.0)*r10*sj5)));
j4eval[0]=x8283;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8282))))));
j4eval[2]=IKsign(x8283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8284=((1.0)*sj0);
IkReal x8285=((1.0)*cj0);
IkReal x8286=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8286;
j4eval[1]=((IKabs(((((-1.0)*r02*x8285))+(((-1.0)*r12*x8284)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8284))+(((-1.0)*r01*sj5*x8285))))));
j4eval[2]=IKsign(x8286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8287=((-1.0)*r20);
IkReal x8289 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8289)==0){
continue;
}
IkReal x8288=pow(x8289,-0.5);
CheckValue<IkReal> x8290 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8287),IKFAST_ATAN2_MAGTHRESH);
if(!x8290.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8290.value));
IkReal gconst133=(r21*x8288);
IkReal gconst134=(x8287*x8288);
CheckValue<IkReal> x8291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8291.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8291.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8292=((-1.0)*r20);
IkReal x8293=x8288;
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8292),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
IkReal x8294=((-1.0)*(x8295.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8294;
IkReal gconst132=x8294;
IkReal gconst133=(r21*x8293);
IkReal gconst134=(x8292*x8293);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8296=((-1.0)*r20);
IkReal x8297=x8288;
CheckValue<IkReal> x8299 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8296),IKFAST_ATAN2_MAGTHRESH);
if(!x8299.valid){
continue;
}
IkReal x8298=((-1.0)*(x8299.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8298;
IkReal gconst132=x8298;
IkReal gconst133=(r21*x8297);
IkReal gconst134=(x8296*x8297);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8300=((-1.0)*r20);
IkReal x8301=x8288;
CheckValue<IkReal> x8303 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8300),IKFAST_ATAN2_MAGTHRESH);
if(!x8303.valid){
continue;
}
IkReal x8302=((-1.0)*(x8303.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8302;
IkReal gconst132=x8302;
IkReal gconst133=(r21*x8301);
IkReal gconst134=(x8300*x8301);
IkReal x8304=r22*r22;
CheckValue<IkReal> x8307=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8304))),-1);
if(!x8307.valid){
continue;
}
IkReal x8305=x8307.value;
IkReal x8306=(x8304+((x8305*(r20*r20*r20*r20)))+(((2.0)*x8305*(r20*r20)*(r21*r21)))+((x8305*(r21*r21*r21*r21))));
j4eval[0]=x8306;
j4eval[1]=IKsign(x8306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8308=(gconst133*r21);
IkReal x8309=(cj1*sj2);
IkReal x8310=(gconst134*r20);
IkReal x8311=(cj2*sj1);
CheckValue<IkReal> x8312=IKPowWithIntegerCheck(IKsign(((x8310*x8310)+(r22*r22)+(x8308*x8308)+(((-2.0)*x8308*x8310)))),-1);
if(!x8312.valid){
continue;
}
CheckValue<IkReal> x8313 = IKatan2WithCheck(IkReal((((r22*x8309))+((r22*x8311)))),IkReal((((x8308*x8309))+((x8308*x8311))+(((-1.0)*x8310*x8311))+(((-1.0)*x8309*x8310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8312.value)))+(x8313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8314=IKsin(j4);
IkReal x8315=IKcos(j4);
IkReal x8316=(sj1*sj2);
IkReal x8317=(gconst133*r11);
IkReal x8318=(gconst133*r21);
IkReal x8319=(gconst133*r01);
IkReal x8320=((1.0)*x8315);
IkReal x8321=(gconst134*x8315);
IkReal x8322=((1.0)*x8314);
IkReal x8323=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8322))+(((-1.0)*r22*x8320))+((x8314*x8318)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x8322))+((x8314*x8317))+(((-1.0)*r12*x8320)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8322))+((x8314*x8319))+(((-1.0)*r02*x8320)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8322))+((cj1*sj2))+(((-1.0)*x8318*x8320))+((r20*x8321)));
evalcond[4]=(((cj0*x8316))+((r00*x8321))+(((-1.0)*r02*x8322))+(((-1.0)*x8319*x8320))+(((-1.0)*cj0*x8323)));
evalcond[5]=(((r10*x8321))+((sj0*x8316))+(((-1.0)*x8317*x8320))+(((-1.0)*sj0*x8323))+(((-1.0)*r12*x8322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8324=((1.0)*gconst134);
CheckValue<IkReal> x8325 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8324))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8325.valid){
continue;
}
CheckValue<IkReal> x8326=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8324)))),-1);
if(!x8326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8325.value)+(((1.5707963267949)*(x8326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8327=IKsin(j4);
IkReal x8328=IKcos(j4);
IkReal x8329=(sj1*sj2);
IkReal x8330=(gconst133*r11);
IkReal x8331=(gconst133*r21);
IkReal x8332=(gconst133*r01);
IkReal x8333=((1.0)*x8328);
IkReal x8334=(gconst134*x8328);
IkReal x8335=((1.0)*x8327);
IkReal x8336=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8333))+(((-1.0)*gconst134*r20*x8335))+((x8327*x8331)));
evalcond[1]=(cj0+(((-1.0)*r12*x8333))+(((-1.0)*gconst134*r10*x8335))+((x8327*x8330)));
evalcond[2]=((((-1.0)*gconst134*r00*x8335))+(((-1.0)*sj0))+(((-1.0)*r02*x8333))+((x8327*x8332)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8335))+((cj1*sj2))+((r20*x8334))+(((-1.0)*x8331*x8333)));
evalcond[4]=((((-1.0)*x8332*x8333))+((cj0*x8329))+((r00*x8334))+(((-1.0)*r02*x8335))+(((-1.0)*cj0*x8336)));
evalcond[5]=((((-1.0)*r12*x8335))+((r10*x8334))+((sj0*x8329))+(((-1.0)*x8330*x8333))+(((-1.0)*sj0*x8336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8337=((1.0)*gconst134);
CheckValue<IkReal> x8338=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8337)))),-1);
if(!x8338.valid){
continue;
}
CheckValue<IkReal> x8339 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8337))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8338.value)))+(x8339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8340=IKsin(j4);
IkReal x8341=IKcos(j4);
IkReal x8342=(sj1*sj2);
IkReal x8343=(gconst133*r11);
IkReal x8344=(gconst133*r21);
IkReal x8345=(gconst133*r01);
IkReal x8346=((1.0)*x8341);
IkReal x8347=(gconst134*x8341);
IkReal x8348=((1.0)*x8340);
IkReal x8349=((1.0)*cj1*cj2);
evalcond[0]=(((x8340*x8344))+(((-1.0)*r22*x8346))+(((-1.0)*gconst134*r20*x8348)));
evalcond[1]=((((-1.0)*gconst134*r10*x8348))+cj0+((x8340*x8343))+(((-1.0)*r12*x8346)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8346))+((x8340*x8345))+(((-1.0)*gconst134*r00*x8348)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8347))+(((-1.0)*r22*x8348))+(((-1.0)*x8344*x8346)));
evalcond[4]=((((-1.0)*x8345*x8346))+(((-1.0)*r02*x8348))+((cj0*x8342))+(((-1.0)*cj0*x8349))+((r00*x8347)));
evalcond[5]=(((sj0*x8342))+(((-1.0)*x8343*x8346))+(((-1.0)*r12*x8348))+(((-1.0)*sj0*x8349))+((r10*x8347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8350=((-1.0)*r21);
IkReal x8352 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8352)==0){
continue;
}
IkReal x8351=pow(x8352,-0.5);
CheckValue<IkReal> x8353 = IKatan2WithCheck(IkReal(x8350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8353.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8353.value))));
IkReal gconst136=(x8350*x8351);
IkReal gconst137=((1.0)*r20*x8351);
CheckValue<IkReal> x8354 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8354.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8354.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8355=((-1.0)*r21);
CheckValue<IkReal> x8358 = IKatan2WithCheck(IkReal(x8355),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8358.valid){
continue;
}
IkReal x8356=((1.0)*(x8358.value));
IkReal x8357=x8351;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8356)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8356)));
IkReal gconst136=(x8355*x8357);
IkReal gconst137=((1.0)*r20*x8357);
IkReal x8359=r22*r22;
IkReal x8360=((1.0)*x8359);
CheckValue<IkReal> x8364=IKPowWithIntegerCheck(((-1.0)+x8359),-1);
if(!x8364.valid){
continue;
}
IkReal x8361=x8364.value;
if((((1.0)+(((-1.0)*x8360)))) < -0.00001)
continue;
IkReal x8362=IKsqrt(((1.0)+(((-1.0)*x8360))));
IkReal x8363=(cj0*x8361*x8362);
j4eval[0]=((IKabs((x8363+(((-1.0)*x8360*x8363)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8365=((-1.0)*r21);
CheckValue<IkReal> x8368 = IKatan2WithCheck(IkReal(x8365),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8368.valid){
continue;
}
IkReal x8366=((1.0)*(x8368.value));
IkReal x8367=x8351;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8366)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8366)));
IkReal gconst136=(x8365*x8367);
IkReal gconst137=((1.0)*r20*x8367);
IkReal x8369=r22*r22;
IkReal x8370=((1.0)*x8369);
CheckValue<IkReal> x8374=IKPowWithIntegerCheck(((-1.0)+x8369),-1);
if(!x8374.valid){
continue;
}
IkReal x8371=x8374.value;
if((((1.0)+(((-1.0)*x8370)))) < -0.00001)
continue;
IkReal x8372=IKsqrt(((1.0)+(((-1.0)*x8370))));
IkReal x8373=(sj0*x8371*x8372);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8373+(((-1.0)*x8370*x8373))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8375=((-1.0)*r21);
CheckValue<IkReal> x8378 = IKatan2WithCheck(IkReal(x8375),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8378.valid){
continue;
}
IkReal x8376=((1.0)*(x8378.value));
IkReal x8377=x8351;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8376)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8376)));
IkReal gconst136=(x8375*x8377);
IkReal gconst137=((1.0)*r20*x8377);
IkReal x8379=r22*r22;
IkReal x8380=(r12*sj0);
IkReal x8381=(cj0*r02);
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(((-1.0)+x8379),-1);
if(!x8385.valid){
continue;
}
IkReal x8382=x8385.value;
if((((1.0)+(((-1.0)*x8379)))) < -0.00001)
continue;
IkReal x8383=IKsqrt(((1.0)+(((-1.0)*x8379))));
IkReal x8384=(r22*x8382*x8383);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8380))+(((-1.0)*x8381)))))+(IKabs((((x8381*x8384))+((x8380*x8384))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8386=((1.0)*sj0);
IkReal x8387=((1.0)*cj0);
CheckValue<IkReal> x8388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8388.valid){
continue;
}
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8387))+(((-1.0)*r12*x8386)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8386))+(((-1.0)*gconst136*r01*x8387))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8388.value)))+(x8389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8390=IKsin(j4);
IkReal x8391=IKcos(j4);
IkReal x8392=(gconst136*r01);
IkReal x8393=(gconst137*r10);
IkReal x8394=(sj1*sj2);
IkReal x8395=(gconst137*r20);
IkReal x8396=(gconst136*r11);
IkReal x8397=(gconst136*r21);
IkReal x8398=(gconst137*r00);
IkReal x8399=((1.0)*x8391);
IkReal x8400=((1.0)*cj1*cj2);
IkReal x8401=((1.0)*x8390);
evalcond[0]=((((-1.0)*x8395*x8401))+((x8390*x8397))+(((-1.0)*r22*x8399)));
evalcond[1]=(cj0+(((-1.0)*x8393*x8401))+((x8390*x8396))+(((-1.0)*r12*x8399)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8399))+((x8390*x8392))+(((-1.0)*x8398*x8401)));
evalcond[3]=(((cj2*sj1))+((x8391*x8395))+((cj1*sj2))+(((-1.0)*r22*x8401))+(((-1.0)*x8397*x8399)));
evalcond[4]=((((-1.0)*cj0*x8400))+((x8391*x8398))+(((-1.0)*r02*x8401))+(((-1.0)*x8392*x8399))+((cj0*x8394)));
evalcond[5]=(((x8391*x8393))+(((-1.0)*sj0*x8400))+((sj0*x8394))+(((-1.0)*r12*x8401))+(((-1.0)*x8396*x8399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8402=((1.0)*gconst137);
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8402)))),-1);
if(!x8403.valid){
continue;
}
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8402))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8403.value)))+(x8404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8405=IKsin(j4);
IkReal x8406=IKcos(j4);
IkReal x8407=(gconst136*r01);
IkReal x8408=(gconst137*r10);
IkReal x8409=(sj1*sj2);
IkReal x8410=(gconst137*r20);
IkReal x8411=(gconst136*r11);
IkReal x8412=(gconst136*r21);
IkReal x8413=(gconst137*r00);
IkReal x8414=((1.0)*x8406);
IkReal x8415=((1.0)*cj1*cj2);
IkReal x8416=((1.0)*x8405);
evalcond[0]=(((x8405*x8412))+(((-1.0)*x8410*x8416))+(((-1.0)*r22*x8414)));
evalcond[1]=((((-1.0)*r12*x8414))+(((-1.0)*x8408*x8416))+cj0+((x8405*x8411)));
evalcond[2]=((((-1.0)*sj0))+((x8405*x8407))+(((-1.0)*r02*x8414))+(((-1.0)*x8413*x8416)));
evalcond[3]=(((cj2*sj1))+((x8406*x8410))+((cj1*sj2))+(((-1.0)*x8412*x8414))+(((-1.0)*r22*x8416)));
evalcond[4]=(((x8406*x8413))+(((-1.0)*cj0*x8415))+(((-1.0)*r02*x8416))+(((-1.0)*x8407*x8414))+((cj0*x8409)));
evalcond[5]=((((-1.0)*r12*x8416))+((sj0*x8409))+((x8406*x8408))+(((-1.0)*sj0*x8415))+(((-1.0)*x8411*x8414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8417=((1.0)*gconst137);
CheckValue<IkReal> x8418=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8417)))),-1);
if(!x8418.valid){
continue;
}
CheckValue<IkReal> x8419 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8417))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8418.value)))+(x8419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8420=IKsin(j4);
IkReal x8421=IKcos(j4);
IkReal x8422=(gconst136*r01);
IkReal x8423=(gconst137*r10);
IkReal x8424=(sj1*sj2);
IkReal x8425=(gconst137*r20);
IkReal x8426=(gconst136*r11);
IkReal x8427=(gconst136*r21);
IkReal x8428=(gconst137*r00);
IkReal x8429=((1.0)*x8421);
IkReal x8430=((1.0)*cj1*cj2);
IkReal x8431=((1.0)*x8420);
evalcond[0]=((((-1.0)*r22*x8429))+(((-1.0)*x8425*x8431))+((x8420*x8427)));
evalcond[1]=(cj0+((x8420*x8426))+(((-1.0)*r12*x8429))+(((-1.0)*x8423*x8431)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8429))+((x8420*x8422))+(((-1.0)*x8428*x8431)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8427*x8429))+((cj1*sj2))+((x8421*x8425))+(((-1.0)*r22*x8431)));
evalcond[4]=(((cj0*x8424))+((x8421*x8428))+(((-1.0)*x8422*x8429))+(((-1.0)*r02*x8431))+(((-1.0)*cj0*x8430)));
evalcond[5]=((((-1.0)*x8426*x8429))+(((-1.0)*sj0*x8430))+(((-1.0)*r12*x8431))+((x8421*x8423))+((sj0*x8424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8432=((-1.0)*r10);
IkReal x8434 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8434)==0){
continue;
}
IkReal x8433=pow(x8434,-0.5);
CheckValue<IkReal> x8435 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8432),IKFAST_ATAN2_MAGTHRESH);
if(!x8435.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8435.value));
IkReal gconst139=(r11*x8433);
IkReal gconst140=(x8432*x8433);
CheckValue<IkReal> x8436 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8436.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8436.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8437=((-1.0)*r10);
IkReal x8438=x8433;
CheckValue<IkReal> x8440 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8437),IKFAST_ATAN2_MAGTHRESH);
if(!x8440.valid){
continue;
}
IkReal x8439=((-1.0)*(x8440.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8439;
IkReal gconst138=x8439;
IkReal gconst139=(r11*x8438);
IkReal gconst140=(x8437*x8438);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8441=((1.0)*sj0);
IkReal x8442=((1.0)*gconst139);
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8441))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8442))+(((-1.0)*gconst139*r11*x8441))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
CheckValue<IkReal> x8444=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8442)))),-1);
if(!x8444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8443.value)+(((1.5707963267949)*(x8444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8445=IKsin(j4);
IkReal x8446=IKcos(j4);
IkReal x8447=(gconst140*r00);
IkReal x8448=(sj1*sj2);
IkReal x8449=(gconst139*r11);
IkReal x8450=(gconst139*r01);
IkReal x8451=(gconst139*r21);
IkReal x8452=((1.0)*x8446);
IkReal x8453=((1.0)*x8445);
IkReal x8454=((1.0)*cj1*cj2);
IkReal x8455=(gconst140*x8446);
evalcond[0]=(((x8445*x8451))+(((-1.0)*r22*x8452))+(((-1.0)*gconst140*r20*x8453)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8453))+(((-1.0)*r12*x8452))+((x8445*x8449)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8447*x8453))+((x8445*x8450))+(((-1.0)*r02*x8452)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8451*x8452))+((r20*x8455))+(((-1.0)*r22*x8453)));
evalcond[4]=((((-1.0)*x8450*x8452))+((x8446*x8447))+(((-1.0)*cj0*x8454))+(((-1.0)*r02*x8453))+((cj0*x8448)));
evalcond[5]=((((-1.0)*sj0*x8454))+(((-1.0)*r12*x8453))+((sj0*x8448))+(((-1.0)*x8449*x8452))+((r10*x8455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8456=((1.0)*gconst140);
CheckValue<IkReal> x8457 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8457.valid){
continue;
}
CheckValue<IkReal> x8458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8456))+(((-1.0)*gconst139*r00)))),-1);
if(!x8458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8457.value)+(((1.5707963267949)*(x8458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8459=IKsin(j4);
IkReal x8460=IKcos(j4);
IkReal x8461=(gconst140*r00);
IkReal x8462=(sj1*sj2);
IkReal x8463=(gconst139*r11);
IkReal x8464=(gconst139*r01);
IkReal x8465=(gconst139*r21);
IkReal x8466=((1.0)*x8460);
IkReal x8467=((1.0)*x8459);
IkReal x8468=((1.0)*cj1*cj2);
IkReal x8469=(gconst140*x8460);
evalcond[0]=(((x8459*x8465))+(((-1.0)*gconst140*r20*x8467))+(((-1.0)*r22*x8466)));
evalcond[1]=(cj0+((x8459*x8463))+(((-1.0)*gconst140*r10*x8467))+(((-1.0)*r12*x8466)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8466))+((x8459*x8464))+(((-1.0)*x8461*x8467)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8465*x8466))+((cj1*sj2))+(((-1.0)*r22*x8467))+((r20*x8469)));
evalcond[4]=((((-1.0)*r02*x8467))+((cj0*x8462))+((x8460*x8461))+(((-1.0)*cj0*x8468))+(((-1.0)*x8464*x8466)));
evalcond[5]=((((-1.0)*sj0*x8468))+(((-1.0)*x8463*x8466))+((r10*x8469))+(((-1.0)*r12*x8467))+((sj0*x8462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8470=((-1.0)*r11);
IkReal x8472 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8472)==0){
continue;
}
IkReal x8471=pow(x8472,-0.5);
CheckValue<IkReal> x8473 = IKatan2WithCheck(IkReal(x8470),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8473.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8473.value))));
IkReal gconst142=(x8470*x8471);
IkReal gconst143=((1.0)*r10*x8471);
CheckValue<IkReal> x8474 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8474.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8474.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8475=((-1.0)*r11);
CheckValue<IkReal> x8478 = IKatan2WithCheck(IkReal(x8475),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8478.valid){
continue;
}
IkReal x8476=((1.0)*(x8478.value));
IkReal x8477=x8471;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8476)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8476)));
IkReal gconst142=(x8475*x8477);
IkReal gconst143=((1.0)*r10*x8477);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8479=((-1.0)*r11);
CheckValue<IkReal> x8482 = IKatan2WithCheck(IkReal(x8479),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8482.valid){
continue;
}
IkReal x8480=((1.0)*(x8482.value));
IkReal x8481=x8471;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8480)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8480)));
IkReal gconst142=(x8479*x8481);
IkReal gconst143=((1.0)*r10*x8481);
IkReal x8483=r12*r12;
IkReal x8484=((1.0)*sj0);
IkReal x8485=(cj0*r02);
IkReal x8486=x8471;
j4eval[0]=((IKabs(((((-1.0)*x8485))+(((-1.0)*r12*x8484)))))+(IKabs((((sj0*x8483*x8486))+((r12*x8485*x8486))+(((-1.0)*x8484*x8486))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8487=((-1.0)*r11);
CheckValue<IkReal> x8490 = IKatan2WithCheck(IkReal(x8487),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8490.valid){
continue;
}
IkReal x8488=((1.0)*(x8490.value));
IkReal x8489=x8471;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8488)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8488)));
IkReal gconst142=(x8487*x8489);
IkReal gconst143=((1.0)*r10*x8489);
IkReal x8491=r12*r12;
IkReal x8492=(cj1*r22*sj2);
IkReal x8493=(cj2*r22*sj1);
CheckValue<IkReal> x8497=IKPowWithIntegerCheck(((-1.0)+x8491),-1);
if(!x8497.valid){
continue;
}
IkReal x8494=x8497.value;
if((((1.0)+(((-1.0)*x8491)))) < -0.00001)
continue;
IkReal x8495=IKsqrt(((1.0)+(((-1.0)*x8491))));
IkReal x8496=((1.0)*r12*x8494*x8495);
j4eval[0]=((IKabs(((((-1.0)*x8492*x8496))+(((-1.0)*x8493*x8496)))))+(IKabs((x8493+x8492))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8498=(gconst142*r21);
IkReal x8499=(cj1*sj2);
IkReal x8500=(cj2*sj1);
IkReal x8501=(gconst143*r20);
CheckValue<IkReal> x8502=IKPowWithIntegerCheck(IKsign(((x8498*x8498)+(r22*r22)+(x8501*x8501)+(((-2.0)*x8498*x8501)))),-1);
if(!x8502.valid){
continue;
}
CheckValue<IkReal> x8503 = IKatan2WithCheck(IkReal((((r22*x8500))+((r22*x8499)))),IkReal(((((-1.0)*x8499*x8501))+((x8498*x8500))+(((-1.0)*x8500*x8501))+((x8498*x8499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8502.value)))+(x8503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8504=IKsin(j4);
IkReal x8505=IKcos(j4);
IkReal x8506=(sj1*sj2);
IkReal x8507=(gconst143*r20);
IkReal x8508=((1.0)*x8505);
IkReal x8509=((1.0)*cj1*cj2);
IkReal x8510=((1.0)*x8504);
IkReal x8511=(gconst142*x8504);
IkReal x8512=(gconst143*x8505);
evalcond[0]=(((r21*x8511))+(((-1.0)*r22*x8508))+(((-1.0)*x8507*x8510)));
evalcond[1]=((((-1.0)*gconst143*r10*x8510))+cj0+((r11*x8511))+(((-1.0)*r12*x8508)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8510))+(((-1.0)*r02*x8508))+((r01*x8511)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8508))+((cj1*sj2))+((x8505*x8507))+(((-1.0)*r22*x8510)));
evalcond[4]=(((cj0*x8506))+(((-1.0)*r02*x8510))+(((-1.0)*gconst142*r01*x8508))+(((-1.0)*cj0*x8509))+((r00*x8512)));
evalcond[5]=(((sj0*x8506))+(((-1.0)*r12*x8510))+(((-1.0)*sj0*x8509))+(((-1.0)*gconst142*r11*x8508))+((r10*x8512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8513=((1.0)*sj0);
IkReal x8514=((1.0)*gconst142);
CheckValue<IkReal> x8515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8514))+(((-1.0)*gconst143*r21)))),-1);
if(!x8515.valid){
continue;
}
CheckValue<IkReal> x8516 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8513)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8514))+(((-1.0)*gconst142*r11*x8513))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8515.value)))+(x8516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8517=IKsin(j4);
IkReal x8518=IKcos(j4);
IkReal x8519=(sj1*sj2);
IkReal x8520=(gconst143*r20);
IkReal x8521=((1.0)*x8518);
IkReal x8522=((1.0)*cj1*cj2);
IkReal x8523=((1.0)*x8517);
IkReal x8524=(gconst142*x8517);
IkReal x8525=(gconst143*x8518);
evalcond[0]=(((r21*x8524))+(((-1.0)*r22*x8521))+(((-1.0)*x8520*x8523)));
evalcond[1]=((((-1.0)*gconst143*r10*x8523))+cj0+((r11*x8524))+(((-1.0)*r12*x8521)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8521))+((r01*x8524))+(((-1.0)*gconst143*r00*x8523)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8521))+((x8518*x8520))+((cj1*sj2))+(((-1.0)*r22*x8523)));
evalcond[4]=(((cj0*x8519))+(((-1.0)*r02*x8523))+(((-1.0)*cj0*x8522))+((r00*x8525))+(((-1.0)*gconst142*r01*x8521)));
evalcond[5]=(((sj0*x8519))+(((-1.0)*gconst142*r11*x8521))+(((-1.0)*sj0*x8522))+(((-1.0)*r12*x8523))+((r10*x8525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8526=((1.0)*gconst143);
CheckValue<IkReal> x8527=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8526)))),-1);
if(!x8527.valid){
continue;
}
CheckValue<IkReal> x8528 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8526))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8527.value)))+(x8528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8529=IKsin(j4);
IkReal x8530=IKcos(j4);
IkReal x8531=(sj1*sj2);
IkReal x8532=(gconst143*r20);
IkReal x8533=((1.0)*x8530);
IkReal x8534=((1.0)*cj1*cj2);
IkReal x8535=((1.0)*x8529);
IkReal x8536=(gconst142*x8529);
IkReal x8537=(gconst143*x8530);
evalcond[0]=((((-1.0)*x8532*x8535))+(((-1.0)*r22*x8533))+((r21*x8536)));
evalcond[1]=(cj0+(((-1.0)*r12*x8533))+(((-1.0)*gconst143*r10*x8535))+((r11*x8536)));
evalcond[2]=((((-1.0)*r02*x8533))+(((-1.0)*sj0))+((r01*x8536))+(((-1.0)*gconst143*r00*x8535)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8535))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8533))+((x8530*x8532)));
evalcond[4]=((((-1.0)*r02*x8535))+(((-1.0)*cj0*x8534))+((r00*x8537))+(((-1.0)*gconst142*r01*x8533))+((cj0*x8531)));
evalcond[5]=((((-1.0)*sj0*x8534))+(((-1.0)*gconst142*r11*x8533))+((r10*x8537))+(((-1.0)*r12*x8535))+((sj0*x8531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8538=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8538;
j4eval[1]=IKsign(x8538);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8539=((1.0)*cj5);
IkReal x8540=((((-1.0)*r01*x8539))+(((-1.0)*r00*sj5)));
j4eval[0]=x8540;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8539))))));
j4eval[2]=IKsign(x8540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8541=cj5*cj5;
IkReal x8542=r11*r11;
IkReal x8543=(r11*sj5);
IkReal x8544=(cj5*r10);
IkReal x8545=((((-2.0)*x8543*x8544))+(r12*r12)+x8542+(((-1.0)*x8541*x8542))+((x8541*(r10*r10))));
j4eval[0]=x8545;
j4eval[1]=IKsign(x8545);
j4eval[2]=((IKabs(r12))+(IKabs((x8544+(((-1.0)*x8543))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8546=cj5*cj5;
IkReal x8547=r11*r11;
IkReal x8548=(cj5*r10);
IkReal x8549=(r11*sj5);
CheckValue<IkReal> x8550=IKPowWithIntegerCheck(IKsign((((x8546*(r10*r10)))+(r12*r12)+x8547+(((-1.0)*x8546*x8547))+(((-2.0)*x8548*x8549)))),-1);
if(!x8550.valid){
continue;
}
CheckValue<IkReal> x8551 = IKatan2WithCheck(IkReal((x8548+(((-1.0)*x8549)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8550.value)))+(x8551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8552=IKsin(j4);
IkReal x8553=IKcos(j4);
IkReal x8554=(cj5*r10);
IkReal x8555=(r01*sj5);
IkReal x8556=(cj5*r00);
IkReal x8557=(cj5*r20);
IkReal x8558=((1.0)*x8553);
IkReal x8559=((1.0)*x8552);
IkReal x8560=(sj5*x8552);
evalcond[0]=((((-1.0)*r22*x8558))+(((-1.0)*x8557*x8559))+((r21*x8560)));
evalcond[1]=((((-1.0)*x8556*x8559))+(((-1.0)*r02*x8558))+((x8552*x8555)));
evalcond[2]=((((-1.0)*r12*x8559))+(((-1.0)*r11*sj5*x8558))+((x8553*x8554)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8558))+((r11*x8560))+(((-1.0)*x8554*x8559)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8559))+(((-1.0)*r21*sj5*x8558))+((cj1*sj2))+((x8553*x8557)));
evalcond[5]=((((-1.0)*x8555*x8558))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8553*x8556))+(((-1.0)*r02*x8559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8561=((1.0)*cj5);
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8561))+(((-1.0)*r00*sj5)))),-1);
if(!x8562.valid){
continue;
}
CheckValue<IkReal> x8563 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8562.value)))+(x8563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8564=IKsin(j4);
IkReal x8565=IKcos(j4);
IkReal x8566=(cj5*r10);
IkReal x8567=(r01*sj5);
IkReal x8568=(cj5*r00);
IkReal x8569=(cj5*r20);
IkReal x8570=((1.0)*x8565);
IkReal x8571=((1.0)*x8564);
IkReal x8572=(sj5*x8564);
evalcond[0]=(((r21*x8572))+(((-1.0)*x8569*x8571))+(((-1.0)*r22*x8570)));
evalcond[1]=((((-1.0)*r02*x8570))+((x8564*x8567))+(((-1.0)*x8568*x8571)));
evalcond[2]=((((-1.0)*r11*sj5*x8570))+((x8565*x8566))+(((-1.0)*r12*x8571)));
evalcond[3]=((1.0)+((r11*x8572))+(((-1.0)*x8566*x8571))+(((-1.0)*r12*x8570)));
evalcond[4]=((((-1.0)*r21*sj5*x8570))+((cj2*sj1))+((cj1*sj2))+((x8565*x8569))+(((-1.0)*r22*x8571)));
evalcond[5]=((((-1.0)*r02*x8571))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8565*x8568))+(((-1.0)*x8567*x8570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8573=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8573.valid){
continue;
}
CheckValue<IkReal> x8574 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8573.value)))+(x8574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8575=IKsin(j4);
IkReal x8576=IKcos(j4);
IkReal x8577=(cj5*r10);
IkReal x8578=(r01*sj5);
IkReal x8579=(cj5*r00);
IkReal x8580=(cj5*r20);
IkReal x8581=((1.0)*x8576);
IkReal x8582=((1.0)*x8575);
IkReal x8583=(sj5*x8575);
evalcond[0]=((((-1.0)*r22*x8581))+(((-1.0)*x8580*x8582))+((r21*x8583)));
evalcond[1]=(((x8575*x8578))+(((-1.0)*r02*x8581))+(((-1.0)*x8579*x8582)));
evalcond[2]=(((x8576*x8577))+(((-1.0)*r12*x8582))+(((-1.0)*r11*sj5*x8581)));
evalcond[3]=((1.0)+(((-1.0)*x8577*x8582))+((r11*x8583))+(((-1.0)*r12*x8581)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8582))+(((-1.0)*r21*sj5*x8581))+((cj1*sj2))+((x8576*x8580)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8582))+((x8576*x8579))+(((-1.0)*x8578*x8581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8584=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8584;
j4eval[1]=IKsign(x8584);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8585=((1.0)*cj5);
IkReal x8586=((((-1.0)*r21*x8585))+(((-1.0)*r20*sj5)));
j4eval[0]=x8586;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x8585)))))+(IKabs(r02)));
j4eval[2]=IKsign(x8586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8587=cj5*cj5;
IkReal x8588=r11*r11;
IkReal x8589=(cj5*r10);
IkReal x8590=(r11*sj5);
IkReal x8591=((((2.0)*x8589*x8590))+(((-1.0)*x8588))+(((-1.0)*x8587*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8587*x8588)));
j4eval[0]=x8591;
j4eval[1]=((IKabs(r12))+(IKabs((x8589+(((-1.0)*x8590))))));
j4eval[2]=IKsign(x8591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8592=cj5*cj5;
IkReal x8593=r11*r11;
IkReal x8594=(cj5*r10);
IkReal x8595=(r11*sj5);
CheckValue<IkReal> x8596 = IKatan2WithCheck(IkReal((x8594+(((-1.0)*x8595)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8596.valid){
continue;
}
CheckValue<IkReal> x8597=IKPowWithIntegerCheck(IKsign(((((2.0)*x8594*x8595))+(((-1.0)*x8593))+(((-1.0)*x8592*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8592*x8593)))),-1);
if(!x8597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8596.value)+(((1.5707963267949)*(x8597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8598=IKsin(j4);
IkReal x8599=IKcos(j4);
IkReal x8600=(cj5*r10);
IkReal x8601=(r01*sj5);
IkReal x8602=(cj5*r00);
IkReal x8603=(cj5*r20);
IkReal x8604=((1.0)*x8599);
IkReal x8605=((1.0)*x8598);
IkReal x8606=(sj5*x8598);
evalcond[0]=((((-1.0)*r22*x8604))+(((-1.0)*x8603*x8605))+((r21*x8606)));
evalcond[1]=(((x8598*x8601))+(((-1.0)*x8602*x8605))+(((-1.0)*r02*x8604)));
evalcond[2]=(((x8599*x8600))+(((-1.0)*r12*x8605))+(((-1.0)*r11*sj5*x8604)));
evalcond[3]=((-1.0)+((r11*x8606))+(((-1.0)*r12*x8604))+(((-1.0)*x8600*x8605)));
evalcond[4]=(((cj2*sj1))+((x8599*x8603))+((cj1*sj2))+(((-1.0)*r22*x8605))+(((-1.0)*r21*sj5*x8604)));
evalcond[5]=(((x8599*x8602))+(((-1.0)*x8601*x8604))+(((-1.0)*r02*x8605))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8607=((1.0)*cj5);
CheckValue<IkReal> x8608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8607))+(((-1.0)*r20*sj5)))),-1);
if(!x8608.valid){
continue;
}
CheckValue<IkReal> x8609 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8607))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8608.value)))+(x8609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8610=IKsin(j4);
IkReal x8611=IKcos(j4);
IkReal x8612=(cj5*r10);
IkReal x8613=(r01*sj5);
IkReal x8614=(cj5*r00);
IkReal x8615=(cj5*r20);
IkReal x8616=((1.0)*x8611);
IkReal x8617=((1.0)*x8610);
IkReal x8618=(sj5*x8610);
evalcond[0]=((((-1.0)*r22*x8616))+((r21*x8618))+(((-1.0)*x8615*x8617)));
evalcond[1]=((((-1.0)*x8614*x8617))+(((-1.0)*r02*x8616))+((x8610*x8613)));
evalcond[2]=((((-1.0)*r12*x8617))+((x8611*x8612))+(((-1.0)*r11*sj5*x8616)));
evalcond[3]=((-1.0)+(((-1.0)*x8612*x8617))+((r11*x8618))+(((-1.0)*r12*x8616)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8617))+(((-1.0)*r21*sj5*x8616))+((x8611*x8615)));
evalcond[5]=((((-1.0)*r02*x8617))+(((-1.0)*sj1*sj2))+(((-1.0)*x8613*x8616))+((x8611*x8614))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8619 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8619.valid){
continue;
}
CheckValue<IkReal> x8620=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8619.value)+(((1.5707963267949)*(x8620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8621=IKsin(j4);
IkReal x8622=IKcos(j4);
IkReal x8623=(cj5*r10);
IkReal x8624=(r01*sj5);
IkReal x8625=(cj5*r00);
IkReal x8626=(cj5*r20);
IkReal x8627=((1.0)*x8622);
IkReal x8628=((1.0)*x8621);
IkReal x8629=(sj5*x8621);
evalcond[0]=(((r21*x8629))+(((-1.0)*x8626*x8628))+(((-1.0)*r22*x8627)));
evalcond[1]=((((-1.0)*x8625*x8628))+((x8621*x8624))+(((-1.0)*r02*x8627)));
evalcond[2]=((((-1.0)*r12*x8628))+((x8622*x8623))+(((-1.0)*r11*sj5*x8627)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8627))+(((-1.0)*x8623*x8628))+((r11*x8629)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8627))+(((-1.0)*r22*x8628))+((x8622*x8626)));
evalcond[5]=((((-1.0)*x8624*x8627))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8622*x8625))+(((-1.0)*r02*x8628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8630=((-1.0)*r00);
IkReal x8632 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8632)==0){
continue;
}
IkReal x8631=pow(x8632,-0.5);
CheckValue<IkReal> x8633 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8630),IKFAST_ATAN2_MAGTHRESH);
if(!x8633.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8633.value));
IkReal gconst145=(r01*x8631);
IkReal gconst146=(x8630*x8631);
CheckValue<IkReal> x8634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8635=((-1.0)*r00);
IkReal x8636=x8631;
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8635),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
IkReal x8637=((-1.0)*(x8638.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8637;
IkReal gconst144=x8637;
IkReal gconst145=(r01*x8636);
IkReal gconst146=(x8635*x8636);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8639=((1.0)*sj0);
IkReal x8640=((1.0)*gconst145);
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8639))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8640))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
CheckValue<IkReal> x8642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8640)))),-1);
if(!x8642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8641.value)+(((1.5707963267949)*(x8642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8643=IKsin(j4);
IkReal x8644=IKcos(j4);
IkReal x8645=(gconst146*r10);
IkReal x8646=(sj1*sj2);
IkReal x8647=(gconst146*r20);
IkReal x8648=(gconst146*r00);
IkReal x8649=((1.0)*x8644);
IkReal x8650=((1.0)*x8643);
IkReal x8651=(gconst145*x8643);
IkReal x8652=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8651))+(((-1.0)*x8647*x8650))+(((-1.0)*r22*x8649)));
evalcond[1]=(cj0+(((-1.0)*x8645*x8650))+((r11*x8651))+(((-1.0)*r12*x8649)));
evalcond[2]=(((r01*x8651))+(((-1.0)*sj0))+(((-1.0)*r02*x8649))+(((-1.0)*x8648*x8650)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8644*x8647))+(((-1.0)*gconst145*r21*x8649))+(((-1.0)*r22*x8650)));
evalcond[4]=((((-1.0)*gconst145*r01*x8649))+((cj0*x8646))+((x8644*x8648))+(((-1.0)*cj0*x8652))+(((-1.0)*r02*x8650)));
evalcond[5]=((((-1.0)*r12*x8650))+(((-1.0)*sj0*x8652))+(((-1.0)*gconst145*r11*x8649))+((x8644*x8645))+((sj0*x8646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8653=((1.0)*gconst146);
CheckValue<IkReal> x8654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8653))+(((-1.0)*gconst145*r10)))),-1);
if(!x8654.valid){
continue;
}
CheckValue<IkReal> x8655 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8653))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8654.value)))+(x8655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8656=IKsin(j4);
IkReal x8657=IKcos(j4);
IkReal x8658=(gconst146*r10);
IkReal x8659=(sj1*sj2);
IkReal x8660=(gconst146*r20);
IkReal x8661=(gconst146*r00);
IkReal x8662=((1.0)*x8657);
IkReal x8663=((1.0)*x8656);
IkReal x8664=(gconst145*x8656);
IkReal x8665=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8662))+(((-1.0)*x8660*x8663))+((r21*x8664)));
evalcond[1]=(cj0+(((-1.0)*r12*x8662))+(((-1.0)*x8658*x8663))+((r11*x8664)));
evalcond[2]=((((-1.0)*x8661*x8663))+(((-1.0)*sj0))+(((-1.0)*r02*x8662))+((r01*x8664)));
evalcond[3]=(((cj2*sj1))+((x8657*x8660))+((cj1*sj2))+(((-1.0)*r22*x8663))+(((-1.0)*gconst145*r21*x8662)));
evalcond[4]=(((x8657*x8661))+(((-1.0)*cj0*x8665))+(((-1.0)*r02*x8663))+((cj0*x8659))+(((-1.0)*gconst145*r01*x8662)));
evalcond[5]=((((-1.0)*sj0*x8665))+(((-1.0)*gconst145*r11*x8662))+(((-1.0)*r12*x8663))+((sj0*x8659))+((x8657*x8658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8666=((-1.0)*r01);
IkReal x8668 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8668)==0){
continue;
}
IkReal x8667=pow(x8668,-0.5);
CheckValue<IkReal> x8669 = IKatan2WithCheck(IkReal(x8666),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8669.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8669.value))));
IkReal gconst148=(x8666*x8667);
IkReal gconst149=((1.0)*r00*x8667);
CheckValue<IkReal> x8670 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8670.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8670.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8671=((-1.0)*r01);
CheckValue<IkReal> x8674 = IKatan2WithCheck(IkReal(x8671),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8674.valid){
continue;
}
IkReal x8672=((1.0)*(x8674.value));
IkReal x8673=x8667;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8672)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8672)));
IkReal gconst148=(x8671*x8673);
IkReal gconst149=((1.0)*r00*x8673);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8675=((-1.0)*r01);
CheckValue<IkReal> x8678 = IKatan2WithCheck(IkReal(x8675),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8678.valid){
continue;
}
IkReal x8676=((1.0)*(x8678.value));
IkReal x8677=x8667;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8676)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8676)));
IkReal gconst148=(x8675*x8677);
IkReal gconst149=((1.0)*r00*x8677);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8679=((-1.0)*r01);
CheckValue<IkReal> x8682 = IKatan2WithCheck(IkReal(x8679),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8682.valid){
continue;
}
IkReal x8680=((1.0)*(x8682.value));
IkReal x8681=x8667;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8680)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8680)));
IkReal gconst148=(x8679*x8681);
IkReal gconst149=((1.0)*r00*x8681);
IkReal x8683=r02*r02;
IkReal x8684=(r12*sj0);
IkReal x8685=((1.0)*cj0);
IkReal x8686=x8667;
j4eval[0]=((IKabs(((((-1.0)*r02*x8685))+(((-1.0)*x8684)))))+(IKabs((((cj0*x8683*x8686))+((r02*x8684*x8686))+(((-1.0)*x8685*x8686))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8687=((1.0)*sj0);
IkReal x8688=((1.0)*gconst148);
CheckValue<IkReal> x8689 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8687))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst148*r11*x8687))+((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8688))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8689.valid){
continue;
}
CheckValue<IkReal> x8690=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8688)))),-1);
if(!x8690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8689.value)+(((1.5707963267949)*(x8690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8691=IKsin(j4);
IkReal x8692=IKcos(j4);
IkReal x8693=(gconst148*r11);
IkReal x8694=(sj1*sj2);
IkReal x8695=((1.0)*x8692);
IkReal x8696=(gconst149*x8692);
IkReal x8697=(gconst148*x8691);
IkReal x8698=((1.0)*cj1*cj2);
IkReal x8699=((1.0)*x8691);
evalcond[0]=(((r21*x8697))+(((-1.0)*gconst149*r20*x8699))+(((-1.0)*r22*x8695)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8699))+((x8691*x8693))+(((-1.0)*r12*x8695)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8695))+((r01*x8697))+(((-1.0)*gconst149*r00*x8699)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8695))+((r20*x8696))+(((-1.0)*r22*x8699)));
evalcond[4]=(((cj0*x8694))+(((-1.0)*cj0*x8698))+((r00*x8696))+(((-1.0)*r02*x8699))+(((-1.0)*gconst148*r01*x8695)));
evalcond[5]=(((sj0*x8694))+(((-1.0)*sj0*x8698))+((r10*x8696))+(((-1.0)*r12*x8699))+(((-1.0)*x8693*x8695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8700=((1.0)*gconst149);
CheckValue<IkReal> x8701 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8700))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8701.valid){
continue;
}
CheckValue<IkReal> x8702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8700)))),-1);
if(!x8702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8701.value)+(((1.5707963267949)*(x8702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8703=IKsin(j4);
IkReal x8704=IKcos(j4);
IkReal x8705=(gconst148*r11);
IkReal x8706=(sj1*sj2);
IkReal x8707=((1.0)*x8704);
IkReal x8708=(gconst149*x8704);
IkReal x8709=(gconst148*x8703);
IkReal x8710=((1.0)*cj1*cj2);
IkReal x8711=((1.0)*x8703);
evalcond[0]=(((r21*x8709))+(((-1.0)*gconst149*r20*x8711))+(((-1.0)*r22*x8707)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8711))+(((-1.0)*r12*x8707))+((x8703*x8705)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8711))+(((-1.0)*r02*x8707))+((r01*x8709)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8707))+((cj1*sj2))+(((-1.0)*r22*x8711))+((r20*x8708)));
evalcond[4]=((((-1.0)*r02*x8711))+(((-1.0)*gconst148*r01*x8707))+((cj0*x8706))+(((-1.0)*cj0*x8710))+((r00*x8708)));
evalcond[5]=((((-1.0)*x8705*x8707))+((r10*x8708))+(((-1.0)*sj0*x8710))+(((-1.0)*r12*x8711))+((sj0*x8706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8712=((1.0)*gconst149);
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
CheckValue<IkReal> x8714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8712))+(((-1.0)*gconst148*r00)))),-1);
if(!x8714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8713.value)+(((1.5707963267949)*(x8714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8715=IKsin(j4);
IkReal x8716=IKcos(j4);
IkReal x8717=(gconst148*r11);
IkReal x8718=(sj1*sj2);
IkReal x8719=((1.0)*x8716);
IkReal x8720=(gconst149*x8716);
IkReal x8721=(gconst148*x8715);
IkReal x8722=((1.0)*cj1*cj2);
IkReal x8723=((1.0)*x8715);
evalcond[0]=(((r21*x8721))+(((-1.0)*r22*x8719))+(((-1.0)*gconst149*r20*x8723)));
evalcond[1]=((((-1.0)*gconst149*r10*x8723))+cj0+((x8715*x8717))+(((-1.0)*r12*x8719)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8719))+(((-1.0)*gconst149*r00*x8723))+((r01*x8721)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8719))+((cj1*sj2))+((r20*x8720))+(((-1.0)*r22*x8723)));
evalcond[4]=((((-1.0)*cj0*x8722))+((cj0*x8718))+(((-1.0)*gconst148*r01*x8719))+(((-1.0)*r02*x8723))+((r00*x8720)));
evalcond[5]=(((r10*x8720))+((sj0*x8718))+(((-1.0)*x8717*x8719))+(((-1.0)*sj0*x8722))+(((-1.0)*r12*x8723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8724=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8724;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8725=((1.0)*cj5);
IkReal x8726=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8725)));
j4eval[0]=x8726;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8725)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8727=cj5*cj5;
IkReal x8728=r01*r01;
IkReal x8729=(r01*sj5);
IkReal x8730=(cj5*r00);
IkReal x8731=(((x8727*x8728))+(((-1.0)*(r02*r02)))+(((-1.0)*x8728))+(((-1.0)*x8727*(r00*r00)))+(((2.0)*x8729*x8730)));
j4eval[0]=x8731;
j4eval[1]=IKsign(x8731);
j4eval[2]=((IKabs((x8730+(((-1.0)*x8729)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8732=cj5*cj5;
IkReal x8733=r01*r01;
IkReal x8734=(r01*sj5);
IkReal x8735=(cj5*r00);
CheckValue<IkReal> x8736=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8732*(r00*r00)))+((x8732*x8733))+(((-1.0)*(r02*r02)))+(((-1.0)*x8733))+(((2.0)*x8734*x8735)))),-1);
if(!x8736.valid){
continue;
}
CheckValue<IkReal> x8737 = IKatan2WithCheck(IkReal((x8735+(((-1.0)*x8734)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8736.value)))+(x8737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8738=IKsin(j4);
IkReal x8739=IKcos(j4);
IkReal x8740=(cj5*r10);
IkReal x8741=(r01*sj5);
IkReal x8742=(cj5*r00);
IkReal x8743=(cj5*r20);
IkReal x8744=((1.0)*x8739);
IkReal x8745=((1.0)*x8738);
IkReal x8746=(sj5*x8738);
evalcond[0]=((((-1.0)*x8743*x8745))+(((-1.0)*r22*x8744))+((r21*x8746)));
evalcond[1]=((((-1.0)*x8740*x8745))+(((-1.0)*r12*x8744))+((r11*x8746)));
evalcond[2]=((((-1.0)*x8741*x8744))+((x8739*x8742))+(((-1.0)*r02*x8745)));
evalcond[3]=((-1.0)+(((-1.0)*x8742*x8745))+((x8738*x8741))+(((-1.0)*r02*x8744)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8744))+((cj1*sj2))+(((-1.0)*r22*x8745))+((x8739*x8743)));
evalcond[5]=((((-1.0)*r12*x8745))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8739*x8740))+(((-1.0)*r11*sj5*x8744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8747=((1.0)*cj5);
CheckValue<IkReal> x8748 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8748.valid){
continue;
}
CheckValue<IkReal> x8749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8747))+(((-1.0)*r10*sj5)))),-1);
if(!x8749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8748.value)+(((1.5707963267949)*(x8749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8750=IKsin(j4);
IkReal x8751=IKcos(j4);
IkReal x8752=(cj5*r10);
IkReal x8753=(r01*sj5);
IkReal x8754=(cj5*r00);
IkReal x8755=(cj5*r20);
IkReal x8756=((1.0)*x8751);
IkReal x8757=((1.0)*x8750);
IkReal x8758=(sj5*x8750);
evalcond[0]=((((-1.0)*x8755*x8757))+(((-1.0)*r22*x8756))+((r21*x8758)));
evalcond[1]=(((r11*x8758))+(((-1.0)*r12*x8756))+(((-1.0)*x8752*x8757)));
evalcond[2]=((((-1.0)*r02*x8757))+((x8751*x8754))+(((-1.0)*x8753*x8756)));
evalcond[3]=((-1.0)+(((-1.0)*x8754*x8757))+((x8750*x8753))+(((-1.0)*r02*x8756)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8757))+((cj1*sj2))+((x8751*x8755))+(((-1.0)*r21*sj5*x8756)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8756))+((x8751*x8752))+(((-1.0)*r12*x8757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8759=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8759.valid){
continue;
}
CheckValue<IkReal> x8760 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8759.value)))+(x8760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8761=IKsin(j4);
IkReal x8762=IKcos(j4);
IkReal x8763=(cj5*r10);
IkReal x8764=(r01*sj5);
IkReal x8765=(cj5*r00);
IkReal x8766=(cj5*r20);
IkReal x8767=((1.0)*x8762);
IkReal x8768=((1.0)*x8761);
IkReal x8769=(sj5*x8761);
evalcond[0]=((((-1.0)*x8766*x8768))+(((-1.0)*r22*x8767))+((r21*x8769)));
evalcond[1]=((((-1.0)*r12*x8767))+((r11*x8769))+(((-1.0)*x8763*x8768)));
evalcond[2]=((((-1.0)*r02*x8768))+(((-1.0)*x8764*x8767))+((x8762*x8765)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8767))+((x8761*x8764))+(((-1.0)*x8765*x8768)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8768))+(((-1.0)*r21*sj5*x8767))+((x8762*x8766)));
evalcond[5]=((((-1.0)*r11*sj5*x8767))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8768))+((x8762*x8763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8770=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8770;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8771=((1.0)*cj5);
IkReal x8772=((((-1.0)*r21*x8771))+(((-1.0)*r20*sj5)));
j4eval[0]=x8772;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8771))+((r11*sj5))))));
j4eval[2]=IKsign(x8772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8773=cj5*cj5;
IkReal x8774=r01*r01;
IkReal x8775=(cj5*r00);
IkReal x8776=(r01*sj5);
IkReal x8777=((((-2.0)*x8775*x8776))+x8774+((x8773*(r00*r00)))+(r02*r02)+(((-1.0)*x8773*x8774)));
j4eval[0]=x8777;
j4eval[1]=((IKabs(r02))+(IKabs((x8775+(((-1.0)*x8776))))));
j4eval[2]=IKsign(x8777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8778=cj5*cj5;
IkReal x8779=r01*r01;
IkReal x8780=(r01*sj5);
IkReal x8781=(cj5*r00);
CheckValue<IkReal> x8782 = IKatan2WithCheck(IkReal((x8781+(((-1.0)*x8780)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8782.valid){
continue;
}
CheckValue<IkReal> x8783=IKPowWithIntegerCheck(IKsign((((x8778*(r00*r00)))+x8779+(((-1.0)*x8778*x8779))+(r02*r02)+(((-2.0)*x8780*x8781)))),-1);
if(!x8783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8782.value)+(((1.5707963267949)*(x8783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8784=IKsin(j4);
IkReal x8785=IKcos(j4);
IkReal x8786=(cj5*r10);
IkReal x8787=(r01*sj5);
IkReal x8788=(cj5*r00);
IkReal x8789=(cj5*r20);
IkReal x8790=((1.0)*x8785);
IkReal x8791=((1.0)*x8784);
IkReal x8792=(sj5*x8784);
evalcond[0]=((((-1.0)*x8789*x8791))+((r21*x8792))+(((-1.0)*r22*x8790)));
evalcond[1]=((((-1.0)*r12*x8790))+(((-1.0)*x8786*x8791))+((r11*x8792)));
evalcond[2]=(((x8785*x8788))+(((-1.0)*r02*x8791))+(((-1.0)*x8787*x8790)));
evalcond[3]=((1.0)+((x8784*x8787))+(((-1.0)*x8788*x8791))+(((-1.0)*r02*x8790)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8785*x8789))+(((-1.0)*r22*x8791))+(((-1.0)*r21*sj5*x8790)));
evalcond[5]=((((-1.0)*r12*x8791))+(((-1.0)*r11*sj5*x8790))+(((-1.0)*sj1*sj2))+((x8785*x8786))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8793=((1.0)*cj5);
CheckValue<IkReal> x8794 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8794.valid){
continue;
}
CheckValue<IkReal> x8795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8793))+(((-1.0)*r20*sj5)))),-1);
if(!x8795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8794.value)+(((1.5707963267949)*(x8795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8796=IKsin(j4);
IkReal x8797=IKcos(j4);
IkReal x8798=(cj5*r10);
IkReal x8799=(r01*sj5);
IkReal x8800=(cj5*r00);
IkReal x8801=(cj5*r20);
IkReal x8802=((1.0)*x8797);
IkReal x8803=((1.0)*x8796);
IkReal x8804=(sj5*x8796);
evalcond[0]=(((r21*x8804))+(((-1.0)*r22*x8802))+(((-1.0)*x8801*x8803)));
evalcond[1]=((((-1.0)*r12*x8802))+((r11*x8804))+(((-1.0)*x8798*x8803)));
evalcond[2]=(((x8797*x8800))+(((-1.0)*r02*x8803))+(((-1.0)*x8799*x8802)));
evalcond[3]=((1.0)+((x8796*x8799))+(((-1.0)*x8800*x8803))+(((-1.0)*r02*x8802)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8803))+((x8797*x8801))+((cj1*sj2))+(((-1.0)*r21*sj5*x8802)));
evalcond[5]=((((-1.0)*r12*x8803))+(((-1.0)*sj1*sj2))+((x8797*x8798))+((cj1*cj2))+(((-1.0)*r11*sj5*x8802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8805 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8805.valid){
continue;
}
CheckValue<IkReal> x8806=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8805.value)+(((1.5707963267949)*(x8806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8807=IKsin(j4);
IkReal x8808=IKcos(j4);
IkReal x8809=(cj5*r10);
IkReal x8810=(r01*sj5);
IkReal x8811=(cj5*r00);
IkReal x8812=(cj5*r20);
IkReal x8813=((1.0)*x8808);
IkReal x8814=((1.0)*x8807);
IkReal x8815=(sj5*x8807);
evalcond[0]=(((r21*x8815))+(((-1.0)*r22*x8813))+(((-1.0)*x8812*x8814)));
evalcond[1]=((((-1.0)*r12*x8813))+((r11*x8815))+(((-1.0)*x8809*x8814)));
evalcond[2]=((((-1.0)*r02*x8814))+((x8808*x8811))+(((-1.0)*x8810*x8813)));
evalcond[3]=((1.0)+((x8807*x8810))+(((-1.0)*r02*x8813))+(((-1.0)*x8811*x8814)));
evalcond[4]=((((-1.0)*r22*x8814))+((cj2*sj1))+((cj1*sj2))+((x8808*x8812))+(((-1.0)*r21*sj5*x8813)));
evalcond[5]=((((-1.0)*r12*x8814))+(((-1.0)*sj1*sj2))+((x8808*x8809))+((cj1*cj2))+(((-1.0)*r11*sj5*x8813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8816=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8816);
rxp1_1=(px*r21);
rxp1_2=(r11*x8816);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8817=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8817);
rxp1_1=(px*r21);
rxp1_2=(r11*x8817);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8818=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8818);
rxp1_1=(px*r21);
rxp1_2=(r11*x8818);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8821=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8821.valid){
continue;
}
IkReal x8819=x8821.value;
IkReal x8820=(sj0*x8819);
cj4array[0]=((((-1.0)*sj1*sj2*x8820))+((cj1*cj2*x8820)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8822=IKsin(j4);
IkReal x8823=IKcos(j4);
IkReal x8824=(r21*sj5);
IkReal x8825=(cj5*r20);
IkReal x8826=((1.0)*x8822);
IkReal x8827=((1.0)*x8823);
evalcond[0]=((-1.0)*r02*x8822);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8827)));
evalcond[2]=(((x8822*x8824))+(((-1.0)*x8825*x8826)));
evalcond[3]=((((-1.0)*cj5*r10*x8826))+((r11*sj5*x8822)));
evalcond[4]=(((x8823*x8825))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8824*x8827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8830=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8830.valid){
continue;
}
IkReal x8828=x8830.value;
IkReal x8829=((1.0)*x8828);
cj4array[0]=((((-1.0)*cj1*sj2*x8829))+(((-1.0)*cj2*sj1*x8829)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8831=IKsin(j4);
IkReal x8832=IKcos(j4);
IkReal x8833=(r11*sj5);
IkReal x8834=((1.0)*sj0);
IkReal x8835=((1.0)*x8832);
IkReal x8836=((1.0)*cj5*x8831);
evalcond[0]=((-1.0)*r02*x8831);
evalcond[1]=((((-1.0)*r02*x8835))+(((-1.0)*x8834)));
evalcond[2]=((((-1.0)*r20*x8836))+((r21*sj5*x8831)));
evalcond[3]=(((x8831*x8833))+(((-1.0)*r10*x8836)));
evalcond[4]=((((-1.0)*x8833*x8835))+(((-1.0)*cj1*cj2*x8834))+((cj5*r10*x8832))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8837=IKPowWithIntegerCheck(r02,-1);
if(!x8837.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8837.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8838=IKsin(j4);
IkReal x8839=IKcos(j4);
IkReal x8840=(cj5*x8839);
IkReal x8841=(sj5*x8838);
IkReal x8842=((1.0)*sj5*x8839);
IkReal x8843=((1.0)*cj5*x8838);
evalcond[0]=((-1.0)*r02*x8838);
evalcond[1]=(((r21*x8841))+(((-1.0)*r20*x8843)));
evalcond[2]=((((-1.0)*r10*x8843))+((r11*x8841)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8840))+(((-1.0)*r21*x8842)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8840))+((sj0*sj1*sj2))+(((-1.0)*r11*x8842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8844=((1.0)*sj0);
IkReal x8845=((1.0)*cj0);
CheckValue<IkReal> x8846 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8845))+(((-1.0)*r12*x8844)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8845))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8846.valid){
continue;
}
CheckValue<IkReal> x8847=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8846.value)+(((1.5707963267949)*(x8847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8848=IKsin(j4);
IkReal x8849=IKcos(j4);
IkReal x8850=(cj5*r10);
IkReal x8851=(sj1*sj2);
IkReal x8852=(r01*sj5);
IkReal x8853=(cj5*r00);
IkReal x8854=(cj5*r20);
IkReal x8855=((1.0)*x8849);
IkReal x8856=((1.0)*cj1*cj2);
IkReal x8857=((1.0)*x8848);
IkReal x8858=(sj5*x8848);
evalcond[0]=((((-1.0)*r22*x8855))+((r21*x8858))+(((-1.0)*x8854*x8857)));
evalcond[1]=(cj0+(((-1.0)*x8850*x8857))+(((-1.0)*r12*x8855))+((r11*x8858)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8853*x8857))+((x8848*x8852))+(((-1.0)*r02*x8855)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8857))+((cj1*sj2))+((x8849*x8854))+(((-1.0)*r21*sj5*x8855)));
evalcond[4]=((((-1.0)*x8852*x8855))+(((-1.0)*cj0*x8856))+((x8849*x8853))+((cj0*x8851))+(((-1.0)*r02*x8857)));
evalcond[5]=(((sj0*x8851))+(((-1.0)*r12*x8857))+(((-1.0)*r11*sj5*x8855))+((x8849*x8850))+(((-1.0)*sj0*x8856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8859=((1.0)*cj5);
CheckValue<IkReal> x8860 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8860.valid){
continue;
}
CheckValue<IkReal> x8861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8859)))),-1);
if(!x8861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8860.value)+(((1.5707963267949)*(x8861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8862=IKsin(j4);
IkReal x8863=IKcos(j4);
IkReal x8864=(cj5*r10);
IkReal x8865=(sj1*sj2);
IkReal x8866=(r01*sj5);
IkReal x8867=(cj5*r00);
IkReal x8868=(cj5*r20);
IkReal x8869=((1.0)*x8863);
IkReal x8870=((1.0)*cj1*cj2);
IkReal x8871=((1.0)*x8862);
IkReal x8872=(sj5*x8862);
evalcond[0]=((((-1.0)*x8868*x8871))+(((-1.0)*r22*x8869))+((r21*x8872)));
evalcond[1]=((((-1.0)*x8864*x8871))+cj0+((r11*x8872))+(((-1.0)*r12*x8869)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8867*x8871))+((x8862*x8866))+(((-1.0)*r02*x8869)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8871))+((cj1*sj2))+(((-1.0)*r21*sj5*x8869))+((x8863*x8868)));
evalcond[4]=((((-1.0)*x8866*x8869))+(((-1.0)*r02*x8871))+((x8863*x8867))+((cj0*x8865))+(((-1.0)*cj0*x8870)));
evalcond[5]=((((-1.0)*r11*sj5*x8869))+((x8863*x8864))+(((-1.0)*r12*x8871))+((sj0*x8865))+(((-1.0)*sj0*x8870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8873=((1.0)*cj5);
CheckValue<IkReal> x8874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8873))+(((-1.0)*r00*sj5)))),-1);
if(!x8874.valid){
continue;
}
CheckValue<IkReal> x8875 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8874.value)))+(x8875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8876=IKsin(j4);
IkReal x8877=IKcos(j4);
IkReal x8878=(cj5*r10);
IkReal x8879=(sj1*sj2);
IkReal x8880=(r01*sj5);
IkReal x8881=(cj5*r00);
IkReal x8882=(cj5*r20);
IkReal x8883=((1.0)*x8877);
IkReal x8884=((1.0)*cj1*cj2);
IkReal x8885=((1.0)*x8876);
IkReal x8886=(sj5*x8876);
evalcond[0]=((((-1.0)*r22*x8883))+((r21*x8886))+(((-1.0)*x8882*x8885)));
evalcond[1]=(cj0+(((-1.0)*r12*x8883))+(((-1.0)*x8878*x8885))+((r11*x8886)));
evalcond[2]=((((-1.0)*x8881*x8885))+(((-1.0)*sj0))+(((-1.0)*r02*x8883))+((x8876*x8880)));
evalcond[3]=((((-1.0)*r22*x8885))+((cj2*sj1))+((cj1*sj2))+((x8877*x8882))+(((-1.0)*r21*sj5*x8883)));
evalcond[4]=((((-1.0)*cj0*x8884))+(((-1.0)*r02*x8885))+((x8877*x8881))+(((-1.0)*x8880*x8883))+((cj0*x8879)));
evalcond[5]=(((x8877*x8878))+(((-1.0)*r12*x8885))+(((-1.0)*r11*sj5*x8883))+(((-1.0)*sj0*x8884))+((sj0*x8879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8887=cj1*cj1;
IkReal x8888=cj2*cj2;
IkReal x8889=(r00*sj5);
IkReal x8890=(cj1*py);
IkReal x8891=(cj1*cj2);
IkReal x8892=(sj1*sj2);
IkReal x8893=(cj5*r01);
IkReal x8894=(cj5*r11);
IkReal x8895=((42075.0)*cj1);
IkReal x8896=(r10*sj5);
IkReal x8897=((392000.0)*px);
CheckValue<IkReal> x8898=IKPowWithIntegerCheck(IKsign(((171353.0)+(((-307328.0)*x8891*x8892))+(((-333200.0)*cj1*x8892))+(((26961.0)*x8887))+(((-153664.0)*x8888))+(((333200.0)*cj2*x8887))+(((307328.0)*x8887*x8888)))),-1);
if(!x8898.valid){
continue;
}
CheckValue<IkReal> x8899 = IKatan2WithCheck(IkReal(((((38808.0)*x8891*x8894))+(((38808.0)*x8891*x8896))+(((-38808.0)*x8892*x8894))+(((-38808.0)*x8892*x8896))+(((-13167.0)*x8893))+(((-13167.0)*x8889))+(((-392000.0)*py*x8892))+((x8894*x8895))+(((392000.0)*cj2*x8890))+((x8895*x8896))+(((-133000.0)*px))+(((425000.0)*x8890)))),IkReal(((((38808.0)*x8891*x8893))+(((-38808.0)*x8892*x8893))+(((13167.0)*x8896))+(((13167.0)*x8894))+(((38808.0)*x8889*x8891))+((x8889*x8895))+((x8893*x8895))+(((-38808.0)*x8889*x8892))+(((425000.0)*cj1*px))+(((-1.0)*x8892*x8897))+(((133000.0)*py))+((x8891*x8897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8899.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8898.value)))+(x8899.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8900=IKcos(j0);
IkReal x8901=IKsin(j0);
IkReal x8902=((0.425)*cj1);
IkReal x8903=(cj1*cj2);
IkReal x8904=(sj1*sj2);
IkReal x8905=((0.099)*sj5);
IkReal x8906=((0.099)*cj5);
IkReal x8907=((0.392)*x8901);
IkReal x8908=((0.392)*x8900);
evalcond[0]=(((x8903*x8908))+((x8900*x8902))+(((-1.0)*px))+(((-1.0)*x8904*x8908))+(((-0.133)*x8901))+(((-1.0)*r00*x8905))+(((-1.0)*r01*x8906)));
evalcond[1]=((((-1.0)*r10*x8905))+((x8903*x8907))+((x8901*x8902))+(((-1.0)*py))+(((0.133)*x8900))+(((-1.0)*x8904*x8907))+(((-1.0)*r11*x8906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8909=((1.0)*cj5);
IkReal x8910=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8909)));
j4eval[0]=x8910;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x8909))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x8910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8911=((1.0)*cj5);
IkReal x8912=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8911)));
j4eval[0]=x8912;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8911))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8913=((1.0)*sj0);
IkReal x8914=((1.0)*cj0);
IkReal x8915=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8915;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x8913))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8914)))))+(IKabs(((((-1.0)*r02*x8914))+(((-1.0)*r12*x8913))))));
j4eval[2]=IKsign(x8915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8916=((-1.0)*r20);
IkReal x8918 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8918)==0){
continue;
}
IkReal x8917=pow(x8918,-0.5);
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8916),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8919.value));
IkReal gconst1=(r21*x8917);
IkReal gconst2=(x8916*x8917);
CheckValue<IkReal> x8920 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8920.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8920.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8921=((-1.0)*r20);
IkReal x8922=x8917;
CheckValue<IkReal> x8924 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8921),IKFAST_ATAN2_MAGTHRESH);
if(!x8924.valid){
continue;
}
IkReal x8923=((-1.0)*(x8924.value));
sj5=gconst1;
cj5=gconst2;
j5=x8923;
IkReal gconst0=x8923;
IkReal gconst1=(r21*x8922);
IkReal gconst2=(x8921*x8922);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8925=((-1.0)*r20);
IkReal x8926=x8917;
CheckValue<IkReal> x8928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8925),IKFAST_ATAN2_MAGTHRESH);
if(!x8928.valid){
continue;
}
IkReal x8927=((-1.0)*(x8928.value));
sj5=gconst1;
cj5=gconst2;
j5=x8927;
IkReal gconst0=x8927;
IkReal gconst1=(r21*x8926);
IkReal gconst2=(x8925*x8926);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8929=((-1.0)*r20);
IkReal x8930=x8917;
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8929),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
IkReal x8931=((-1.0)*(x8932.value));
sj5=gconst1;
cj5=gconst2;
j5=x8931;
IkReal gconst0=x8931;
IkReal gconst1=(r21*x8930);
IkReal gconst2=(x8929*x8930);
IkReal x8933=r22*r22;
CheckValue<IkReal> x8937=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8933))),-1);
if(!x8937.valid){
continue;
}
IkReal x8934=x8937.value;
IkReal x8935=(sj3*x8934);
IkReal x8936=((((2.0)*x8935*(r20*r20)*(r21*r21)))+((sj3*x8933))+((x8935*(r21*r21*r21*r21)))+((x8935*(r20*r20*r20*r20))));
j4eval[0]=x8936;
j4eval[1]=IKsign(x8936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8938=((-1.0)*r20);
IkReal x8939=x8917;
CheckValue<IkReal> x8941 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8938),IKFAST_ATAN2_MAGTHRESH);
if(!x8941.valid){
continue;
}
IkReal x8940=((-1.0)*(x8941.value));
sj5=gconst1;
cj5=gconst2;
j5=x8940;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8940;
IkReal gconst1=(r21*x8939);
IkReal gconst2=(x8938*x8939);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8942=((-1.0)*r20);
IkReal x8943=x8917;
CheckValue<IkReal> x8945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8942),IKFAST_ATAN2_MAGTHRESH);
if(!x8945.valid){
continue;
}
IkReal x8944=((-1.0)*(x8945.value));
sj5=gconst1;
cj5=gconst2;
j5=x8944;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8944;
IkReal gconst1=(r21*x8943);
IkReal gconst2=(x8942*x8943);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8946=((-1.0)*r20);
IkReal x8947=x8917;
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8946),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
IkReal x8948=((-1.0)*(x8949.value));
sj5=gconst1;
cj5=gconst2;
j5=x8948;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8948;
IkReal gconst1=(r21*x8947);
IkReal gconst2=(x8946*x8947);
IkReal x8950=((1.0)*(r22*r22));
CheckValue<IkReal> x8954=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8950))),-1);
if(!x8954.valid){
continue;
}
IkReal x8951=x8954.value;
IkReal x8952=((1.0)*x8951);
IkReal x8953=((((-1.0)*x8952*(r20*r20*r20*r20)))+(((-1.0)*x8952*(r21*r21*r21*r21)))+(((-2.0)*x8951*(r20*r20)*(r21*r21)))+(((-1.0)*x8950)));
j4eval[0]=x8953;
j4eval[1]=IKsign(x8953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8955=((-1.0)*r20);
IkReal x8956=x8917;
CheckValue<IkReal> x8958 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8955),IKFAST_ATAN2_MAGTHRESH);
if(!x8958.valid){
continue;
}
IkReal x8957=((-1.0)*(x8958.value));
sj5=gconst1;
cj5=gconst2;
j5=x8957;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8957;
IkReal gconst1=(r21*x8956);
IkReal gconst2=(x8955*x8956);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8959=((-1.0)*r20);
IkReal x8960=x8917;
CheckValue<IkReal> x8962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8959),IKFAST_ATAN2_MAGTHRESH);
if(!x8962.valid){
continue;
}
IkReal x8961=((-1.0)*(x8962.value));
sj5=gconst1;
cj5=gconst2;
j5=x8961;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8961;
IkReal gconst1=(r21*x8960);
IkReal gconst2=(x8959*x8960);
IkReal x8963=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8967=IKPowWithIntegerCheck(x8963,-1);
if(!x8967.valid){
continue;
}
IkReal x8964=x8967.value;
IkReal x8965=((1.0)*x8964);
IkReal x8966=((((-1.0)*x8965*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8964))+(((-1.0)*x8965*(r11*r11)*(r21*r21))));
j4eval[0]=x8966;
j4eval[1]=r12;
j4eval[2]=x8963;
j4eval[3]=IKsign(x8966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8968=((-1.0)*r20);
IkReal x8969=x8917;
CheckValue<IkReal> x8971 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8968),IKFAST_ATAN2_MAGTHRESH);
if(!x8971.valid){
continue;
}
IkReal x8970=((-1.0)*(x8971.value));
sj5=gconst1;
cj5=gconst2;
j5=x8970;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8970;
IkReal gconst1=(r21*x8969);
IkReal gconst2=(x8968*x8969);
IkReal x8972=r22*r22;
IkReal x8973=(cj1*r12*sj2);
IkReal x8974=(cj2*r12*sj1);
CheckValue<IkReal> x8978=IKPowWithIntegerCheck(((-1.0)+x8972),-1);
if(!x8978.valid){
continue;
}
IkReal x8975=x8978.value;
if((((1.0)+(((-1.0)*x8972)))) < -0.00001)
continue;
IkReal x8976=IKsqrt(((1.0)+(((-1.0)*x8972))));
IkReal x8977=(r22*x8975*x8976);
j4eval[0]=((IKabs(((((-1.0)*x8973))+(((-1.0)*x8974)))))+(IKabs((((x8973*x8977))+((x8974*x8977))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8979=(cj1*sj2);
IkReal x8980=(cj2*sj1);
IkReal x8981=((1.0)*r12);
IkReal x8982=(gconst1*r11);
IkReal x8983=((1.0)*gconst2*r10);
CheckValue<IkReal> x8984=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8984.valid){
continue;
}
CheckValue<IkReal> x8985 = IKatan2WithCheck(IkReal(((((-1.0)*x8980*x8983))+((x8979*x8982))+(((-1.0)*x8979*x8983))+((x8980*x8982)))),IkReal(((((-1.0)*x8980*x8981))+(((-1.0)*x8979*x8981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8984.value)))+(x8985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8986=IKcos(j4);
IkReal x8987=IKsin(j4);
IkReal x8988=((1.0)*x8986);
IkReal x8989=(gconst1*x8986);
IkReal x8990=(gconst1*x8987);
IkReal x8991=((1.0)*gconst2*x8987);
evalcond[0]=((((-1.0)*gconst2*r10*x8988))+((r11*x8989))+((r12*x8987)));
evalcond[1]=(((r21*x8990))+(((-1.0)*r22*x8988))+(((-1.0)*r20*x8991)));
evalcond[2]=((((-1.0)*r02*x8988))+((r01*x8990))+(((-1.0)*r00*x8991)));
evalcond[3]=((1.0)+((r11*x8990))+(((-1.0)*r10*x8991))+(((-1.0)*r12*x8988)));
evalcond[4]=((((-1.0)*gconst2*r20*x8988))+((cj2*sj1))+((r22*x8987))+((cj1*sj2))+((r21*x8989)));
evalcond[5]=(((r01*x8989))+((r02*x8987))+(((-1.0)*gconst2*r00*x8988))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8992=(gconst2*r10);
IkReal x8993=(gconst1*r11);
CheckValue<IkReal> x8994 = IKatan2WithCheck(IkReal((x8993+(((-1.0)*x8992)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8994.valid){
continue;
}
CheckValue<IkReal> x8995=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8992*x8992)))+(((-1.0)*(x8993*x8993)))+(((2.0)*x8992*x8993))+(((-1.0)*(r12*r12))))),-1);
if(!x8995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8994.value)+(((1.5707963267949)*(x8995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8996=IKcos(j4);
IkReal x8997=IKsin(j4);
IkReal x8998=((1.0)*x8996);
IkReal x8999=(gconst1*x8996);
IkReal x9000=(gconst1*x8997);
IkReal x9001=((1.0)*gconst2*x8997);
evalcond[0]=(((r11*x8999))+((r12*x8997))+(((-1.0)*gconst2*r10*x8998)));
evalcond[1]=(((r21*x9000))+(((-1.0)*r22*x8998))+(((-1.0)*r20*x9001)));
evalcond[2]=((((-1.0)*r00*x9001))+(((-1.0)*r02*x8998))+((r01*x9000)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8998))+(((-1.0)*r10*x9001))+((r11*x9000)));
evalcond[4]=(((cj2*sj1))+((r21*x8999))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8998))+((r22*x8997)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8999))+(((-1.0)*gconst2*r00*x8998))+((r02*x8997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9002=((1.0)*gconst2);
CheckValue<IkReal> x9003=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9002)))),-1);
if(!x9003.valid){
continue;
}
CheckValue<IkReal> x9004 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9003.value)))+(x9004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9005=IKcos(j4);
IkReal x9006=IKsin(j4);
IkReal x9007=((1.0)*x9005);
IkReal x9008=(gconst1*x9005);
IkReal x9009=(gconst1*x9006);
IkReal x9010=((1.0)*gconst2*x9006);
evalcond[0]=((((-1.0)*gconst2*r10*x9007))+((r11*x9008))+((r12*x9006)));
evalcond[1]=((((-1.0)*r22*x9007))+((r21*x9009))+(((-1.0)*r20*x9010)));
evalcond[2]=((((-1.0)*r02*x9007))+(((-1.0)*r00*x9010))+((r01*x9009)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9010))+(((-1.0)*r12*x9007))+((r11*x9009)));
evalcond[4]=(((cj2*sj1))+((r21*x9008))+((r22*x9006))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9007)));
evalcond[5]=(((r02*x9006))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9007))+((r01*x9008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9011=((-1.0)*r20);
IkReal x9012=x8917;
CheckValue<IkReal> x9014 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9011),IKFAST_ATAN2_MAGTHRESH);
if(!x9014.valid){
continue;
}
IkReal x9013=((-1.0)*(x9014.value));
sj5=gconst1;
cj5=gconst2;
j5=x9013;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9013;
IkReal gconst1=(r21*x9012);
IkReal gconst2=(x9011*x9012);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9015=((-1.0)*r20);
IkReal x9016=x8917;
CheckValue<IkReal> x9018 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9015),IKFAST_ATAN2_MAGTHRESH);
if(!x9018.valid){
continue;
}
IkReal x9017=((-1.0)*(x9018.value));
sj5=gconst1;
cj5=gconst2;
j5=x9017;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9017;
IkReal gconst1=(r21*x9016);
IkReal gconst2=(x9015*x9016);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9019=((-1.0)*r20);
IkReal x9020=x8917;
CheckValue<IkReal> x9022 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9019),IKFAST_ATAN2_MAGTHRESH);
if(!x9022.valid){
continue;
}
IkReal x9021=((-1.0)*(x9022.value));
sj5=gconst1;
cj5=gconst2;
j5=x9021;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9021;
IkReal gconst1=(r21*x9020);
IkReal gconst2=(x9019*x9020);
IkReal x9023=r22*r22;
IkReal x9024=(cj1*r12*sj2);
IkReal x9025=(cj2*r12*sj1);
CheckValue<IkReal> x9029=IKPowWithIntegerCheck(((-1.0)+x9023),-1);
if(!x9029.valid){
continue;
}
IkReal x9026=x9029.value;
if((((1.0)+(((-1.0)*x9023)))) < -0.00001)
continue;
IkReal x9027=IKsqrt(((1.0)+(((-1.0)*x9023))));
IkReal x9028=(r22*x9026*x9027);
j4eval[0]=((IKabs((((x9024*x9028))+((x9025*x9028)))))+(IKabs(((((-1.0)*x9024))+(((-1.0)*x9025))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9030=(cj1*sj2);
IkReal x9031=(cj2*sj1);
IkReal x9032=((1.0)*r12);
IkReal x9033=(gconst1*r11);
IkReal x9034=((1.0)*gconst2*r10);
CheckValue<IkReal> x9035=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9035.valid){
continue;
}
CheckValue<IkReal> x9036 = IKatan2WithCheck(IkReal(((((-1.0)*x9030*x9034))+((x9031*x9033))+(((-1.0)*x9031*x9034))+((x9030*x9033)))),IkReal(((((-1.0)*x9030*x9032))+(((-1.0)*x9031*x9032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9035.value)))+(x9036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9037=IKcos(j4);
IkReal x9038=IKsin(j4);
IkReal x9039=((1.0)*x9037);
IkReal x9040=(gconst1*x9037);
IkReal x9041=(gconst1*x9038);
IkReal x9042=((1.0)*gconst2*x9038);
evalcond[0]=((((-1.0)*gconst2*r10*x9039))+((r11*x9040))+((r12*x9038)));
evalcond[1]=((((-1.0)*r22*x9039))+(((-1.0)*r20*x9042))+((r21*x9041)));
evalcond[2]=(((r01*x9041))+(((-1.0)*r00*x9042))+(((-1.0)*r02*x9039)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9039))+(((-1.0)*r10*x9042))+((r11*x9041)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9039))+((cj1*sj2))+((r22*x9038))+((r21*x9040)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9040))+((r02*x9038))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9043=(gconst1*r11);
IkReal x9044=(gconst2*r10);
CheckValue<IkReal> x9045=IKPowWithIntegerCheck(IKsign(((x9043*x9043)+(r12*r12)+(((-2.0)*x9043*x9044))+(x9044*x9044))),-1);
if(!x9045.valid){
continue;
}
CheckValue<IkReal> x9046 = IKatan2WithCheck(IkReal(((((-1.0)*x9044))+x9043)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9045.value)))+(x9046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9047=IKcos(j4);
IkReal x9048=IKsin(j4);
IkReal x9049=((1.0)*x9047);
IkReal x9050=(gconst1*x9047);
IkReal x9051=(gconst1*x9048);
IkReal x9052=((1.0)*gconst2*x9048);
evalcond[0]=(((r12*x9048))+((r11*x9050))+(((-1.0)*gconst2*r10*x9049)));
evalcond[1]=((((-1.0)*r22*x9049))+(((-1.0)*r20*x9052))+((r21*x9051)));
evalcond[2]=((((-1.0)*r00*x9052))+((r01*x9051))+(((-1.0)*r02*x9049)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9052))+((r11*x9051))+(((-1.0)*r12*x9049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9048))+(((-1.0)*gconst2*r20*x9049))+((r21*x9050)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9050))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9049))+((r02*x9048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
CheckValue<IkReal> x9054=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9053.value)+(((1.5707963267949)*(x9054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9055=IKcos(j4);
IkReal x9056=IKsin(j4);
IkReal x9057=((1.0)*x9055);
IkReal x9058=(gconst1*x9055);
IkReal x9059=(gconst1*x9056);
IkReal x9060=((1.0)*gconst2*x9056);
evalcond[0]=((((-1.0)*gconst2*r10*x9057))+((r12*x9056))+((r11*x9058)));
evalcond[1]=((((-1.0)*r20*x9060))+(((-1.0)*r22*x9057))+((r21*x9059)));
evalcond[2]=((((-1.0)*r02*x9057))+((r01*x9059))+(((-1.0)*r00*x9060)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9060))+(((-1.0)*r12*x9057))+((r11*x9059)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9056))+(((-1.0)*gconst2*r20*x9057))+((r21*x9058)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9058))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9057))+((r02*x9056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9061=((-1.0)*r20);
IkReal x9062=x8917;
CheckValue<IkReal> x9064 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9061),IKFAST_ATAN2_MAGTHRESH);
if(!x9064.valid){
continue;
}
IkReal x9063=((-1.0)*(x9064.value));
sj5=gconst1;
cj5=gconst2;
j5=x9063;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9063;
IkReal gconst1=(r21*x9062);
IkReal gconst2=(x9061*x9062);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9065=((-1.0)*r20);
IkReal x9066=x8917;
CheckValue<IkReal> x9068 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9065),IKFAST_ATAN2_MAGTHRESH);
if(!x9068.valid){
continue;
}
IkReal x9067=((-1.0)*(x9068.value));
sj5=gconst1;
cj5=gconst2;
j5=x9067;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9067;
IkReal gconst1=(r21*x9066);
IkReal gconst2=(x9065*x9066);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9069=((-1.0)*r20);
IkReal x9070=x8917;
CheckValue<IkReal> x9072 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9069),IKFAST_ATAN2_MAGTHRESH);
if(!x9072.valid){
continue;
}
IkReal x9071=((-1.0)*(x9072.value));
sj5=gconst1;
cj5=gconst2;
j5=x9071;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9071;
IkReal gconst1=(r21*x9070);
IkReal gconst2=(x9069*x9070);
IkReal x9073=r22*r22;
IkReal x9074=((1.0)*r02);
IkReal x9075=(cj1*sj2);
IkReal x9076=(cj2*sj1);
CheckValue<IkReal> x9080=IKPowWithIntegerCheck(((-1.0)+x9073),-1);
if(!x9080.valid){
continue;
}
IkReal x9077=x9080.value;
if((((1.0)+(((-1.0)*x9073)))) < -0.00001)
continue;
IkReal x9078=IKsqrt(((1.0)+(((-1.0)*x9073))));
IkReal x9079=(r02*r22*x9077*x9078);
j4eval[0]=((IKabs((((x9075*x9079))+((x9076*x9079)))))+(IKabs(((((-1.0)*x9074*x9076))+(((-1.0)*x9074*x9075))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9081=(cj1*sj2);
IkReal x9082=(gconst1*r01);
IkReal x9083=((1.0)*r02);
IkReal x9084=(cj2*sj1);
IkReal x9085=((1.0)*gconst2*r00);
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal((((x9081*x9082))+((x9082*x9084))+(((-1.0)*x9084*x9085))+(((-1.0)*x9081*x9085)))),IkReal(((((-1.0)*x9081*x9083))+(((-1.0)*x9083*x9084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
CheckValue<IkReal> x9087=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9086.value)+(((1.5707963267949)*(x9087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9088=IKcos(j4);
IkReal x9089=IKsin(j4);
IkReal x9090=((1.0)*x9088);
IkReal x9091=(gconst1*x9088);
IkReal x9092=(gconst1*x9089);
IkReal x9093=((1.0)*gconst2*x9089);
evalcond[0]=((((-1.0)*gconst2*r00*x9090))+((r01*x9091))+((r02*x9089)));
evalcond[1]=((((-1.0)*r20*x9093))+((r21*x9092))+(((-1.0)*r22*x9090)));
evalcond[2]=(((r11*x9092))+(((-1.0)*r10*x9093))+(((-1.0)*r12*x9090)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9093))+((r01*x9092))+(((-1.0)*r02*x9090)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9090))+((cj1*sj2))+((r21*x9091))+((r22*x9089)));
evalcond[5]=(((r11*x9091))+((r12*x9089))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9094=(gconst1*r01);
IkReal x9095=(gconst2*r00);
CheckValue<IkReal> x9096 = IKatan2WithCheck(IkReal((x9094+(((-1.0)*x9095)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9096.valid){
continue;
}
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9094*x9095))+(x9095*x9095)+(r02*r02)+(x9094*x9094))),-1);
if(!x9097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9096.value)+(((1.5707963267949)*(x9097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9098=IKcos(j4);
IkReal x9099=IKsin(j4);
IkReal x9100=((1.0)*x9098);
IkReal x9101=(gconst1*x9098);
IkReal x9102=(gconst1*x9099);
IkReal x9103=((1.0)*gconst2*x9099);
evalcond[0]=((((-1.0)*gconst2*r00*x9100))+((r02*x9099))+((r01*x9101)));
evalcond[1]=((((-1.0)*r22*x9100))+((r21*x9102))+(((-1.0)*r20*x9103)));
evalcond[2]=((((-1.0)*r10*x9103))+(((-1.0)*r12*x9100))+((r11*x9102)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9100))+(((-1.0)*r00*x9103))+((r01*x9102)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9101))+((r22*x9099))+(((-1.0)*gconst2*r20*x9100)));
evalcond[5]=((((-1.0)*gconst2*r10*x9100))+((r12*x9099))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9104=((1.0)*gconst2);
CheckValue<IkReal> x9105=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9104)))),-1);
if(!x9105.valid){
continue;
}
CheckValue<IkReal> x9106 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9104))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9105.value)))+(x9106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9107=IKcos(j4);
IkReal x9108=IKsin(j4);
IkReal x9109=((1.0)*x9107);
IkReal x9110=(gconst1*x9107);
IkReal x9111=(gconst1*x9108);
IkReal x9112=((1.0)*gconst2*x9108);
evalcond[0]=(((r01*x9110))+((r02*x9108))+(((-1.0)*gconst2*r00*x9109)));
evalcond[1]=(((r21*x9111))+(((-1.0)*r22*x9109))+(((-1.0)*r20*x9112)));
evalcond[2]=((((-1.0)*r10*x9112))+((r11*x9111))+(((-1.0)*r12*x9109)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9109))+((r01*x9111))+(((-1.0)*r00*x9112)));
evalcond[4]=(((r21*x9110))+((cj2*sj1))+((cj1*sj2))+((r22*x9108))+(((-1.0)*gconst2*r20*x9109)));
evalcond[5]=((((-1.0)*gconst2*r10*x9109))+((r11*x9110))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9113=((-1.0)*r20);
IkReal x9114=x8917;
CheckValue<IkReal> x9116 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9113),IKFAST_ATAN2_MAGTHRESH);
if(!x9116.valid){
continue;
}
IkReal x9115=((-1.0)*(x9116.value));
sj5=gconst1;
cj5=gconst2;
j5=x9115;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9115;
IkReal gconst1=(r21*x9114);
IkReal gconst2=(x9113*x9114);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9117=((-1.0)*r20);
IkReal x9118=x8917;
CheckValue<IkReal> x9120 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9117),IKFAST_ATAN2_MAGTHRESH);
if(!x9120.valid){
continue;
}
IkReal x9119=((-1.0)*(x9120.value));
sj5=gconst1;
cj5=gconst2;
j5=x9119;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9119;
IkReal gconst1=(r21*x9118);
IkReal gconst2=(x9117*x9118);
IkReal x9121=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9125=IKPowWithIntegerCheck(x9121,-1);
if(!x9125.valid){
continue;
}
IkReal x9122=x9125.value;
IkReal x9123=((1.0)*x9122);
IkReal x9124=((((-1.0)*x9123*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9122))+(((-1.0)*x9123*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02))));
j4eval[0]=x9124;
j4eval[1]=IKsign(x9124);
j4eval[2]=r02;
j4eval[3]=x9121;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9126=((-1.0)*r20);
IkReal x9127=x8917;
CheckValue<IkReal> x9129 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9126),IKFAST_ATAN2_MAGTHRESH);
if(!x9129.valid){
continue;
}
IkReal x9128=((-1.0)*(x9129.value));
sj5=gconst1;
cj5=gconst2;
j5=x9128;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9128;
IkReal gconst1=(r21*x9127);
IkReal gconst2=(x9126*x9127);
IkReal x9130=r22*r22;
IkReal x9131=((1.0)*r02);
IkReal x9132=(cj1*sj2);
IkReal x9133=(cj2*sj1);
CheckValue<IkReal> x9137=IKPowWithIntegerCheck(((-1.0)+x9130),-1);
if(!x9137.valid){
continue;
}
IkReal x9134=x9137.value;
if((((1.0)+(((-1.0)*x9130)))) < -0.00001)
continue;
IkReal x9135=IKsqrt(((1.0)+(((-1.0)*x9130))));
IkReal x9136=(r02*r22*x9134*x9135);
j4eval[0]=((IKabs((((x9132*x9136))+((x9133*x9136)))))+(IKabs(((((-1.0)*x9131*x9132))+(((-1.0)*x9131*x9133))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9138=(cj1*sj2);
IkReal x9139=(gconst1*r01);
IkReal x9140=((1.0)*r02);
IkReal x9141=(cj2*sj1);
IkReal x9142=((1.0)*gconst2*r00);
CheckValue<IkReal> x9143 = IKatan2WithCheck(IkReal((((x9138*x9139))+(((-1.0)*x9141*x9142))+((x9139*x9141))+(((-1.0)*x9138*x9142)))),IkReal(((((-1.0)*x9140*x9141))+(((-1.0)*x9138*x9140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9143.valid){
continue;
}
CheckValue<IkReal> x9144=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9143.value)+(((1.5707963267949)*(x9144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9145=IKcos(j4);
IkReal x9146=IKsin(j4);
IkReal x9147=((1.0)*x9145);
IkReal x9148=(gconst1*x9145);
IkReal x9149=(gconst1*x9146);
IkReal x9150=((1.0)*gconst2*x9146);
evalcond[0]=((((-1.0)*gconst2*r00*x9147))+((r01*x9148))+((r02*x9146)));
evalcond[1]=((((-1.0)*r20*x9150))+((r21*x9149))+(((-1.0)*r22*x9147)));
evalcond[2]=((((-1.0)*r10*x9150))+(((-1.0)*r12*x9147))+((r11*x9149)));
evalcond[3]=((1.0)+((r01*x9149))+(((-1.0)*r02*x9147))+(((-1.0)*r00*x9150)));
evalcond[4]=((((-1.0)*gconst2*r20*x9147))+((cj2*sj1))+((cj1*sj2))+((r21*x9148))+((r22*x9146)));
evalcond[5]=((((-1.0)*gconst2*r10*x9147))+(((-1.0)*sj1*sj2))+((r12*x9146))+((cj1*cj2))+((r11*x9148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9151=(gconst1*r01);
IkReal x9152=(gconst2*r00);
CheckValue<IkReal> x9153 = IKatan2WithCheck(IkReal((x9151+(((-1.0)*x9152)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9153.valid){
continue;
}
CheckValue<IkReal> x9154=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9151*x9151)))+(((-1.0)*(x9152*x9152)))+(((2.0)*x9151*x9152)))),-1);
if(!x9154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9153.value)+(((1.5707963267949)*(x9154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9155=IKcos(j4);
IkReal x9156=IKsin(j4);
IkReal x9157=((1.0)*x9155);
IkReal x9158=(gconst1*x9155);
IkReal x9159=(gconst1*x9156);
IkReal x9160=((1.0)*gconst2*x9156);
evalcond[0]=(((r02*x9156))+(((-1.0)*gconst2*r00*x9157))+((r01*x9158)));
evalcond[1]=((((-1.0)*r22*x9157))+(((-1.0)*r20*x9160))+((r21*x9159)));
evalcond[2]=(((r11*x9159))+(((-1.0)*r12*x9157))+(((-1.0)*r10*x9160)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9157))+((r01*x9159))+(((-1.0)*r00*x9160)));
evalcond[4]=(((cj2*sj1))+((r22*x9156))+(((-1.0)*gconst2*r20*x9157))+((cj1*sj2))+((r21*x9158)));
evalcond[5]=(((r11*x9158))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9157))+((cj1*cj2))+((r12*x9156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9161 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9161.valid){
continue;
}
CheckValue<IkReal> x9162=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9161.value)+(((1.5707963267949)*(x9162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9163=IKcos(j4);
IkReal x9164=IKsin(j4);
IkReal x9165=((1.0)*x9163);
IkReal x9166=(gconst1*x9163);
IkReal x9167=(gconst1*x9164);
IkReal x9168=((1.0)*gconst2*x9164);
evalcond[0]=(((r01*x9166))+((r02*x9164))+(((-1.0)*gconst2*r00*x9165)));
evalcond[1]=((((-1.0)*r22*x9165))+((r21*x9167))+(((-1.0)*r20*x9168)));
evalcond[2]=((((-1.0)*r12*x9165))+(((-1.0)*r10*x9168))+((r11*x9167)));
evalcond[3]=((1.0)+((r01*x9167))+(((-1.0)*r02*x9165))+(((-1.0)*r00*x9168)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9164))+((r21*x9166))+(((-1.0)*gconst2*r20*x9165)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9165))+((r11*x9166))+((r12*x9164))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9169=((-1.0)*r20);
IkReal x9170=((-1.0)*px);
CheckValue<IkReal> x9172 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9169),IKFAST_ATAN2_MAGTHRESH);
if(!x9172.valid){
continue;
}
IkReal x9171=((-1.0)*(x9172.value));
sj5=gconst1;
cj5=gconst2;
j5=x9171;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9170);
rxp1_1=(px*r21);
rxp1_2=(r11*x9170);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9171;
IkReal gconst1=r21;
IkReal gconst2=x9169;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9173=((-1.0)*r20);
IkReal x9174=((-1.0)*px);
CheckValue<IkReal> x9176 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9173),IKFAST_ATAN2_MAGTHRESH);
if(!x9176.valid){
continue;
}
IkReal x9175=((-1.0)*(x9176.value));
sj5=gconst1;
cj5=gconst2;
j5=x9175;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9174);
rxp1_1=(px*r21);
rxp1_2=(r11*x9174);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9175;
IkReal gconst1=r21;
IkReal gconst2=x9173;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9177=((-1.0)*r20);
IkReal x9178=((-1.0)*px);
CheckValue<IkReal> x9180 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9177),IKFAST_ATAN2_MAGTHRESH);
if(!x9180.valid){
continue;
}
IkReal x9179=((-1.0)*(x9180.value));
sj5=gconst1;
cj5=gconst2;
j5=x9179;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9178);
rxp1_1=(px*r21);
rxp1_2=(r11*x9178);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9179;
IkReal gconst1=r21;
IkReal gconst2=x9177;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9183=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9183.valid){
continue;
}
IkReal x9181=x9183.value;
IkReal x9182=(sj0*x9181);
cj4array[0]=(((cj1*cj2*x9182))+(((-1.0)*sj1*sj2*x9182)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9184=IKsin(j4);
IkReal x9185=IKcos(j4);
IkReal x9186=((1.0)*gconst2);
IkReal x9187=(gconst1*r21);
evalcond[0]=(r02*x9184);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9185)));
evalcond[2]=((((-1.0)*r20*x9184*x9186))+((x9184*x9187)));
evalcond[3]=((((-1.0)*r10*x9184*x9186))+((gconst1*r11*x9184)));
evalcond[4]=((((-1.0)*r20*x9185*x9186))+((cj2*sj1))+((cj1*sj2))+((x9185*x9187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9190=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9190.valid){
continue;
}
IkReal x9188=x9190.value;
IkReal x9189=((1.0)*x9188);
cj4array[0]=((((-1.0)*cj2*sj1*x9189))+(((-1.0)*cj1*sj2*x9189)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9191=IKsin(j4);
IkReal x9192=IKcos(j4);
IkReal x9193=((1.0)*sj0);
IkReal x9194=(gconst1*x9191);
IkReal x9195=((1.0)*x9192);
IkReal x9196=((1.0)*gconst2*x9191);
evalcond[0]=(r02*x9191);
evalcond[1]=((((-1.0)*r02*x9195))+(((-1.0)*x9193)));
evalcond[2]=((((-1.0)*r20*x9196))+((r21*x9194)));
evalcond[3]=((((-1.0)*r10*x9196))+((r11*x9194)));
evalcond[4]=((((-1.0)*gconst2*r10*x9195))+((gconst1*r11*x9192))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9197=IKPowWithIntegerCheck(r02,-1);
if(!x9197.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9197.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9198=IKsin(j4);
IkReal x9199=IKcos(j4);
IkReal x9200=(gconst1*r21);
IkReal x9201=(gconst1*r11);
IkReal x9202=((1.0)*gconst2*r10);
IkReal x9203=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9198);
evalcond[1]=((((-1.0)*x9198*x9203))+((x9198*x9200)));
evalcond[2]=((((-1.0)*x9198*x9202))+((x9198*x9201)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9199*x9203))+((x9199*x9200)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9199*x9202))+((sj0*sj1*sj2))+((x9199*x9201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9204=(cj2*sj1);
IkReal x9205=(cj1*sj2);
IkReal x9206=(gconst1*r21);
IkReal x9207=((1.0)*gconst2*r20);
CheckValue<IkReal> x9208 = IKatan2WithCheck(IkReal((((r22*x9205))+((r22*x9204)))),IkReal((((x9205*x9206))+((x9204*x9206))+(((-1.0)*x9205*x9207))+(((-1.0)*x9204*x9207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9208.valid){
continue;
}
CheckValue<IkReal> x9209=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9207))+(((2.0)*gconst2*r20*x9206))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9206*x9206))))),-1);
if(!x9209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9208.value)+(((1.5707963267949)*(x9209.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9210=IKsin(j4);
IkReal x9211=IKcos(j4);
IkReal x9212=(sj1*sj2);
IkReal x9213=(gconst2*r10);
IkReal x9214=(gconst2*r00);
IkReal x9215=(gconst2*r20);
IkReal x9216=((1.0)*x9211);
IkReal x9217=(gconst1*x9211);
IkReal x9218=((1.0)*cj1*cj2);
IkReal x9219=(gconst1*x9210);
IkReal x9220=((1.0)*x9210);
evalcond[0]=(((r21*x9219))+(((-1.0)*x9215*x9220))+(((-1.0)*r22*x9216)));
evalcond[1]=(cj0+(((-1.0)*x9213*x9220))+((r11*x9219))+(((-1.0)*r12*x9216)));
evalcond[2]=((((-1.0)*r02*x9216))+(((-1.0)*sj0))+(((-1.0)*x9214*x9220))+((r01*x9219)));
evalcond[3]=(((cj2*sj1))+((r21*x9217))+((cj1*sj2))+((r22*x9210))+(((-1.0)*x9215*x9216)));
evalcond[4]=((((-1.0)*cj0*x9218))+((r02*x9210))+((cj0*x9212))+(((-1.0)*x9214*x9216))+((r01*x9217)));
evalcond[5]=((((-1.0)*x9213*x9216))+((r12*x9210))+((sj0*x9212))+((r11*x9217))+(((-1.0)*sj0*x9218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9221=((1.0)*gconst2);
CheckValue<IkReal> x9222 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9221))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9222.valid){
continue;
}
CheckValue<IkReal> x9223=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9221)))),-1);
if(!x9223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9222.value)+(((1.5707963267949)*(x9223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9224=IKsin(j4);
IkReal x9225=IKcos(j4);
IkReal x9226=(sj1*sj2);
IkReal x9227=(gconst2*r10);
IkReal x9228=(gconst2*r00);
IkReal x9229=(gconst2*r20);
IkReal x9230=((1.0)*x9225);
IkReal x9231=(gconst1*x9225);
IkReal x9232=((1.0)*cj1*cj2);
IkReal x9233=(gconst1*x9224);
IkReal x9234=((1.0)*x9224);
evalcond[0]=(((r21*x9233))+(((-1.0)*r22*x9230))+(((-1.0)*x9229*x9234)));
evalcond[1]=(cj0+(((-1.0)*r12*x9230))+(((-1.0)*x9227*x9234))+((r11*x9233)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9233))+(((-1.0)*r02*x9230))+(((-1.0)*x9228*x9234)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9231))+((r22*x9224))+(((-1.0)*x9229*x9230)));
evalcond[4]=((((-1.0)*cj0*x9232))+((r02*x9224))+((cj0*x9226))+((r01*x9231))+(((-1.0)*x9228*x9230)));
evalcond[5]=((((-1.0)*sj0*x9232))+(((-1.0)*x9227*x9230))+((r12*x9224))+((sj0*x9226))+((r11*x9231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9235=((1.0)*gconst2);
CheckValue<IkReal> x9236=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9235)))),-1);
if(!x9236.valid){
continue;
}
CheckValue<IkReal> x9237 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9235))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9236.value)))+(x9237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9238=IKsin(j4);
IkReal x9239=IKcos(j4);
IkReal x9240=(sj1*sj2);
IkReal x9241=(gconst2*r10);
IkReal x9242=(gconst2*r00);
IkReal x9243=(gconst2*r20);
IkReal x9244=((1.0)*x9239);
IkReal x9245=(gconst1*x9239);
IkReal x9246=((1.0)*cj1*cj2);
IkReal x9247=(gconst1*x9238);
IkReal x9248=((1.0)*x9238);
evalcond[0]=((((-1.0)*r22*x9244))+((r21*x9247))+(((-1.0)*x9243*x9248)));
evalcond[1]=((((-1.0)*x9241*x9248))+cj0+(((-1.0)*r12*x9244))+((r11*x9247)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9247))+(((-1.0)*r02*x9244))+(((-1.0)*x9242*x9248)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9245))+((r22*x9238))+(((-1.0)*x9243*x9244)));
evalcond[4]=(((cj0*x9240))+((r02*x9238))+((r01*x9245))+(((-1.0)*x9242*x9244))+(((-1.0)*cj0*x9246)));
evalcond[5]=((((-1.0)*x9241*x9244))+((sj0*x9240))+((r12*x9238))+((r11*x9245))+(((-1.0)*sj0*x9246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9249=((-1.0)*r20);
IkReal x9250=x8917;
CheckValue<IkReal> x9252 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9249),IKFAST_ATAN2_MAGTHRESH);
if(!x9252.valid){
continue;
}
IkReal x9251=((-1.0)*(x9252.value));
sj5=gconst1;
cj5=gconst2;
j5=x9251;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9251;
IkReal gconst1=(r21*x9250);
IkReal gconst2=(x9249*x9250);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9253=((-1.0)*r20);
IkReal x9254=x8917;
CheckValue<IkReal> x9256 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9253),IKFAST_ATAN2_MAGTHRESH);
if(!x9256.valid){
continue;
}
IkReal x9255=((-1.0)*(x9256.value));
sj5=gconst1;
cj5=gconst2;
j5=x9255;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9255;
IkReal gconst1=(r21*x9254);
IkReal gconst2=(x9253*x9254);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9257=((-1.0)*r20);
IkReal x9258=x8917;
CheckValue<IkReal> x9260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9257),IKFAST_ATAN2_MAGTHRESH);
if(!x9260.valid){
continue;
}
IkReal x9259=((-1.0)*(x9260.value));
sj5=gconst1;
cj5=gconst2;
j5=x9259;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9259;
IkReal gconst1=(r21*x9258);
IkReal gconst2=(x9257*x9258);
IkReal x9261=r22*r22;
CheckValue<IkReal> x9264=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9261))),-1);
if(!x9264.valid){
continue;
}
IkReal x9262=x9264.value;
IkReal x9263=(x9261+((x9262*(r20*r20*r20*r20)))+((x9262*(r21*r21*r21*r21)))+(((2.0)*x9262*(r20*r20)*(r21*r21))));
j4eval[0]=x9263;
j4eval[1]=IKsign(x9263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9265=((-1.0)*r20);
IkReal x9266=x8917;
CheckValue<IkReal> x9268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9265),IKFAST_ATAN2_MAGTHRESH);
if(!x9268.valid){
continue;
}
IkReal x9267=((-1.0)*(x9268.value));
sj5=gconst1;
cj5=gconst2;
j5=x9267;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9267;
IkReal gconst1=(r21*x9266);
IkReal gconst2=(x9265*x9266);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9269=((-1.0)*r20);
IkReal x9270=x8917;
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9269),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
IkReal x9271=((-1.0)*(x9272.value));
sj5=gconst1;
cj5=gconst2;
j5=x9271;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9271;
IkReal gconst1=(r21*x9270);
IkReal gconst2=(x9269*x9270);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9273=((-1.0)*r20);
IkReal x9274=x8917;
CheckValue<IkReal> x9276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9273),IKFAST_ATAN2_MAGTHRESH);
if(!x9276.valid){
continue;
}
IkReal x9275=((-1.0)*(x9276.value));
sj5=gconst1;
cj5=gconst2;
j5=x9275;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9275;
IkReal gconst1=(r21*x9274);
IkReal gconst2=(x9273*x9274);
IkReal x9277=r22*r22;
IkReal x9278=(cj1*r12*sj2);
IkReal x9279=(cj2*r12*sj1);
CheckValue<IkReal> x9283=IKPowWithIntegerCheck(((-1.0)+x9277),-1);
if(!x9283.valid){
continue;
}
IkReal x9280=x9283.value;
if((((1.0)+(((-1.0)*x9277)))) < -0.00001)
continue;
IkReal x9281=IKsqrt(((1.0)+(((-1.0)*x9277))));
IkReal x9282=((1.0)*r22*x9280*x9281);
j4eval[0]=((IKabs(((((-1.0)*x9278*x9282))+(((-1.0)*x9279*x9282)))))+(IKabs((x9278+x9279))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9284=((1.0)*gconst1);
IkReal x9285=(cj2*sj1);
IkReal x9286=(gconst2*r10);
IkReal x9287=(cj1*sj2);
CheckValue<IkReal> x9288=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9284)))),-1);
if(!x9288.valid){
continue;
}
CheckValue<IkReal> x9289 = IKatan2WithCheck(IkReal((((x9285*x9286))+((x9286*x9287))+(((-1.0)*r11*x9284*x9285))+(((-1.0)*r11*x9284*x9287)))),IkReal((((r12*x9285))+((r12*x9287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9288.value)))+(x9289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9290=IKsin(j4);
IkReal x9291=IKcos(j4);
IkReal x9292=((1.0)*x9291);
IkReal x9293=(gconst2*x9291);
IkReal x9294=(gconst1*x9290);
IkReal x9295=((1.0)*x9290);
evalcond[0]=((((-1.0)*gconst2*r20*x9295))+(((-1.0)*r22*x9292))+((r21*x9294)));
evalcond[1]=((((-1.0)*gconst2*r00*x9295))+((r01*x9294))+(((-1.0)*r02*x9292)));
evalcond[2]=((((-1.0)*gconst1*r11*x9292))+((r10*x9293))+(((-1.0)*r12*x9295)));
evalcond[3]=((1.0)+((r11*x9294))+(((-1.0)*gconst2*r10*x9295))+(((-1.0)*r12*x9292)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9292))+((cj1*sj2))+(((-1.0)*r22*x9295))+((r20*x9293)));
evalcond[5]=(((r00*x9293))+(((-1.0)*gconst1*r01*x9292))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9296=(gconst1*r11);
IkReal x9297=(gconst2*r10);
CheckValue<IkReal> x9298=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9296*x9296)+(((-2.0)*x9296*x9297))+(x9297*x9297))),-1);
if(!x9298.valid){
continue;
}
CheckValue<IkReal> x9299 = IKatan2WithCheck(IkReal((x9297+(((-1.0)*x9296)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9298.value)))+(x9299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9300=IKsin(j4);
IkReal x9301=IKcos(j4);
IkReal x9302=((1.0)*x9301);
IkReal x9303=(gconst2*x9301);
IkReal x9304=(gconst1*x9300);
IkReal x9305=((1.0)*x9300);
evalcond[0]=(((r21*x9304))+(((-1.0)*r22*x9302))+(((-1.0)*gconst2*r20*x9305)));
evalcond[1]=((((-1.0)*gconst2*r00*x9305))+((r01*x9304))+(((-1.0)*r02*x9302)));
evalcond[2]=((((-1.0)*gconst1*r11*x9302))+((r10*x9303))+(((-1.0)*r12*x9305)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9305))+((r11*x9304))+(((-1.0)*r12*x9302)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9302))+((cj1*sj2))+((r20*x9303))+(((-1.0)*r22*x9305)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9302))+(((-1.0)*r02*x9305))+((r00*x9303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9306=((1.0)*gconst2);
CheckValue<IkReal> x9307 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9306))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9307.valid){
continue;
}
CheckValue<IkReal> x9308=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9306)))),-1);
if(!x9308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9307.value)+(((1.5707963267949)*(x9308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9309=IKsin(j4);
IkReal x9310=IKcos(j4);
IkReal x9311=((1.0)*x9310);
IkReal x9312=(gconst2*x9310);
IkReal x9313=(gconst1*x9309);
IkReal x9314=((1.0)*x9309);
evalcond[0]=(((r21*x9313))+(((-1.0)*r22*x9311))+(((-1.0)*gconst2*r20*x9314)));
evalcond[1]=((((-1.0)*gconst2*r00*x9314))+((r01*x9313))+(((-1.0)*r02*x9311)));
evalcond[2]=((((-1.0)*gconst1*r11*x9311))+((r10*x9312))+(((-1.0)*r12*x9314)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9314))+((r11*x9313))+(((-1.0)*r12*x9311)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9311))+((cj1*sj2))+((r20*x9312))+(((-1.0)*r22*x9314)));
evalcond[5]=((((-1.0)*gconst1*r01*x9311))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9314))+((r00*x9312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9315=((-1.0)*r20);
IkReal x9316=x8917;
CheckValue<IkReal> x9318 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9315),IKFAST_ATAN2_MAGTHRESH);
if(!x9318.valid){
continue;
}
IkReal x9317=((-1.0)*(x9318.value));
sj5=gconst1;
cj5=gconst2;
j5=x9317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9317;
IkReal gconst1=(r21*x9316);
IkReal gconst2=(x9315*x9316);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9319=((-1.0)*r20);
IkReal x9320=x8917;
CheckValue<IkReal> x9322 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9319),IKFAST_ATAN2_MAGTHRESH);
if(!x9322.valid){
continue;
}
IkReal x9321=((-1.0)*(x9322.value));
sj5=gconst1;
cj5=gconst2;
j5=x9321;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9321;
IkReal gconst1=(r21*x9320);
IkReal gconst2=(x9319*x9320);
IkReal x9323=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(x9323,-1);
if(!x9327.valid){
continue;
}
IkReal x9324=x9327.value;
IkReal x9325=((1.0)*x9324);
IkReal x9326=((((-1.0)*x9325*(r10*r10)*(r20*r20)))+(((-1.0)*x9325*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9324)));
j4eval[0]=x9326;
j4eval[1]=r12;
j4eval[2]=x9323;
j4eval[3]=IKsign(x9326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9328=((-1.0)*r20);
IkReal x9329=x8917;
CheckValue<IkReal> x9331 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9328),IKFAST_ATAN2_MAGTHRESH);
if(!x9331.valid){
continue;
}
IkReal x9330=((-1.0)*(x9331.value));
sj5=gconst1;
cj5=gconst2;
j5=x9330;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9330;
IkReal gconst1=(r21*x9329);
IkReal gconst2=(x9328*x9329);
IkReal x9332=r22*r22;
IkReal x9333=(cj1*r12*sj2);
IkReal x9334=(cj2*r12*sj1);
CheckValue<IkReal> x9338=IKPowWithIntegerCheck(((-1.0)+x9332),-1);
if(!x9338.valid){
continue;
}
IkReal x9335=x9338.value;
if((((1.0)+(((-1.0)*x9332)))) < -0.00001)
continue;
IkReal x9336=IKsqrt(((1.0)+(((-1.0)*x9332))));
IkReal x9337=((1.0)*r22*x9335*x9336);
j4eval[0]=((IKabs((x9334+x9333)))+(IKabs(((((-1.0)*x9333*x9337))+(((-1.0)*x9334*x9337))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9339=((1.0)*gconst1);
IkReal x9340=(cj2*sj1);
IkReal x9341=(gconst2*r10);
IkReal x9342=(cj1*sj2);
CheckValue<IkReal> x9343 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9339*x9342))+(((-1.0)*r11*x9339*x9340))+((x9341*x9342))+((x9340*x9341)))),IkReal((((r12*x9340))+((r12*x9342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9343.valid){
continue;
}
CheckValue<IkReal> x9344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9339))+(((-1.0)*gconst2*r01)))),-1);
if(!x9344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9343.value)+(((1.5707963267949)*(x9344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9345=IKsin(j4);
IkReal x9346=IKcos(j4);
IkReal x9347=((1.0)*x9346);
IkReal x9348=(gconst2*x9346);
IkReal x9349=(gconst1*x9345);
IkReal x9350=((1.0)*x9345);
evalcond[0]=((((-1.0)*r22*x9347))+(((-1.0)*gconst2*r20*x9350))+((r21*x9349)));
evalcond[1]=((((-1.0)*r02*x9347))+((r01*x9349))+(((-1.0)*gconst2*r00*x9350)));
evalcond[2]=(((r10*x9348))+(((-1.0)*r12*x9350))+(((-1.0)*gconst1*r11*x9347)));
evalcond[3]=((-1.0)+((r11*x9349))+(((-1.0)*r12*x9347))+(((-1.0)*gconst2*r10*x9350)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9350))+((cj1*sj2))+((r20*x9348))+(((-1.0)*gconst1*r21*x9347)));
evalcond[5]=((((-1.0)*gconst1*r01*x9347))+(((-1.0)*r02*x9350))+((r00*x9348))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9351=(gconst1*r11);
IkReal x9352=(gconst2*r10);
CheckValue<IkReal> x9353=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9352*x9352)))+(((-1.0)*(r12*r12)))+(((2.0)*x9351*x9352))+(((-1.0)*(x9351*x9351))))),-1);
if(!x9353.valid){
continue;
}
CheckValue<IkReal> x9354 = IKatan2WithCheck(IkReal((x9352+(((-1.0)*x9351)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9353.value)))+(x9354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9355=IKsin(j4);
IkReal x9356=IKcos(j4);
IkReal x9357=((1.0)*x9356);
IkReal x9358=(gconst2*x9356);
IkReal x9359=(gconst1*x9355);
IkReal x9360=((1.0)*x9355);
evalcond[0]=((((-1.0)*r22*x9357))+((r21*x9359))+(((-1.0)*gconst2*r20*x9360)));
evalcond[1]=((((-1.0)*r02*x9357))+((r01*x9359))+(((-1.0)*gconst2*r00*x9360)));
evalcond[2]=(((r10*x9358))+(((-1.0)*gconst1*r11*x9357))+(((-1.0)*r12*x9360)));
evalcond[3]=((-1.0)+((r11*x9359))+(((-1.0)*r12*x9357))+(((-1.0)*gconst2*r10*x9360)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9358))+(((-1.0)*gconst1*r21*x9357))+(((-1.0)*r22*x9360)));
evalcond[5]=((((-1.0)*gconst1*r01*x9357))+(((-1.0)*sj1*sj2))+((r00*x9358))+(((-1.0)*r02*x9360))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9361 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9361.valid){
continue;
}
CheckValue<IkReal> x9362=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9361.value)+(((1.5707963267949)*(x9362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9363=IKsin(j4);
IkReal x9364=IKcos(j4);
IkReal x9365=((1.0)*x9364);
IkReal x9366=(gconst2*x9364);
IkReal x9367=(gconst1*x9363);
IkReal x9368=((1.0)*x9363);
evalcond[0]=(((r21*x9367))+(((-1.0)*r22*x9365))+(((-1.0)*gconst2*r20*x9368)));
evalcond[1]=((((-1.0)*r02*x9365))+((r01*x9367))+(((-1.0)*gconst2*r00*x9368)));
evalcond[2]=((((-1.0)*gconst1*r11*x9365))+(((-1.0)*r12*x9368))+((r10*x9366)));
evalcond[3]=((-1.0)+((r11*x9367))+(((-1.0)*gconst2*r10*x9368))+(((-1.0)*r12*x9365)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9365))+((cj1*sj2))+(((-1.0)*r22*x9368))+((r20*x9366)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9368))+(((-1.0)*gconst1*r01*x9365))+((cj1*cj2))+((r00*x9366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9369=((-1.0)*r20);
IkReal x9370=x8917;
CheckValue<IkReal> x9372 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9369),IKFAST_ATAN2_MAGTHRESH);
if(!x9372.valid){
continue;
}
IkReal x9371=((-1.0)*(x9372.value));
sj5=gconst1;
cj5=gconst2;
j5=x9371;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9371;
IkReal gconst1=(r21*x9370);
IkReal gconst2=(x9369*x9370);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9373=((-1.0)*r20);
IkReal x9374=x8917;
CheckValue<IkReal> x9376 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9373),IKFAST_ATAN2_MAGTHRESH);
if(!x9376.valid){
continue;
}
IkReal x9375=((-1.0)*(x9376.value));
sj5=gconst1;
cj5=gconst2;
j5=x9375;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9375;
IkReal gconst1=(r21*x9374);
IkReal gconst2=(x9373*x9374);
IkReal x9377=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9381=IKPowWithIntegerCheck(x9377,-1);
if(!x9381.valid){
continue;
}
IkReal x9378=x9381.value;
IkReal x9379=((1.0)*x9378);
IkReal x9380=((((-2.0)*r00*r01*r20*r21*x9378))+(((-1.0)*(r02*r02)))+(((-1.0)*x9379*(r01*r01)*(r21*r21)))+(((-1.0)*x9379*(r00*r00)*(r20*r20))));
j4eval[0]=x9380;
j4eval[1]=IKsign(x9380);
j4eval[2]=r02;
j4eval[3]=x9377;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9382=((-1.0)*r20);
IkReal x9383=x8917;
CheckValue<IkReal> x9385 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9382),IKFAST_ATAN2_MAGTHRESH);
if(!x9385.valid){
continue;
}
IkReal x9384=((-1.0)*(x9385.value));
sj5=gconst1;
cj5=gconst2;
j5=x9384;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9384;
IkReal gconst1=(r21*x9383);
IkReal gconst2=(x9382*x9383);
IkReal x9386=r22*r22;
IkReal x9387=(cj1*r02*sj2);
IkReal x9388=(cj2*r02*sj1);
CheckValue<IkReal> x9392=IKPowWithIntegerCheck(((-1.0)+x9386),-1);
if(!x9392.valid){
continue;
}
IkReal x9389=x9392.value;
if((((1.0)+(((-1.0)*x9386)))) < -0.00001)
continue;
IkReal x9390=IKsqrt(((1.0)+(((-1.0)*x9386))));
IkReal x9391=((1.0)*r22*x9389*x9390);
j4eval[0]=((IKabs((x9387+x9388)))+(IKabs(((((-1.0)*x9387*x9391))+(((-1.0)*x9388*x9391))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9393=(cj2*sj1);
IkReal x9394=(cj1*sj2);
IkReal x9395=(gconst2*r00);
IkReal x9396=((1.0)*gconst1*r01);
CheckValue<IkReal> x9397=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9397.valid){
continue;
}
CheckValue<IkReal> x9398 = IKatan2WithCheck(IkReal((((x9394*x9395))+((x9393*x9395))+(((-1.0)*x9394*x9396))+(((-1.0)*x9393*x9396)))),IkReal((((r02*x9394))+((r02*x9393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9397.value)))+(x9398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9399=IKsin(j4);
IkReal x9400=IKcos(j4);
IkReal x9401=(gconst1*r11);
IkReal x9402=(gconst1*r21);
IkReal x9403=(gconst1*r01);
IkReal x9404=((1.0)*x9400);
IkReal x9405=(gconst2*x9400);
IkReal x9406=((1.0)*x9399);
evalcond[0]=((((-1.0)*r22*x9404))+((x9399*x9402))+(((-1.0)*gconst2*r20*x9406)));
evalcond[1]=((((-1.0)*gconst2*r10*x9406))+(((-1.0)*r12*x9404))+((x9399*x9401)));
evalcond[2]=((((-1.0)*r02*x9406))+(((-1.0)*x9403*x9404))+((r00*x9405)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9404))+((x9399*x9403))+(((-1.0)*gconst2*r00*x9406)));
evalcond[4]=((((-1.0)*r22*x9406))+((cj2*sj1))+((cj1*sj2))+((r20*x9405))+(((-1.0)*x9402*x9404)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9406))+(((-1.0)*x9401*x9404))+((r10*x9405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9407=(gconst2*r00);
IkReal x9408=(gconst1*r01);
CheckValue<IkReal> x9409=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9407*x9407)))+(((-1.0)*(r02*r02)))+(((2.0)*x9407*x9408))+(((-1.0)*(x9408*x9408))))),-1);
if(!x9409.valid){
continue;
}
CheckValue<IkReal> x9410 = IKatan2WithCheck(IkReal(((((-1.0)*x9408))+x9407)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9409.value)))+(x9410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9411=IKsin(j4);
IkReal x9412=IKcos(j4);
IkReal x9413=(gconst1*r11);
IkReal x9414=(gconst1*r21);
IkReal x9415=(gconst1*r01);
IkReal x9416=((1.0)*x9412);
IkReal x9417=(gconst2*x9412);
IkReal x9418=((1.0)*x9411);
evalcond[0]=((((-1.0)*gconst2*r20*x9418))+(((-1.0)*r22*x9416))+((x9411*x9414)));
evalcond[1]=((((-1.0)*r12*x9416))+(((-1.0)*gconst2*r10*x9418))+((x9411*x9413)));
evalcond[2]=((((-1.0)*r02*x9418))+((r00*x9417))+(((-1.0)*x9415*x9416)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9416))+(((-1.0)*gconst2*r00*x9418))+((x9411*x9415)));
evalcond[4]=(((r20*x9417))+((cj2*sj1))+(((-1.0)*x9414*x9416))+((cj1*sj2))+(((-1.0)*r22*x9418)));
evalcond[5]=((((-1.0)*r12*x9418))+((r10*x9417))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9413*x9416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9419=((1.0)*gconst2);
CheckValue<IkReal> x9420=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9419))+(((-1.0)*gconst1*r10)))),-1);
if(!x9420.valid){
continue;
}
CheckValue<IkReal> x9421 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9419))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9420.value)))+(x9421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9422=IKsin(j4);
IkReal x9423=IKcos(j4);
IkReal x9424=(gconst1*r11);
IkReal x9425=(gconst1*r21);
IkReal x9426=(gconst1*r01);
IkReal x9427=((1.0)*x9423);
IkReal x9428=(gconst2*x9423);
IkReal x9429=((1.0)*x9422);
evalcond[0]=(((x9422*x9425))+(((-1.0)*gconst2*r20*x9429))+(((-1.0)*r22*x9427)));
evalcond[1]=((((-1.0)*gconst2*r10*x9429))+((x9422*x9424))+(((-1.0)*r12*x9427)));
evalcond[2]=(((r00*x9428))+(((-1.0)*x9426*x9427))+(((-1.0)*r02*x9429)));
evalcond[3]=((-1.0)+((x9422*x9426))+(((-1.0)*r02*x9427))+(((-1.0)*gconst2*r00*x9429)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9425*x9427))+((cj1*sj2))+((r20*x9428))+(((-1.0)*r22*x9429)));
evalcond[5]=((((-1.0)*x9424*x9427))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9429))+((r10*x9428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9430=((-1.0)*r20);
IkReal x9431=x8917;
CheckValue<IkReal> x9433 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9430),IKFAST_ATAN2_MAGTHRESH);
if(!x9433.valid){
continue;
}
IkReal x9432=((-1.0)*(x9433.value));
sj5=gconst1;
cj5=gconst2;
j5=x9432;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9432;
IkReal gconst1=(r21*x9431);
IkReal gconst2=(x9430*x9431);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9434=((-1.0)*r20);
IkReal x9435=x8917;
CheckValue<IkReal> x9437 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9434),IKFAST_ATAN2_MAGTHRESH);
if(!x9437.valid){
continue;
}
IkReal x9436=((-1.0)*(x9437.value));
sj5=gconst1;
cj5=gconst2;
j5=x9436;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9436;
IkReal gconst1=(r21*x9435);
IkReal gconst2=(x9434*x9435);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9438=((-1.0)*r20);
IkReal x9439=x8917;
CheckValue<IkReal> x9441 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9438),IKFAST_ATAN2_MAGTHRESH);
if(!x9441.valid){
continue;
}
IkReal x9440=((-1.0)*(x9441.value));
sj5=gconst1;
cj5=gconst2;
j5=x9440;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9440;
IkReal gconst1=(r21*x9439);
IkReal gconst2=(x9438*x9439);
IkReal x9442=r22*r22;
IkReal x9443=(cj1*r02*sj2);
IkReal x9444=(cj2*r02*sj1);
CheckValue<IkReal> x9448=IKPowWithIntegerCheck(((-1.0)+x9442),-1);
if(!x9448.valid){
continue;
}
IkReal x9445=x9448.value;
if((((1.0)+(((-1.0)*x9442)))) < -0.00001)
continue;
IkReal x9446=IKsqrt(((1.0)+(((-1.0)*x9442))));
IkReal x9447=((1.0)*r22*x9445*x9446);
j4eval[0]=((IKabs(((((-1.0)*x9443*x9447))+(((-1.0)*x9444*x9447)))))+(IKabs((x9444+x9443))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9449=(cj2*sj1);
IkReal x9450=(cj1*sj2);
IkReal x9451=(gconst2*r00);
IkReal x9452=((1.0)*gconst1*r01);
CheckValue<IkReal> x9453 = IKatan2WithCheck(IkReal(((((-1.0)*x9450*x9452))+((x9449*x9451))+((x9450*x9451))+(((-1.0)*x9449*x9452)))),IkReal((((r02*x9449))+((r02*x9450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9453.valid){
continue;
}
CheckValue<IkReal> x9454=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9453.value)+(((1.5707963267949)*(x9454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9455=IKsin(j4);
IkReal x9456=IKcos(j4);
IkReal x9457=(gconst1*r11);
IkReal x9458=(gconst1*r21);
IkReal x9459=(gconst1*r01);
IkReal x9460=((1.0)*x9456);
IkReal x9461=(gconst2*x9456);
IkReal x9462=((1.0)*x9455);
evalcond[0]=((((-1.0)*gconst2*r20*x9462))+((x9455*x9458))+(((-1.0)*r22*x9460)));
evalcond[1]=(((x9455*x9457))+(((-1.0)*r12*x9460))+(((-1.0)*gconst2*r10*x9462)));
evalcond[2]=(((r00*x9461))+(((-1.0)*x9459*x9460))+(((-1.0)*r02*x9462)));
evalcond[3]=((1.0)+((x9455*x9459))+(((-1.0)*gconst2*r00*x9462))+(((-1.0)*r02*x9460)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9462))+(((-1.0)*x9458*x9460))+((r20*x9461)));
evalcond[5]=((((-1.0)*x9457*x9460))+((r10*x9461))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9462))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9463=(gconst1*r01);
IkReal x9464=(gconst2*r00);
CheckValue<IkReal> x9465 = IKatan2WithCheck(IkReal((x9464+(((-1.0)*x9463)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9465.valid){
continue;
}
CheckValue<IkReal> x9466=IKPowWithIntegerCheck(IKsign(((x9463*x9463)+(x9464*x9464)+(((-2.0)*x9463*x9464))+(r02*r02))),-1);
if(!x9466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9465.value)+(((1.5707963267949)*(x9466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9467=IKsin(j4);
IkReal x9468=IKcos(j4);
IkReal x9469=(gconst1*r11);
IkReal x9470=(gconst1*r21);
IkReal x9471=(gconst1*r01);
IkReal x9472=((1.0)*x9468);
IkReal x9473=(gconst2*x9468);
IkReal x9474=((1.0)*x9467);
evalcond[0]=((((-1.0)*gconst2*r20*x9474))+(((-1.0)*r22*x9472))+((x9467*x9470)));
evalcond[1]=((((-1.0)*r12*x9472))+((x9467*x9469))+(((-1.0)*gconst2*r10*x9474)));
evalcond[2]=((((-1.0)*r02*x9474))+(((-1.0)*x9471*x9472))+((r00*x9473)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9472))+(((-1.0)*gconst2*r00*x9474))+((x9467*x9471)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9470*x9472))+((cj1*sj2))+(((-1.0)*r22*x9474))+((r20*x9473)));
evalcond[5]=(((r10*x9473))+(((-1.0)*sj1*sj2))+(((-1.0)*x9469*x9472))+(((-1.0)*r12*x9474))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9475 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9475.valid){
continue;
}
CheckValue<IkReal> x9476=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9475.value)+(((1.5707963267949)*(x9476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9477=IKsin(j4);
IkReal x9478=IKcos(j4);
IkReal x9479=(gconst1*r11);
IkReal x9480=(gconst1*r21);
IkReal x9481=(gconst1*r01);
IkReal x9482=((1.0)*x9478);
IkReal x9483=(gconst2*x9478);
IkReal x9484=((1.0)*x9477);
evalcond[0]=(((x9477*x9480))+(((-1.0)*r22*x9482))+(((-1.0)*gconst2*r20*x9484)));
evalcond[1]=((((-1.0)*gconst2*r10*x9484))+((x9477*x9479))+(((-1.0)*r12*x9482)));
evalcond[2]=(((r00*x9483))+(((-1.0)*r02*x9484))+(((-1.0)*x9481*x9482)));
evalcond[3]=((1.0)+((x9477*x9481))+(((-1.0)*gconst2*r00*x9484))+(((-1.0)*r02*x9482)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9480*x9482))+((cj1*sj2))+((r20*x9483))+(((-1.0)*r22*x9484)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9479*x9482))+((cj1*cj2))+((r10*x9483))+(((-1.0)*r12*x9484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9485=((-1.0)*r20);
IkReal x9486=((-1.0)*px);
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9485),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
IkReal x9487=((-1.0)*(x9488.value));
sj5=gconst1;
cj5=gconst2;
j5=x9487;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9486);
rxp1_1=(px*r21);
rxp1_2=(r11*x9486);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9487;
IkReal gconst1=r21;
IkReal gconst2=x9485;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9489=((-1.0)*r20);
IkReal x9490=((-1.0)*px);
CheckValue<IkReal> x9492 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9489),IKFAST_ATAN2_MAGTHRESH);
if(!x9492.valid){
continue;
}
IkReal x9491=((-1.0)*(x9492.value));
sj5=gconst1;
cj5=gconst2;
j5=x9491;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9490);
rxp1_1=(px*r21);
rxp1_2=(r11*x9490);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9491;
IkReal gconst1=r21;
IkReal gconst2=x9489;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9493=((-1.0)*r20);
IkReal x9494=((-1.0)*px);
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9493),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
IkReal x9495=((-1.0)*(x9496.value));
sj5=gconst1;
cj5=gconst2;
j5=x9495;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9494);
rxp1_1=(px*r21);
rxp1_2=(r11*x9494);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9495;
IkReal gconst1=r21;
IkReal gconst2=x9493;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9499=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9499.valid){
continue;
}
IkReal x9497=x9499.value;
IkReal x9498=(sj0*x9497);
cj4array[0]=((((-1.0)*sj1*sj2*x9498))+((cj1*cj2*x9498)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9500=IKsin(j4);
IkReal x9501=IKcos(j4);
IkReal x9502=(gconst1*x9500);
IkReal x9503=((1.0)*x9501);
IkReal x9504=((1.0)*gconst2*x9500);
evalcond[0]=((-1.0)*r02*x9500);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9503)));
evalcond[2]=(((r21*x9502))+(((-1.0)*r20*x9504)));
evalcond[3]=(((r11*x9502))+(((-1.0)*r10*x9504)));
evalcond[4]=((((-1.0)*gconst1*r21*x9503))+((cj2*sj1))+((cj1*sj2))+((gconst2*r20*x9501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9507=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9507.valid){
continue;
}
IkReal x9505=x9507.value;
IkReal x9506=((1.0)*x9505);
cj4array[0]=((((-1.0)*cj2*sj1*x9506))+(((-1.0)*cj1*sj2*x9506)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9508=IKsin(j4);
IkReal x9509=IKcos(j4);
IkReal x9510=(gconst2*r10);
IkReal x9511=((1.0)*sj0);
IkReal x9512=(gconst1*r11);
IkReal x9513=((1.0)*x9508);
IkReal x9514=((1.0)*x9509);
evalcond[0]=((-1.0)*r02*x9508);
evalcond[1]=((((-1.0)*r02*x9514))+(((-1.0)*x9511)));
evalcond[2]=((((-1.0)*gconst2*r20*x9513))+((gconst1*r21*x9508)));
evalcond[3]=((((-1.0)*x9510*x9513))+((x9508*x9512)));
evalcond[4]=((((-1.0)*cj1*cj2*x9511))+(((-1.0)*x9512*x9514))+((sj0*sj1*sj2))+((x9509*x9510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9515=IKPowWithIntegerCheck(r02,-1);
if(!x9515.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9515.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9516=IKsin(j4);
IkReal x9517=IKcos(j4);
IkReal x9518=(gconst2*r10);
IkReal x9519=(gconst1*r11);
IkReal x9520=(gconst1*r21);
IkReal x9521=(gconst2*r20);
IkReal x9522=((1.0)*x9516);
IkReal x9523=((1.0)*x9517);
evalcond[0]=((-1.0)*r02*x9516);
evalcond[1]=((((-1.0)*x9521*x9522))+((x9516*x9520)));
evalcond[2]=(((x9516*x9519))+(((-1.0)*x9518*x9522)));
evalcond[3]=(((x9517*x9521))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9520*x9523)));
evalcond[4]=(((x9517*x9518))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9519*x9523))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9524=(cj2*sj1);
IkReal x9525=(cj1*sj2);
IkReal x9526=(gconst1*r21);
IkReal x9527=((1.0)*gconst2*r20);
CheckValue<IkReal> x9528 = IKatan2WithCheck(IkReal((((r22*x9524))+((r22*x9525)))),IkReal((((x9524*x9526))+(((-1.0)*x9525*x9527))+(((-1.0)*x9524*x9527))+((x9525*x9526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9528.valid){
continue;
}
CheckValue<IkReal> x9529=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9526*x9526)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9526)))),-1);
if(!x9529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9528.value)+(((1.5707963267949)*(x9529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9530=IKsin(j4);
IkReal x9531=IKcos(j4);
IkReal x9532=(gconst1*r11);
IkReal x9533=(sj1*sj2);
IkReal x9534=(gconst1*r21);
IkReal x9535=(gconst1*r01);
IkReal x9536=((1.0)*x9531);
IkReal x9537=(gconst2*x9531);
IkReal x9538=((1.0)*cj1*cj2);
IkReal x9539=((1.0)*x9530);
evalcond[0]=((((-1.0)*r22*x9536))+(((-1.0)*gconst2*r20*x9539))+((x9530*x9534)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9539))+((x9530*x9532))+(((-1.0)*r12*x9536)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9539))+(((-1.0)*r02*x9536))+((x9530*x9535)));
evalcond[3]=(((cj2*sj1))+((r20*x9537))+(((-1.0)*r22*x9539))+((cj1*sj2))+(((-1.0)*x9534*x9536)));
evalcond[4]=((((-1.0)*cj0*x9538))+(((-1.0)*r02*x9539))+((cj0*x9533))+((r00*x9537))+(((-1.0)*x9535*x9536)));
evalcond[5]=((((-1.0)*x9532*x9536))+((r10*x9537))+((sj0*x9533))+(((-1.0)*sj0*x9538))+(((-1.0)*r12*x9539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9540=((1.0)*gconst2);
CheckValue<IkReal> x9541 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9540))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9541.valid){
continue;
}
CheckValue<IkReal> x9542=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9540)))),-1);
if(!x9542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9541.value)+(((1.5707963267949)*(x9542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9543=IKsin(j4);
IkReal x9544=IKcos(j4);
IkReal x9545=(gconst1*r11);
IkReal x9546=(sj1*sj2);
IkReal x9547=(gconst1*r21);
IkReal x9548=(gconst1*r01);
IkReal x9549=((1.0)*x9544);
IkReal x9550=(gconst2*x9544);
IkReal x9551=((1.0)*cj1*cj2);
IkReal x9552=((1.0)*x9543);
evalcond[0]=((((-1.0)*r22*x9549))+((x9543*x9547))+(((-1.0)*gconst2*r20*x9552)));
evalcond[1]=((((-1.0)*r12*x9549))+cj0+(((-1.0)*gconst2*r10*x9552))+((x9543*x9545)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9549))+((x9543*x9548))+(((-1.0)*gconst2*r00*x9552)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9552))+((cj1*sj2))+((r20*x9550))+(((-1.0)*x9547*x9549)));
evalcond[4]=((((-1.0)*cj0*x9551))+(((-1.0)*r02*x9552))+((cj0*x9546))+(((-1.0)*x9548*x9549))+((r00*x9550)));
evalcond[5]=((((-1.0)*sj0*x9551))+((r10*x9550))+(((-1.0)*r12*x9552))+((sj0*x9546))+(((-1.0)*x9545*x9549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9553=((1.0)*gconst2);
CheckValue<IkReal> x9554 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9554.valid){
continue;
}
CheckValue<IkReal> x9555=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9553)))),-1);
if(!x9555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9554.value)+(((1.5707963267949)*(x9555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9556=IKsin(j4);
IkReal x9557=IKcos(j4);
IkReal x9558=(gconst1*r11);
IkReal x9559=(sj1*sj2);
IkReal x9560=(gconst1*r21);
IkReal x9561=(gconst1*r01);
IkReal x9562=((1.0)*x9557);
IkReal x9563=(gconst2*x9557);
IkReal x9564=((1.0)*cj1*cj2);
IkReal x9565=((1.0)*x9556);
evalcond[0]=((((-1.0)*gconst2*r20*x9565))+(((-1.0)*r22*x9562))+((x9556*x9560)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9565))+((x9556*x9558))+(((-1.0)*r12*x9562)));
evalcond[2]=((((-1.0)*gconst2*r00*x9565))+(((-1.0)*sj0))+((x9556*x9561))+(((-1.0)*r02*x9562)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9565))+(((-1.0)*x9560*x9562))+((r20*x9563)));
evalcond[4]=(((r00*x9563))+(((-1.0)*cj0*x9564))+((cj0*x9559))+(((-1.0)*x9561*x9562))+(((-1.0)*r02*x9565)));
evalcond[5]=(((sj0*x9559))+(((-1.0)*x9558*x9562))+(((-1.0)*r12*x9565))+(((-1.0)*sj0*x9564))+((r10*x9563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9566=((-1.0)*r20);
IkReal x9567=x8917;
CheckValue<IkReal> x9569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9566),IKFAST_ATAN2_MAGTHRESH);
if(!x9569.valid){
continue;
}
IkReal x9568=((-1.0)*(x9569.value));
sj5=gconst1;
cj5=gconst2;
j5=x9568;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9568;
IkReal gconst1=(r21*x9567);
IkReal gconst2=(x9566*x9567);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9570=((-1.0)*r20);
IkReal x9571=x8917;
CheckValue<IkReal> x9573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9570),IKFAST_ATAN2_MAGTHRESH);
if(!x9573.valid){
continue;
}
IkReal x9572=((-1.0)*(x9573.value));
sj5=gconst1;
cj5=gconst2;
j5=x9572;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9572;
IkReal gconst1=(r21*x9571);
IkReal gconst2=(x9570*x9571);
CheckValue<IkReal> x9581=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9581.valid){
continue;
}
IkReal x9574=x9581.value;
IkReal x9575=(sj3*x9574);
IkReal x9576=(r11*x9575);
IkReal x9577=(r00*x9575);
IkReal x9578=(r01*x9575);
IkReal x9579=(r10*x9575);
IkReal x9580=(r20*r21*x9575);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9577*(r20*r20)))+((r10*r20*r21*x9578))+((r01*x9576*(r21*r21)))+((r00*r20*r21*x9576))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9582=gconst2*gconst2;
IkReal x9583=gconst1*gconst1;
IkReal x9584=((1.0)*cj3);
IkReal x9585=((1.0)*sj3);
IkReal x9586=(r11*sj3);
IkReal x9587=(r10*sj3);
IkReal x9588=(gconst1*gconst2*r00);
IkReal x9589=(gconst1*gconst2*r01);
IkReal x9590=(r00*x9582);
IkReal x9591=(r01*x9583);
CheckValue<IkReal> x9592 = IKatan2WithCheck(IkReal((((gconst2*r02*x9586))+((gconst1*r02*x9587)))),IkReal(((((-1.0)*r11*x9585*x9590))+(((-1.0)*r10*x9585*x9588))+((x9586*x9589))+((x9587*x9591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9592.valid){
continue;
}
CheckValue<IkReal> x9593=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9584))+((cj3*r11*x9588))+(((-1.0)*r10*x9584*x9590))+(((-1.0)*r11*x9584*x9591))+((cj3*r10*x9589)))),-1);
if(!x9593.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9592.value)+(((1.5707963267949)*(x9593.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9594=IKsin(j4);
IkReal x9595=IKcos(j4);
IkReal x9596=(sj1*sj2);
IkReal x9597=(gconst1*sj3);
IkReal x9598=(cj3*gconst1);
IkReal x9599=(cj3*gconst2);
IkReal x9600=((1.0)*cj2);
IkReal x9601=(cj1*sj2);
IkReal x9602=(gconst2*sj3);
IkReal x9603=(cj1*x9600);
IkReal x9604=((1.0)*x9595);
IkReal x9605=((1.0)*x9594);
IkReal x9606=(gconst1*x9594);
IkReal x9607=(cj3*x9594);
IkReal x9608=(x9595*x9602);
evalcond[0]=((((-1.0)*r22*x9604))+((r21*x9606))+(((-1.0)*gconst2*r20*x9605)));
evalcond[1]=(((r01*x9606))+(((-1.0)*r02*x9604))+(((-1.0)*gconst2*r00*x9605)));
evalcond[2]=((1.0)+((r11*x9606))+(((-1.0)*r12*x9604))+(((-1.0)*gconst2*r10*x9605)));
evalcond[3]=(((r12*x9607))+((r11*x9602))+((r10*x9597))+((r11*x9595*x9598))+(((-1.0)*r10*x9599*x9604)));
evalcond[4]=(((r11*x9599))+((r10*x9608))+(((-1.0)*r12*sj3*x9605))+((r10*x9598))+(((-1.0)*r11*x9597*x9604)));
evalcond[5]=(((r20*x9597))+((cj2*sj1))+((r21*x9602))+((r21*x9595*x9598))+x9601+(((-1.0)*r20*x9599*x9604))+((r22*x9607)));
evalcond[6]=((((-1.0)*x9603))+((r00*x9597))+((r01*x9602))+((r01*x9595*x9598))+x9596+((r02*x9607))+(((-1.0)*r00*x9599*x9604)));
evalcond[7]=(((r20*x9598))+(((-1.0)*r21*x9597*x9604))+(((-1.0)*x9603))+((r20*x9608))+x9596+((r21*x9599))+(((-1.0)*r22*sj3*x9605)));
evalcond[8]=((((-1.0)*r02*sj3*x9605))+((r01*x9599))+(((-1.0)*sj1*x9600))+((r00*x9608))+((r00*x9598))+(((-1.0)*x9601))+(((-1.0)*r01*x9597*x9604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9609=gconst2*gconst2;
IkReal x9610=gconst1*gconst1;
IkReal x9611=(gconst2*r11);
IkReal x9612=(cj3*r02);
IkReal x9613=(gconst1*r01);
IkReal x9614=(cj3*r10);
IkReal x9615=(r10*sj3);
IkReal x9616=((1.0)*gconst1*r00);
IkReal x9617=(r01*x9610);
IkReal x9618=(r00*x9609);
CheckValue<IkReal> x9619=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9615*x9618))+(((-1.0)*gconst2*x9613*x9615))+((r11*sj3*x9617))+(((-1.0)*sj3*x9611*x9616)))),-1);
if(!x9619.valid){
continue;
}
CheckValue<IkReal> x9620 = IKatan2WithCheck(IkReal((((x9611*x9612))+((gconst1*r10*x9612)))),IkReal(((((-1.0)*gconst2*x9614*x9616))+((cj3*x9611*x9613))+(((-1.0)*cj3*r11*x9618))+((x9614*x9617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9619.value)))+(x9620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9621=IKsin(j4);
IkReal x9622=IKcos(j4);
IkReal x9623=(sj1*sj2);
IkReal x9624=(gconst1*sj3);
IkReal x9625=(cj3*gconst1);
IkReal x9626=(cj3*gconst2);
IkReal x9627=((1.0)*cj2);
IkReal x9628=(cj1*sj2);
IkReal x9629=(gconst2*sj3);
IkReal x9630=(cj1*x9627);
IkReal x9631=((1.0)*x9622);
IkReal x9632=((1.0)*x9621);
IkReal x9633=(gconst1*x9621);
IkReal x9634=(cj3*x9621);
IkReal x9635=(x9622*x9629);
evalcond[0]=((((-1.0)*r22*x9631))+((r21*x9633))+(((-1.0)*gconst2*r20*x9632)));
evalcond[1]=(((r01*x9633))+(((-1.0)*gconst2*r00*x9632))+(((-1.0)*r02*x9631)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9632))+(((-1.0)*r12*x9631))+((r11*x9633)));
evalcond[3]=(((r10*x9624))+(((-1.0)*r10*x9626*x9631))+((r12*x9634))+((r11*x9629))+((r11*x9622*x9625)));
evalcond[4]=((((-1.0)*r11*x9624*x9631))+((r10*x9635))+((r10*x9625))+(((-1.0)*r12*sj3*x9632))+((r11*x9626)));
evalcond[5]=(((cj2*sj1))+((r20*x9624))+((r21*x9629))+((r22*x9634))+(((-1.0)*r20*x9626*x9631))+((r21*x9622*x9625))+x9628);
evalcond[6]=(((r01*x9629))+(((-1.0)*r00*x9626*x9631))+((r00*x9624))+x9623+((r02*x9634))+(((-1.0)*x9630))+((r01*x9622*x9625)));
evalcond[7]=(((r20*x9625))+((r20*x9635))+((r21*x9626))+(((-1.0)*r22*sj3*x9632))+x9623+(((-1.0)*r21*x9624*x9631))+(((-1.0)*x9630)));
evalcond[8]=(((r01*x9626))+(((-1.0)*r01*x9624*x9631))+((r00*x9635))+((r00*x9625))+(((-1.0)*x9628))+(((-1.0)*r02*sj3*x9632))+(((-1.0)*sj1*x9627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9636=((1.0)*gconst2);
CheckValue<IkReal> x9637 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9637.valid){
continue;
}
CheckValue<IkReal> x9638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9636)))),-1);
if(!x9638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9637.value)+(((1.5707963267949)*(x9638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9639=IKsin(j4);
IkReal x9640=IKcos(j4);
IkReal x9641=(sj1*sj2);
IkReal x9642=(gconst1*sj3);
IkReal x9643=(cj3*gconst1);
IkReal x9644=(cj3*gconst2);
IkReal x9645=((1.0)*cj2);
IkReal x9646=(cj1*sj2);
IkReal x9647=(gconst2*sj3);
IkReal x9648=(cj1*x9645);
IkReal x9649=((1.0)*x9640);
IkReal x9650=((1.0)*x9639);
IkReal x9651=(gconst1*x9639);
IkReal x9652=(cj3*x9639);
IkReal x9653=(x9640*x9647);
evalcond[0]=((((-1.0)*gconst2*r20*x9650))+((r21*x9651))+(((-1.0)*r22*x9649)));
evalcond[1]=(((r01*x9651))+(((-1.0)*gconst2*r00*x9650))+(((-1.0)*r02*x9649)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9649))+((r11*x9651))+(((-1.0)*gconst2*r10*x9650)));
evalcond[3]=(((r11*x9647))+(((-1.0)*r10*x9644*x9649))+((r12*x9652))+((r10*x9642))+((r11*x9640*x9643)));
evalcond[4]=(((r11*x9644))+(((-1.0)*r11*x9642*x9649))+((r10*x9643))+((r10*x9653))+(((-1.0)*r12*sj3*x9650)));
evalcond[5]=(((cj2*sj1))+((r21*x9640*x9643))+(((-1.0)*r20*x9644*x9649))+x9646+((r20*x9642))+((r22*x9652))+((r21*x9647)));
evalcond[6]=((((-1.0)*r00*x9644*x9649))+(((-1.0)*x9648))+((r00*x9642))+((r01*x9647))+x9641+((r02*x9652))+((r01*x9640*x9643)));
evalcond[7]=((((-1.0)*r21*x9642*x9649))+((r20*x9653))+(((-1.0)*x9648))+x9641+((r20*x9643))+(((-1.0)*r22*sj3*x9650))+((r21*x9644)));
evalcond[8]=((((-1.0)*sj1*x9645))+(((-1.0)*r02*sj3*x9650))+((r00*x9653))+((r00*x9643))+((r01*x9644))+(((-1.0)*x9646))+(((-1.0)*r01*x9642*x9649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9654=((-1.0)*r20);
IkReal x9655=x8917;
CheckValue<IkReal> x9657 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9654),IKFAST_ATAN2_MAGTHRESH);
if(!x9657.valid){
continue;
}
IkReal x9656=((-1.0)*(x9657.value));
sj5=gconst1;
cj5=gconst2;
j5=x9656;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9656;
IkReal gconst1=(r21*x9655);
IkReal gconst2=(x9654*x9655);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9658=((-1.0)*r20);
IkReal x9659=x8917;
CheckValue<IkReal> x9661 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9658),IKFAST_ATAN2_MAGTHRESH);
if(!x9661.valid){
continue;
}
IkReal x9660=((-1.0)*(x9661.value));
sj5=gconst1;
cj5=gconst2;
j5=x9660;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9660;
IkReal gconst1=(r21*x9659);
IkReal gconst2=(x9658*x9659);
CheckValue<IkReal> x9669=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9669.valid){
continue;
}
IkReal x9662=x9669.value;
IkReal x9663=(sj3*x9662);
IkReal x9664=(r11*x9663);
IkReal x9665=(r00*x9663);
IkReal x9666=(r01*x9663);
IkReal x9667=(r10*x9663);
IkReal x9668=(r20*r21*x9663);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9664))+((r01*x9664*(r21*r21)))+((r10*r20*r21*x9666))+((r10*x9665*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9670=gconst2*gconst2;
IkReal x9671=gconst1*gconst1;
IkReal x9672=((1.0)*cj3);
IkReal x9673=((1.0)*sj3);
IkReal x9674=(r11*sj3);
IkReal x9675=(r10*sj3);
IkReal x9676=(gconst1*gconst2*r00);
IkReal x9677=(gconst1*gconst2*r01);
IkReal x9678=(r00*x9670);
IkReal x9679=(r01*x9671);
CheckValue<IkReal> x9680 = IKatan2WithCheck(IkReal((((gconst1*r02*x9675))+((gconst2*r02*x9674)))),IkReal(((((-1.0)*r10*x9673*x9676))+(((-1.0)*r11*x9673*x9678))+((x9674*x9677))+((x9675*x9679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9680.valid){
continue;
}
CheckValue<IkReal> x9681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9672))+(((-1.0)*r11*x9672*x9679))+((cj3*r11*x9676))+((cj3*r10*x9677))+(((-1.0)*r10*x9672*x9678)))),-1);
if(!x9681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9680.value)+(((1.5707963267949)*(x9681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9682=IKsin(j4);
IkReal x9683=IKcos(j4);
IkReal x9684=(cj2*sj1);
IkReal x9685=(cj1*sj2);
IkReal x9686=(gconst1*sj3);
IkReal x9687=(cj3*gconst1);
IkReal x9688=(sj1*sj2);
IkReal x9689=(cj3*gconst2);
IkReal x9690=(cj1*cj2);
IkReal x9691=(gconst2*sj3);
IkReal x9692=((1.0)*x9683);
IkReal x9693=((1.0)*x9682);
IkReal x9694=(gconst1*x9682);
IkReal x9695=(cj3*x9682);
IkReal x9696=(x9685+x9684);
IkReal x9697=(x9683*x9691);
evalcond[0]=(((r21*x9694))+(((-1.0)*r22*x9692))+(((-1.0)*gconst2*r20*x9693)));
evalcond[1]=((((-1.0)*gconst2*r00*x9693))+(((-1.0)*r02*x9692))+((r01*x9694)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9693))+(((-1.0)*r12*x9692))+((r11*x9694)));
evalcond[3]=(((r11*x9683*x9687))+(((-1.0)*r10*x9689*x9692))+((r12*x9695))+((r11*x9691))+((r10*x9686)));
evalcond[4]=((((-1.0)*r11*x9686*x9692))+((r10*x9697))+((r11*x9689))+(((-1.0)*r12*sj3*x9693))+((r10*x9687)));
evalcond[5]=(((r22*x9695))+((r21*x9691))+x9696+(((-1.0)*r20*x9689*x9692))+((r20*x9686))+((r21*x9683*x9687)));
evalcond[6]=((((-1.0)*x9688))+((r02*x9695))+((r01*x9683*x9687))+x9690+(((-1.0)*r00*x9689*x9692))+((r01*x9691))+((r00*x9686)));
evalcond[7]=((((-1.0)*r01*x9686*x9692))+(((-1.0)*r02*sj3*x9693))+x9696+((r01*x9689))+((r00*x9697))+((r00*x9687)));
evalcond[8]=((((-1.0)*x9690))+(((-1.0)*r22*sj3*x9693))+((r21*x9689))+x9688+(((-1.0)*r21*x9686*x9692))+((r20*x9687))+((r20*x9697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9698=gconst2*gconst2;
IkReal x9699=gconst1*gconst1;
IkReal x9700=(gconst2*r11);
IkReal x9701=(cj3*r02);
IkReal x9702=(gconst1*r01);
IkReal x9703=(cj3*r10);
IkReal x9704=(r10*sj3);
IkReal x9705=((1.0)*gconst1*r00);
IkReal x9706=(r01*x9699);
IkReal x9707=(r00*x9698);
CheckValue<IkReal> x9708 = IKatan2WithCheck(IkReal((((x9700*x9701))+((gconst1*r10*x9701)))),IkReal((((x9703*x9706))+(((-1.0)*cj3*r11*x9707))+((cj3*x9700*x9702))+(((-1.0)*gconst2*x9703*x9705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9708.valid){
continue;
}
CheckValue<IkReal> x9709=IKPowWithIntegerCheck(IKsign((((x9704*x9707))+((r02*r12*sj3))+(((-1.0)*sj3*x9700*x9705))+((r11*sj3*x9706))+(((-1.0)*gconst2*x9702*x9704)))),-1);
if(!x9709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9708.value)+(((1.5707963267949)*(x9709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9710=IKsin(j4);
IkReal x9711=IKcos(j4);
IkReal x9712=(cj2*sj1);
IkReal x9713=(cj1*sj2);
IkReal x9714=(gconst1*sj3);
IkReal x9715=(cj3*gconst1);
IkReal x9716=(sj1*sj2);
IkReal x9717=(cj3*gconst2);
IkReal x9718=(cj1*cj2);
IkReal x9719=(gconst2*sj3);
IkReal x9720=((1.0)*x9711);
IkReal x9721=((1.0)*x9710);
IkReal x9722=(gconst1*x9710);
IkReal x9723=(cj3*x9710);
IkReal x9724=(x9713+x9712);
IkReal x9725=(x9711*x9719);
evalcond[0]=((((-1.0)*gconst2*r20*x9721))+(((-1.0)*r22*x9720))+((r21*x9722)));
evalcond[1]=(((r01*x9722))+(((-1.0)*r02*x9720))+(((-1.0)*gconst2*r00*x9721)));
evalcond[2]=((-1.0)+((r11*x9722))+(((-1.0)*r12*x9720))+(((-1.0)*gconst2*r10*x9721)));
evalcond[3]=(((r11*x9711*x9715))+((r12*x9723))+((r11*x9719))+(((-1.0)*r10*x9717*x9720))+((r10*x9714)));
evalcond[4]=((((-1.0)*r12*sj3*x9721))+((r11*x9717))+(((-1.0)*r11*x9714*x9720))+((r10*x9715))+((r10*x9725)));
evalcond[5]=((((-1.0)*r20*x9717*x9720))+x9724+((r21*x9711*x9715))+((r20*x9714))+((r21*x9719))+((r22*x9723)));
evalcond[6]=(((r02*x9723))+((r01*x9711*x9715))+x9718+(((-1.0)*r00*x9717*x9720))+((r01*x9719))+((r00*x9714))+(((-1.0)*x9716)));
evalcond[7]=((((-1.0)*r02*sj3*x9721))+x9724+(((-1.0)*r01*x9714*x9720))+((r01*x9717))+((r00*x9715))+((r00*x9725)));
evalcond[8]=((((-1.0)*r21*x9714*x9720))+x9716+((r20*x9725))+((r20*x9715))+(((-1.0)*r22*sj3*x9721))+((r21*x9717))+(((-1.0)*x9718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9726 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9726.valid){
continue;
}
CheckValue<IkReal> x9727=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9726.value)+(((1.5707963267949)*(x9727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9728=IKsin(j4);
IkReal x9729=IKcos(j4);
IkReal x9730=(cj2*sj1);
IkReal x9731=(cj1*sj2);
IkReal x9732=(gconst1*sj3);
IkReal x9733=(cj3*gconst1);
IkReal x9734=(sj1*sj2);
IkReal x9735=(cj3*gconst2);
IkReal x9736=(cj1*cj2);
IkReal x9737=(gconst2*sj3);
IkReal x9738=((1.0)*x9729);
IkReal x9739=((1.0)*x9728);
IkReal x9740=(gconst1*x9728);
IkReal x9741=(cj3*x9728);
IkReal x9742=(x9731+x9730);
IkReal x9743=(x9729*x9737);
evalcond[0]=(((r21*x9740))+(((-1.0)*r22*x9738))+(((-1.0)*gconst2*r20*x9739)));
evalcond[1]=((((-1.0)*r02*x9738))+(((-1.0)*gconst2*r00*x9739))+((r01*x9740)));
evalcond[2]=((-1.0)+((r11*x9740))+(((-1.0)*r12*x9738))+(((-1.0)*gconst2*r10*x9739)));
evalcond[3]=((((-1.0)*r10*x9735*x9738))+((r11*x9737))+((r11*x9729*x9733))+((r12*x9741))+((r10*x9732)));
evalcond[4]=(((r11*x9735))+(((-1.0)*r12*sj3*x9739))+(((-1.0)*r11*x9732*x9738))+((r10*x9743))+((r10*x9733)));
evalcond[5]=(((r22*x9741))+((r20*x9732))+x9742+((r21*x9737))+(((-1.0)*r20*x9735*x9738))+((r21*x9729*x9733)));
evalcond[6]=(((r01*x9729*x9733))+((r02*x9741))+x9736+(((-1.0)*r00*x9735*x9738))+((r01*x9737))+(((-1.0)*x9734))+((r00*x9732)));
evalcond[7]=((((-1.0)*r02*sj3*x9739))+x9742+((r00*x9743))+(((-1.0)*r01*x9732*x9738))+((r01*x9735))+((r00*x9733)));
evalcond[8]=((((-1.0)*r21*x9732*x9738))+((r20*x9733))+x9734+(((-1.0)*r22*sj3*x9739))+((r20*x9743))+((r21*x9735))+(((-1.0)*x9736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9744=((-1.0)*r20);
IkReal x9745=x8917;
CheckValue<IkReal> x9747 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9744),IKFAST_ATAN2_MAGTHRESH);
if(!x9747.valid){
continue;
}
IkReal x9746=((-1.0)*(x9747.value));
sj5=gconst1;
cj5=gconst2;
j5=x9746;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9746;
IkReal gconst1=(r21*x9745);
IkReal gconst2=(x9744*x9745);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9748=((-1.0)*r20);
IkReal x9749=x8917;
CheckValue<IkReal> x9751 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9748),IKFAST_ATAN2_MAGTHRESH);
if(!x9751.valid){
continue;
}
IkReal x9750=((-1.0)*(x9751.value));
sj5=gconst1;
cj5=gconst2;
j5=x9750;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9750;
IkReal gconst1=(r21*x9749);
IkReal gconst2=(x9748*x9749);
CheckValue<IkReal> x9759=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9759.valid){
continue;
}
IkReal x9752=x9759.value;
IkReal x9753=(sj3*x9752);
IkReal x9754=(r11*x9753);
IkReal x9755=(r00*x9753);
IkReal x9756=(r01*x9753);
IkReal x9757=(r10*x9753);
IkReal x9758=(r20*r21*x9753);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9754*(r21*r21)))+((r00*r20*r21*x9754))+((r10*r20*r21*x9756))+((r10*x9755*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9760=gconst1*gconst1;
IkReal x9761=gconst2*gconst2;
IkReal x9762=((1.0)*cj3);
IkReal x9763=(gconst2*r10);
IkReal x9764=(r01*sj3);
IkReal x9765=(gconst1*r00*sj3);
IkReal x9766=(gconst1*gconst2*r11);
IkReal x9767=(r10*x9761);
IkReal x9768=(r11*x9760);
CheckValue<IkReal> x9769=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9766))+(((-1.0)*r00*x9762*x9767))+(((-1.0)*r02*r12*x9762))+((cj3*gconst1*r01*x9763))+(((-1.0)*r01*x9762*x9768)))),-1);
if(!x9769.valid){
continue;
}
CheckValue<IkReal> x9770 = IKatan2WithCheck(IkReal((((r12*x9765))+((gconst2*r12*x9764)))),IkReal((((r00*sj3*x9768))+(((-1.0)*x9763*x9765))+((x9764*x9766))+(((-1.0)*x9764*x9767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9769.value)))+(x9770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9771=IKsin(j4);
IkReal x9772=IKcos(j4);
IkReal x9773=(sj1*sj2);
IkReal x9774=(gconst1*sj3);
IkReal x9775=(cj3*gconst1);
IkReal x9776=(cj3*gconst2);
IkReal x9777=((1.0)*cj2);
IkReal x9778=(cj1*sj2);
IkReal x9779=(gconst2*sj3);
IkReal x9780=(cj1*x9777);
IkReal x9781=((1.0)*x9772);
IkReal x9782=((1.0)*x9771);
IkReal x9783=(gconst1*x9771);
IkReal x9784=(cj3*x9771);
IkReal x9785=(x9772*x9779);
evalcond[0]=(((r21*x9783))+(((-1.0)*gconst2*r20*x9782))+(((-1.0)*r22*x9781)));
evalcond[1]=((((-1.0)*r12*x9781))+((r11*x9783))+(((-1.0)*gconst2*r10*x9782)));
evalcond[2]=((-1.0)+((r01*x9783))+(((-1.0)*gconst2*r00*x9782))+(((-1.0)*r02*x9781)));
evalcond[3]=(((r01*x9779))+((r00*x9774))+((r01*x9772*x9775))+((r02*x9784))+(((-1.0)*r00*x9776*x9781)));
evalcond[4]=(((r00*x9785))+(((-1.0)*r02*sj3*x9782))+((r01*x9776))+((r00*x9775))+(((-1.0)*r01*x9774*x9781)));
evalcond[5]=(((r21*x9772*x9775))+((cj2*sj1))+(((-1.0)*r20*x9776*x9781))+((r22*x9784))+x9778+((r21*x9779))+((r20*x9774)));
evalcond[6]=(((r10*x9774))+x9773+(((-1.0)*r10*x9776*x9781))+((r11*x9772*x9775))+((r12*x9784))+(((-1.0)*x9780))+((r11*x9779)));
evalcond[7]=((((-1.0)*r22*sj3*x9782))+x9773+((r21*x9776))+((r20*x9775))+((r20*x9785))+(((-1.0)*r21*x9774*x9781))+(((-1.0)*x9780)));
evalcond[8]=(((r10*x9775))+(((-1.0)*x9778))+(((-1.0)*r11*x9774*x9781))+(((-1.0)*r12*sj3*x9782))+((r10*x9785))+(((-1.0)*sj1*x9777))+((r11*x9776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9786=gconst2*gconst2;
IkReal x9787=gconst1*gconst1;
IkReal x9788=(gconst1*r00);
IkReal x9789=(r11*sj3);
IkReal x9790=((1.0)*gconst2);
IkReal x9791=(cj3*r12);
IkReal x9792=(cj3*r11);
IkReal x9793=(gconst2*r01);
IkReal x9794=(cj3*r10);
IkReal x9795=(r10*sj3);
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal((((x9788*x9791))+((x9791*x9793)))),IkReal((((r00*x9787*x9792))+(((-1.0)*x9788*x9790*x9794))+((gconst1*x9792*x9793))+(((-1.0)*r01*x9786*x9794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
CheckValue<IkReal> x9797=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9790*x9795))+((r00*x9786*x9795))+((r01*x9787*x9789))+(((-1.0)*x9788*x9789*x9790)))),-1);
if(!x9797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9796.value)+(((1.5707963267949)*(x9797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9798=IKsin(j4);
IkReal x9799=IKcos(j4);
IkReal x9800=(sj1*sj2);
IkReal x9801=(gconst1*sj3);
IkReal x9802=(cj3*gconst1);
IkReal x9803=(cj3*gconst2);
IkReal x9804=((1.0)*cj2);
IkReal x9805=(cj1*sj2);
IkReal x9806=(gconst2*sj3);
IkReal x9807=(cj1*x9804);
IkReal x9808=((1.0)*x9799);
IkReal x9809=((1.0)*x9798);
IkReal x9810=(gconst1*x9798);
IkReal x9811=(cj3*x9798);
IkReal x9812=(x9799*x9806);
evalcond[0]=(((r21*x9810))+(((-1.0)*r22*x9808))+(((-1.0)*gconst2*r20*x9809)));
evalcond[1]=((((-1.0)*gconst2*r10*x9809))+((r11*x9810))+(((-1.0)*r12*x9808)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9809))+(((-1.0)*r02*x9808))+((r01*x9810)));
evalcond[3]=(((r00*x9801))+((r01*x9799*x9802))+((r02*x9811))+(((-1.0)*r00*x9803*x9808))+((r01*x9806)));
evalcond[4]=(((r00*x9802))+(((-1.0)*r01*x9801*x9808))+((r01*x9803))+(((-1.0)*r02*sj3*x9809))+((r00*x9812)));
evalcond[5]=(((cj2*sj1))+((r21*x9806))+((r21*x9799*x9802))+((r22*x9811))+(((-1.0)*r20*x9803*x9808))+((r20*x9801))+x9805);
evalcond[6]=(((r10*x9801))+(((-1.0)*x9807))+((r12*x9811))+((r11*x9806))+(((-1.0)*r10*x9803*x9808))+((r11*x9799*x9802))+x9800);
evalcond[7]=(((r21*x9803))+(((-1.0)*x9807))+(((-1.0)*r22*sj3*x9809))+((r20*x9802))+x9800+(((-1.0)*r21*x9801*x9808))+((r20*x9812)));
evalcond[8]=(((r10*x9802))+(((-1.0)*x9805))+((r11*x9803))+(((-1.0)*r11*x9801*x9808))+(((-1.0)*sj1*x9804))+(((-1.0)*r12*sj3*x9809))+((r10*x9812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9813=((1.0)*gconst2);
CheckValue<IkReal> x9814=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9813)))),-1);
if(!x9814.valid){
continue;
}
CheckValue<IkReal> x9815 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9814.value)))+(x9815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9816=IKsin(j4);
IkReal x9817=IKcos(j4);
IkReal x9818=(sj1*sj2);
IkReal x9819=(gconst1*sj3);
IkReal x9820=(cj3*gconst1);
IkReal x9821=(cj3*gconst2);
IkReal x9822=((1.0)*cj2);
IkReal x9823=(cj1*sj2);
IkReal x9824=(gconst2*sj3);
IkReal x9825=(cj1*x9822);
IkReal x9826=((1.0)*x9817);
IkReal x9827=((1.0)*x9816);
IkReal x9828=(gconst1*x9816);
IkReal x9829=(cj3*x9816);
IkReal x9830=(x9817*x9824);
evalcond[0]=((((-1.0)*gconst2*r20*x9827))+((r21*x9828))+(((-1.0)*r22*x9826)));
evalcond[1]=(((r11*x9828))+(((-1.0)*r12*x9826))+(((-1.0)*gconst2*r10*x9827)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9827))+(((-1.0)*r02*x9826))+((r01*x9828)));
evalcond[3]=(((r01*x9817*x9820))+(((-1.0)*r00*x9821*x9826))+((r01*x9824))+((r02*x9829))+((r00*x9819)));
evalcond[4]=(((r00*x9830))+((r00*x9820))+((r01*x9821))+(((-1.0)*r02*sj3*x9827))+(((-1.0)*r01*x9819*x9826)));
evalcond[5]=(((cj2*sj1))+((r22*x9829))+((r21*x9824))+(((-1.0)*r20*x9821*x9826))+((r21*x9817*x9820))+x9823+((r20*x9819)));
evalcond[6]=(((r11*x9824))+(((-1.0)*x9825))+((r12*x9829))+(((-1.0)*r10*x9821*x9826))+((r11*x9817*x9820))+x9818+((r10*x9819)));
evalcond[7]=(((r20*x9820))+(((-1.0)*x9825))+(((-1.0)*r22*sj3*x9827))+(((-1.0)*r21*x9819*x9826))+((r21*x9821))+((r20*x9830))+x9818);
evalcond[8]=((((-1.0)*r11*x9819*x9826))+((r10*x9830))+((r11*x9821))+(((-1.0)*r12*sj3*x9827))+(((-1.0)*x9823))+((r10*x9820))+(((-1.0)*sj1*x9822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9831=((-1.0)*r20);
IkReal x9832=x8917;
CheckValue<IkReal> x9834 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9831),IKFAST_ATAN2_MAGTHRESH);
if(!x9834.valid){
continue;
}
IkReal x9833=((-1.0)*(x9834.value));
sj5=gconst1;
cj5=gconst2;
j5=x9833;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9833;
IkReal gconst1=(r21*x9832);
IkReal gconst2=(x9831*x9832);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9835=((-1.0)*r20);
IkReal x9836=x8917;
CheckValue<IkReal> x9838 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9835),IKFAST_ATAN2_MAGTHRESH);
if(!x9838.valid){
continue;
}
IkReal x9837=((-1.0)*(x9838.value));
sj5=gconst1;
cj5=gconst2;
j5=x9837;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9837;
IkReal gconst1=(r21*x9836);
IkReal gconst2=(x9835*x9836);
CheckValue<IkReal> x9846=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9846.valid){
continue;
}
IkReal x9839=x9846.value;
IkReal x9840=(sj3*x9839);
IkReal x9841=(r11*x9840);
IkReal x9842=(r00*x9840);
IkReal x9843=(r01*x9840);
IkReal x9844=(r10*x9840);
IkReal x9845=(r20*r21*x9840);
j4eval[0]=IKsign((((r00*r20*r21*x9841))+((r02*r12*sj3))+((r10*x9842*(r20*r20)))+((r10*r20*r21*x9843))+((r01*x9841*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9847=gconst1*gconst1;
IkReal x9848=gconst2*gconst2;
IkReal x9849=((1.0)*cj3);
IkReal x9850=(gconst2*r10);
IkReal x9851=(r01*sj3);
IkReal x9852=(gconst1*r00*sj3);
IkReal x9853=(gconst1*gconst2*r11);
IkReal x9854=(r10*x9848);
IkReal x9855=(r11*x9847);
CheckValue<IkReal> x9856 = IKatan2WithCheck(IkReal((((gconst2*r12*x9851))+((r12*x9852)))),IkReal(((((-1.0)*x9850*x9852))+(((-1.0)*x9851*x9854))+((x9851*x9853))+((r00*sj3*x9855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9856.valid){
continue;
}
CheckValue<IkReal> x9857=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9853))+(((-1.0)*r02*r12*x9849))+((cj3*gconst1*r01*x9850))+(((-1.0)*r00*x9849*x9854))+(((-1.0)*r01*x9849*x9855)))),-1);
if(!x9857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9856.value)+(((1.5707963267949)*(x9857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9858=IKsin(j4);
IkReal x9859=IKcos(j4);
IkReal x9860=(cj2*sj1);
IkReal x9861=(cj1*sj2);
IkReal x9862=(gconst1*sj3);
IkReal x9863=(cj3*gconst1);
IkReal x9864=(sj1*sj2);
IkReal x9865=(cj3*gconst2);
IkReal x9866=(cj1*cj2);
IkReal x9867=(gconst2*sj3);
IkReal x9868=((1.0)*x9859);
IkReal x9869=((1.0)*x9858);
IkReal x9870=(gconst1*x9858);
IkReal x9871=(cj3*x9858);
IkReal x9872=(x9861+x9860);
IkReal x9873=(x9859*x9867);
evalcond[0]=((((-1.0)*r22*x9868))+((r21*x9870))+(((-1.0)*gconst2*r20*x9869)));
evalcond[1]=((((-1.0)*r12*x9868))+(((-1.0)*gconst2*r10*x9869))+((r11*x9870)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9869))+((r01*x9870))+(((-1.0)*r02*x9868)));
evalcond[3]=(((r02*x9871))+((r00*x9862))+((r01*x9867))+(((-1.0)*r00*x9865*x9868))+((r01*x9859*x9863)));
evalcond[4]=(((r00*x9863))+((r01*x9865))+(((-1.0)*r01*x9862*x9868))+((r00*x9873))+(((-1.0)*r02*sj3*x9869)));
evalcond[5]=((((-1.0)*r20*x9865*x9868))+((r22*x9871))+((r21*x9859*x9863))+((r21*x9867))+((r20*x9862))+x9872);
evalcond[6]=(((r12*x9871))+((r11*x9867))+(((-1.0)*x9864))+(((-1.0)*r10*x9865*x9868))+((r10*x9862))+x9866+((r11*x9859*x9863)));
evalcond[7]=(((r10*x9873))+(((-1.0)*r11*x9862*x9868))+((r11*x9865))+((r10*x9863))+(((-1.0)*r12*sj3*x9869))+x9872);
evalcond[8]=(((r20*x9873))+(((-1.0)*r21*x9862*x9868))+(((-1.0)*x9866))+((r21*x9865))+((r20*x9863))+x9864+(((-1.0)*r22*sj3*x9869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9874=gconst2*gconst2;
IkReal x9875=gconst1*gconst1;
IkReal x9876=(gconst1*r00);
IkReal x9877=(r11*sj3);
IkReal x9878=((1.0)*gconst2);
IkReal x9879=(cj3*r12);
IkReal x9880=(cj3*r11);
IkReal x9881=(gconst2*r01);
IkReal x9882=(cj3*r10);
IkReal x9883=(r10*sj3);
CheckValue<IkReal> x9884=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9874*x9883))+((r01*x9875*x9877))+(((-1.0)*x9876*x9877*x9878))+(((-1.0)*gconst1*r01*x9878*x9883)))),-1);
if(!x9884.valid){
continue;
}
CheckValue<IkReal> x9885 = IKatan2WithCheck(IkReal((((x9876*x9879))+((x9879*x9881)))),IkReal((((r00*x9875*x9880))+((gconst1*x9880*x9881))+(((-1.0)*x9876*x9878*x9882))+(((-1.0)*r01*x9874*x9882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9884.value)))+(x9885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9886=IKsin(j4);
IkReal x9887=IKcos(j4);
IkReal x9888=(cj2*sj1);
IkReal x9889=(cj1*sj2);
IkReal x9890=(gconst1*sj3);
IkReal x9891=(cj3*gconst1);
IkReal x9892=(sj1*sj2);
IkReal x9893=(cj3*gconst2);
IkReal x9894=(cj1*cj2);
IkReal x9895=(gconst2*sj3);
IkReal x9896=((1.0)*x9887);
IkReal x9897=((1.0)*x9886);
IkReal x9898=(gconst1*x9886);
IkReal x9899=(cj3*x9886);
IkReal x9900=(x9889+x9888);
IkReal x9901=(x9887*x9895);
evalcond[0]=(((r21*x9898))+(((-1.0)*gconst2*r20*x9897))+(((-1.0)*r22*x9896)));
evalcond[1]=((((-1.0)*r12*x9896))+((r11*x9898))+(((-1.0)*gconst2*r10*x9897)));
evalcond[2]=((1.0)+((r01*x9898))+(((-1.0)*gconst2*r00*x9897))+(((-1.0)*r02*x9896)));
evalcond[3]=((((-1.0)*r00*x9893*x9896))+((r01*x9895))+((r00*x9890))+((r01*x9887*x9891))+((r02*x9899)));
evalcond[4]=(((r01*x9893))+((r00*x9891))+((r00*x9901))+(((-1.0)*r01*x9890*x9896))+(((-1.0)*r02*sj3*x9897)));
evalcond[5]=((((-1.0)*r20*x9893*x9896))+((r22*x9899))+((r21*x9887*x9891))+((r21*x9895))+((r20*x9890))+x9900);
evalcond[6]=(((r11*x9887*x9891))+((r11*x9895))+((r12*x9899))+(((-1.0)*r10*x9893*x9896))+(((-1.0)*x9892))+((r10*x9890))+x9894);
evalcond[7]=((((-1.0)*r11*x9890*x9896))+((r11*x9893))+x9900+((r10*x9891))+((r10*x9901))+(((-1.0)*r12*sj3*x9897)));
evalcond[8]=(((r20*x9901))+(((-1.0)*r21*x9890*x9896))+((r21*x9893))+(((-1.0)*x9894))+((r20*x9891))+x9892+(((-1.0)*r22*sj3*x9897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9902 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9902.valid){
continue;
}
CheckValue<IkReal> x9903=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9902.value)+(((1.5707963267949)*(x9903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9904=IKsin(j4);
IkReal x9905=IKcos(j4);
IkReal x9906=(cj2*sj1);
IkReal x9907=(cj1*sj2);
IkReal x9908=(gconst1*sj3);
IkReal x9909=(cj3*gconst1);
IkReal x9910=(sj1*sj2);
IkReal x9911=(cj3*gconst2);
IkReal x9912=(cj1*cj2);
IkReal x9913=(gconst2*sj3);
IkReal x9914=((1.0)*x9905);
IkReal x9915=((1.0)*x9904);
IkReal x9916=(gconst1*x9904);
IkReal x9917=(cj3*x9904);
IkReal x9918=(x9906+x9907);
IkReal x9919=(x9905*x9913);
evalcond[0]=((((-1.0)*gconst2*r20*x9915))+(((-1.0)*r22*x9914))+((r21*x9916)));
evalcond[1]=((((-1.0)*gconst2*r10*x9915))+(((-1.0)*r12*x9914))+((r11*x9916)));
evalcond[2]=((1.0)+((r01*x9916))+(((-1.0)*r02*x9914))+(((-1.0)*gconst2*r00*x9915)));
evalcond[3]=(((r01*x9913))+((r01*x9905*x9909))+((r00*x9908))+(((-1.0)*r00*x9911*x9914))+((r02*x9917)));
evalcond[4]=(((r01*x9911))+((r00*x9909))+((r00*x9919))+(((-1.0)*r02*sj3*x9915))+(((-1.0)*r01*x9908*x9914)));
evalcond[5]=(((r20*x9908))+((r21*x9905*x9909))+(((-1.0)*r20*x9911*x9914))+((r22*x9917))+((r21*x9913))+x9918);
evalcond[6]=(((r12*x9917))+(((-1.0)*x9910))+(((-1.0)*r10*x9911*x9914))+((r11*x9913))+((r11*x9905*x9909))+x9912+((r10*x9908)));
evalcond[7]=(((r11*x9911))+(((-1.0)*r11*x9908*x9914))+x9918+((r10*x9909))+((r10*x9919))+(((-1.0)*r12*sj3*x9915)));
evalcond[8]=((((-1.0)*r22*sj3*x9915))+((r20*x9919))+((r20*x9909))+(((-1.0)*r21*x9908*x9914))+(((-1.0)*x9912))+((r21*x9911))+x9910);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9920=((-1.0)*r20);
IkReal x9921=((-1.0)*px);
CheckValue<IkReal> x9923 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9920),IKFAST_ATAN2_MAGTHRESH);
if(!x9923.valid){
continue;
}
IkReal x9922=((-1.0)*(x9923.value));
sj5=gconst1;
cj5=gconst2;
j5=x9922;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9921);
rxp1_1=(px*r21);
rxp1_2=(r11*x9921);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9922;
IkReal gconst1=r21;
IkReal gconst2=x9920;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9924=((-1.0)*r20);
IkReal x9925=((-1.0)*px);
CheckValue<IkReal> x9927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9924),IKFAST_ATAN2_MAGTHRESH);
if(!x9927.valid){
continue;
}
IkReal x9926=((-1.0)*(x9927.value));
sj5=gconst1;
cj5=gconst2;
j5=x9926;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9925);
rxp1_1=(px*r21);
rxp1_2=(r11*x9925);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9926;
IkReal gconst1=r21;
IkReal gconst2=x9924;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9928=((-1.0)*r20);
IkReal x9929=((-1.0)*px);
CheckValue<IkReal> x9931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9928),IKFAST_ATAN2_MAGTHRESH);
if(!x9931.valid){
continue;
}
IkReal x9930=((-1.0)*(x9931.value));
sj5=gconst1;
cj5=gconst2;
j5=x9930;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9929);
rxp1_1=(px*r21);
rxp1_2=(r11*x9929);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9930;
IkReal gconst1=r21;
IkReal gconst2=x9928;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9932=((-1.0)*r20);
IkReal x9933=((-1.0)*px);
CheckValue<IkReal> x9935 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9932),IKFAST_ATAN2_MAGTHRESH);
if(!x9935.valid){
continue;
}
IkReal x9934=((-1.0)*(x9935.value));
sj5=gconst1;
cj5=gconst2;
j5=x9934;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9933);
rxp1_1=(px*r21);
rxp1_2=(r11*x9933);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9934;
IkReal gconst1=r21;
IkReal gconst2=x9932;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9936=((-1.0)*r20);
IkReal x9937=((-1.0)*px);
CheckValue<IkReal> x9939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9936),IKFAST_ATAN2_MAGTHRESH);
if(!x9939.valid){
continue;
}
IkReal x9938=((-1.0)*(x9939.value));
sj5=gconst1;
cj5=gconst2;
j5=x9938;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9937);
rxp1_1=(px*r21);
rxp1_2=(r11*x9937);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9938;
IkReal gconst1=r21;
IkReal gconst2=x9936;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9940=((-1.0)*r20);
IkReal x9941=((-1.0)*px);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9940),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
IkReal x9942=((-1.0)*(x9943.value));
sj5=gconst1;
cj5=gconst2;
j5=x9942;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9941);
rxp1_1=(px*r21);
rxp1_2=(r11*x9941);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9942;
IkReal gconst1=r21;
IkReal gconst2=x9940;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9946=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9946.valid){
continue;
}
IkReal x9944=x9946.value;
IkReal x9945=(sj0*x9944);
cj4array[0]=(((cj1*sj2*x9945))+((cj2*sj1*x9945)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9947=IKsin(j4);
IkReal x9948=IKcos(j4);
IkReal x9949=(gconst1*x9947);
IkReal x9950=((1.0)*x9948);
IkReal x9951=((1.0)*gconst2*x9947);
evalcond[0]=((-1.0)*r02*x9947);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9950)));
evalcond[2]=((((-1.0)*r20*x9951))+((r21*x9949)));
evalcond[3]=((((-1.0)*r10*x9951))+((r11*x9949)));
evalcond[4]=((((-1.0)*gconst1*r21*x9950))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9953=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9953.valid){
continue;
}
IkReal x9952=x9953.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9952))+((cj1*cj2*x9952)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9954=IKsin(j4);
IkReal x9955=IKcos(j4);
IkReal x9956=(gconst2*r10);
IkReal x9957=((1.0)*sj0);
IkReal x9958=((1.0)*x9954);
IkReal x9959=(gconst1*x9954);
IkReal x9960=((1.0)*x9955);
evalcond[0]=((-1.0)*r02*x9954);
evalcond[1]=((((-1.0)*r02*x9960))+(((-1.0)*x9957)));
evalcond[2]=((((-1.0)*gconst2*r20*x9958))+((r21*x9959)));
evalcond[3]=(((r11*x9959))+(((-1.0)*x9956*x9958)));
evalcond[4]=(((x9955*x9956))+(((-1.0)*gconst1*r11*x9960))+(((-1.0)*cj2*sj1*x9957))+(((-1.0)*cj1*sj2*x9957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9961=IKPowWithIntegerCheck(r02,-1);
if(!x9961.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9961.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9962=IKsin(j4);
IkReal x9963=IKcos(j4);
IkReal x9964=(gconst2*r10);
IkReal x9965=((1.0)*sj0);
IkReal x9966=(gconst1*r11);
IkReal x9967=(gconst1*r21);
IkReal x9968=(gconst2*r20);
IkReal x9969=((1.0)*x9962);
IkReal x9970=((1.0)*x9963);
evalcond[0]=((-1.0)*r02*x9962);
evalcond[1]=(((x9962*x9967))+(((-1.0)*x9968*x9969)));
evalcond[2]=(((x9962*x9966))+(((-1.0)*x9964*x9969)));
evalcond[3]=((((-1.0)*x9967*x9970))+((x9963*x9968))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x9966*x9970))+(((-1.0)*cj2*sj1*x9965))+(((-1.0)*cj1*sj2*x9965))+((x9963*x9964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9971=((-1.0)*r20);
IkReal x9972=((-1.0)*px);
CheckValue<IkReal> x9974 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9971),IKFAST_ATAN2_MAGTHRESH);
if(!x9974.valid){
continue;
}
IkReal x9973=((-1.0)*(x9974.value));
sj5=gconst1;
cj5=gconst2;
j5=x9973;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9972);
rxp1_1=(px*r21);
rxp1_2=(r11*x9972);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9973;
IkReal gconst1=r21;
IkReal gconst2=x9971;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9975=((-1.0)*r20);
IkReal x9976=((-1.0)*px);
CheckValue<IkReal> x9978 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9975),IKFAST_ATAN2_MAGTHRESH);
if(!x9978.valid){
continue;
}
IkReal x9977=((-1.0)*(x9978.value));
sj5=gconst1;
cj5=gconst2;
j5=x9977;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9976);
rxp1_1=(px*r21);
rxp1_2=(r11*x9976);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9977;
IkReal gconst1=r21;
IkReal gconst2=x9975;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9979=((-1.0)*r20);
IkReal x9980=((-1.0)*px);
CheckValue<IkReal> x9982 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9979),IKFAST_ATAN2_MAGTHRESH);
if(!x9982.valid){
continue;
}
IkReal x9981=((-1.0)*(x9982.value));
sj5=gconst1;
cj5=gconst2;
j5=x9981;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9980);
rxp1_1=(px*r21);
rxp1_2=(r11*x9980);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9981;
IkReal gconst1=r21;
IkReal gconst2=x9979;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9985=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9985.valid){
continue;
}
IkReal x9983=x9985.value;
IkReal x9984=(sj0*x9983);
cj4array[0]=(((cj1*sj2*x9984))+((cj2*sj1*x9984)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9986=IKsin(j4);
IkReal x9987=IKcos(j4);
IkReal x9988=((1.0)*gconst2);
IkReal x9989=(gconst1*r21);
evalcond[0]=(r02*x9986);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9987)));
evalcond[2]=((((-1.0)*r20*x9986*x9988))+((x9986*x9989)));
evalcond[3]=((((-1.0)*r10*x9986*x9988))+((gconst1*r11*x9986)));
evalcond[4]=(((x9987*x9989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9987*x9988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9991=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9991.valid){
continue;
}
IkReal x9990=x9991.value;
cj4array[0]=(((cj1*cj2*x9990))+(((-1.0)*sj1*sj2*x9990)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9992=IKsin(j4);
IkReal x9993=IKcos(j4);
IkReal x9994=((1.0)*sj0);
IkReal x9995=(gconst1*x9992);
IkReal x9996=((1.0)*x9993);
IkReal x9997=((1.0)*gconst2*x9992);
evalcond[0]=(r02*x9992);
evalcond[1]=((((-1.0)*r02*x9996))+(((-1.0)*x9994)));
evalcond[2]=(((r21*x9995))+(((-1.0)*r20*x9997)));
evalcond[3]=((((-1.0)*r10*x9997))+((r11*x9995)));
evalcond[4]=((((-1.0)*gconst2*r10*x9996))+((gconst1*r11*x9993))+(((-1.0)*cj2*sj1*x9994))+(((-1.0)*cj1*sj2*x9994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9998=IKPowWithIntegerCheck(r02,-1);
if(!x9998.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9998.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9999=IKsin(j4);
IkReal x10000=IKcos(j4);
IkReal x10001=(gconst1*r21);
IkReal x10002=((1.0)*sj0);
IkReal x10003=(gconst1*r11);
IkReal x10004=((1.0)*gconst2*r10);
IkReal x10005=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9999);
evalcond[1]=((((-1.0)*x10005*x9999))+((x10001*x9999)));
evalcond[2]=((((-1.0)*x10004*x9999))+((x10003*x9999)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10000*x10001))+(((-1.0)*x10000*x10005)));
evalcond[4]=((((-1.0)*cj2*sj1*x10002))+(((-1.0)*cj1*sj2*x10002))+((x10000*x10003))+(((-1.0)*x10000*x10004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10007=IKPowWithIntegerCheck(r02,-1);
if(!x10007.valid){
continue;
}
IkReal x10006=x10007.value;
CheckValue<IkReal> x10008=IKPowWithIntegerCheck(cj3,-1);
if(!x10008.valid){
continue;
}
if( IKabs((x10006*(x10008.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10006)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10006*(x10008.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10006))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10006*(x10008.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10006));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10009=IKsin(j4);
IkReal x10010=IKcos(j4);
IkReal x10011=(gconst2*r10);
IkReal x10012=(gconst1*r11);
IkReal x10013=(sj1*sj2);
IkReal x10014=(gconst2*r20);
IkReal x10015=(cj2*sj1);
IkReal x10016=((1.0)*sj0);
IkReal x10017=(gconst1*r20);
IkReal x10018=(gconst2*r11);
IkReal x10019=(gconst1*r21);
IkReal x10020=((1.0)*cj0);
IkReal x10021=(gconst1*r10);
IkReal x10022=(cj1*sj2);
IkReal x10023=(gconst2*r21);
IkReal x10024=(sj3*x10010);
IkReal x10025=((1.0)*cj1*cj2);
IkReal x10026=(cj3*x10010);
IkReal x10027=(r02*x10009);
IkReal x10028=((1.0)*x10009);
evalcond[0]=((((-1.0)*r02*x10010))+(((-1.0)*x10016)));
evalcond[1]=(((x10009*x10019))+(((-1.0)*x10014*x10028)));
evalcond[2]=(((x10009*x10012))+cj0+(((-1.0)*x10011*x10028)));
evalcond[3]=(((cj0*x10013))+(((-1.0)*cj1*cj2*x10020))+((cj3*x10027)));
evalcond[4]=((((-1.0)*sj3*x10027))+(((-1.0)*x10020*x10022))+(((-1.0)*x10015*x10020)));
evalcond[5]=(((sj3*x10023))+((x10019*x10026))+x10022+x10015+((sj3*x10017))+(((-1.0)*x10014*x10026)));
evalcond[6]=(((cj3*x10017))+(((-1.0)*x10019*x10024))+x10013+(((-1.0)*x10025))+((cj3*x10023))+((x10014*x10024)));
evalcond[7]=((((-1.0)*x10011*x10026))+((sj3*x10021))+(((-1.0)*cj1*cj2*x10016))+((sj3*x10018))+((x10012*x10026))+((sj0*x10013)));
evalcond[8]=((((-1.0)*x10015*x10016))+(((-1.0)*x10016*x10022))+(((-1.0)*x10012*x10024))+((cj3*x10018))+((x10011*x10024))+((cj3*x10021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10029=((1.0)*sj3);
IkReal x10030=((1.0)*gconst2);
CheckValue<IkReal> x10031=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10030))),-1);
if(!x10031.valid){
continue;
}
CheckValue<IkReal> x10032=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10030))),-1);
if(!x10032.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10031.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10032.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10029))+(((-1.0)*gconst2*r21*x10029)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10031.value)))+IKsqr(((x10032.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10029))+(((-1.0)*gconst2*r21*x10029))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10031.value)), ((x10032.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10029))+(((-1.0)*gconst2*r21*x10029))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10033=IKsin(j4);
IkReal x10034=IKcos(j4);
IkReal x10035=(gconst2*r10);
IkReal x10036=(gconst1*r11);
IkReal x10037=(sj1*sj2);
IkReal x10038=(gconst2*r20);
IkReal x10039=(cj2*sj1);
IkReal x10040=((1.0)*sj0);
IkReal x10041=(gconst1*r20);
IkReal x10042=(gconst2*r11);
IkReal x10043=(gconst1*r21);
IkReal x10044=((1.0)*cj0);
IkReal x10045=(gconst1*r10);
IkReal x10046=(cj1*sj2);
IkReal x10047=(gconst2*r21);
IkReal x10048=(sj3*x10034);
IkReal x10049=((1.0)*cj1*cj2);
IkReal x10050=(cj3*x10034);
IkReal x10051=(r02*x10033);
IkReal x10052=((1.0)*x10033);
evalcond[0]=((((-1.0)*r02*x10034))+(((-1.0)*x10040)));
evalcond[1]=(((x10033*x10043))+(((-1.0)*x10038*x10052)));
evalcond[2]=((((-1.0)*x10035*x10052))+cj0+((x10033*x10036)));
evalcond[3]=(((cj0*x10037))+(((-1.0)*cj1*cj2*x10044))+((cj3*x10051)));
evalcond[4]=((((-1.0)*x10044*x10046))+(((-1.0)*sj3*x10051))+(((-1.0)*x10039*x10044)));
evalcond[5]=(((x10043*x10050))+((sj3*x10047))+((sj3*x10041))+x10046+x10039+(((-1.0)*x10038*x10050)));
evalcond[6]=(x10037+(((-1.0)*x10043*x10048))+((cj3*x10041))+((cj3*x10047))+(((-1.0)*x10049))+((x10038*x10048)));
evalcond[7]=(((sj0*x10037))+((x10036*x10050))+((sj3*x10045))+((sj3*x10042))+(((-1.0)*x10035*x10050))+(((-1.0)*cj1*cj2*x10040)));
evalcond[8]=((((-1.0)*x10036*x10048))+((cj3*x10042))+((cj3*x10045))+(((-1.0)*x10039*x10040))+((x10035*x10048))+(((-1.0)*x10040*x10046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10053=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10053.valid){
continue;
}
CheckValue<IkReal> x10054=IKPowWithIntegerCheck(r02,-1);
if(!x10054.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10053.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10054.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10053.value)))+IKsqr(((-1.0)*sj0*(x10054.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10053.value)), ((-1.0)*sj0*(x10054.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10055=IKsin(j4);
IkReal x10056=IKcos(j4);
IkReal x10057=(gconst2*r10);
IkReal x10058=(gconst1*r11);
IkReal x10059=(sj1*sj2);
IkReal x10060=(gconst2*r20);
IkReal x10061=(cj2*sj1);
IkReal x10062=((1.0)*sj0);
IkReal x10063=(gconst1*r20);
IkReal x10064=(gconst2*r11);
IkReal x10065=(gconst1*r21);
IkReal x10066=((1.0)*cj0);
IkReal x10067=(gconst1*r10);
IkReal x10068=(cj1*sj2);
IkReal x10069=(gconst2*r21);
IkReal x10070=(sj3*x10056);
IkReal x10071=((1.0)*cj1*cj2);
IkReal x10072=(cj3*x10056);
IkReal x10073=(r02*x10055);
IkReal x10074=((1.0)*x10055);
evalcond[0]=((((-1.0)*x10062))+(((-1.0)*r02*x10056)));
evalcond[1]=((((-1.0)*x10060*x10074))+((x10055*x10065)));
evalcond[2]=(cj0+(((-1.0)*x10057*x10074))+((x10055*x10058)));
evalcond[3]=((((-1.0)*cj1*cj2*x10066))+((cj0*x10059))+((cj3*x10073)));
evalcond[4]=((((-1.0)*x10066*x10068))+(((-1.0)*sj3*x10073))+(((-1.0)*x10061*x10066)));
evalcond[5]=(((sj3*x10063))+((sj3*x10069))+(((-1.0)*x10060*x10072))+((x10065*x10072))+x10061+x10068);
evalcond[6]=(((x10060*x10070))+(((-1.0)*x10071))+x10059+((cj3*x10063))+((cj3*x10069))+(((-1.0)*x10065*x10070)));
evalcond[7]=(((sj3*x10067))+((sj3*x10064))+(((-1.0)*x10057*x10072))+(((-1.0)*cj1*cj2*x10062))+((sj0*x10059))+((x10058*x10072)));
evalcond[8]=((((-1.0)*x10058*x10070))+(((-1.0)*x10062*x10068))+((x10057*x10070))+(((-1.0)*x10061*x10062))+((cj3*x10064))+((cj3*x10067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10075=gconst1*gconst1;
IkReal x10076=r21*r21;
IkReal x10077=gconst2*gconst2;
IkReal x10078=r20*r20;
IkReal x10079=(gconst2*r20);
IkReal x10080=(cj1*cj2);
IkReal x10081=(sj1*sj2);
IkReal x10082=(gconst1*r21);
IkReal x10083=(cj3*gconst2);
IkReal x10084=(cj3*r20);
CheckValue<IkReal> x10085=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10077*x10078))+(((-2.0)*sj3*x10079*x10082))+((sj3*x10075*x10076)))),-1);
if(!x10085.valid){
continue;
}
CheckValue<IkReal> x10086 = IKatan2WithCheck(IkReal((((gconst1*r22*x10084))+((r21*r22*x10083))+(((-1.0)*r22*x10080))+((r22*x10081)))),IkReal((((r21*x10075*x10084))+(((-1.0)*x10080*x10082))+(((-1.0)*gconst1*x10078*x10083))+((x10081*x10082))+(((-1.0)*r21*x10077*x10084))+((x10079*x10080))+(((-1.0)*x10079*x10081))+((gconst1*x10076*x10083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10085.value)))+(x10086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10087=IKsin(j4);
IkReal x10088=IKcos(j4);
IkReal x10089=(cj3*gconst1);
IkReal x10090=(gconst1*r01);
IkReal x10091=(gconst1*r11);
IkReal x10092=(sj1*sj2);
IkReal x10093=(cj3*gconst2);
IkReal x10094=(gconst1*sj3);
IkReal x10095=(gconst2*sj3);
IkReal x10096=((1.0)*sj0);
IkReal x10097=(cj1*sj2);
IkReal x10098=((1.0)*x10088);
IkReal x10099=((1.0)*x10087);
IkReal x10100=((1.0)*cj1*cj2);
IkReal x10101=(cj3*x10087);
IkReal x10102=((1.0)*cj2*sj1);
IkReal x10103=(x10088*x10095);
evalcond[0]=(((gconst1*r21*x10087))+(((-1.0)*gconst2*r20*x10099))+(((-1.0)*r22*x10098)));
evalcond[1]=(cj0+((x10087*x10091))+(((-1.0)*r12*x10098))+(((-1.0)*gconst2*r10*x10099)));
evalcond[2]=(((x10087*x10090))+(((-1.0)*gconst2*r00*x10099))+(((-1.0)*r02*x10098))+(((-1.0)*x10096)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x10093*x10098))+x10097+((r21*x10095))+((r20*x10094))+((r22*x10101))+((r21*x10088*x10089)));
evalcond[4]=((((-1.0)*r21*x10094*x10098))+((r20*x10103))+(((-1.0)*r22*sj3*x10099))+((r20*x10089))+x10092+((r21*x10093))+(((-1.0)*x10100)));
evalcond[5]=((((-1.0)*cj0*x10100))+((cj0*x10092))+(((-1.0)*r00*x10093*x10098))+((r02*x10101))+((r01*x10088*x10089))+((r01*x10095))+((r00*x10094)));
evalcond[6]=((((-1.0)*r10*x10093*x10098))+((r11*x10088*x10089))+((r11*x10095))+((sj0*x10092))+((r10*x10094))+((r12*x10101))+(((-1.0)*cj1*cj2*x10096)));
evalcond[7]=(((r00*x10103))+(((-1.0)*cj0*x10102))+((r00*x10089))+(((-1.0)*r02*sj3*x10099))+(((-1.0)*sj3*x10090*x10098))+(((-1.0)*cj0*x10097))+((r01*x10093)));
evalcond[8]=(((r11*x10093))+(((-1.0)*x10096*x10097))+(((-1.0)*cj2*sj1*x10096))+(((-1.0)*r12*sj3*x10099))+((r10*x10103))+(((-1.0)*sj3*x10091*x10098))+((r10*x10089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10104=((1.0)*gconst2);
CheckValue<IkReal> x10105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10104))+(((-1.0)*gconst1*r10)))),-1);
if(!x10105.valid){
continue;
}
CheckValue<IkReal> x10106 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10104))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10105.value)))+(x10106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10107=IKsin(j4);
IkReal x10108=IKcos(j4);
IkReal x10109=(cj3*gconst1);
IkReal x10110=(gconst1*r01);
IkReal x10111=(gconst1*r11);
IkReal x10112=(sj1*sj2);
IkReal x10113=(cj3*gconst2);
IkReal x10114=(gconst1*sj3);
IkReal x10115=(gconst2*sj3);
IkReal x10116=((1.0)*sj0);
IkReal x10117=(cj1*sj2);
IkReal x10118=((1.0)*x10108);
IkReal x10119=((1.0)*x10107);
IkReal x10120=((1.0)*cj1*cj2);
IkReal x10121=(cj3*x10107);
IkReal x10122=((1.0)*cj2*sj1);
IkReal x10123=(x10108*x10115);
evalcond[0]=((((-1.0)*gconst2*r20*x10119))+(((-1.0)*r22*x10118))+((gconst1*r21*x10107)));
evalcond[1]=((((-1.0)*r12*x10118))+cj0+((x10107*x10111))+(((-1.0)*gconst2*r10*x10119)));
evalcond[2]=(((x10107*x10110))+(((-1.0)*r02*x10118))+(((-1.0)*gconst2*r00*x10119))+(((-1.0)*x10116)));
evalcond[3]=(((r21*x10115))+((cj2*sj1))+((r20*x10114))+(((-1.0)*r20*x10113*x10118))+x10117+((r21*x10108*x10109))+((r22*x10121)));
evalcond[4]=(((r21*x10113))+((r20*x10123))+((r20*x10109))+x10112+(((-1.0)*x10120))+(((-1.0)*r22*sj3*x10119))+(((-1.0)*r21*x10114*x10118)));
evalcond[5]=(((r01*x10115))+((cj0*x10112))+((r00*x10114))+((r02*x10121))+(((-1.0)*cj0*x10120))+((r01*x10108*x10109))+(((-1.0)*r00*x10113*x10118)));
evalcond[6]=(((r11*x10108*x10109))+(((-1.0)*cj1*cj2*x10116))+((r11*x10115))+((sj0*x10112))+((r10*x10114))+(((-1.0)*r10*x10113*x10118))+((r12*x10121)));
evalcond[7]=(((r01*x10113))+((r00*x10109))+(((-1.0)*sj3*x10110*x10118))+((r00*x10123))+(((-1.0)*r02*sj3*x10119))+(((-1.0)*cj0*x10122))+(((-1.0)*cj0*x10117)));
evalcond[8]=(((r10*x10123))+(((-1.0)*r12*sj3*x10119))+(((-1.0)*sj3*x10111*x10118))+(((-1.0)*cj2*sj1*x10116))+((r11*x10113))+((r10*x10109))+(((-1.0)*x10116*x10117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10124=((1.0)*gconst2);
CheckValue<IkReal> x10125=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10124)))),-1);
if(!x10125.valid){
continue;
}
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10124))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10125.value)))+(x10126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10127=IKsin(j4);
IkReal x10128=IKcos(j4);
IkReal x10129=(cj3*gconst1);
IkReal x10130=(gconst1*r01);
IkReal x10131=(gconst1*r11);
IkReal x10132=(sj1*sj2);
IkReal x10133=(cj3*gconst2);
IkReal x10134=(gconst1*sj3);
IkReal x10135=(gconst2*sj3);
IkReal x10136=((1.0)*sj0);
IkReal x10137=(cj1*sj2);
IkReal x10138=((1.0)*x10128);
IkReal x10139=((1.0)*x10127);
IkReal x10140=((1.0)*cj1*cj2);
IkReal x10141=(cj3*x10127);
IkReal x10142=((1.0)*cj2*sj1);
IkReal x10143=(x10128*x10135);
evalcond[0]=(((gconst1*r21*x10127))+(((-1.0)*gconst2*r20*x10139))+(((-1.0)*r22*x10138)));
evalcond[1]=(cj0+((x10127*x10131))+(((-1.0)*gconst2*r10*x10139))+(((-1.0)*r12*x10138)));
evalcond[2]=((((-1.0)*r02*x10138))+(((-1.0)*gconst2*r00*x10139))+((x10127*x10130))+(((-1.0)*x10136)));
evalcond[3]=(((cj2*sj1))+((r20*x10134))+((r21*x10135))+((r21*x10128*x10129))+x10137+((r22*x10141))+(((-1.0)*r20*x10133*x10138)));
evalcond[4]=(((r20*x10129))+((r21*x10133))+(((-1.0)*r22*sj3*x10139))+x10132+(((-1.0)*x10140))+(((-1.0)*r21*x10134*x10138))+((r20*x10143)));
evalcond[5]=(((r02*x10141))+((r01*x10128*x10129))+((cj0*x10132))+((r01*x10135))+((r00*x10134))+(((-1.0)*r00*x10133*x10138))+(((-1.0)*cj0*x10140)));
evalcond[6]=((((-1.0)*r10*x10133*x10138))+((r11*x10135))+((r12*x10141))+((r11*x10128*x10129))+((r10*x10134))+((sj0*x10132))+(((-1.0)*cj1*cj2*x10136)));
evalcond[7]=((((-1.0)*cj0*x10137))+((r00*x10129))+((r01*x10133))+(((-1.0)*sj3*x10130*x10138))+((r00*x10143))+(((-1.0)*r02*sj3*x10139))+(((-1.0)*cj0*x10142)));
evalcond[8]=(((r11*x10133))+((r10*x10129))+((r10*x10143))+(((-1.0)*x10136*x10137))+(((-1.0)*sj3*x10131*x10138))+(((-1.0)*cj2*sj1*x10136))+(((-1.0)*r12*sj3*x10139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10144=((-1.0)*r21);
IkReal x10146 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10146)==0){
continue;
}
IkReal x10145=pow(x10146,-0.5);
CheckValue<IkReal> x10147 = IKatan2WithCheck(IkReal(x10144),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10147.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10147.value))));
IkReal gconst4=(x10144*x10145);
IkReal gconst5=((1.0)*r20*x10145);
CheckValue<IkReal> x10148 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10148.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10148.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10149=((-1.0)*r21);
CheckValue<IkReal> x10152 = IKatan2WithCheck(IkReal(x10149),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10152.valid){
continue;
}
IkReal x10150=((1.0)*(x10152.value));
IkReal x10151=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10150)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10150)));
IkReal gconst4=(x10149*x10151);
IkReal gconst5=((1.0)*r20*x10151);
IkReal x10153=r22*r22;
IkReal x10154=((1.0)*x10153);
CheckValue<IkReal> x10158=IKPowWithIntegerCheck(((-1.0)+x10153),-1);
if(!x10158.valid){
continue;
}
IkReal x10155=x10158.value;
if((((1.0)+(((-1.0)*x10154)))) < -0.00001)
continue;
IkReal x10156=IKsqrt(((1.0)+(((-1.0)*x10154))));
IkReal x10157=(cj0*x10155*x10156);
j4eval[0]=((IKabs(((((-1.0)*x10154*x10157))+x10157)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10159=((-1.0)*r21);
CheckValue<IkReal> x10162 = IKatan2WithCheck(IkReal(x10159),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10162.valid){
continue;
}
IkReal x10160=((1.0)*(x10162.value));
IkReal x10161=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10160)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10160)));
IkReal gconst4=(x10159*x10161);
IkReal gconst5=((1.0)*r20*x10161);
IkReal x10163=r22*r22;
IkReal x10164=((1.0)*x10163);
CheckValue<IkReal> x10168=IKPowWithIntegerCheck(((-1.0)+x10163),-1);
if(!x10168.valid){
continue;
}
IkReal x10165=x10168.value;
if((((1.0)+(((-1.0)*x10164)))) < -0.00001)
continue;
IkReal x10166=IKsqrt(((1.0)+(((-1.0)*x10164))));
IkReal x10167=(sj0*x10165*x10166);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10164*x10167))+x10167))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10169=((-1.0)*r21);
CheckValue<IkReal> x10172 = IKatan2WithCheck(IkReal(x10169),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10172.valid){
continue;
}
IkReal x10170=((1.0)*(x10172.value));
IkReal x10171=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10170)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10170)));
IkReal gconst4=(x10169*x10171);
IkReal gconst5=((1.0)*r20*x10171);
IkReal x10173=r22*r22;
IkReal x10174=(r12*sj0);
IkReal x10175=(cj0*r02);
CheckValue<IkReal> x10179=IKPowWithIntegerCheck(((-1.0)+x10173),-1);
if(!x10179.valid){
continue;
}
IkReal x10176=x10179.value;
if((((1.0)+(((-1.0)*x10173)))) < -0.00001)
continue;
IkReal x10177=IKsqrt(((1.0)+(((-1.0)*x10173))));
IkReal x10178=(r22*x10176*x10177);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10175*x10178))+((x10174*x10178)))))+(IKabs(((((-1.0)*x10175))+(((-1.0)*x10174))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10180=((-1.0)*r21);
CheckValue<IkReal> x10183 = IKatan2WithCheck(IkReal(x10180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10183.valid){
continue;
}
IkReal x10181=((1.0)*(x10183.value));
IkReal x10182=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10181)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10181)));
IkReal gconst4=(x10180*x10182);
IkReal gconst5=((1.0)*r20*x10182);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10184=((-1.0)*r21);
CheckValue<IkReal> x10187 = IKatan2WithCheck(IkReal(x10184),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10187.valid){
continue;
}
IkReal x10185=((1.0)*(x10187.value));
IkReal x10186=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10185)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10185)));
IkReal gconst4=(x10184*x10186);
IkReal gconst5=((1.0)*r20*x10186);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10188=((-1.0)*r21);
CheckValue<IkReal> x10191 = IKatan2WithCheck(IkReal(x10188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10191.valid){
continue;
}
IkReal x10189=((1.0)*(x10191.value));
IkReal x10190=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10189)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10189)));
IkReal gconst4=(x10188*x10190);
IkReal gconst5=((1.0)*r20*x10190);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10192=((-1.0)*r21);
CheckValue<IkReal> x10195 = IKatan2WithCheck(IkReal(x10192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10195.valid){
continue;
}
IkReal x10193=((1.0)*(x10195.value));
IkReal x10194=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10193)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10193)));
IkReal gconst4=(x10192*x10194);
IkReal gconst5=((1.0)*r20*x10194);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10196=((-1.0)*r21);
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal(x10196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
IkReal x10197=((1.0)*(x10199.value));
IkReal x10198=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10197)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10197)));
IkReal gconst4=(x10196*x10198);
IkReal gconst5=((1.0)*r20*x10198);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10200=((-1.0)*r21);
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal(x10200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
IkReal x10201=((1.0)*(x10203.value));
IkReal x10202=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10201)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10201)));
IkReal gconst4=(x10200*x10202);
IkReal gconst5=((1.0)*r20*x10202);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10204=(gconst5*r10);
IkReal x10205=(gconst4*r11);
CheckValue<IkReal> x10206=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10204*x10205))+(x10205*x10205)+(x10204*x10204))),-1);
if(!x10206.valid){
continue;
}
CheckValue<IkReal> x10207 = IKatan2WithCheck(IkReal(((((-1.0)*x10205))+x10204)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10206.value)))+(x10207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10208=IKsin(j4);
IkReal x10209=IKcos(j4);
IkReal x10210=(gconst4*r11);
IkReal x10211=((1.0)*cj1);
IkReal x10212=(gconst5*r10);
IkReal x10213=(gconst4*r01);
IkReal x10214=(gconst5*r00);
IkReal x10215=(gconst4*r21);
IkReal x10216=(gconst5*r20);
IkReal x10217=((1.0)*x10209);
IkReal x10218=((1.0)*x10208);
evalcond[0]=((((-1.0)*r22*x10217))+(((-1.0)*x10216*x10218))+((x10208*x10215)));
evalcond[1]=((((-1.0)*x10214*x10218))+(((-1.0)*r02*x10217))+((x10208*x10213)));
evalcond[2]=((((-1.0)*x10210*x10217))+(((-1.0)*r12*x10218))+((x10209*x10212)));
evalcond[3]=((1.0)+(((-1.0)*x10212*x10218))+(((-1.0)*r12*x10217))+((x10208*x10210)));
evalcond[4]=((((-1.0)*r22*x10218))+((sj1*sj2))+(((-1.0)*x10215*x10217))+(((-1.0)*cj2*x10211))+((x10209*x10216)));
evalcond[5]=((((-1.0)*sj2*x10211))+(((-1.0)*x10213*x10217))+(((-1.0)*cj2*sj1))+((x10209*x10214))+(((-1.0)*r02*x10218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10219=((1.0)*gconst5);
CheckValue<IkReal> x10220 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10219))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10220.valid){
continue;
}
CheckValue<IkReal> x10221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10219)))),-1);
if(!x10221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10220.value)+(((1.5707963267949)*(x10221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10222=IKsin(j4);
IkReal x10223=IKcos(j4);
IkReal x10224=(gconst4*r11);
IkReal x10225=((1.0)*cj1);
IkReal x10226=(gconst5*r10);
IkReal x10227=(gconst4*r01);
IkReal x10228=(gconst5*r00);
IkReal x10229=(gconst4*r21);
IkReal x10230=(gconst5*r20);
IkReal x10231=((1.0)*x10223);
IkReal x10232=((1.0)*x10222);
evalcond[0]=((((-1.0)*x10230*x10232))+(((-1.0)*r22*x10231))+((x10222*x10229)));
evalcond[1]=((((-1.0)*x10228*x10232))+((x10222*x10227))+(((-1.0)*r02*x10231)));
evalcond[2]=(((x10223*x10226))+(((-1.0)*x10224*x10231))+(((-1.0)*r12*x10232)));
evalcond[3]=((1.0)+(((-1.0)*x10226*x10232))+(((-1.0)*r12*x10231))+((x10222*x10224)));
evalcond[4]=(((x10223*x10230))+(((-1.0)*cj2*x10225))+((sj1*sj2))+(((-1.0)*r22*x10232))+(((-1.0)*x10229*x10231)));
evalcond[5]=(((x10223*x10228))+(((-1.0)*x10227*x10231))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10225))+(((-1.0)*r02*x10232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10233 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10233.valid){
continue;
}
CheckValue<IkReal> x10234=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10233.value)+(((1.5707963267949)*(x10234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10235=IKsin(j4);
IkReal x10236=IKcos(j4);
IkReal x10237=(gconst4*r11);
IkReal x10238=((1.0)*cj1);
IkReal x10239=(gconst5*r10);
IkReal x10240=(gconst4*r01);
IkReal x10241=(gconst5*r00);
IkReal x10242=(gconst4*r21);
IkReal x10243=(gconst5*r20);
IkReal x10244=((1.0)*x10236);
IkReal x10245=((1.0)*x10235);
evalcond[0]=((((-1.0)*r22*x10244))+((x10235*x10242))+(((-1.0)*x10243*x10245)));
evalcond[1]=((((-1.0)*x10241*x10245))+((x10235*x10240))+(((-1.0)*r02*x10244)));
evalcond[2]=((((-1.0)*x10237*x10244))+(((-1.0)*r12*x10245))+((x10236*x10239)));
evalcond[3]=((1.0)+((x10235*x10237))+(((-1.0)*r12*x10244))+(((-1.0)*x10239*x10245)));
evalcond[4]=(((x10236*x10243))+((sj1*sj2))+(((-1.0)*cj2*x10238))+(((-1.0)*r22*x10245))+(((-1.0)*x10242*x10244)));
evalcond[5]=(((x10236*x10241))+(((-1.0)*x10240*x10244))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10238))+(((-1.0)*r02*x10245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10246=((-1.0)*r21);
CheckValue<IkReal> x10249 = IKatan2WithCheck(IkReal(x10246),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10249.valid){
continue;
}
IkReal x10247=((1.0)*(x10249.value));
IkReal x10248=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10247)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10247)));
IkReal gconst4=(x10246*x10248);
IkReal gconst5=((1.0)*r20*x10248);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10250=((-1.0)*r21);
CheckValue<IkReal> x10253 = IKatan2WithCheck(IkReal(x10250),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10253.valid){
continue;
}
IkReal x10251=((1.0)*(x10253.value));
IkReal x10252=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10251)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10251)));
IkReal gconst4=(x10250*x10252);
IkReal gconst5=((1.0)*r20*x10252);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10254=((-1.0)*r21);
CheckValue<IkReal> x10257 = IKatan2WithCheck(IkReal(x10254),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10257.valid){
continue;
}
IkReal x10255=((1.0)*(x10257.value));
IkReal x10256=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10255)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10255)));
IkReal gconst4=(x10254*x10256);
IkReal gconst5=((1.0)*r20*x10256);
IkReal x10258=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10262=IKPowWithIntegerCheck(x10258,-1);
if(!x10262.valid){
continue;
}
IkReal x10259=x10262.value;
IkReal x10260=((1.0)*x10259);
IkReal x10261=((((-1.0)*x10260*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10259))+(((-1.0)*(r12*r12)))+(((-1.0)*x10260*(r11*r11)*(r21*r21))));
j4eval[0]=x10261;
j4eval[1]=r12;
j4eval[2]=x10258;
j4eval[3]=IKsign(x10261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10263=(gconst5*r10);
IkReal x10264=(gconst4*r11);
CheckValue<IkReal> x10265=IKPowWithIntegerCheck(IKsign(((((2.0)*x10263*x10264))+(((-1.0)*(x10264*x10264)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10263*x10263))))),-1);
if(!x10265.valid){
continue;
}
CheckValue<IkReal> x10266 = IKatan2WithCheck(IkReal(((((-1.0)*x10263))+x10264)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10265.value)))+(x10266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10267=IKcos(j4);
IkReal x10268=IKsin(j4);
IkReal x10269=(gconst4*r11);
IkReal x10270=(gconst5*r10);
IkReal x10271=((1.0)*cj1);
IkReal x10272=(gconst5*r00);
IkReal x10273=(gconst5*r20);
IkReal x10274=((1.0)*x10267);
IkReal x10275=(gconst4*x10267);
IkReal x10276=((1.0)*x10268);
IkReal x10277=(gconst4*x10268);
evalcond[0]=(((x10267*x10269))+((r12*x10268))+(((-1.0)*x10270*x10274)));
evalcond[1]=((((-1.0)*r22*x10274))+(((-1.0)*x10273*x10276))+((r21*x10277)));
evalcond[2]=(((r01*x10277))+(((-1.0)*x10272*x10276))+(((-1.0)*r02*x10274)));
evalcond[3]=((1.0)+((x10268*x10269))+(((-1.0)*r12*x10274))+(((-1.0)*x10270*x10276)));
evalcond[4]=(((r22*x10268))+((sj1*sj2))+(((-1.0)*x10273*x10274))+((r21*x10275))+(((-1.0)*cj2*x10271)));
evalcond[5]=(((r02*x10268))+((r01*x10275))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10271))+(((-1.0)*x10272*x10274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10278=((1.0)*gconst5);
CheckValue<IkReal> x10279 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10279.valid){
continue;
}
CheckValue<IkReal> x10280=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10278)))),-1);
if(!x10280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10279.value)+(((1.5707963267949)*(x10280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10281=IKcos(j4);
IkReal x10282=IKsin(j4);
IkReal x10283=(gconst4*r11);
IkReal x10284=(gconst5*r10);
IkReal x10285=((1.0)*cj1);
IkReal x10286=(gconst5*r00);
IkReal x10287=(gconst5*r20);
IkReal x10288=((1.0)*x10281);
IkReal x10289=(gconst4*x10281);
IkReal x10290=((1.0)*x10282);
IkReal x10291=(gconst4*x10282);
evalcond[0]=(((r12*x10282))+(((-1.0)*x10284*x10288))+((x10281*x10283)));
evalcond[1]=((((-1.0)*r22*x10288))+((r21*x10291))+(((-1.0)*x10287*x10290)));
evalcond[2]=((((-1.0)*x10286*x10290))+(((-1.0)*r02*x10288))+((r01*x10291)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10288))+(((-1.0)*x10284*x10290))+((x10282*x10283)));
evalcond[4]=(((sj1*sj2))+((r22*x10282))+(((-1.0)*x10287*x10288))+(((-1.0)*cj2*x10285))+((r21*x10289)));
evalcond[5]=(((r01*x10289))+(((-1.0)*cj2*sj1))+((r02*x10282))+(((-1.0)*sj2*x10285))+(((-1.0)*x10286*x10288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10292 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10292.valid){
continue;
}
CheckValue<IkReal> x10293=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10292.value)+(((1.5707963267949)*(x10293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10294=IKcos(j4);
IkReal x10295=IKsin(j4);
IkReal x10296=(gconst4*r11);
IkReal x10297=(gconst5*r10);
IkReal x10298=((1.0)*cj1);
IkReal x10299=(gconst5*r00);
IkReal x10300=(gconst5*r20);
IkReal x10301=((1.0)*x10294);
IkReal x10302=(gconst4*x10294);
IkReal x10303=((1.0)*x10295);
IkReal x10304=(gconst4*x10295);
evalcond[0]=(((r12*x10295))+(((-1.0)*x10297*x10301))+((x10294*x10296)));
evalcond[1]=((((-1.0)*r22*x10301))+(((-1.0)*x10300*x10303))+((r21*x10304)));
evalcond[2]=((((-1.0)*r02*x10301))+((r01*x10304))+(((-1.0)*x10299*x10303)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10301))+((x10295*x10296))+(((-1.0)*x10297*x10303)));
evalcond[4]=((((-1.0)*x10300*x10301))+((sj1*sj2))+((r21*x10302))+((r22*x10295))+(((-1.0)*cj2*x10298)));
evalcond[5]=((((-1.0)*sj2*x10298))+(((-1.0)*cj2*sj1))+((r01*x10302))+((r02*x10295))+(((-1.0)*x10299*x10301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10305=((-1.0)*r21);
CheckValue<IkReal> x10308 = IKatan2WithCheck(IkReal(x10305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10308.valid){
continue;
}
IkReal x10306=((1.0)*(x10308.value));
IkReal x10307=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10306)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10306)));
IkReal gconst4=(x10305*x10307);
IkReal gconst5=((1.0)*r20*x10307);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10309=((-1.0)*r21);
CheckValue<IkReal> x10312 = IKatan2WithCheck(IkReal(x10309),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10312.valid){
continue;
}
IkReal x10310=((1.0)*(x10312.value));
IkReal x10311=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10310)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10310)));
IkReal gconst4=(x10309*x10311);
IkReal gconst5=((1.0)*r20*x10311);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10313=((-1.0)*r21);
CheckValue<IkReal> x10316 = IKatan2WithCheck(IkReal(x10313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10316.valid){
continue;
}
IkReal x10314=((1.0)*(x10316.value));
IkReal x10315=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10314)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10314)));
IkReal gconst4=(x10313*x10315);
IkReal gconst5=((1.0)*r20*x10315);
IkReal x10317=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10321=IKPowWithIntegerCheck(x10317,-1);
if(!x10321.valid){
continue;
}
IkReal x10318=x10321.value;
IkReal x10319=((1.0)*x10318);
IkReal x10320=((((-1.0)*x10319*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10318))+(((-1.0)*(r12*r12)))+(((-1.0)*x10319*(r10*r10)*(r20*r20))));
j4eval[0]=x10320;
j4eval[1]=r12;
j4eval[2]=x10317;
j4eval[3]=IKsign(x10320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10322=(gconst5*r10);
IkReal x10323=(gconst4*r11);
CheckValue<IkReal> x10324 = IKatan2WithCheck(IkReal(((((-1.0)*x10322))+x10323)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10324.valid){
continue;
}
CheckValue<IkReal> x10325=IKPowWithIntegerCheck(IKsign(((((2.0)*x10322*x10323))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10323*x10323)))+(((-1.0)*(x10322*x10322))))),-1);
if(!x10325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10324.value)+(((1.5707963267949)*(x10325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10326=IKcos(j4);
IkReal x10327=IKsin(j4);
IkReal x10328=(gconst4*r11);
IkReal x10329=(gconst5*r10);
IkReal x10330=(gconst5*r00);
IkReal x10331=(gconst5*r20);
IkReal x10332=((1.0)*x10326);
IkReal x10333=(gconst4*x10326);
IkReal x10334=((1.0)*x10327);
IkReal x10335=(gconst4*x10327);
evalcond[0]=((((-1.0)*x10329*x10332))+((x10326*x10328))+((r12*x10327)));
evalcond[1]=((((-1.0)*r22*x10332))+((r21*x10335))+(((-1.0)*x10331*x10334)));
evalcond[2]=(((r01*x10335))+(((-1.0)*x10330*x10334))+(((-1.0)*r02*x10332)));
evalcond[3]=((1.0)+((x10327*x10328))+(((-1.0)*r12*x10332))+(((-1.0)*x10329*x10334)));
evalcond[4]=(((cj2*sj1))+((r22*x10327))+((cj1*sj2))+((r21*x10333))+(((-1.0)*x10331*x10332)));
evalcond[5]=(((r02*x10327))+((r01*x10333))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10330*x10332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10336=((1.0)*gconst5);
CheckValue<IkReal> x10337 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10337.valid){
continue;
}
CheckValue<IkReal> x10338=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10336)))),-1);
if(!x10338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10337.value)+(((1.5707963267949)*(x10338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10339=IKcos(j4);
IkReal x10340=IKsin(j4);
IkReal x10341=(gconst4*r11);
IkReal x10342=(gconst5*r10);
IkReal x10343=(gconst5*r00);
IkReal x10344=(gconst5*r20);
IkReal x10345=((1.0)*x10339);
IkReal x10346=(gconst4*x10339);
IkReal x10347=((1.0)*x10340);
IkReal x10348=(gconst4*x10340);
evalcond[0]=((((-1.0)*x10342*x10345))+((r12*x10340))+((x10339*x10341)));
evalcond[1]=((((-1.0)*x10344*x10347))+((r21*x10348))+(((-1.0)*r22*x10345)));
evalcond[2]=((((-1.0)*x10343*x10347))+((r01*x10348))+(((-1.0)*r02*x10345)));
evalcond[3]=((1.0)+(((-1.0)*x10342*x10347))+(((-1.0)*r12*x10345))+((x10340*x10341)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10340))+(((-1.0)*x10344*x10345))+((r21*x10346)));
evalcond[5]=((((-1.0)*x10343*x10345))+((r01*x10346))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10349 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10349.valid){
continue;
}
CheckValue<IkReal> x10350=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10349.value)+(((1.5707963267949)*(x10350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10351=IKcos(j4);
IkReal x10352=IKsin(j4);
IkReal x10353=(gconst4*r11);
IkReal x10354=(gconst5*r10);
IkReal x10355=(gconst5*r00);
IkReal x10356=(gconst5*r20);
IkReal x10357=((1.0)*x10351);
IkReal x10358=(gconst4*x10351);
IkReal x10359=((1.0)*x10352);
IkReal x10360=(gconst4*x10352);
evalcond[0]=(((x10351*x10353))+(((-1.0)*x10354*x10357))+((r12*x10352)));
evalcond[1]=(((r21*x10360))+(((-1.0)*x10356*x10359))+(((-1.0)*r22*x10357)));
evalcond[2]=(((r01*x10360))+(((-1.0)*x10355*x10359))+(((-1.0)*r02*x10357)));
evalcond[3]=((1.0)+((x10352*x10353))+(((-1.0)*x10354*x10359))+(((-1.0)*r12*x10357)));
evalcond[4]=(((r21*x10358))+((cj2*sj1))+(((-1.0)*x10356*x10357))+((cj1*sj2))+((r22*x10352)));
evalcond[5]=(((r01*x10358))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10355*x10357))+((r02*x10352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10361=((-1.0)*r21);
CheckValue<IkReal> x10364 = IKatan2WithCheck(IkReal(x10361),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10364.valid){
continue;
}
IkReal x10362=((1.0)*(x10364.value));
IkReal x10363=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10362)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10362)));
IkReal gconst4=(x10361*x10363);
IkReal gconst5=((1.0)*r20*x10363);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10365=((-1.0)*r21);
CheckValue<IkReal> x10368 = IKatan2WithCheck(IkReal(x10365),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10368.valid){
continue;
}
IkReal x10366=((1.0)*(x10368.value));
IkReal x10367=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10366)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10366)));
IkReal gconst4=(x10365*x10367);
IkReal gconst5=((1.0)*r20*x10367);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10369=((-1.0)*r21);
CheckValue<IkReal> x10372 = IKatan2WithCheck(IkReal(x10369),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10372.valid){
continue;
}
IkReal x10370=((1.0)*(x10372.value));
IkReal x10371=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10370)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10370)));
IkReal gconst4=(x10369*x10371);
IkReal gconst5=((1.0)*r20*x10371);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10373=(gconst5*r10);
IkReal x10374=(gconst4*r11);
CheckValue<IkReal> x10375=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10373*x10373)+(x10374*x10374)+(((-2.0)*x10373*x10374)))),-1);
if(!x10375.valid){
continue;
}
CheckValue<IkReal> x10376 = IKatan2WithCheck(IkReal((x10373+(((-1.0)*x10374)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10375.value)))+(x10376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10377=IKsin(j4);
IkReal x10378=IKcos(j4);
IkReal x10379=(gconst4*r11);
IkReal x10380=(gconst5*r10);
IkReal x10381=(gconst4*r01);
IkReal x10382=(gconst5*r00);
IkReal x10383=(gconst4*r21);
IkReal x10384=(gconst5*r20);
IkReal x10385=((1.0)*x10378);
IkReal x10386=((1.0)*x10377);
evalcond[0]=(((x10377*x10383))+(((-1.0)*x10384*x10386))+(((-1.0)*r22*x10385)));
evalcond[1]=(((x10377*x10381))+(((-1.0)*r02*x10385))+(((-1.0)*x10382*x10386)));
evalcond[2]=((((-1.0)*x10379*x10385))+((x10378*x10380))+(((-1.0)*r12*x10386)));
evalcond[3]=((1.0)+((x10377*x10379))+(((-1.0)*x10380*x10386))+(((-1.0)*r12*x10385)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10378*x10384))+(((-1.0)*r22*x10386))+(((-1.0)*x10383*x10385)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10381*x10385))+(((-1.0)*r02*x10386))+((x10378*x10382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10387=((1.0)*gconst5);
CheckValue<IkReal> x10388 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10387))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10388.valid){
continue;
}
CheckValue<IkReal> x10389=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10387)))),-1);
if(!x10389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10388.value)+(((1.5707963267949)*(x10389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10390=IKsin(j4);
IkReal x10391=IKcos(j4);
IkReal x10392=(gconst4*r11);
IkReal x10393=(gconst5*r10);
IkReal x10394=(gconst4*r01);
IkReal x10395=(gconst5*r00);
IkReal x10396=(gconst4*r21);
IkReal x10397=(gconst5*r20);
IkReal x10398=((1.0)*x10391);
IkReal x10399=((1.0)*x10390);
evalcond[0]=(((x10390*x10396))+(((-1.0)*r22*x10398))+(((-1.0)*x10397*x10399)));
evalcond[1]=((((-1.0)*x10395*x10399))+(((-1.0)*r02*x10398))+((x10390*x10394)));
evalcond[2]=((((-1.0)*x10392*x10398))+(((-1.0)*r12*x10399))+((x10391*x10393)));
evalcond[3]=((1.0)+(((-1.0)*x10393*x10399))+(((-1.0)*r12*x10398))+((x10390*x10392)));
evalcond[4]=((((-1.0)*x10396*x10398))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10399))+((x10391*x10397)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10399))+((x10391*x10395))+(((-1.0)*x10394*x10398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10400 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10400.valid){
continue;
}
CheckValue<IkReal> x10401=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10400.value)+(((1.5707963267949)*(x10401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10402=IKsin(j4);
IkReal x10403=IKcos(j4);
IkReal x10404=(gconst4*r11);
IkReal x10405=(gconst5*r10);
IkReal x10406=(gconst4*r01);
IkReal x10407=(gconst5*r00);
IkReal x10408=(gconst4*r21);
IkReal x10409=(gconst5*r20);
IkReal x10410=((1.0)*x10403);
IkReal x10411=((1.0)*x10402);
evalcond[0]=((((-1.0)*x10409*x10411))+(((-1.0)*r22*x10410))+((x10402*x10408)));
evalcond[1]=((((-1.0)*r02*x10410))+(((-1.0)*x10407*x10411))+((x10402*x10406)));
evalcond[2]=((((-1.0)*r12*x10411))+((x10403*x10405))+(((-1.0)*x10404*x10410)));
evalcond[3]=((1.0)+(((-1.0)*x10405*x10411))+(((-1.0)*r12*x10410))+((x10402*x10404)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10411))+((x10403*x10409))+(((-1.0)*x10408*x10410)));
evalcond[5]=((((-1.0)*r02*x10411))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10403*x10407))+(((-1.0)*x10406*x10410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10412=gconst4*gconst4;
IkReal x10413=gconst5*gconst5;
IkReal x10414=(r10*r21);
IkReal x10415=((1.0)*cj3);
IkReal x10416=(r11*r21);
IkReal x10417=(r11*r20);
IkReal x10418=(r22*sj3);
IkReal x10419=(gconst4*r10);
IkReal x10420=((1.0)*sj3);
IkReal x10421=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10422=IKPowWithIntegerCheck(IKsign((((x10417*x10421))+((x10414*x10421))+(((-1.0)*r12*r22*x10415))+(((-1.0)*x10412*x10415*x10416))+(((-1.0)*r10*r20*x10413*x10415)))),-1);
if(!x10422.valid){
continue;
}
CheckValue<IkReal> x10423 = IKatan2WithCheck(IkReal((((x10418*x10419))+((gconst5*r11*x10418)))),IkReal(((((-1.0)*gconst5*r20*x10419*x10420))+((gconst4*gconst5*sj3*x10416))+(((-1.0)*x10413*x10417*x10420))+((sj3*x10412*x10414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10422.value)))+(x10423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10424=IKsin(j4);
IkReal x10425=IKcos(j4);
IkReal x10426=(sj1*sj2);
IkReal x10427=(gconst5*sj3);
IkReal x10428=(cj3*gconst5);
IkReal x10429=(gconst4*r11);
IkReal x10430=((1.0)*cj1);
IkReal x10431=(gconst4*r01);
IkReal x10432=(cj2*sj1);
IkReal x10433=(gconst4*r21);
IkReal x10434=(gconst4*sj3);
IkReal x10435=(cj3*gconst4);
IkReal x10436=(cj2*x10430);
IkReal x10437=((1.0)*x10425);
IkReal x10438=((1.0)*x10424);
IkReal x10439=(cj3*x10424);
IkReal x10440=(cj3*x10425);
evalcond[0]=((((-1.0)*gconst5*r20*x10438))+(((-1.0)*r22*x10437))+((x10424*x10433)));
evalcond[1]=((((-1.0)*gconst5*r00*x10438))+(((-1.0)*r02*x10437))+((x10424*x10431)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10438))+(((-1.0)*r12*x10437))+((x10424*x10429)));
evalcond[3]=((((-1.0)*r10*x10428*x10437))+((r10*x10434))+((r12*x10439))+((r11*x10427))+((x10429*x10440)));
evalcond[4]=((((-1.0)*r12*sj3*x10438))+((r10*x10425*x10427))+((r10*x10435))+((r11*x10428))+(((-1.0)*sj3*x10429*x10437)));
evalcond[5]=(((r22*x10439))+((cj1*sj2))+(((-1.0)*r20*x10428*x10437))+((x10433*x10440))+x10432+((r20*x10434))+((r21*x10427)));
evalcond[6]=(((r01*x10427))+(((-1.0)*r00*x10428*x10437))+((x10431*x10440))+((r02*x10439))+x10426+(((-1.0)*x10436))+((r00*x10434)));
evalcond[7]=((((-1.0)*r22*sj3*x10438))+(((-1.0)*sj3*x10433*x10437))+((r20*x10425*x10427))+x10426+(((-1.0)*x10436))+((r20*x10435))+((r21*x10428)));
evalcond[8]=(((r01*x10428))+((r00*x10425*x10427))+(((-1.0)*sj2*x10430))+(((-1.0)*x10432))+(((-1.0)*r02*sj3*x10438))+((r00*x10435))+(((-1.0)*sj3*x10431*x10437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10441=((1.0)*gconst5);
CheckValue<IkReal> x10442=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10441)))),-1);
if(!x10442.valid){
continue;
}
CheckValue<IkReal> x10443 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10441))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10442.value)))+(x10443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10444=IKsin(j4);
IkReal x10445=IKcos(j4);
IkReal x10446=(sj1*sj2);
IkReal x10447=(gconst5*sj3);
IkReal x10448=(cj3*gconst5);
IkReal x10449=(gconst4*r11);
IkReal x10450=((1.0)*cj1);
IkReal x10451=(gconst4*r01);
IkReal x10452=(cj2*sj1);
IkReal x10453=(gconst4*r21);
IkReal x10454=(gconst4*sj3);
IkReal x10455=(cj3*gconst4);
IkReal x10456=(cj2*x10450);
IkReal x10457=((1.0)*x10445);
IkReal x10458=((1.0)*x10444);
IkReal x10459=(cj3*x10444);
IkReal x10460=(cj3*x10445);
evalcond[0]=((((-1.0)*gconst5*r20*x10458))+(((-1.0)*r22*x10457))+((x10444*x10453)));
evalcond[1]=((((-1.0)*gconst5*r00*x10458))+(((-1.0)*r02*x10457))+((x10444*x10451)));
evalcond[2]=((1.0)+((x10444*x10449))+(((-1.0)*r12*x10457))+(((-1.0)*gconst5*r10*x10458)));
evalcond[3]=(((r10*x10454))+((x10449*x10460))+(((-1.0)*r10*x10448*x10457))+((r12*x10459))+((r11*x10447)));
evalcond[4]=(((r10*x10455))+((r10*x10445*x10447))+((r11*x10448))+(((-1.0)*sj3*x10449*x10457))+(((-1.0)*r12*sj3*x10458)));
evalcond[5]=((((-1.0)*r20*x10448*x10457))+((cj1*sj2))+((r22*x10459))+((x10453*x10460))+((r21*x10447))+x10452+((r20*x10454)));
evalcond[6]=((((-1.0)*r00*x10448*x10457))+((r00*x10454))+x10446+((r01*x10447))+((r02*x10459))+((x10451*x10460))+(((-1.0)*x10456)));
evalcond[7]=(((r20*x10445*x10447))+(((-1.0)*r22*sj3*x10458))+((r21*x10448))+x10446+(((-1.0)*sj3*x10453*x10457))+(((-1.0)*x10456))+((r20*x10455)));
evalcond[8]=(((r00*x10445*x10447))+(((-1.0)*x10452))+((r00*x10455))+(((-1.0)*r02*sj3*x10458))+(((-1.0)*sj2*x10450))+((r01*x10448))+(((-1.0)*sj3*x10451*x10457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10461 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10461.valid){
continue;
}
CheckValue<IkReal> x10462=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10461.value)+(((1.5707963267949)*(x10462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10463=IKsin(j4);
IkReal x10464=IKcos(j4);
IkReal x10465=(sj1*sj2);
IkReal x10466=(gconst5*sj3);
IkReal x10467=(cj3*gconst5);
IkReal x10468=(gconst4*r11);
IkReal x10469=((1.0)*cj1);
IkReal x10470=(gconst4*r01);
IkReal x10471=(cj2*sj1);
IkReal x10472=(gconst4*r21);
IkReal x10473=(gconst4*sj3);
IkReal x10474=(cj3*gconst4);
IkReal x10475=(cj2*x10469);
IkReal x10476=((1.0)*x10464);
IkReal x10477=((1.0)*x10463);
IkReal x10478=(cj3*x10463);
IkReal x10479=(cj3*x10464);
evalcond[0]=((((-1.0)*gconst5*r20*x10477))+((x10463*x10472))+(((-1.0)*r22*x10476)));
evalcond[1]=((((-1.0)*r02*x10476))+(((-1.0)*gconst5*r00*x10477))+((x10463*x10470)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10477))+((x10463*x10468))+(((-1.0)*r12*x10476)));
evalcond[3]=(((r12*x10478))+(((-1.0)*r10*x10467*x10476))+((r11*x10466))+((x10468*x10479))+((r10*x10473)));
evalcond[4]=(((r11*x10467))+((r10*x10464*x10466))+(((-1.0)*r12*sj3*x10477))+(((-1.0)*sj3*x10468*x10476))+((r10*x10474)));
evalcond[5]=(((r20*x10473))+((cj1*sj2))+((r22*x10478))+((x10472*x10479))+((r21*x10466))+(((-1.0)*r20*x10467*x10476))+x10471);
evalcond[6]=((((-1.0)*r00*x10467*x10476))+((r01*x10466))+((r00*x10473))+((x10470*x10479))+x10465+((r02*x10478))+(((-1.0)*x10475)));
evalcond[7]=(((r20*x10474))+(((-1.0)*r22*sj3*x10477))+(((-1.0)*sj3*x10472*x10476))+((r20*x10464*x10466))+((r21*x10467))+x10465+(((-1.0)*x10475)));
evalcond[8]=((((-1.0)*x10471))+((r00*x10464*x10466))+((r01*x10467))+((r00*x10474))+(((-1.0)*sj3*x10470*x10476))+(((-1.0)*r02*sj3*x10477))+(((-1.0)*sj2*x10469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10480=((-1.0)*r21);
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal(x10480),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
IkReal x10481=((1.0)*(x10483.value));
IkReal x10482=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10481)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10481)));
IkReal gconst4=(x10480*x10482);
IkReal gconst5=((1.0)*r20*x10482);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10484=((-1.0)*r21);
CheckValue<IkReal> x10487 = IKatan2WithCheck(IkReal(x10484),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10487.valid){
continue;
}
IkReal x10485=((1.0)*(x10487.value));
IkReal x10486=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10485)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10485)));
IkReal gconst4=(x10484*x10486);
IkReal gconst5=((1.0)*r20*x10486);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10488=((-1.0)*r21);
CheckValue<IkReal> x10491 = IKatan2WithCheck(IkReal(x10488),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10491.valid){
continue;
}
IkReal x10489=((1.0)*(x10491.value));
IkReal x10490=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10489)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10489)));
IkReal gconst4=(x10488*x10490);
IkReal gconst5=((1.0)*r20*x10490);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10492=((-1.0)*r21);
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal(x10492),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
IkReal x10493=((1.0)*(x10495.value));
IkReal x10494=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10493)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10493)));
IkReal gconst4=(x10492*x10494);
IkReal gconst5=((1.0)*r20*x10494);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10496=((-1.0)*r21);
CheckValue<IkReal> x10499 = IKatan2WithCheck(IkReal(x10496),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10499.valid){
continue;
}
IkReal x10497=((1.0)*(x10499.value));
IkReal x10498=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10497)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10497)));
IkReal gconst4=(x10496*x10498);
IkReal gconst5=((1.0)*r20*x10498);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10500=((-1.0)*r21);
CheckValue<IkReal> x10503 = IKatan2WithCheck(IkReal(x10500),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10503.valid){
continue;
}
IkReal x10501=((1.0)*(x10503.value));
IkReal x10502=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10501)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10501)));
IkReal gconst4=(x10500*x10502);
IkReal gconst5=((1.0)*r20*x10502);
IkReal x10504=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10508=IKPowWithIntegerCheck(x10504,-1);
if(!x10508.valid){
continue;
}
IkReal x10505=x10508.value;
IkReal x10506=((1.0)*x10505);
IkReal x10507=((((-1.0)*(r12*r12)))+(((-1.0)*x10506*(r10*r10)*(r20*r20)))+(((-1.0)*x10506*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10505)));
j4eval[0]=x10507;
j4eval[1]=r12;
j4eval[2]=x10504;
j4eval[3]=IKsign(x10507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10509=(gconst5*r10);
IkReal x10510=(gconst4*r11);
CheckValue<IkReal> x10511=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10510*x10510)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10509*x10509)))+(((2.0)*x10509*x10510)))),-1);
if(!x10511.valid){
continue;
}
CheckValue<IkReal> x10512 = IKatan2WithCheck(IkReal(((((-1.0)*x10510))+x10509)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10511.value)))+(x10512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10513=IKsin(j4);
IkReal x10514=IKcos(j4);
IkReal x10515=(gconst4*r11);
IkReal x10516=(gconst5*r10);
IkReal x10517=(gconst4*r01);
IkReal x10518=(gconst5*r00);
IkReal x10519=(gconst4*r21);
IkReal x10520=(gconst5*r20);
IkReal x10521=((1.0)*x10514);
IkReal x10522=((1.0)*x10513);
evalcond[0]=((((-1.0)*x10520*x10522))+(((-1.0)*r22*x10521))+((x10513*x10519)));
evalcond[1]=((((-1.0)*x10518*x10522))+(((-1.0)*r02*x10521))+((x10513*x10517)));
evalcond[2]=((((-1.0)*r12*x10522))+((x10514*x10516))+(((-1.0)*x10515*x10521)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10521))+((x10513*x10515))+(((-1.0)*x10516*x10522)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10522))+(((-1.0)*x10517*x10521))+((x10514*x10518)));
evalcond[5]=((((-1.0)*r22*x10522))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10514*x10520))+(((-1.0)*x10519*x10521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10523=((1.0)*gconst5);
CheckValue<IkReal> x10524 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10524.valid){
continue;
}
CheckValue<IkReal> x10525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10523))+(((-1.0)*gconst4*r20)))),-1);
if(!x10525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10524.value)+(((1.5707963267949)*(x10525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10526=IKsin(j4);
IkReal x10527=IKcos(j4);
IkReal x10528=(gconst4*r11);
IkReal x10529=(gconst5*r10);
IkReal x10530=(gconst4*r01);
IkReal x10531=(gconst5*r00);
IkReal x10532=(gconst4*r21);
IkReal x10533=(gconst5*r20);
IkReal x10534=((1.0)*x10527);
IkReal x10535=((1.0)*x10526);
evalcond[0]=((((-1.0)*r22*x10534))+((x10526*x10532))+(((-1.0)*x10533*x10535)));
evalcond[1]=((((-1.0)*r02*x10534))+(((-1.0)*x10531*x10535))+((x10526*x10530)));
evalcond[2]=((((-1.0)*r12*x10535))+((x10527*x10529))+(((-1.0)*x10528*x10534)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10534))+(((-1.0)*x10529*x10535))+((x10526*x10528)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10535))+((x10527*x10531))+(((-1.0)*x10530*x10534)));
evalcond[5]=((((-1.0)*r22*x10535))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10527*x10533))+(((-1.0)*x10532*x10534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10536=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10536.valid){
continue;
}
CheckValue<IkReal> x10537 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10536.value)))+(x10537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10538=IKsin(j4);
IkReal x10539=IKcos(j4);
IkReal x10540=(gconst4*r11);
IkReal x10541=(gconst5*r10);
IkReal x10542=(gconst4*r01);
IkReal x10543=(gconst5*r00);
IkReal x10544=(gconst4*r21);
IkReal x10545=(gconst5*r20);
IkReal x10546=((1.0)*x10539);
IkReal x10547=((1.0)*x10538);
evalcond[0]=(((x10538*x10544))+(((-1.0)*r22*x10546))+(((-1.0)*x10545*x10547)));
evalcond[1]=((((-1.0)*x10543*x10547))+((x10538*x10542))+(((-1.0)*r02*x10546)));
evalcond[2]=(((x10539*x10541))+(((-1.0)*r12*x10547))+(((-1.0)*x10540*x10546)));
evalcond[3]=((-1.0)+((x10538*x10540))+(((-1.0)*x10541*x10547))+(((-1.0)*r12*x10546)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10542*x10546))+((x10539*x10543))+((cj1*sj2))+(((-1.0)*r02*x10547)));
evalcond[5]=((((-1.0)*x10544*x10546))+((x10539*x10545))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10548=((-1.0)*r21);
CheckValue<IkReal> x10551 = IKatan2WithCheck(IkReal(x10548),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10551.valid){
continue;
}
IkReal x10549=((1.0)*(x10551.value));
IkReal x10550=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10549)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10549)));
IkReal gconst4=(x10548*x10550);
IkReal gconst5=((1.0)*r20*x10550);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10552=((-1.0)*r21);
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(x10552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
IkReal x10553=((1.0)*(x10555.value));
IkReal x10554=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10553)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10553)));
IkReal gconst4=(x10552*x10554);
IkReal gconst5=((1.0)*r20*x10554);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10556=((-1.0)*r21);
CheckValue<IkReal> x10559 = IKatan2WithCheck(IkReal(x10556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10559.valid){
continue;
}
IkReal x10557=((1.0)*(x10559.value));
IkReal x10558=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10557)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10557)));
IkReal gconst4=(x10556*x10558);
IkReal gconst5=((1.0)*r20*x10558);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10560=(gconst5*r10);
IkReal x10561=(gconst4*r11);
CheckValue<IkReal> x10562=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10560*x10560)+(x10561*x10561)+(((-2.0)*x10560*x10561)))),-1);
if(!x10562.valid){
continue;
}
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal(((((-1.0)*x10560))+x10561)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10562.value)))+(x10563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10564=IKcos(j4);
IkReal x10565=IKsin(j4);
IkReal x10566=(gconst4*r11);
IkReal x10567=(gconst5*r10);
IkReal x10568=(gconst5*r00);
IkReal x10569=(gconst5*r20);
IkReal x10570=((1.0)*x10564);
IkReal x10571=(gconst4*x10564);
IkReal x10572=((1.0)*x10565);
IkReal x10573=(gconst4*x10565);
evalcond[0]=((((-1.0)*x10567*x10570))+((r12*x10565))+((x10564*x10566)));
evalcond[1]=((((-1.0)*x10569*x10572))+(((-1.0)*r22*x10570))+((r21*x10573)));
evalcond[2]=(((r01*x10573))+(((-1.0)*x10568*x10572))+(((-1.0)*r02*x10570)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10570))+(((-1.0)*x10567*x10572))+((x10565*x10566)));
evalcond[4]=(((cj2*sj1))+((r01*x10571))+((cj1*sj2))+(((-1.0)*x10568*x10570))+((r02*x10565)));
evalcond[5]=((((-1.0)*x10569*x10570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10571))+((r22*x10565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10574=((1.0)*gconst5);
CheckValue<IkReal> x10575=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10574)))),-1);
if(!x10575.valid){
continue;
}
CheckValue<IkReal> x10576 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10574))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10575.value)))+(x10576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10577=IKcos(j4);
IkReal x10578=IKsin(j4);
IkReal x10579=(gconst4*r11);
IkReal x10580=(gconst5*r10);
IkReal x10581=(gconst5*r00);
IkReal x10582=(gconst5*r20);
IkReal x10583=((1.0)*x10577);
IkReal x10584=(gconst4*x10577);
IkReal x10585=((1.0)*x10578);
IkReal x10586=(gconst4*x10578);
evalcond[0]=(((x10577*x10579))+((r12*x10578))+(((-1.0)*x10580*x10583)));
evalcond[1]=((((-1.0)*x10582*x10585))+(((-1.0)*r22*x10583))+((r21*x10586)));
evalcond[2]=((((-1.0)*x10581*x10585))+(((-1.0)*r02*x10583))+((r01*x10586)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10583))+((x10578*x10579))+(((-1.0)*x10580*x10585)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10581*x10583))+((r02*x10578))+((r01*x10584)));
evalcond[5]=((((-1.0)*x10582*x10583))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10584))+((r22*x10578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10587=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10587.valid){
continue;
}
CheckValue<IkReal> x10588 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10587.value)))+(x10588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10589=IKcos(j4);
IkReal x10590=IKsin(j4);
IkReal x10591=(gconst4*r11);
IkReal x10592=(gconst5*r10);
IkReal x10593=(gconst5*r00);
IkReal x10594=(gconst5*r20);
IkReal x10595=((1.0)*x10589);
IkReal x10596=(gconst4*x10589);
IkReal x10597=((1.0)*x10590);
IkReal x10598=(gconst4*x10590);
evalcond[0]=((((-1.0)*x10592*x10595))+((r12*x10590))+((x10589*x10591)));
evalcond[1]=(((r21*x10598))+(((-1.0)*r22*x10595))+(((-1.0)*x10594*x10597)));
evalcond[2]=((((-1.0)*r02*x10595))+((r01*x10598))+(((-1.0)*x10593*x10597)));
evalcond[3]=((-1.0)+(((-1.0)*x10592*x10597))+(((-1.0)*r12*x10595))+((x10590*x10591)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10596))+(((-1.0)*x10593*x10595))+((r02*x10590)));
evalcond[5]=(((r21*x10596))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10594*x10595))+((r22*x10590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10599=((-1.0)*r21);
CheckValue<IkReal> x10602 = IKatan2WithCheck(IkReal(x10599),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10602.valid){
continue;
}
IkReal x10600=((1.0)*(x10602.value));
IkReal x10601=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10600)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10600)));
IkReal gconst4=(x10599*x10601);
IkReal gconst5=((1.0)*r20*x10601);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10603=((-1.0)*r21);
CheckValue<IkReal> x10606 = IKatan2WithCheck(IkReal(x10603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10606.valid){
continue;
}
IkReal x10604=((1.0)*(x10606.value));
IkReal x10605=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10604)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10604)));
IkReal gconst4=(x10603*x10605);
IkReal gconst5=((1.0)*r20*x10605);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10607=((-1.0)*r21);
CheckValue<IkReal> x10610 = IKatan2WithCheck(IkReal(x10607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10610.valid){
continue;
}
IkReal x10608=((1.0)*(x10610.value));
IkReal x10609=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10608)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10608)));
IkReal gconst4=(x10607*x10609);
IkReal gconst5=((1.0)*r20*x10609);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10611=(gconst5*r10);
IkReal x10612=(gconst4*r11);
CheckValue<IkReal> x10613=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10611*x10612))+(x10611*x10611)+(x10612*x10612))),-1);
if(!x10613.valid){
continue;
}
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(((((-1.0)*x10611))+x10612)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10613.value)))+(x10614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10615=IKcos(j4);
IkReal x10616=IKsin(j4);
IkReal x10617=(gconst5*r10);
IkReal x10618=(gconst5*r00);
IkReal x10619=(gconst5*r20);
IkReal x10620=((1.0)*x10615);
IkReal x10621=(gconst4*x10616);
IkReal x10622=(gconst4*x10615);
IkReal x10623=((1.0)*x10616);
evalcond[0]=(((r12*x10616))+(((-1.0)*x10617*x10620))+((r11*x10622)));
evalcond[1]=(((r21*x10621))+(((-1.0)*x10619*x10623))+(((-1.0)*r22*x10620)));
evalcond[2]=((((-1.0)*r02*x10620))+(((-1.0)*x10618*x10623))+((r01*x10621)));
evalcond[3]=((-1.0)+(((-1.0)*x10617*x10623))+(((-1.0)*r12*x10620))+((r11*x10621)));
evalcond[4]=(((r21*x10622))+((cj2*sj1))+((r22*x10616))+((cj1*sj2))+(((-1.0)*x10619*x10620)));
evalcond[5]=(((r02*x10616))+(((-1.0)*x10618*x10620))+(((-1.0)*sj1*sj2))+((r01*x10622))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10624=((1.0)*gconst5);
CheckValue<IkReal> x10625 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10624))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10625.valid){
continue;
}
CheckValue<IkReal> x10626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10624))+(((-1.0)*gconst4*r20)))),-1);
if(!x10626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10625.value)+(((1.5707963267949)*(x10626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10627=IKcos(j4);
IkReal x10628=IKsin(j4);
IkReal x10629=(gconst5*r10);
IkReal x10630=(gconst5*r00);
IkReal x10631=(gconst5*r20);
IkReal x10632=((1.0)*x10627);
IkReal x10633=(gconst4*x10628);
IkReal x10634=(gconst4*x10627);
IkReal x10635=((1.0)*x10628);
evalcond[0]=((((-1.0)*x10629*x10632))+((r11*x10634))+((r12*x10628)));
evalcond[1]=((((-1.0)*x10631*x10635))+(((-1.0)*r22*x10632))+((r21*x10633)));
evalcond[2]=((((-1.0)*r02*x10632))+((r01*x10633))+(((-1.0)*x10630*x10635)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10632))+(((-1.0)*x10629*x10635))+((r11*x10633)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10631*x10632))+((r22*x10628))+((r21*x10634)));
evalcond[5]=(((r01*x10634))+(((-1.0)*sj1*sj2))+((r02*x10628))+((cj1*cj2))+(((-1.0)*x10630*x10632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10636=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10636.valid){
continue;
}
CheckValue<IkReal> x10637 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10636.value)))+(x10637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10638=IKcos(j4);
IkReal x10639=IKsin(j4);
IkReal x10640=(gconst5*r10);
IkReal x10641=(gconst5*r00);
IkReal x10642=(gconst5*r20);
IkReal x10643=((1.0)*x10638);
IkReal x10644=(gconst4*x10639);
IkReal x10645=(gconst4*x10638);
IkReal x10646=((1.0)*x10639);
evalcond[0]=((((-1.0)*x10640*x10643))+((r11*x10645))+((r12*x10639)));
evalcond[1]=(((r21*x10644))+(((-1.0)*r22*x10643))+(((-1.0)*x10642*x10646)));
evalcond[2]=((((-1.0)*r02*x10643))+(((-1.0)*x10641*x10646))+((r01*x10644)));
evalcond[3]=((-1.0)+(((-1.0)*x10640*x10646))+(((-1.0)*r12*x10643))+((r11*x10644)));
evalcond[4]=(((r21*x10645))+((cj2*sj1))+((cj1*sj2))+((r22*x10639))+(((-1.0)*x10642*x10643)));
evalcond[5]=((((-1.0)*x10641*x10643))+((r01*x10645))+(((-1.0)*sj1*sj2))+((r02*x10639))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10647=((-1.0)*r21);
CheckValue<IkReal> x10650 = IKatan2WithCheck(IkReal(x10647),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10650.valid){
continue;
}
IkReal x10648=((1.0)*(x10650.value));
IkReal x10649=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10648)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10648)));
IkReal gconst4=(x10647*x10649);
IkReal gconst5=((1.0)*r20*x10649);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10651=((-1.0)*r21);
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(x10651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
IkReal x10652=((1.0)*(x10654.value));
IkReal x10653=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10652)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10652)));
IkReal gconst4=(x10651*x10653);
IkReal gconst5=((1.0)*r20*x10653);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10655=((-1.0)*r21);
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(x10655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
IkReal x10656=((1.0)*(x10658.value));
IkReal x10657=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10656)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10656)));
IkReal gconst4=(x10655*x10657);
IkReal gconst5=((1.0)*r20*x10657);
IkReal x10659=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10663=IKPowWithIntegerCheck(x10659,-1);
if(!x10663.valid){
continue;
}
IkReal x10660=x10663.value;
IkReal x10661=((1.0)*x10660);
IkReal x10662=((((-1.0)*x10661*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10660))+(((-1.0)*x10661*(r10*r10)*(r20*r20))));
j4eval[0]=x10662;
j4eval[1]=r12;
j4eval[2]=x10659;
j4eval[3]=IKsign(x10662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10664=(gconst5*r10);
IkReal x10665=(gconst4*r11);
CheckValue<IkReal> x10666 = IKatan2WithCheck(IkReal(((((-1.0)*x10665))+x10664)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10666.valid){
continue;
}
CheckValue<IkReal> x10667=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x10664*x10664)))+(((2.0)*x10664*x10665))+(((-1.0)*(x10665*x10665))))),-1);
if(!x10667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10666.value)+(((1.5707963267949)*(x10667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10668=IKsin(j4);
IkReal x10669=IKcos(j4);
IkReal x10670=(gconst4*r11);
IkReal x10671=(gconst5*r10);
IkReal x10672=(gconst5*r00);
IkReal x10673=(gconst5*r20);
IkReal x10674=((1.0)*x10669);
IkReal x10675=(gconst4*x10668);
IkReal x10676=((1.0)*x10668);
evalcond[0]=((((-1.0)*x10673*x10676))+(((-1.0)*r22*x10674))+((r21*x10675)));
evalcond[1]=((((-1.0)*r02*x10674))+(((-1.0)*x10672*x10676))+((r01*x10675)));
evalcond[2]=(((x10669*x10671))+(((-1.0)*x10670*x10674))+(((-1.0)*r12*x10676)));
evalcond[3]=((-1.0)+((x10668*x10670))+(((-1.0)*x10671*x10676))+(((-1.0)*r12*x10674)));
evalcond[4]=(((cj2*sj1))+((x10669*x10673))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10674))+(((-1.0)*r22*x10676)));
evalcond[5]=(((x10669*x10672))+(((-1.0)*r02*x10676))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10677=((1.0)*gconst5);
CheckValue<IkReal> x10678 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10678.valid){
continue;
}
CheckValue<IkReal> x10679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10677))+(((-1.0)*gconst4*r20)))),-1);
if(!x10679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10678.value)+(((1.5707963267949)*(x10679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10680=IKsin(j4);
IkReal x10681=IKcos(j4);
IkReal x10682=(gconst4*r11);
IkReal x10683=(gconst5*r10);
IkReal x10684=(gconst5*r00);
IkReal x10685=(gconst5*r20);
IkReal x10686=((1.0)*x10681);
IkReal x10687=(gconst4*x10680);
IkReal x10688=((1.0)*x10680);
evalcond[0]=((((-1.0)*r22*x10686))+(((-1.0)*x10685*x10688))+((r21*x10687)));
evalcond[1]=((((-1.0)*r02*x10686))+(((-1.0)*x10684*x10688))+((r01*x10687)));
evalcond[2]=(((x10681*x10683))+(((-1.0)*x10682*x10686))+(((-1.0)*r12*x10688)));
evalcond[3]=((-1.0)+(((-1.0)*x10683*x10688))+((x10680*x10682))+(((-1.0)*r12*x10686)));
evalcond[4]=(((cj2*sj1))+((x10681*x10685))+(((-1.0)*r22*x10688))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10686)));
evalcond[5]=(((x10681*x10684))+(((-1.0)*gconst4*r01*x10686))+(((-1.0)*r02*x10688))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10689=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10689.valid){
continue;
}
CheckValue<IkReal> x10690 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10689.value)))+(x10690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10691=IKsin(j4);
IkReal x10692=IKcos(j4);
IkReal x10693=(gconst4*r11);
IkReal x10694=(gconst5*r10);
IkReal x10695=(gconst5*r00);
IkReal x10696=(gconst5*r20);
IkReal x10697=((1.0)*x10692);
IkReal x10698=(gconst4*x10691);
IkReal x10699=((1.0)*x10691);
evalcond[0]=(((r21*x10698))+(((-1.0)*x10696*x10699))+(((-1.0)*r22*x10697)));
evalcond[1]=((((-1.0)*x10695*x10699))+(((-1.0)*r02*x10697))+((r01*x10698)));
evalcond[2]=((((-1.0)*x10693*x10697))+((x10692*x10694))+(((-1.0)*r12*x10699)));
evalcond[3]=((-1.0)+(((-1.0)*x10694*x10699))+((x10691*x10693))+(((-1.0)*r12*x10697)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10697))+((x10692*x10696))+((cj1*sj2))+(((-1.0)*r22*x10699)));
evalcond[5]=(((x10692*x10695))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10699))+(((-1.0)*gconst4*r01*x10697))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10700=((-1.0)*r21);
IkReal x10701=((-1.0)*px);
CheckValue<IkReal> x10703 = IKatan2WithCheck(IkReal(x10700),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10703.valid){
continue;
}
IkReal x10702=((1.0)*(x10703.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10702)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10701);
rxp1_1=(px*r21);
rxp1_2=(r11*x10701);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10702)));
IkReal gconst4=x10700;
IkReal gconst5=((1.0)*r20);
IkReal x10704=((1.0)*cj3);
IkReal x10705=(r10*r20);
IkReal x10706=(r11*r21);
j4eval[0]=((((-1.0)*x10705))+(((-1.0)*x10706)));
j4eval[1]=((((-1.0)*x10704*x10706))+(((-1.0)*x10704*x10705)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10707=((-1.0)*r21);
IkReal x10708=((-1.0)*px);
CheckValue<IkReal> x10710 = IKatan2WithCheck(IkReal(x10707),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10710.valid){
continue;
}
IkReal x10709=((1.0)*(x10710.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10709)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10708);
rxp1_1=(px*r21);
rxp1_2=(r11*x10708);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10709)));
IkReal gconst4=x10707;
IkReal gconst5=((1.0)*r20);
IkReal x10711=((1.0)*r11*r21);
IkReal x10712=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10711))+(((-1.0)*x10712)));
j4eval[1]=(((sj3*x10712))+((sj3*x10711)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10713=((-1.0)*r21);
IkReal x10714=((-1.0)*px);
CheckValue<IkReal> x10716 = IKatan2WithCheck(IkReal(x10713),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10716.valid){
continue;
}
IkReal x10715=((1.0)*(x10716.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10715)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10714);
rxp1_1=(px*r21);
rxp1_2=(r11*x10714);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10715)));
IkReal gconst4=x10713;
IkReal gconst5=((1.0)*r20);
IkReal x10717=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10717))+(((-1.0)*r11*r21*x10717)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10718=((1.0)*r10);
CheckValue<IkReal> x10719=IKPowWithIntegerCheck(cj3,-1);
if(!x10719.valid){
continue;
}
CheckValue<IkReal> x10720=IKPowWithIntegerCheck(r02,-1);
if(!x10720.valid){
continue;
}
CheckValue<IkReal> x10721=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10718))+((cj3*gconst4*r11))),-1);
if(!x10721.valid){
continue;
}
if( IKabs(((x10719.value)*(x10720.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10721.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10718)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10719.value)*(x10720.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10721.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10718))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10719.value)*(x10720.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10721.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10718))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10722=IKsin(j4);
IkReal x10723=IKcos(j4);
IkReal x10724=(cj2*sj1);
IkReal x10725=(cj1*sj2);
IkReal x10726=(gconst5*sj3);
IkReal x10727=(gconst4*r11);
IkReal x10728=(sj1*sj2);
IkReal x10729=((1.0)*gconst5);
IkReal x10730=(cj1*cj2);
IkReal x10731=(gconst4*r21);
IkReal x10732=(cj3*gconst4);
IkReal x10733=(gconst4*sj3);
IkReal x10734=(cj3*gconst5);
IkReal x10735=(r20*x10723);
IkReal x10736=(r10*x10723);
IkReal x10737=(cj3*x10723);
IkReal x10738=(r02*x10722);
IkReal x10739=(x10725+x10724);
IkReal x10740=((1.0)*sj3*x10723);
evalcond[0]=((-1.0)*r02*x10723);
evalcond[1]=((((-1.0)*r20*x10722*x10729))+((x10722*x10731)));
evalcond[2]=((((-1.0)*x10728))+x10730+((cj3*x10738)));
evalcond[3]=((((-1.0)*sj3*x10738))+x10739);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10722*x10729))+((x10722*x10727)));
evalcond[5]=(((r10*x10733))+(((-1.0)*cj3*x10729*x10736))+((x10727*x10737))+((r11*x10726)));
evalcond[6]=(((r10*x10732))+((x10726*x10736))+(((-1.0)*x10727*x10740))+((r11*x10734)));
evalcond[7]=(((x10731*x10737))+((r21*x10726))+(((-1.0)*cj3*x10729*x10735))+((r20*x10733))+x10739);
evalcond[8]=((((-1.0)*x10731*x10740))+((r21*x10734))+((r20*x10732))+((x10726*x10735))+(((-1.0)*x10730))+x10728);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10741=((1.0)*gconst5);
IkReal x10742=(gconst4*r11);
CheckValue<IkReal> x10743=IKPowWithIntegerCheck(((((-1.0)*r10*x10741))+x10742),-1);
if(!x10743.valid){
continue;
}
CheckValue<IkReal> x10744=IKPowWithIntegerCheck(((((-1.0)*sj3*x10742))+((gconst5*r10*sj3))),-1);
if(!x10744.valid){
continue;
}
if( IKabs(x10743.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10744.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10741)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10743.value)+IKsqr(((x10744.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10741))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10743.value, ((x10744.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10741))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10745=IKsin(j4);
IkReal x10746=IKcos(j4);
IkReal x10747=(cj2*sj1);
IkReal x10748=(cj1*sj2);
IkReal x10749=(gconst5*sj3);
IkReal x10750=(gconst4*r11);
IkReal x10751=(sj1*sj2);
IkReal x10752=((1.0)*gconst5);
IkReal x10753=(cj1*cj2);
IkReal x10754=(gconst4*r21);
IkReal x10755=(cj3*gconst4);
IkReal x10756=(gconst4*sj3);
IkReal x10757=(cj3*gconst5);
IkReal x10758=(r20*x10746);
IkReal x10759=(r10*x10746);
IkReal x10760=(cj3*x10746);
IkReal x10761=(r02*x10745);
IkReal x10762=(x10748+x10747);
IkReal x10763=((1.0)*sj3*x10746);
evalcond[0]=((-1.0)*r02*x10746);
evalcond[1]=(((x10745*x10754))+(((-1.0)*r20*x10745*x10752)));
evalcond[2]=(((cj3*x10761))+x10753+(((-1.0)*x10751)));
evalcond[3]=((((-1.0)*sj3*x10761))+x10762);
evalcond[4]=((-1.0)+((x10745*x10750))+(((-1.0)*r10*x10745*x10752)));
evalcond[5]=(((x10750*x10760))+((r10*x10756))+(((-1.0)*cj3*x10752*x10759))+((r11*x10749)));
evalcond[6]=(((r10*x10755))+((x10749*x10759))+(((-1.0)*x10750*x10763))+((r11*x10757)));
evalcond[7]=((((-1.0)*cj3*x10752*x10758))+((r20*x10756))+x10762+((x10754*x10760))+((r21*x10749)));
evalcond[8]=((((-1.0)*x10754*x10763))+((x10749*x10758))+((r20*x10755))+x10751+((r21*x10757))+(((-1.0)*x10753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10764=((1.0)*sj3);
IkReal x10765=(gconst4*r11);
IkReal x10766=((1.0)*gconst5*r10);
CheckValue<IkReal> x10767=IKPowWithIntegerCheck(((((-1.0)*x10766))+x10765),-1);
if(!x10767.valid){
continue;
}
CheckValue<IkReal> x10768=IKPowWithIntegerCheck(((((-1.0)*cj3*x10766))+((cj3*x10765))),-1);
if(!x10768.valid){
continue;
}
if( IKabs(x10767.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10768.value)*(((((-1.0)*gconst5*r11*x10764))+(((-1.0)*gconst4*r10*x10764)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10767.value)+IKsqr(((x10768.value)*(((((-1.0)*gconst5*r11*x10764))+(((-1.0)*gconst4*r10*x10764))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10767.value, ((x10768.value)*(((((-1.0)*gconst5*r11*x10764))+(((-1.0)*gconst4*r10*x10764))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10769=IKsin(j4);
IkReal x10770=IKcos(j4);
IkReal x10771=(cj2*sj1);
IkReal x10772=(cj1*sj2);
IkReal x10773=(gconst5*sj3);
IkReal x10774=(gconst4*r11);
IkReal x10775=(sj1*sj2);
IkReal x10776=((1.0)*gconst5);
IkReal x10777=(cj1*cj2);
IkReal x10778=(gconst4*r21);
IkReal x10779=(cj3*gconst4);
IkReal x10780=(gconst4*sj3);
IkReal x10781=(cj3*gconst5);
IkReal x10782=(r20*x10770);
IkReal x10783=(r10*x10770);
IkReal x10784=(cj3*x10770);
IkReal x10785=(r02*x10769);
IkReal x10786=(x10771+x10772);
IkReal x10787=((1.0)*sj3*x10770);
evalcond[0]=((-1.0)*r02*x10770);
evalcond[1]=((((-1.0)*r20*x10769*x10776))+((x10769*x10778)));
evalcond[2]=((((-1.0)*x10775))+x10777+((cj3*x10785)));
evalcond[3]=((((-1.0)*sj3*x10785))+x10786);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10769*x10776))+((x10769*x10774)));
evalcond[5]=(((r11*x10773))+(((-1.0)*cj3*x10776*x10783))+((x10774*x10784))+((r10*x10780)));
evalcond[6]=(((r11*x10781))+((x10773*x10783))+(((-1.0)*x10774*x10787))+((r10*x10779)));
evalcond[7]=(((x10778*x10784))+(((-1.0)*cj3*x10776*x10782))+((r20*x10780))+((r21*x10773))+x10786);
evalcond[8]=(((r21*x10781))+((r20*x10779))+(((-1.0)*x10777))+((x10773*x10782))+(((-1.0)*x10778*x10787))+x10775);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10788=gconst4*gconst4;
IkReal x10789=gconst5*gconst5;
IkReal x10790=(r10*r21);
IkReal x10791=((1.0)*cj3);
IkReal x10792=(r11*r21);
IkReal x10793=(r11*r20);
IkReal x10794=(r22*sj3);
IkReal x10795=(gconst4*r10);
IkReal x10796=((1.0)*sj3);
IkReal x10797=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10791))+(((-1.0)*r10*r20*x10789*x10791))+(((-1.0)*x10788*x10791*x10792))+((x10790*x10797))+((x10793*x10797)))),-1);
if(!x10798.valid){
continue;
}
CheckValue<IkReal> x10799 = IKatan2WithCheck(IkReal((((x10794*x10795))+((gconst5*r11*x10794)))),IkReal(((((-1.0)*x10789*x10793*x10796))+((sj3*x10788*x10790))+((gconst4*gconst5*sj3*x10792))+(((-1.0)*gconst5*r20*x10795*x10796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10798.value)))+(x10799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10800=IKsin(j4);
IkReal x10801=IKcos(j4);
IkReal x10802=(cj2*sj1);
IkReal x10803=(cj1*sj2);
IkReal x10804=(gconst5*sj3);
IkReal x10805=(gconst4*r11);
IkReal x10806=(sj1*sj2);
IkReal x10807=(gconst5*r10);
IkReal x10808=(cj1*cj2);
IkReal x10809=(gconst4*r01);
IkReal x10810=(gconst4*r21);
IkReal x10811=(gconst5*r00);
IkReal x10812=(gconst4*sj3);
IkReal x10813=(cj3*gconst5);
IkReal x10814=(cj3*gconst4);
IkReal x10815=((1.0)*x10801);
IkReal x10816=((1.0)*x10800);
IkReal x10817=(cj3*x10800);
IkReal x10818=(cj3*x10801);
IkReal x10819=(x10802+x10803);
evalcond[0]=((((-1.0)*gconst5*r20*x10816))+(((-1.0)*r22*x10815))+((x10800*x10810)));
evalcond[1]=((((-1.0)*r02*x10815))+(((-1.0)*x10811*x10816))+((x10800*x10809)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10815))+((x10800*x10805))+(((-1.0)*x10807*x10816)));
evalcond[3]=(((x10805*x10818))+((r11*x10804))+((r10*x10812))+(((-1.0)*cj3*x10807*x10815))+((r12*x10817)));
evalcond[4]=((((-1.0)*sj3*x10805*x10815))+((r10*x10814))+(((-1.0)*r12*sj3*x10816))+((r11*x10813))+((r10*x10801*x10804)));
evalcond[5]=(((r22*x10817))+((x10810*x10818))+((r20*x10812))+((r21*x10804))+(((-1.0)*r20*x10813*x10815))+x10819);
evalcond[6]=((((-1.0)*cj3*x10811*x10815))+((r02*x10817))+((r01*x10804))+((x10809*x10818))+(((-1.0)*x10806))+((r00*x10812))+x10808);
evalcond[7]=(((r00*x10801*x10804))+(((-1.0)*sj3*x10809*x10815))+(((-1.0)*r02*sj3*x10816))+((r01*x10813))+((r00*x10814))+x10819);
evalcond[8]=(((r20*x10801*x10804))+(((-1.0)*r22*sj3*x10816))+((r20*x10814))+(((-1.0)*x10808))+(((-1.0)*sj3*x10810*x10815))+((r21*x10813))+x10806);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10820=((1.0)*gconst5);
CheckValue<IkReal> x10821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10820))+(((-1.0)*gconst4*r20)))),-1);
if(!x10821.valid){
continue;
}
CheckValue<IkReal> x10822 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10821.value)))+(x10822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10823=IKsin(j4);
IkReal x10824=IKcos(j4);
IkReal x10825=(cj2*sj1);
IkReal x10826=(cj1*sj2);
IkReal x10827=(gconst5*sj3);
IkReal x10828=(gconst4*r11);
IkReal x10829=(sj1*sj2);
IkReal x10830=(gconst5*r10);
IkReal x10831=(cj1*cj2);
IkReal x10832=(gconst4*r01);
IkReal x10833=(gconst4*r21);
IkReal x10834=(gconst5*r00);
IkReal x10835=(gconst4*sj3);
IkReal x10836=(cj3*gconst5);
IkReal x10837=(cj3*gconst4);
IkReal x10838=((1.0)*x10824);
IkReal x10839=((1.0)*x10823);
IkReal x10840=(cj3*x10823);
IkReal x10841=(cj3*x10824);
IkReal x10842=(x10825+x10826);
evalcond[0]=(((x10823*x10833))+(((-1.0)*gconst5*r20*x10839))+(((-1.0)*r22*x10838)));
evalcond[1]=(((x10823*x10832))+(((-1.0)*x10834*x10839))+(((-1.0)*r02*x10838)));
evalcond[2]=((-1.0)+((x10823*x10828))+(((-1.0)*r12*x10838))+(((-1.0)*x10830*x10839)));
evalcond[3]=((((-1.0)*cj3*x10830*x10838))+((x10828*x10841))+((r10*x10835))+((r12*x10840))+((r11*x10827)));
evalcond[4]=((((-1.0)*sj3*x10828*x10838))+((r10*x10824*x10827))+((r10*x10837))+(((-1.0)*r12*sj3*x10839))+((r11*x10836)));
evalcond[5]=(((r21*x10827))+((x10833*x10841))+((r22*x10840))+((r20*x10835))+(((-1.0)*r20*x10836*x10838))+x10842);
evalcond[6]=((((-1.0)*x10829))+((x10832*x10841))+((r02*x10840))+(((-1.0)*cj3*x10834*x10838))+((r00*x10835))+((r01*x10827))+x10831);
evalcond[7]=((((-1.0)*r02*sj3*x10839))+(((-1.0)*sj3*x10832*x10838))+((r00*x10824*x10827))+((r01*x10836))+((r00*x10837))+x10842);
evalcond[8]=((((-1.0)*x10831))+(((-1.0)*sj3*x10833*x10838))+(((-1.0)*r22*sj3*x10839))+((r20*x10824*x10827))+((r20*x10837))+((r21*x10836))+x10829);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10843=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10843.valid){
continue;
}
CheckValue<IkReal> x10844 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10843.value)))+(x10844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10845=IKsin(j4);
IkReal x10846=IKcos(j4);
IkReal x10847=(cj2*sj1);
IkReal x10848=(cj1*sj2);
IkReal x10849=(gconst5*sj3);
IkReal x10850=(gconst4*r11);
IkReal x10851=(sj1*sj2);
IkReal x10852=(gconst5*r10);
IkReal x10853=(cj1*cj2);
IkReal x10854=(gconst4*r01);
IkReal x10855=(gconst4*r21);
IkReal x10856=(gconst5*r00);
IkReal x10857=(gconst4*sj3);
IkReal x10858=(cj3*gconst5);
IkReal x10859=(cj3*gconst4);
IkReal x10860=((1.0)*x10846);
IkReal x10861=((1.0)*x10845);
IkReal x10862=(cj3*x10845);
IkReal x10863=(cj3*x10846);
IkReal x10864=(x10847+x10848);
evalcond[0]=((((-1.0)*r22*x10860))+((x10845*x10855))+(((-1.0)*gconst5*r20*x10861)));
evalcond[1]=(((x10845*x10854))+(((-1.0)*x10856*x10861))+(((-1.0)*r02*x10860)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10860))+((x10845*x10850))+(((-1.0)*x10852*x10861)));
evalcond[3]=(((r12*x10862))+((r10*x10857))+((r11*x10849))+((x10850*x10863))+(((-1.0)*cj3*x10852*x10860)));
evalcond[4]=(((r11*x10858))+((r10*x10846*x10849))+((r10*x10859))+(((-1.0)*r12*sj3*x10861))+(((-1.0)*sj3*x10850*x10860)));
evalcond[5]=((((-1.0)*r20*x10858*x10860))+((x10855*x10863))+((r20*x10857))+((r21*x10849))+((r22*x10862))+x10864);
evalcond[6]=(((r01*x10849))+((x10854*x10863))+(((-1.0)*cj3*x10856*x10860))+((r00*x10857))+(((-1.0)*x10851))+((r02*x10862))+x10853);
evalcond[7]=(((r00*x10846*x10849))+((r01*x10858))+((r00*x10859))+(((-1.0)*r02*sj3*x10861))+(((-1.0)*sj3*x10854*x10860))+x10864);
evalcond[8]=((((-1.0)*sj3*x10855*x10860))+(((-1.0)*r22*sj3*x10861))+((r21*x10858))+((r20*x10846*x10849))+((r20*x10859))+(((-1.0)*x10853))+x10851);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10865=((-1.0)*r21);
CheckValue<IkReal> x10868 = IKatan2WithCheck(IkReal(x10865),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10868.valid){
continue;
}
IkReal x10866=((1.0)*(x10868.value));
IkReal x10867=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10866)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10866)));
IkReal gconst4=(x10865*x10867);
IkReal gconst5=((1.0)*r20*x10867);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10869=((-1.0)*r21);
CheckValue<IkReal> x10872 = IKatan2WithCheck(IkReal(x10869),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10872.valid){
continue;
}
IkReal x10870=((1.0)*(x10872.value));
IkReal x10871=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10870)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10870)));
IkReal gconst4=(x10869*x10871);
IkReal gconst5=((1.0)*r20*x10871);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10873=((-1.0)*r21);
CheckValue<IkReal> x10876 = IKatan2WithCheck(IkReal(x10873),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10876.valid){
continue;
}
IkReal x10874=((1.0)*(x10876.value));
IkReal x10875=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10874)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10874)));
IkReal gconst4=(x10873*x10875);
IkReal gconst5=((1.0)*r20*x10875);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10877=((-1.0)*r21);
CheckValue<IkReal> x10880 = IKatan2WithCheck(IkReal(x10877),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10880.valid){
continue;
}
IkReal x10878=((1.0)*(x10880.value));
IkReal x10879=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10878)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10878)));
IkReal gconst4=(x10877*x10879);
IkReal gconst5=((1.0)*r20*x10879);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10881=((-1.0)*r21);
CheckValue<IkReal> x10884 = IKatan2WithCheck(IkReal(x10881),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10884.valid){
continue;
}
IkReal x10882=((1.0)*(x10884.value));
IkReal x10883=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10882)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10882)));
IkReal gconst4=(x10881*x10883);
IkReal gconst5=((1.0)*r20*x10883);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10885=((-1.0)*r21);
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(x10885),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
IkReal x10886=((1.0)*(x10888.value));
IkReal x10887=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10886)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10886)));
IkReal gconst4=(x10885*x10887);
IkReal gconst5=((1.0)*r20*x10887);
IkReal x10889=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10893=IKPowWithIntegerCheck(x10889,-1);
if(!x10893.valid){
continue;
}
IkReal x10890=x10893.value;
IkReal x10891=((1.0)*x10890);
IkReal x10892=((((-1.0)*(r02*r02)))+(((-1.0)*x10891*(r01*r01)*(r21*r21)))+(((-1.0)*x10891*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10890)));
j4eval[0]=x10892;
j4eval[1]=r02;
j4eval[2]=x10889;
j4eval[3]=IKsign(x10892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10894=(gconst5*r00);
IkReal x10895=(gconst4*r01);
CheckValue<IkReal> x10896 = IKatan2WithCheck(IkReal(((((-1.0)*x10895))+x10894)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10896.valid){
continue;
}
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10894*x10894)))+(((-1.0)*(r02*r02)))+(((2.0)*x10894*x10895))+(((-1.0)*(x10895*x10895))))),-1);
if(!x10897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10896.value)+(((1.5707963267949)*(x10897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10898=IKsin(j4);
IkReal x10899=IKcos(j4);
IkReal x10900=(gconst4*r11);
IkReal x10901=((1.0)*cj1);
IkReal x10902=(gconst5*r10);
IkReal x10903=(gconst4*r01);
IkReal x10904=(gconst5*r00);
IkReal x10905=(gconst4*r21);
IkReal x10906=(gconst5*r20);
IkReal x10907=((1.0)*x10899);
IkReal x10908=((1.0)*x10898);
evalcond[0]=((((-1.0)*r22*x10907))+((x10898*x10905))+(((-1.0)*x10906*x10908)));
evalcond[1]=((((-1.0)*x10902*x10908))+(((-1.0)*r12*x10907))+((x10898*x10900)));
evalcond[2]=((((-1.0)*x10903*x10907))+((x10899*x10904))+(((-1.0)*r02*x10908)));
evalcond[3]=((-1.0)+(((-1.0)*x10904*x10908))+((x10898*x10903))+(((-1.0)*r02*x10907)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10908))+(((-1.0)*cj2*x10901))+((x10899*x10906))+(((-1.0)*x10905*x10907)));
evalcond[5]=((((-1.0)*x10900*x10907))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10901))+(((-1.0)*r12*x10908))+((x10899*x10902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10909=((1.0)*gconst5);
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10909))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
CheckValue<IkReal> x10911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10909))+(((-1.0)*gconst4*r10)))),-1);
if(!x10911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10910.value)+(((1.5707963267949)*(x10911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10912=IKsin(j4);
IkReal x10913=IKcos(j4);
IkReal x10914=(gconst4*r11);
IkReal x10915=((1.0)*cj1);
IkReal x10916=(gconst5*r10);
IkReal x10917=(gconst4*r01);
IkReal x10918=(gconst5*r00);
IkReal x10919=(gconst4*r21);
IkReal x10920=(gconst5*r20);
IkReal x10921=((1.0)*x10913);
IkReal x10922=((1.0)*x10912);
evalcond[0]=((((-1.0)*x10920*x10922))+(((-1.0)*r22*x10921))+((x10912*x10919)));
evalcond[1]=((((-1.0)*r12*x10921))+((x10912*x10914))+(((-1.0)*x10916*x10922)));
evalcond[2]=(((x10913*x10918))+(((-1.0)*r02*x10922))+(((-1.0)*x10917*x10921)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10921))+(((-1.0)*x10918*x10922))+((x10912*x10917)));
evalcond[4]=(((x10913*x10920))+(((-1.0)*r22*x10922))+((sj1*sj2))+(((-1.0)*x10919*x10921))+(((-1.0)*cj2*x10915)));
evalcond[5]=((((-1.0)*sj2*x10915))+((x10913*x10916))+(((-1.0)*x10914*x10921))+(((-1.0)*r12*x10922))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10923 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10923.valid){
continue;
}
CheckValue<IkReal> x10924=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10923.value)+(((1.5707963267949)*(x10924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10925=IKsin(j4);
IkReal x10926=IKcos(j4);
IkReal x10927=(gconst4*r11);
IkReal x10928=((1.0)*cj1);
IkReal x10929=(gconst5*r10);
IkReal x10930=(gconst4*r01);
IkReal x10931=(gconst5*r00);
IkReal x10932=(gconst4*r21);
IkReal x10933=(gconst5*r20);
IkReal x10934=((1.0)*x10926);
IkReal x10935=((1.0)*x10925);
evalcond[0]=((((-1.0)*r22*x10934))+((x10925*x10932))+(((-1.0)*x10933*x10935)));
evalcond[1]=((((-1.0)*x10929*x10935))+(((-1.0)*r12*x10934))+((x10925*x10927)));
evalcond[2]=(((x10926*x10931))+(((-1.0)*r02*x10935))+(((-1.0)*x10930*x10934)));
evalcond[3]=((-1.0)+(((-1.0)*x10931*x10935))+(((-1.0)*r02*x10934))+((x10925*x10930)));
evalcond[4]=((((-1.0)*r22*x10935))+((x10926*x10933))+((sj1*sj2))+(((-1.0)*cj2*x10928))+(((-1.0)*x10932*x10934)));
evalcond[5]=((((-1.0)*sj2*x10928))+(((-1.0)*r12*x10935))+((x10926*x10929))+(((-1.0)*x10927*x10934))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10936=((-1.0)*r21);
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal(x10936),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
IkReal x10937=((1.0)*(x10939.value));
IkReal x10938=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10937)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10937)));
IkReal gconst4=(x10936*x10938);
IkReal gconst5=((1.0)*r20*x10938);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10940=((-1.0)*r21);
CheckValue<IkReal> x10943 = IKatan2WithCheck(IkReal(x10940),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10943.valid){
continue;
}
IkReal x10941=((1.0)*(x10943.value));
IkReal x10942=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10941)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10941)));
IkReal gconst4=(x10940*x10942);
IkReal gconst5=((1.0)*r20*x10942);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10944=((-1.0)*r21);
CheckValue<IkReal> x10947 = IKatan2WithCheck(IkReal(x10944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10947.valid){
continue;
}
IkReal x10945=((1.0)*(x10947.value));
IkReal x10946=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10945)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10945)));
IkReal gconst4=(x10944*x10946);
IkReal gconst5=((1.0)*r20*x10946);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10948=(gconst4*r01);
IkReal x10949=(gconst5*r00);
CheckValue<IkReal> x10950 = IKatan2WithCheck(IkReal(((((-1.0)*x10949))+x10948)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10950.valid){
continue;
}
CheckValue<IkReal> x10951=IKPowWithIntegerCheck(IKsign(((x10948*x10948)+(((-2.0)*x10948*x10949))+(r02*r02)+(x10949*x10949))),-1);
if(!x10951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10950.value)+(((1.5707963267949)*(x10951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10952=IKcos(j4);
IkReal x10953=IKsin(j4);
IkReal x10954=(gconst4*r11);
IkReal x10955=(gconst5*r10);
IkReal x10956=((1.0)*cj1);
IkReal x10957=(gconst5*r00);
IkReal x10958=(gconst5*r20);
IkReal x10959=((1.0)*x10952);
IkReal x10960=(gconst4*x10952);
IkReal x10961=((1.0)*x10953);
IkReal x10962=(gconst4*x10953);
evalcond[0]=(((r02*x10953))+((r01*x10960))+(((-1.0)*x10957*x10959)));
evalcond[1]=((((-1.0)*r22*x10959))+(((-1.0)*x10958*x10961))+((r21*x10962)));
evalcond[2]=(((x10953*x10954))+(((-1.0)*r12*x10959))+(((-1.0)*x10955*x10961)));
evalcond[3]=((-1.0)+((r01*x10962))+(((-1.0)*x10957*x10961))+(((-1.0)*r02*x10959)));
evalcond[4]=((((-1.0)*cj2*x10956))+((r22*x10953))+((sj1*sj2))+((r21*x10960))+(((-1.0)*x10958*x10959)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10956))+(((-1.0)*x10955*x10959))+((r12*x10953))+((x10952*x10954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10963=((1.0)*gconst5);
CheckValue<IkReal> x10964 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10963))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10964.valid){
continue;
}
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10963))+(((-1.0)*gconst4*r10)))),-1);
if(!x10965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10964.value)+(((1.5707963267949)*(x10965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10966=IKcos(j4);
IkReal x10967=IKsin(j4);
IkReal x10968=(gconst4*r11);
IkReal x10969=(gconst5*r10);
IkReal x10970=((1.0)*cj1);
IkReal x10971=(gconst5*r00);
IkReal x10972=(gconst5*r20);
IkReal x10973=((1.0)*x10966);
IkReal x10974=(gconst4*x10966);
IkReal x10975=((1.0)*x10967);
IkReal x10976=(gconst4*x10967);
evalcond[0]=((((-1.0)*x10971*x10973))+((r02*x10967))+((r01*x10974)));
evalcond[1]=((((-1.0)*x10972*x10975))+(((-1.0)*r22*x10973))+((r21*x10976)));
evalcond[2]=(((x10967*x10968))+(((-1.0)*x10969*x10975))+(((-1.0)*r12*x10973)));
evalcond[3]=((-1.0)+(((-1.0)*x10971*x10975))+((r01*x10976))+(((-1.0)*r02*x10973)));
evalcond[4]=((((-1.0)*cj2*x10970))+((r22*x10967))+((sj1*sj2))+(((-1.0)*x10972*x10973))+((r21*x10974)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10966*x10968))+(((-1.0)*sj2*x10970))+((r12*x10967))+(((-1.0)*x10969*x10973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10977 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10977.valid){
continue;
}
CheckValue<IkReal> x10978=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10977.value)+(((1.5707963267949)*(x10978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10979=IKcos(j4);
IkReal x10980=IKsin(j4);
IkReal x10981=(gconst4*r11);
IkReal x10982=(gconst5*r10);
IkReal x10983=((1.0)*cj1);
IkReal x10984=(gconst5*r00);
IkReal x10985=(gconst5*r20);
IkReal x10986=((1.0)*x10979);
IkReal x10987=(gconst4*x10979);
IkReal x10988=((1.0)*x10980);
IkReal x10989=(gconst4*x10980);
evalcond[0]=(((r01*x10987))+(((-1.0)*x10984*x10986))+((r02*x10980)));
evalcond[1]=(((r21*x10989))+(((-1.0)*r22*x10986))+(((-1.0)*x10985*x10988)));
evalcond[2]=(((x10980*x10981))+(((-1.0)*x10982*x10988))+(((-1.0)*r12*x10986)));
evalcond[3]=((-1.0)+((r01*x10989))+(((-1.0)*x10984*x10988))+(((-1.0)*r02*x10986)));
evalcond[4]=(((r22*x10980))+((r21*x10987))+(((-1.0)*cj2*x10983))+((sj1*sj2))+(((-1.0)*x10985*x10986)));
evalcond[5]=(((x10979*x10981))+((r12*x10980))+(((-1.0)*sj2*x10983))+(((-1.0)*cj2*sj1))+(((-1.0)*x10982*x10986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10990=((-1.0)*r21);
CheckValue<IkReal> x10993 = IKatan2WithCheck(IkReal(x10990),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10993.valid){
continue;
}
IkReal x10991=((1.0)*(x10993.value));
IkReal x10992=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10991)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10991)));
IkReal gconst4=(x10990*x10992);
IkReal gconst5=((1.0)*r20*x10992);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10994=((-1.0)*r21);
CheckValue<IkReal> x10997 = IKatan2WithCheck(IkReal(x10994),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10997.valid){
continue;
}
IkReal x10995=((1.0)*(x10997.value));
IkReal x10996=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10995)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10995)));
IkReal gconst4=(x10994*x10996);
IkReal gconst5=((1.0)*r20*x10996);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10998=((-1.0)*r21);
CheckValue<IkReal> x11001 = IKatan2WithCheck(IkReal(x10998),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11001.valid){
continue;
}
IkReal x10999=((1.0)*(x11001.value));
IkReal x11000=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10999)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10999)));
IkReal gconst4=(x10998*x11000);
IkReal gconst5=((1.0)*r20*x11000);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11002=(gconst4*r01);
IkReal x11003=(gconst5*r00);
CheckValue<IkReal> x11004 = IKatan2WithCheck(IkReal((x11002+(((-1.0)*x11003)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11004.valid){
continue;
}
CheckValue<IkReal> x11005=IKPowWithIntegerCheck(IKsign(((x11003*x11003)+(x11002*x11002)+(((-2.0)*x11002*x11003))+(r02*r02))),-1);
if(!x11005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11004.value)+(((1.5707963267949)*(x11005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11006=IKcos(j4);
IkReal x11007=IKsin(j4);
IkReal x11008=(gconst4*r11);
IkReal x11009=(gconst5*r10);
IkReal x11010=(gconst5*r00);
IkReal x11011=(gconst5*r20);
IkReal x11012=((1.0)*x11006);
IkReal x11013=(gconst4*x11006);
IkReal x11014=((1.0)*x11007);
IkReal x11015=(gconst4*x11007);
evalcond[0]=(((r02*x11007))+(((-1.0)*x11010*x11012))+((r01*x11013)));
evalcond[1]=((((-1.0)*r22*x11012))+(((-1.0)*x11011*x11014))+((r21*x11015)));
evalcond[2]=(((x11007*x11008))+(((-1.0)*r12*x11012))+(((-1.0)*x11009*x11014)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11012))+(((-1.0)*x11010*x11014))+((r01*x11015)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11011*x11012))+((cj1*sj2))+((r21*x11013))+((r22*x11007)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11007))+((x11006*x11008))+(((-1.0)*x11009*x11012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11016=((1.0)*gconst5);
CheckValue<IkReal> x11017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11016))+(((-1.0)*gconst4*r10)))),-1);
if(!x11017.valid){
continue;
}
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11017.value)))+(x11018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11019=IKcos(j4);
IkReal x11020=IKsin(j4);
IkReal x11021=(gconst4*r11);
IkReal x11022=(gconst5*r10);
IkReal x11023=(gconst5*r00);
IkReal x11024=(gconst5*r20);
IkReal x11025=((1.0)*x11019);
IkReal x11026=(gconst4*x11019);
IkReal x11027=((1.0)*x11020);
IkReal x11028=(gconst4*x11020);
evalcond[0]=(((r01*x11026))+(((-1.0)*x11023*x11025))+((r02*x11020)));
evalcond[1]=(((r21*x11028))+(((-1.0)*r22*x11025))+(((-1.0)*x11024*x11027)));
evalcond[2]=(((x11020*x11021))+(((-1.0)*x11022*x11027))+(((-1.0)*r12*x11025)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11025))+((r01*x11028))+(((-1.0)*x11023*x11027)));
evalcond[4]=(((cj2*sj1))+((r21*x11026))+((cj1*sj2))+((r22*x11020))+(((-1.0)*x11024*x11025)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11019*x11021))+((r12*x11020))+(((-1.0)*x11022*x11025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11029 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11029.valid){
continue;
}
CheckValue<IkReal> x11030=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11029.value)+(((1.5707963267949)*(x11030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11031=IKcos(j4);
IkReal x11032=IKsin(j4);
IkReal x11033=(gconst4*r11);
IkReal x11034=(gconst5*r10);
IkReal x11035=(gconst5*r00);
IkReal x11036=(gconst5*r20);
IkReal x11037=((1.0)*x11031);
IkReal x11038=(gconst4*x11031);
IkReal x11039=((1.0)*x11032);
IkReal x11040=(gconst4*x11032);
evalcond[0]=(((r01*x11038))+(((-1.0)*x11035*x11037))+((r02*x11032)));
evalcond[1]=((((-1.0)*r22*x11037))+(((-1.0)*x11036*x11039))+((r21*x11040)));
evalcond[2]=((((-1.0)*x11034*x11039))+(((-1.0)*r12*x11037))+((x11032*x11033)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11037))+((r01*x11040))+(((-1.0)*x11035*x11039)));
evalcond[4]=(((cj2*sj1))+((r21*x11038))+((cj1*sj2))+(((-1.0)*x11036*x11037))+((r22*x11032)));
evalcond[5]=((((-1.0)*x11034*x11037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11032))+((x11031*x11033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11041=((-1.0)*r21);
CheckValue<IkReal> x11044 = IKatan2WithCheck(IkReal(x11041),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11044.valid){
continue;
}
IkReal x11042=((1.0)*(x11044.value));
IkReal x11043=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11042)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11042)));
IkReal gconst4=(x11041*x11043);
IkReal gconst5=((1.0)*r20*x11043);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11045=((-1.0)*r21);
CheckValue<IkReal> x11048 = IKatan2WithCheck(IkReal(x11045),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11048.valid){
continue;
}
IkReal x11046=((1.0)*(x11048.value));
IkReal x11047=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11046)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11046)));
IkReal gconst4=(x11045*x11047);
IkReal gconst5=((1.0)*r20*x11047);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11049=((-1.0)*r21);
CheckValue<IkReal> x11052 = IKatan2WithCheck(IkReal(x11049),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11052.valid){
continue;
}
IkReal x11050=((1.0)*(x11052.value));
IkReal x11051=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11050)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11050)));
IkReal gconst4=(x11049*x11051);
IkReal gconst5=((1.0)*r20*x11051);
IkReal x11053=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11057=IKPowWithIntegerCheck(x11053,-1);
if(!x11057.valid){
continue;
}
IkReal x11054=x11057.value;
IkReal x11055=((1.0)*x11054);
IkReal x11056=((((-1.0)*x11055*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11054))+(((-1.0)*x11055*(r00*r00)*(r20*r20))));
j4eval[0]=x11056;
j4eval[1]=r02;
j4eval[2]=x11053;
j4eval[3]=IKsign(x11056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11058=(gconst5*r00);
IkReal x11059=(gconst4*r01);
CheckValue<IkReal> x11060=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11058*x11058)))+(((-1.0)*(x11059*x11059)))+(((2.0)*x11058*x11059)))),-1);
if(!x11060.valid){
continue;
}
CheckValue<IkReal> x11061 = IKatan2WithCheck(IkReal((x11058+(((-1.0)*x11059)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11060.value)))+(x11061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11062=IKsin(j4);
IkReal x11063=IKcos(j4);
IkReal x11064=(gconst4*r11);
IkReal x11065=(gconst5*r10);
IkReal x11066=(gconst4*r01);
IkReal x11067=(gconst5*r00);
IkReal x11068=(gconst4*r21);
IkReal x11069=(gconst5*r20);
IkReal x11070=((1.0)*x11063);
IkReal x11071=((1.0)*x11062);
evalcond[0]=(((x11062*x11068))+(((-1.0)*r22*x11070))+(((-1.0)*x11069*x11071)));
evalcond[1]=(((x11062*x11064))+(((-1.0)*x11065*x11071))+(((-1.0)*r12*x11070)));
evalcond[2]=(((x11063*x11067))+(((-1.0)*r02*x11071))+(((-1.0)*x11066*x11070)));
evalcond[3]=((-1.0)+((x11062*x11066))+(((-1.0)*x11067*x11071))+(((-1.0)*r02*x11070)));
evalcond[4]=(((cj2*sj1))+((x11063*x11069))+((cj1*sj2))+(((-1.0)*x11068*x11070))+(((-1.0)*r22*x11071)));
evalcond[5]=(((x11063*x11065))+(((-1.0)*x11064*x11070))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11072=((1.0)*gconst5);
CheckValue<IkReal> x11073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11072))+(((-1.0)*gconst4*r10)))),-1);
if(!x11073.valid){
continue;
}
CheckValue<IkReal> x11074 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11072))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11073.value)))+(x11074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11075=IKsin(j4);
IkReal x11076=IKcos(j4);
IkReal x11077=(gconst4*r11);
IkReal x11078=(gconst5*r10);
IkReal x11079=(gconst4*r01);
IkReal x11080=(gconst5*r00);
IkReal x11081=(gconst4*r21);
IkReal x11082=(gconst5*r20);
IkReal x11083=((1.0)*x11076);
IkReal x11084=((1.0)*x11075);
evalcond[0]=((((-1.0)*x11082*x11084))+(((-1.0)*r22*x11083))+((x11075*x11081)));
evalcond[1]=((((-1.0)*x11078*x11084))+((x11075*x11077))+(((-1.0)*r12*x11083)));
evalcond[2]=((((-1.0)*r02*x11084))+((x11076*x11080))+(((-1.0)*x11079*x11083)));
evalcond[3]=((-1.0)+(((-1.0)*x11080*x11084))+(((-1.0)*r02*x11083))+((x11075*x11079)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11081*x11083))+((cj1*sj2))+(((-1.0)*r22*x11084))+((x11076*x11082)));
evalcond[5]=((((-1.0)*x11077*x11083))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11084))+((x11076*x11078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11085 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11085.valid){
continue;
}
CheckValue<IkReal> x11086=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11085.value)+(((1.5707963267949)*(x11086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11087=IKsin(j4);
IkReal x11088=IKcos(j4);
IkReal x11089=(gconst4*r11);
IkReal x11090=(gconst5*r10);
IkReal x11091=(gconst4*r01);
IkReal x11092=(gconst5*r00);
IkReal x11093=(gconst4*r21);
IkReal x11094=(gconst5*r20);
IkReal x11095=((1.0)*x11088);
IkReal x11096=((1.0)*x11087);
evalcond[0]=((((-1.0)*x11094*x11096))+(((-1.0)*r22*x11095))+((x11087*x11093)));
evalcond[1]=((((-1.0)*r12*x11095))+((x11087*x11089))+(((-1.0)*x11090*x11096)));
evalcond[2]=((((-1.0)*x11091*x11095))+(((-1.0)*r02*x11096))+((x11088*x11092)));
evalcond[3]=((-1.0)+(((-1.0)*x11092*x11096))+(((-1.0)*r02*x11095))+((x11087*x11091)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11096))+((cj1*sj2))+(((-1.0)*x11093*x11095))+((x11088*x11094)));
evalcond[5]=((((-1.0)*r12*x11096))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11088*x11090))+(((-1.0)*x11089*x11095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11097=gconst4*gconst4;
IkReal x11098=gconst5*gconst5;
IkReal x11099=(r01*r20);
IkReal x11100=(gconst4*sj3);
IkReal x11101=(r01*r21);
IkReal x11102=((1.0)*cj3);
IkReal x11103=(r00*r21);
IkReal x11104=(r00*r20);
IkReal x11105=(cj3*gconst4*gconst5);
IkReal x11106=((1.0)*x11098);
CheckValue<IkReal> x11107 = IKatan2WithCheck(IkReal((((r00*r22*x11100))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11100*x11101))+((sj3*x11097*x11103))+(((-1.0)*gconst5*x11100*x11104))+(((-1.0)*sj3*x11099*x11106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11107.valid){
continue;
}
CheckValue<IkReal> x11108=IKPowWithIntegerCheck(IKsign((((x11103*x11105))+(((-1.0)*r02*r22*x11102))+(((-1.0)*x11097*x11101*x11102))+(((-1.0)*x11098*x11102*x11104))+((x11099*x11105)))),-1);
if(!x11108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11107.value)+(((1.5707963267949)*(x11108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11109=IKsin(j4);
IkReal x11110=IKcos(j4);
IkReal x11111=(sj1*sj2);
IkReal x11112=(gconst5*sj3);
IkReal x11113=(gconst4*r11);
IkReal x11114=(gconst5*r10);
IkReal x11115=((1.0)*cj1);
IkReal x11116=(gconst4*r01);
IkReal x11117=(cj2*sj1);
IkReal x11118=(gconst5*r00);
IkReal x11119=(gconst4*sj3);
IkReal x11120=(cj3*gconst5);
IkReal x11121=(cj3*gconst4);
IkReal x11122=(gconst4*r21);
IkReal x11123=(cj2*x11115);
IkReal x11124=((1.0)*x11110);
IkReal x11125=((1.0)*x11109);
IkReal x11126=(cj3*x11109);
IkReal x11127=(cj3*x11110);
evalcond[0]=((((-1.0)*gconst5*r20*x11125))+((x11109*x11122))+(((-1.0)*r22*x11124)));
evalcond[1]=((((-1.0)*r12*x11124))+(((-1.0)*x11114*x11125))+((x11109*x11113)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11124))+(((-1.0)*x11118*x11125))+((x11109*x11116)));
evalcond[3]=((((-1.0)*cj3*x11118*x11124))+((r02*x11126))+((x11116*x11127))+((r00*x11119))+((r01*x11112)));
evalcond[4]=((((-1.0)*r02*sj3*x11125))+(((-1.0)*sj3*x11116*x11124))+((r00*x11110*x11112))+((r00*x11121))+((r01*x11120)));
evalcond[5]=(((r21*x11110*x11121))+(((-1.0)*r20*x11120*x11124))+((cj1*sj2))+((r22*x11126))+x11117+((r21*x11112))+((r20*x11119)));
evalcond[6]=((((-1.0)*x11123))+(((-1.0)*cj3*x11114*x11124))+((r10*x11119))+((r12*x11126))+x11111+((x11113*x11127))+((r11*x11112)));
evalcond[7]=((((-1.0)*x11123))+((r21*x11120))+(((-1.0)*r21*x11119*x11124))+x11111+(((-1.0)*r22*sj3*x11125))+((r20*x11110*x11112))+((r20*x11121)));
evalcond[8]=((((-1.0)*x11117))+((r10*x11110*x11112))+(((-1.0)*r12*sj3*x11125))+((r10*x11121))+((r11*x11120))+(((-1.0)*sj2*x11115))+(((-1.0)*sj3*x11113*x11124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11128=((1.0)*gconst5);
CheckValue<IkReal> x11129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11128))+(((-1.0)*gconst4*r10)))),-1);
if(!x11129.valid){
continue;
}
CheckValue<IkReal> x11130 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11128))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11129.value)))+(x11130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11131=IKsin(j4);
IkReal x11132=IKcos(j4);
IkReal x11133=(sj1*sj2);
IkReal x11134=(gconst5*sj3);
IkReal x11135=(gconst4*r11);
IkReal x11136=(gconst5*r10);
IkReal x11137=((1.0)*cj1);
IkReal x11138=(gconst4*r01);
IkReal x11139=(cj2*sj1);
IkReal x11140=(gconst5*r00);
IkReal x11141=(gconst4*sj3);
IkReal x11142=(cj3*gconst5);
IkReal x11143=(cj3*gconst4);
IkReal x11144=(gconst4*r21);
IkReal x11145=(cj2*x11137);
IkReal x11146=((1.0)*x11132);
IkReal x11147=((1.0)*x11131);
IkReal x11148=(cj3*x11131);
IkReal x11149=(cj3*x11132);
evalcond[0]=((((-1.0)*r22*x11146))+((x11131*x11144))+(((-1.0)*gconst5*r20*x11147)));
evalcond[1]=(((x11131*x11135))+(((-1.0)*x11136*x11147))+(((-1.0)*r12*x11146)));
evalcond[2]=((-1.0)+(((-1.0)*x11140*x11147))+((x11131*x11138))+(((-1.0)*r02*x11146)));
evalcond[3]=(((r00*x11141))+(((-1.0)*cj3*x11140*x11146))+((r02*x11148))+((x11138*x11149))+((r01*x11134)));
evalcond[4]=(((r01*x11142))+((r00*x11132*x11134))+((r00*x11143))+(((-1.0)*sj3*x11138*x11146))+(((-1.0)*r02*sj3*x11147)));
evalcond[5]=(((r21*x11132*x11143))+((r22*x11148))+((cj1*sj2))+((r21*x11134))+(((-1.0)*r20*x11142*x11146))+x11139+((r20*x11141)));
evalcond[6]=((((-1.0)*cj3*x11136*x11146))+((x11135*x11149))+x11133+((r12*x11148))+((r10*x11141))+((r11*x11134))+(((-1.0)*x11145)));
evalcond[7]=(((r21*x11142))+(((-1.0)*r21*x11141*x11146))+((r20*x11132*x11134))+x11133+((r20*x11143))+(((-1.0)*r22*sj3*x11147))+(((-1.0)*x11145)));
evalcond[8]=((((-1.0)*x11139))+((r11*x11142))+(((-1.0)*r12*sj3*x11147))+(((-1.0)*sj3*x11135*x11146))+((r10*x11143))+(((-1.0)*sj2*x11137))+((r10*x11132*x11134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11150 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11150.valid){
continue;
}
CheckValue<IkReal> x11151=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11150.value)+(((1.5707963267949)*(x11151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11152=IKsin(j4);
IkReal x11153=IKcos(j4);
IkReal x11154=(sj1*sj2);
IkReal x11155=(gconst5*sj3);
IkReal x11156=(gconst4*r11);
IkReal x11157=(gconst5*r10);
IkReal x11158=((1.0)*cj1);
IkReal x11159=(gconst4*r01);
IkReal x11160=(cj2*sj1);
IkReal x11161=(gconst5*r00);
IkReal x11162=(gconst4*sj3);
IkReal x11163=(cj3*gconst5);
IkReal x11164=(cj3*gconst4);
IkReal x11165=(gconst4*r21);
IkReal x11166=(cj2*x11158);
IkReal x11167=((1.0)*x11153);
IkReal x11168=((1.0)*x11152);
IkReal x11169=(cj3*x11152);
IkReal x11170=(cj3*x11153);
evalcond[0]=((((-1.0)*r22*x11167))+((x11152*x11165))+(((-1.0)*gconst5*r20*x11168)));
evalcond[1]=((((-1.0)*x11157*x11168))+((x11152*x11156))+(((-1.0)*r12*x11167)));
evalcond[2]=((-1.0)+(((-1.0)*x11161*x11168))+((x11152*x11159))+(((-1.0)*r02*x11167)));
evalcond[3]=(((r01*x11155))+((r00*x11162))+((x11159*x11170))+((r02*x11169))+(((-1.0)*cj3*x11161*x11167)));
evalcond[4]=(((r01*x11163))+((r00*x11164))+(((-1.0)*r02*sj3*x11168))+(((-1.0)*sj3*x11159*x11167))+((r00*x11153*x11155)));
evalcond[5]=(((r20*x11162))+((r21*x11155))+(((-1.0)*r20*x11163*x11167))+((cj1*sj2))+x11160+((r21*x11153*x11164))+((r22*x11169)));
evalcond[6]=(((r12*x11169))+(((-1.0)*x11166))+((r11*x11155))+x11154+(((-1.0)*cj3*x11157*x11167))+((x11156*x11170))+((r10*x11162)));
evalcond[7]=(((r20*x11153*x11155))+((r20*x11164))+(((-1.0)*r21*x11162*x11167))+(((-1.0)*x11166))+x11154+((r21*x11163))+(((-1.0)*r22*sj3*x11168)));
evalcond[8]=(((r10*x11153*x11155))+((r11*x11163))+(((-1.0)*sj3*x11156*x11167))+(((-1.0)*x11160))+(((-1.0)*r12*sj3*x11168))+(((-1.0)*sj2*x11158))+((r10*x11164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11171=((-1.0)*r21);
CheckValue<IkReal> x11174 = IKatan2WithCheck(IkReal(x11171),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11174.valid){
continue;
}
IkReal x11172=((1.0)*(x11174.value));
IkReal x11173=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11172)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11172)));
IkReal gconst4=(x11171*x11173);
IkReal gconst5=((1.0)*r20*x11173);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11175=((-1.0)*r21);
CheckValue<IkReal> x11178 = IKatan2WithCheck(IkReal(x11175),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11178.valid){
continue;
}
IkReal x11176=((1.0)*(x11178.value));
IkReal x11177=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11176)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11176)));
IkReal gconst4=(x11175*x11177);
IkReal gconst5=((1.0)*r20*x11177);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11179=((-1.0)*r21);
CheckValue<IkReal> x11182 = IKatan2WithCheck(IkReal(x11179),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11182.valid){
continue;
}
IkReal x11180=((1.0)*(x11182.value));
IkReal x11181=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11180)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11180)));
IkReal gconst4=(x11179*x11181);
IkReal gconst5=((1.0)*r20*x11181);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11183=((-1.0)*r21);
CheckValue<IkReal> x11186 = IKatan2WithCheck(IkReal(x11183),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11186.valid){
continue;
}
IkReal x11184=((1.0)*(x11186.value));
IkReal x11185=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11184)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11184)));
IkReal gconst4=(x11183*x11185);
IkReal gconst5=((1.0)*r20*x11185);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11187=((-1.0)*r21);
CheckValue<IkReal> x11190 = IKatan2WithCheck(IkReal(x11187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11190.valid){
continue;
}
IkReal x11188=((1.0)*(x11190.value));
IkReal x11189=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11188)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11188)));
IkReal gconst4=(x11187*x11189);
IkReal gconst5=((1.0)*r20*x11189);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11191=((-1.0)*r21);
CheckValue<IkReal> x11194 = IKatan2WithCheck(IkReal(x11191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11194.valid){
continue;
}
IkReal x11192=((1.0)*(x11194.value));
IkReal x11193=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11192)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11192)));
IkReal gconst4=(x11191*x11193);
IkReal gconst5=((1.0)*r20*x11193);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11195=(gconst5*r00);
IkReal x11196=(gconst4*r01);
CheckValue<IkReal> x11197 = IKatan2WithCheck(IkReal((x11195+(((-1.0)*x11196)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11197.valid){
continue;
}
CheckValue<IkReal> x11198=IKPowWithIntegerCheck(IKsign(((x11195*x11195)+(r02*r02)+(((-2.0)*x11195*x11196))+(x11196*x11196))),-1);
if(!x11198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11197.value)+(((1.5707963267949)*(x11198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11199=IKsin(j4);
IkReal x11200=IKcos(j4);
IkReal x11201=(gconst4*r11);
IkReal x11202=(gconst5*r10);
IkReal x11203=(gconst4*r01);
IkReal x11204=(gconst5*r00);
IkReal x11205=(gconst4*r21);
IkReal x11206=(gconst5*r20);
IkReal x11207=((1.0)*x11200);
IkReal x11208=((1.0)*x11199);
evalcond[0]=((((-1.0)*r22*x11207))+(((-1.0)*x11206*x11208))+((x11199*x11205)));
evalcond[1]=((((-1.0)*r12*x11207))+((x11199*x11201))+(((-1.0)*x11202*x11208)));
evalcond[2]=((((-1.0)*x11203*x11207))+((x11200*x11204))+(((-1.0)*r02*x11208)));
evalcond[3]=((1.0)+((x11199*x11203))+(((-1.0)*r02*x11207))+(((-1.0)*x11204*x11208)));
evalcond[4]=(((cj2*sj1))+((x11200*x11202))+((cj1*sj2))+(((-1.0)*r12*x11208))+(((-1.0)*x11201*x11207)));
evalcond[5]=((((-1.0)*r22*x11208))+((x11200*x11206))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11205*x11207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11209=((1.0)*gconst5);
CheckValue<IkReal> x11210 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11209))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11210.valid){
continue;
}
CheckValue<IkReal> x11211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11209))+(((-1.0)*gconst4*r20)))),-1);
if(!x11211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11210.value)+(((1.5707963267949)*(x11211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11212=IKsin(j4);
IkReal x11213=IKcos(j4);
IkReal x11214=(gconst4*r11);
IkReal x11215=(gconst5*r10);
IkReal x11216=(gconst4*r01);
IkReal x11217=(gconst5*r00);
IkReal x11218=(gconst4*r21);
IkReal x11219=(gconst5*r20);
IkReal x11220=((1.0)*x11213);
IkReal x11221=((1.0)*x11212);
evalcond[0]=(((x11212*x11218))+(((-1.0)*x11219*x11221))+(((-1.0)*r22*x11220)));
evalcond[1]=(((x11212*x11214))+(((-1.0)*x11215*x11221))+(((-1.0)*r12*x11220)));
evalcond[2]=((((-1.0)*x11216*x11220))+((x11213*x11217))+(((-1.0)*r02*x11221)));
evalcond[3]=((1.0)+((x11212*x11216))+(((-1.0)*x11217*x11221))+(((-1.0)*r02*x11220)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11214*x11220))+((cj1*sj2))+((x11213*x11215))+(((-1.0)*r12*x11221)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11218*x11220))+((x11213*x11219))+(((-1.0)*r22*x11221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11222=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11222.valid){
continue;
}
CheckValue<IkReal> x11223 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11222.value)))+(x11223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11224=IKsin(j4);
IkReal x11225=IKcos(j4);
IkReal x11226=(gconst4*r11);
IkReal x11227=(gconst5*r10);
IkReal x11228=(gconst4*r01);
IkReal x11229=(gconst5*r00);
IkReal x11230=(gconst4*r21);
IkReal x11231=(gconst5*r20);
IkReal x11232=((1.0)*x11225);
IkReal x11233=((1.0)*x11224);
evalcond[0]=((((-1.0)*x11231*x11233))+((x11224*x11230))+(((-1.0)*r22*x11232)));
evalcond[1]=(((x11224*x11226))+(((-1.0)*r12*x11232))+(((-1.0)*x11227*x11233)));
evalcond[2]=((((-1.0)*r02*x11233))+(((-1.0)*x11228*x11232))+((x11225*x11229)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11232))+((x11224*x11228))+(((-1.0)*x11229*x11233)));
evalcond[4]=((((-1.0)*x11226*x11232))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11233))+((x11225*x11227)));
evalcond[5]=((((-1.0)*x11230*x11232))+((x11225*x11231))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11234=((-1.0)*r21);
CheckValue<IkReal> x11237 = IKatan2WithCheck(IkReal(x11234),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11237.valid){
continue;
}
IkReal x11235=((1.0)*(x11237.value));
IkReal x11236=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11235)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11235)));
IkReal gconst4=(x11234*x11236);
IkReal gconst5=((1.0)*r20*x11236);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11238=((-1.0)*r21);
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal(x11238),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
IkReal x11239=((1.0)*(x11241.value));
IkReal x11240=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11239)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11239)));
IkReal gconst4=(x11238*x11240);
IkReal gconst5=((1.0)*r20*x11240);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11242=((-1.0)*r21);
CheckValue<IkReal> x11245 = IKatan2WithCheck(IkReal(x11242),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11245.valid){
continue;
}
IkReal x11243=((1.0)*(x11245.value));
IkReal x11244=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11243)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11243)));
IkReal gconst4=(x11242*x11244);
IkReal gconst5=((1.0)*r20*x11244);
IkReal x11246=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11250=IKPowWithIntegerCheck(x11246,-1);
if(!x11250.valid){
continue;
}
IkReal x11247=x11250.value;
IkReal x11248=((1.0)*x11247);
IkReal x11249=((((-2.0)*r00*r01*r20*r21*x11247))+(((-1.0)*x11248*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11248*(r00*r00)*(r20*r20))));
j4eval[0]=x11249;
j4eval[1]=IKsign(x11249);
j4eval[2]=r02;
j4eval[3]=x11246;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11251=(gconst4*r01);
IkReal x11252=(gconst5*r00);
CheckValue<IkReal> x11253 = IKatan2WithCheck(IkReal(((((-1.0)*x11252))+x11251)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11253.valid){
continue;
}
CheckValue<IkReal> x11254=IKPowWithIntegerCheck(IKsign(((((2.0)*x11251*x11252))+(((-1.0)*(x11251*x11251)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11252*x11252))))),-1);
if(!x11254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11253.value)+(((1.5707963267949)*(x11254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11255=IKcos(j4);
IkReal x11256=IKsin(j4);
IkReal x11257=(gconst4*r11);
IkReal x11258=(gconst5*r10);
IkReal x11259=(gconst5*r00);
IkReal x11260=(gconst5*r20);
IkReal x11261=((1.0)*x11255);
IkReal x11262=(gconst4*x11255);
IkReal x11263=((1.0)*x11256);
IkReal x11264=(gconst4*x11256);
evalcond[0]=(((r02*x11256))+(((-1.0)*x11259*x11261))+((r01*x11262)));
evalcond[1]=((((-1.0)*x11260*x11263))+((r21*x11264))+(((-1.0)*r22*x11261)));
evalcond[2]=(((x11256*x11257))+(((-1.0)*r12*x11261))+(((-1.0)*x11258*x11263)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11261))+(((-1.0)*x11259*x11263))+((r01*x11264)));
evalcond[4]=(((x11255*x11257))+((cj2*sj1))+((cj1*sj2))+((r12*x11256))+(((-1.0)*x11258*x11261)));
evalcond[5]=(((r22*x11256))+(((-1.0)*x11260*x11261))+((r21*x11262))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11265=((1.0)*gconst5);
CheckValue<IkReal> x11266=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11265))+(((-1.0)*gconst4*r20)))),-1);
if(!x11266.valid){
continue;
}
CheckValue<IkReal> x11267 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11265))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11266.value)))+(x11267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11268=IKcos(j4);
IkReal x11269=IKsin(j4);
IkReal x11270=(gconst4*r11);
IkReal x11271=(gconst5*r10);
IkReal x11272=(gconst5*r00);
IkReal x11273=(gconst5*r20);
IkReal x11274=((1.0)*x11268);
IkReal x11275=(gconst4*x11268);
IkReal x11276=((1.0)*x11269);
IkReal x11277=(gconst4*x11269);
evalcond[0]=(((r01*x11275))+((r02*x11269))+(((-1.0)*x11272*x11274)));
evalcond[1]=(((r21*x11277))+(((-1.0)*r22*x11274))+(((-1.0)*x11273*x11276)));
evalcond[2]=((((-1.0)*r12*x11274))+(((-1.0)*x11271*x11276))+((x11269*x11270)));
evalcond[3]=((1.0)+((r01*x11277))+(((-1.0)*r02*x11274))+(((-1.0)*x11272*x11276)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11268*x11270))+(((-1.0)*x11271*x11274))+((r12*x11269)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11269))+((r21*x11275))+(((-1.0)*x11273*x11274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11278=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11278.valid){
continue;
}
CheckValue<IkReal> x11279 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11278.value)))+(x11279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11280=IKcos(j4);
IkReal x11281=IKsin(j4);
IkReal x11282=(gconst4*r11);
IkReal x11283=(gconst5*r10);
IkReal x11284=(gconst5*r00);
IkReal x11285=(gconst5*r20);
IkReal x11286=((1.0)*x11280);
IkReal x11287=(gconst4*x11280);
IkReal x11288=((1.0)*x11281);
IkReal x11289=(gconst4*x11281);
evalcond[0]=((((-1.0)*x11284*x11286))+((r02*x11281))+((r01*x11287)));
evalcond[1]=((((-1.0)*r22*x11286))+((r21*x11289))+(((-1.0)*x11285*x11288)));
evalcond[2]=((((-1.0)*r12*x11286))+(((-1.0)*x11283*x11288))+((x11281*x11282)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11286))+(((-1.0)*x11284*x11288))+((r01*x11289)));
evalcond[4]=(((x11280*x11282))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11283*x11286))+((r12*x11281)));
evalcond[5]=(((r22*x11281))+((r21*x11287))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11285*x11286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11290=((-1.0)*r21);
CheckValue<IkReal> x11293 = IKatan2WithCheck(IkReal(x11290),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11293.valid){
continue;
}
IkReal x11291=((1.0)*(x11293.value));
IkReal x11292=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11291)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11291)));
IkReal gconst4=(x11290*x11292);
IkReal gconst5=((1.0)*r20*x11292);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11294=((-1.0)*r21);
CheckValue<IkReal> x11297 = IKatan2WithCheck(IkReal(x11294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11297.valid){
continue;
}
IkReal x11295=((1.0)*(x11297.value));
IkReal x11296=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11295)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11295)));
IkReal gconst4=(x11294*x11296);
IkReal gconst5=((1.0)*r20*x11296);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11298=((-1.0)*r21);
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(x11298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
IkReal x11299=((1.0)*(x11301.value));
IkReal x11300=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11299)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11299)));
IkReal gconst4=(x11298*x11300);
IkReal gconst5=((1.0)*r20*x11300);
IkReal x11302=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11306=IKPowWithIntegerCheck(x11302,-1);
if(!x11306.valid){
continue;
}
IkReal x11303=x11306.value;
IkReal x11304=((1.0)*x11303);
IkReal x11305=((((-1.0)*x11304*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11303))+(((-1.0)*x11304*(r00*r00)*(r20*r20))));
j4eval[0]=x11305;
j4eval[1]=IKsign(x11305);
j4eval[2]=r02;
j4eval[3]=x11302;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11307=(gconst4*r01);
IkReal x11308=(gconst5*r00);
CheckValue<IkReal> x11309 = IKatan2WithCheck(IkReal((x11307+(((-1.0)*x11308)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11309.valid){
continue;
}
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11308*x11308)))+(((-1.0)*(x11307*x11307)))+(((2.0)*x11307*x11308)))),-1);
if(!x11310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11309.value)+(((1.5707963267949)*(x11310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11311=IKcos(j4);
IkReal x11312=IKsin(j4);
IkReal x11313=(gconst5*r10);
IkReal x11314=(gconst5*r00);
IkReal x11315=(gconst5*r20);
IkReal x11316=((1.0)*x11311);
IkReal x11317=(gconst4*x11312);
IkReal x11318=(gconst4*x11311);
IkReal x11319=((1.0)*x11312);
evalcond[0]=(((r02*x11312))+(((-1.0)*x11314*x11316))+((r01*x11318)));
evalcond[1]=((((-1.0)*r22*x11316))+((r21*x11317))+(((-1.0)*x11315*x11319)));
evalcond[2]=(((r11*x11317))+(((-1.0)*x11313*x11319))+(((-1.0)*r12*x11316)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11316))+(((-1.0)*x11314*x11319))+((r01*x11317)));
evalcond[4]=(((cj2*sj1))+((r22*x11312))+((cj1*sj2))+((r21*x11318))+(((-1.0)*x11315*x11316)));
evalcond[5]=(((r11*x11318))+(((-1.0)*sj1*sj2))+(((-1.0)*x11313*x11316))+((cj1*cj2))+((r12*x11312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11320=((1.0)*gconst5);
CheckValue<IkReal> x11321 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11321.valid){
continue;
}
CheckValue<IkReal> x11322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11320))+(((-1.0)*gconst4*r20)))),-1);
if(!x11322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11321.value)+(((1.5707963267949)*(x11322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11323=IKcos(j4);
IkReal x11324=IKsin(j4);
IkReal x11325=(gconst5*r10);
IkReal x11326=(gconst5*r00);
IkReal x11327=(gconst5*r20);
IkReal x11328=((1.0)*x11323);
IkReal x11329=(gconst4*x11324);
IkReal x11330=(gconst4*x11323);
IkReal x11331=((1.0)*x11324);
evalcond[0]=((((-1.0)*x11326*x11328))+((r02*x11324))+((r01*x11330)));
evalcond[1]=((((-1.0)*r22*x11328))+((r21*x11329))+(((-1.0)*x11327*x11331)));
evalcond[2]=((((-1.0)*x11325*x11331))+(((-1.0)*r12*x11328))+((r11*x11329)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11328))+((r01*x11329))+(((-1.0)*x11326*x11331)));
evalcond[4]=(((cj2*sj1))+((r22*x11324))+((cj1*sj2))+(((-1.0)*x11327*x11328))+((r21*x11330)));
evalcond[5]=(((r11*x11330))+(((-1.0)*x11325*x11328))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x11324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11332=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11332.valid){
continue;
}
CheckValue<IkReal> x11333 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11332.value)))+(x11333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11334=IKcos(j4);
IkReal x11335=IKsin(j4);
IkReal x11336=(gconst5*r10);
IkReal x11337=(gconst5*r00);
IkReal x11338=(gconst5*r20);
IkReal x11339=((1.0)*x11334);
IkReal x11340=(gconst4*x11335);
IkReal x11341=(gconst4*x11334);
IkReal x11342=((1.0)*x11335);
evalcond[0]=((((-1.0)*x11337*x11339))+((r01*x11341))+((r02*x11335)));
evalcond[1]=((((-1.0)*r22*x11339))+(((-1.0)*x11338*x11342))+((r21*x11340)));
evalcond[2]=((((-1.0)*r12*x11339))+((r11*x11340))+(((-1.0)*x11336*x11342)));
evalcond[3]=((1.0)+(((-1.0)*x11337*x11342))+((r01*x11340))+(((-1.0)*r02*x11339)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11338*x11339))+((r22*x11335))+((r21*x11341)));
evalcond[5]=(((r11*x11341))+((r12*x11335))+(((-1.0)*x11336*x11339))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11343=((-1.0)*r21);
CheckValue<IkReal> x11346 = IKatan2WithCheck(IkReal(x11343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11346.valid){
continue;
}
IkReal x11344=((1.0)*(x11346.value));
IkReal x11345=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11344)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11344)));
IkReal gconst4=(x11343*x11345);
IkReal gconst5=((1.0)*r20*x11345);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11347=((-1.0)*r21);
CheckValue<IkReal> x11350 = IKatan2WithCheck(IkReal(x11347),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11350.valid){
continue;
}
IkReal x11348=((1.0)*(x11350.value));
IkReal x11349=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11348)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11348)));
IkReal gconst4=(x11347*x11349);
IkReal gconst5=((1.0)*r20*x11349);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11351=((-1.0)*r21);
CheckValue<IkReal> x11354 = IKatan2WithCheck(IkReal(x11351),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11354.valid){
continue;
}
IkReal x11352=((1.0)*(x11354.value));
IkReal x11353=x10145;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11352)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11352)));
IkReal gconst4=(x11351*x11353);
IkReal gconst5=((1.0)*r20*x11353);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11355=(gconst5*r00);
IkReal x11356=(gconst4*r01);
CheckValue<IkReal> x11357 = IKatan2WithCheck(IkReal((x11355+(((-1.0)*x11356)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11357.valid){
continue;
}
CheckValue<IkReal> x11358=IKPowWithIntegerCheck(IKsign(((x11355*x11355)+(r02*r02)+(((-2.0)*x11355*x11356))+(x11356*x11356))),-1);
if(!x11358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11357.value)+(((1.5707963267949)*(x11358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11359=IKsin(j4);
IkReal x11360=IKcos(j4);
IkReal x11361=(gconst4*r11);
IkReal x11362=(gconst5*r10);
IkReal x11363=(gconst5*r00);
IkReal x11364=(gconst5*r20);
IkReal x11365=((1.0)*x11360);
IkReal x11366=(gconst4*x11359);
IkReal x11367=((1.0)*x11359);
evalcond[0]=(((r21*x11366))+(((-1.0)*r22*x11365))+(((-1.0)*x11364*x11367)));
evalcond[1]=((((-1.0)*x11362*x11367))+((x11359*x11361))+(((-1.0)*r12*x11365)));
evalcond[2]=((((-1.0)*gconst4*r01*x11365))+(((-1.0)*r02*x11367))+((x11360*x11363)));
evalcond[3]=((1.0)+((r01*x11366))+(((-1.0)*x11363*x11367))+(((-1.0)*r02*x11365)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11367))+((cj1*sj2))+((x11360*x11364))+(((-1.0)*gconst4*r21*x11365)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11367))+((cj1*cj2))+((x11360*x11362))+(((-1.0)*x11361*x11365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11368=((1.0)*gconst5);
CheckValue<IkReal> x11369 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11368))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11369.valid){
continue;
}
CheckValue<IkReal> x11370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11368))+(((-1.0)*gconst4*r20)))),-1);
if(!x11370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11369.value)+(((1.5707963267949)*(x11370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11371=IKsin(j4);
IkReal x11372=IKcos(j4);
IkReal x11373=(gconst4*r11);
IkReal x11374=(gconst5*r10);
IkReal x11375=(gconst5*r00);
IkReal x11376=(gconst5*r20);
IkReal x11377=((1.0)*x11372);
IkReal x11378=(gconst4*x11371);
IkReal x11379=((1.0)*x11371);
evalcond[0]=(((r21*x11378))+(((-1.0)*r22*x11377))+(((-1.0)*x11376*x11379)));
evalcond[1]=((((-1.0)*x11374*x11379))+(((-1.0)*r12*x11377))+((x11371*x11373)));
evalcond[2]=((((-1.0)*gconst4*r01*x11377))+(((-1.0)*r02*x11379))+((x11372*x11375)));
evalcond[3]=((1.0)+(((-1.0)*x11375*x11379))+((r01*x11378))+(((-1.0)*r02*x11377)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11379))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11377))+((x11372*x11376)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11373*x11377))+(((-1.0)*r12*x11379))+((x11372*x11374))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11380=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11380.valid){
continue;
}
CheckValue<IkReal> x11381 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11380.value)))+(x11381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11382=IKsin(j4);
IkReal x11383=IKcos(j4);
IkReal x11384=(gconst4*r11);
IkReal x11385=(gconst5*r10);
IkReal x11386=(gconst5*r00);
IkReal x11387=(gconst5*r20);
IkReal x11388=((1.0)*x11383);
IkReal x11389=(gconst4*x11382);
IkReal x11390=((1.0)*x11382);
evalcond[0]=((((-1.0)*r22*x11388))+((r21*x11389))+(((-1.0)*x11387*x11390)));
evalcond[1]=(((x11382*x11384))+(((-1.0)*r12*x11388))+(((-1.0)*x11385*x11390)));
evalcond[2]=(((x11383*x11386))+(((-1.0)*r02*x11390))+(((-1.0)*gconst4*r01*x11388)));
evalcond[3]=((1.0)+((r01*x11389))+(((-1.0)*r02*x11388))+(((-1.0)*x11386*x11390)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11388))+((cj1*sj2))+((x11383*x11387))+(((-1.0)*r22*x11390)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11383*x11385))+(((-1.0)*x11384*x11388))+((cj1*cj2))+(((-1.0)*r12*x11390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11391=((-1.0)*r21);
IkReal x11392=((-1.0)*r20);
CheckValue<IkReal> x11394 = IKatan2WithCheck(IkReal(x11391),IkReal(x11392),IKFAST_ATAN2_MAGTHRESH);
if(!x11394.valid){
continue;
}
IkReal x11393=((1.0)*(x11394.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11393)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11392);
rxp0_2=(py*r00);
rxp1_0=(py*x11391);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11393)));
IkReal gconst4=x11391;
IkReal gconst5=((1.0)*r20);
IkReal x11395=((1.0)*r01*r21);
IkReal x11396=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11395))+(((-1.0)*x11396)));
j4eval[1]=((((-1.0)*cj3*x11396))+(((-1.0)*cj3*x11395)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11397=((-1.0)*r21);
IkReal x11398=((-1.0)*r20);
CheckValue<IkReal> x11400 = IKatan2WithCheck(IkReal(x11397),IkReal(x11398),IKFAST_ATAN2_MAGTHRESH);
if(!x11400.valid){
continue;
}
IkReal x11399=((1.0)*(x11400.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11399)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11398);
rxp0_2=(py*r00);
rxp1_0=(py*x11397);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11399)));
IkReal gconst4=x11397;
IkReal gconst5=((1.0)*r20);
IkReal x11401=((1.0)*r01*r21);
IkReal x11402=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11401))+(((-1.0)*x11402)));
j4eval[1]=(((sj3*x11402))+((sj3*x11401)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11403=((-1.0)*r21);
IkReal x11404=((-1.0)*r20);
CheckValue<IkReal> x11406 = IKatan2WithCheck(IkReal(x11403),IkReal(x11404),IKFAST_ATAN2_MAGTHRESH);
if(!x11406.valid){
continue;
}
IkReal x11405=((1.0)*(x11406.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11405)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11404);
rxp0_2=(py*r00);
rxp1_0=(py*x11403);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11405)));
IkReal gconst4=x11403;
IkReal gconst5=((1.0)*r20);
IkReal x11407=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11407))+(((-1.0)*r01*r21*x11407)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11408=((1.0)*gconst5);
CheckValue<IkReal> x11409=IKPowWithIntegerCheck(cj3,-1);
if(!x11409.valid){
continue;
}
CheckValue<IkReal> x11410=IKPowWithIntegerCheck(r12,-1);
if(!x11410.valid){
continue;
}
CheckValue<IkReal> x11411=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11408))+((cj3*gconst4*r01))),-1);
if(!x11411.valid){
continue;
}
if( IKabs(((x11409.value)*(x11410.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11411.value)*(((((-1.0)*r01*sj3*x11408))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11409.value)*(x11410.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11411.value)*(((((-1.0)*r01*sj3*x11408))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11409.value)*(x11410.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11411.value)*(((((-1.0)*r01*sj3*x11408))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11412=IKsin(j4);
IkReal x11413=IKcos(j4);
IkReal x11414=(cj2*sj1);
IkReal x11415=(cj1*sj2);
IkReal x11416=(sj1*sj2);
IkReal x11417=(gconst5*sj3);
IkReal x11418=(gconst5*r00);
IkReal x11419=(cj3*gconst5);
IkReal x11420=(gconst4*sj3);
IkReal x11421=(cj3*gconst4);
IkReal x11422=(cj1*cj2);
IkReal x11423=((1.0)*x11412);
IkReal x11424=(gconst4*x11412);
IkReal x11425=((1.0)*x11413);
IkReal x11426=(x11414+x11415);
IkReal x11427=(x11413*x11417);
IkReal x11428=(x11413*x11421);
evalcond[0]=((-1.0)*r12*x11413);
evalcond[1]=(((r21*x11424))+(((-1.0)*gconst5*r20*x11423)));
evalcond[2]=(((cj3*r12*x11412))+x11422+(((-1.0)*x11416)));
evalcond[3]=(x11426+(((-1.0)*r12*sj3*x11423)));
evalcond[4]=((1.0)+((r01*x11424))+(((-1.0)*x11418*x11423)));
evalcond[5]=(((r01*x11417))+(((-1.0)*cj3*x11418*x11425))+((r01*x11428))+((r00*x11420)));
evalcond[6]=(((r01*x11419))+(((-1.0)*r01*x11420*x11425))+((r00*x11427))+((r00*x11421)));
evalcond[7]=(((r20*x11420))+x11426+((r21*x11417))+((r21*x11428))+(((-1.0)*r20*x11419*x11425)));
evalcond[8]=(((r20*x11421))+((r20*x11427))+x11416+((r21*x11419))+(((-1.0)*x11422))+(((-1.0)*r21*x11420*x11425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11429=((1.0)*gconst4);
IkReal x11430=(gconst5*r00);
CheckValue<IkReal> x11431=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11430))),-1);
if(!x11431.valid){
continue;
}
CheckValue<IkReal> x11432=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11429))+((sj3*x11430))),-1);
if(!x11432.valid){
continue;
}
if( IKabs(((-1.0)*(x11431.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11432.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11429)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11431.value)))+IKsqr(((x11432.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11429))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11431.value)), ((x11432.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11429))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11433=IKsin(j4);
IkReal x11434=IKcos(j4);
IkReal x11435=(cj2*sj1);
IkReal x11436=(cj1*sj2);
IkReal x11437=(sj1*sj2);
IkReal x11438=(gconst5*sj3);
IkReal x11439=(gconst5*r00);
IkReal x11440=(cj3*gconst5);
IkReal x11441=(gconst4*sj3);
IkReal x11442=(cj3*gconst4);
IkReal x11443=(cj1*cj2);
IkReal x11444=((1.0)*x11433);
IkReal x11445=(gconst4*x11433);
IkReal x11446=((1.0)*x11434);
IkReal x11447=(x11435+x11436);
IkReal x11448=(x11434*x11438);
IkReal x11449=(x11434*x11442);
evalcond[0]=((-1.0)*r12*x11434);
evalcond[1]=((((-1.0)*gconst5*r20*x11444))+((r21*x11445)));
evalcond[2]=(x11443+((cj3*r12*x11433))+(((-1.0)*x11437)));
evalcond[3]=(x11447+(((-1.0)*r12*sj3*x11444)));
evalcond[4]=((1.0)+(((-1.0)*x11439*x11444))+((r01*x11445)));
evalcond[5]=((((-1.0)*cj3*x11439*x11446))+((r00*x11441))+((r01*x11438))+((r01*x11449)));
evalcond[6]=(((r00*x11448))+((r00*x11442))+(((-1.0)*r01*x11441*x11446))+((r01*x11440)));
evalcond[7]=(x11447+((r21*x11438))+((r20*x11441))+((r21*x11449))+(((-1.0)*r20*x11440*x11446)));
evalcond[8]=((((-1.0)*x11443))+x11437+(((-1.0)*r21*x11441*x11446))+((r20*x11448))+((r20*x11442))+((r21*x11440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11450=((1.0)*gconst5);
IkReal x11451=(gconst4*r01);
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(((((-1.0)*r00*x11450))+x11451),-1);
if(!x11452.valid){
continue;
}
CheckValue<IkReal> x11453=IKPowWithIntegerCheck((((cj3*x11451))+(((-1.0)*cj3*r00*x11450))),-1);
if(!x11453.valid){
continue;
}
if( IKabs(((-1.0)*(x11452.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11453.value)*(((((-1.0)*r01*sj3*x11450))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11452.value)))+IKsqr(((x11453.value)*(((((-1.0)*r01*sj3*x11450))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11452.value)), ((x11453.value)*(((((-1.0)*r01*sj3*x11450))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11454=IKsin(j4);
IkReal x11455=IKcos(j4);
IkReal x11456=(cj2*sj1);
IkReal x11457=(cj1*sj2);
IkReal x11458=(sj1*sj2);
IkReal x11459=(gconst5*sj3);
IkReal x11460=(gconst5*r00);
IkReal x11461=(cj3*gconst5);
IkReal x11462=(gconst4*sj3);
IkReal x11463=(cj3*gconst4);
IkReal x11464=(cj1*cj2);
IkReal x11465=((1.0)*x11454);
IkReal x11466=(gconst4*x11454);
IkReal x11467=((1.0)*x11455);
IkReal x11468=(x11456+x11457);
IkReal x11469=(x11455*x11459);
IkReal x11470=(x11455*x11463);
evalcond[0]=((-1.0)*r12*x11455);
evalcond[1]=((((-1.0)*gconst5*r20*x11465))+((r21*x11466)));
evalcond[2]=(x11464+(((-1.0)*x11458))+((cj3*r12*x11454)));
evalcond[3]=(x11468+(((-1.0)*r12*sj3*x11465)));
evalcond[4]=((1.0)+((r01*x11466))+(((-1.0)*x11460*x11465)));
evalcond[5]=((((-1.0)*cj3*x11460*x11467))+((r01*x11459))+((r00*x11462))+((r01*x11470)));
evalcond[6]=(((r01*x11461))+(((-1.0)*r01*x11462*x11467))+((r00*x11469))+((r00*x11463)));
evalcond[7]=(x11468+(((-1.0)*r20*x11461*x11467))+((r21*x11459))+((r20*x11462))+((r21*x11470)));
evalcond[8]=((((-1.0)*r21*x11462*x11467))+x11458+((r20*x11469))+((r20*x11463))+((r21*x11461))+(((-1.0)*x11464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11471=gconst4*gconst4;
IkReal x11472=gconst5*gconst5;
IkReal x11473=(r01*r20);
IkReal x11474=(gconst4*sj3);
IkReal x11475=(r01*r21);
IkReal x11476=((1.0)*cj3);
IkReal x11477=(r00*r21);
IkReal x11478=(r00*r20);
IkReal x11479=(cj3*gconst4*gconst5);
IkReal x11480=((1.0)*x11472);
CheckValue<IkReal> x11481=IKPowWithIntegerCheck(IKsign((((x11473*x11479))+((x11477*x11479))+(((-1.0)*x11472*x11476*x11478))+(((-1.0)*r02*r22*x11476))+(((-1.0)*x11471*x11475*x11476)))),-1);
if(!x11481.valid){
continue;
}
CheckValue<IkReal> x11482 = IKatan2WithCheck(IkReal((((r00*r22*x11474))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11474*x11475))+(((-1.0)*gconst5*x11474*x11478))+((sj3*x11471*x11477))+(((-1.0)*sj3*x11473*x11480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11481.value)))+(x11482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11483=IKsin(j4);
IkReal x11484=IKcos(j4);
IkReal x11485=(cj2*sj1);
IkReal x11486=(cj1*sj2);
IkReal x11487=(gconst5*sj3);
IkReal x11488=(gconst4*r11);
IkReal x11489=(sj1*sj2);
IkReal x11490=(gconst5*r10);
IkReal x11491=(cj1*cj2);
IkReal x11492=(gconst4*r01);
IkReal x11493=(gconst5*r00);
IkReal x11494=(gconst4*sj3);
IkReal x11495=(cj3*gconst5);
IkReal x11496=(cj3*gconst4);
IkReal x11497=(gconst4*r21);
IkReal x11498=((1.0)*x11484);
IkReal x11499=((1.0)*x11483);
IkReal x11500=(cj3*x11483);
IkReal x11501=(cj3*x11484);
IkReal x11502=(x11485+x11486);
evalcond[0]=(((x11483*x11497))+(((-1.0)*gconst5*r20*x11499))+(((-1.0)*r22*x11498)));
evalcond[1]=((((-1.0)*x11490*x11499))+((x11483*x11488))+(((-1.0)*r12*x11498)));
evalcond[2]=((1.0)+((x11483*x11492))+(((-1.0)*x11493*x11499))+(((-1.0)*r02*x11498)));
evalcond[3]=(((r00*x11494))+((x11492*x11501))+(((-1.0)*cj3*x11493*x11498))+((r01*x11487))+((r02*x11500)));
evalcond[4]=(((r00*x11496))+(((-1.0)*r02*sj3*x11499))+((r00*x11484*x11487))+((r01*x11495))+(((-1.0)*sj3*x11492*x11498)));
evalcond[5]=(x11502+((r21*x11484*x11496))+((r20*x11494))+(((-1.0)*r20*x11495*x11498))+((r21*x11487))+((r22*x11500)));
evalcond[6]=(x11491+(((-1.0)*x11489))+((r12*x11500))+((r10*x11494))+(((-1.0)*cj3*x11490*x11498))+((r11*x11487))+((x11488*x11501)));
evalcond[7]=(((r10*x11484*x11487))+x11502+((r11*x11495))+((r10*x11496))+(((-1.0)*r12*sj3*x11499))+(((-1.0)*sj3*x11488*x11498)));
evalcond[8]=(x11489+((r21*x11495))+(((-1.0)*r22*sj3*x11499))+((r20*x11484*x11487))+((r20*x11496))+(((-1.0)*r21*x11494*x11498))+(((-1.0)*x11491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11503=((1.0)*gconst5);
CheckValue<IkReal> x11504=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11503))+(((-1.0)*gconst4*r20)))),-1);
if(!x11504.valid){
continue;
}
CheckValue<IkReal> x11505 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11503))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11504.value)))+(x11505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11506=IKsin(j4);
IkReal x11507=IKcos(j4);
IkReal x11508=(cj2*sj1);
IkReal x11509=(cj1*sj2);
IkReal x11510=(gconst5*sj3);
IkReal x11511=(gconst4*r11);
IkReal x11512=(sj1*sj2);
IkReal x11513=(gconst5*r10);
IkReal x11514=(cj1*cj2);
IkReal x11515=(gconst4*r01);
IkReal x11516=(gconst5*r00);
IkReal x11517=(gconst4*sj3);
IkReal x11518=(cj3*gconst5);
IkReal x11519=(cj3*gconst4);
IkReal x11520=(gconst4*r21);
IkReal x11521=((1.0)*x11507);
IkReal x11522=((1.0)*x11506);
IkReal x11523=(cj3*x11506);
IkReal x11524=(cj3*x11507);
IkReal x11525=(x11508+x11509);
evalcond[0]=((((-1.0)*gconst5*r20*x11522))+((x11506*x11520))+(((-1.0)*r22*x11521)));
evalcond[1]=((((-1.0)*x11513*x11522))+((x11506*x11511))+(((-1.0)*r12*x11521)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11521))+(((-1.0)*x11516*x11522))+((x11506*x11515)));
evalcond[3]=(((r01*x11510))+((x11515*x11524))+(((-1.0)*cj3*x11516*x11521))+((r02*x11523))+((r00*x11517)));
evalcond[4]=(((r01*x11518))+((r00*x11507*x11510))+(((-1.0)*r02*sj3*x11522))+(((-1.0)*sj3*x11515*x11521))+((r00*x11519)));
evalcond[5]=(x11525+((r20*x11517))+(((-1.0)*r20*x11518*x11521))+((r21*x11510))+((r21*x11507*x11519))+((r22*x11523)));
evalcond[6]=((((-1.0)*x11512))+(((-1.0)*cj3*x11513*x11521))+x11514+((r12*x11523))+((x11511*x11524))+((r10*x11517))+((r11*x11510)));
evalcond[7]=(((r10*x11507*x11510))+x11525+(((-1.0)*r12*sj3*x11522))+(((-1.0)*sj3*x11511*x11521))+((r10*x11519))+((r11*x11518)));
evalcond[8]=((((-1.0)*x11514))+x11512+((r20*x11519))+(((-1.0)*r21*x11517*x11521))+((r20*x11507*x11510))+((r21*x11518))+(((-1.0)*r22*sj3*x11522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11526=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11526.valid){
continue;
}
CheckValue<IkReal> x11527 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11526.value)))+(x11527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11528=IKsin(j4);
IkReal x11529=IKcos(j4);
IkReal x11530=(cj2*sj1);
IkReal x11531=(cj1*sj2);
IkReal x11532=(gconst5*sj3);
IkReal x11533=(gconst4*r11);
IkReal x11534=(sj1*sj2);
IkReal x11535=(gconst5*r10);
IkReal x11536=(cj1*cj2);
IkReal x11537=(gconst4*r01);
IkReal x11538=(gconst5*r00);
IkReal x11539=(gconst4*sj3);
IkReal x11540=(cj3*gconst5);
IkReal x11541=(cj3*gconst4);
IkReal x11542=(gconst4*r21);
IkReal x11543=((1.0)*x11529);
IkReal x11544=((1.0)*x11528);
IkReal x11545=(cj3*x11528);
IkReal x11546=(cj3*x11529);
IkReal x11547=(x11531+x11530);
evalcond[0]=((((-1.0)*gconst5*r20*x11544))+((x11528*x11542))+(((-1.0)*r22*x11543)));
evalcond[1]=((((-1.0)*x11535*x11544))+(((-1.0)*r12*x11543))+((x11528*x11533)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11543))+(((-1.0)*x11538*x11544))+((x11528*x11537)));
evalcond[3]=((((-1.0)*cj3*x11538*x11543))+((r01*x11532))+((r00*x11539))+((r02*x11545))+((x11537*x11546)));
evalcond[4]=((((-1.0)*sj3*x11537*x11543))+((r00*x11541))+((r01*x11540))+(((-1.0)*r02*sj3*x11544))+((r00*x11529*x11532)));
evalcond[5]=(((r21*x11529*x11541))+(((-1.0)*r20*x11540*x11543))+x11547+((r21*x11532))+((r20*x11539))+((r22*x11545)));
evalcond[6]=(x11536+((x11533*x11546))+((r11*x11532))+((r10*x11539))+((r12*x11545))+(((-1.0)*cj3*x11535*x11543))+(((-1.0)*x11534)));
evalcond[7]=(((r10*x11529*x11532))+((r10*x11541))+x11547+((r11*x11540))+(((-1.0)*r12*sj3*x11544))+(((-1.0)*sj3*x11533*x11543)));
evalcond[8]=(x11534+((r20*x11541))+(((-1.0)*r22*sj3*x11544))+((r21*x11540))+(((-1.0)*x11536))+((r20*x11529*x11532))+(((-1.0)*r21*x11539*x11543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11548=((-1.0)*r21);
IkReal x11549=((-1.0)*px);
CheckValue<IkReal> x11551 = IKatan2WithCheck(IkReal(x11548),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11551.valid){
continue;
}
IkReal x11550=((1.0)*(x11551.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11550)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11549);
rxp1_1=(px*r21);
rxp1_2=(r11*x11549);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11550)));
IkReal gconst4=x11548;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11552=((-1.0)*r21);
IkReal x11553=((-1.0)*px);
CheckValue<IkReal> x11555 = IKatan2WithCheck(IkReal(x11552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11555.valid){
continue;
}
IkReal x11554=((1.0)*(x11555.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11554)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11553);
rxp1_1=(px*r21);
rxp1_2=(r11*x11553);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11554)));
IkReal gconst4=x11552;
IkReal gconst5=((1.0)*r20);
IkReal x11556=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11556))+(((-1.0)*x11556*(r21*r21)))+((x11556*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11557=((-1.0)*r21);
IkReal x11558=((-1.0)*px);
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal(x11557),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
IkReal x11559=((1.0)*(x11560.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11559)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11558);
rxp1_1=(px*r21);
rxp1_2=(r11*x11558);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11559)));
IkReal gconst4=x11557;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11561=((-1.0)*r21);
IkReal x11562=((-1.0)*px);
CheckValue<IkReal> x11564 = IKatan2WithCheck(IkReal(x11561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11564.valid){
continue;
}
IkReal x11563=((1.0)*(x11564.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11563)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11562);
rxp1_1=(px*r21);
rxp1_2=(r11*x11562);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11563)));
IkReal gconst4=x11561;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11565=((-1.0)*r21);
IkReal x11566=((-1.0)*px);
CheckValue<IkReal> x11568 = IKatan2WithCheck(IkReal(x11565),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11568.valid){
continue;
}
IkReal x11567=((1.0)*(x11568.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11567)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11566);
rxp1_1=(px*r21);
rxp1_2=(r11*x11566);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11567)));
IkReal gconst4=x11565;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11569=((-1.0)*r21);
IkReal x11570=((-1.0)*px);
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(x11569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11571=((1.0)*(x11572.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11571)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11570);
rxp1_1=(px*r21);
rxp1_2=(r11*x11570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11571)));
IkReal gconst4=x11569;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11575=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11575.valid){
continue;
}
IkReal x11573=x11575.value;
IkReal x11574=(sj0*x11573);
cj4array[0]=(((cj1*sj2*x11574))+((cj2*sj1*x11574)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11576=IKsin(j4);
IkReal x11577=IKcos(j4);
IkReal x11578=(gconst5*r20);
IkReal x11579=(gconst4*x11576);
IkReal x11580=((1.0)*x11577);
IkReal x11581=((1.0)*x11576);
evalcond[0]=((-1.0)*r02*x11576);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11580)));
evalcond[2]=((((-1.0)*x11578*x11581))+((r21*x11579)));
evalcond[3]=(((r11*x11579))+(((-1.0)*gconst5*r10*x11581)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11580))+((x11577*x11578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11583=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11583.valid){
continue;
}
IkReal x11582=x11583.value;
cj4array[0]=(((cj1*cj2*x11582))+(((-1.0)*sj1*sj2*x11582)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11584=IKsin(j4);
IkReal x11585=IKcos(j4);
IkReal x11586=(gconst5*r10);
IkReal x11587=((1.0)*sj0);
IkReal x11588=(gconst4*x11584);
IkReal x11589=((1.0)*x11585);
IkReal x11590=((1.0)*x11584);
evalcond[0]=((-1.0)*r02*x11584);
evalcond[1]=((((-1.0)*x11587))+(((-1.0)*r02*x11589)));
evalcond[2]=((((-1.0)*gconst5*r20*x11590))+((r21*x11588)));
evalcond[3]=((((-1.0)*x11586*x11590))+((r11*x11588)));
evalcond[4]=((((-1.0)*gconst4*r11*x11589))+(((-1.0)*cj2*sj1*x11587))+((x11585*x11586))+(((-1.0)*cj1*sj2*x11587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11591=IKPowWithIntegerCheck(r02,-1);
if(!x11591.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11591.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11592=IKsin(j4);
IkReal x11593=IKcos(j4);
IkReal x11594=((1.0)*sj0);
IkReal x11595=(gconst5*x11593);
IkReal x11596=(gconst4*x11592);
IkReal x11597=((1.0)*gconst4*x11593);
IkReal x11598=((1.0)*gconst5*x11592);
evalcond[0]=((-1.0)*r02*x11592);
evalcond[1]=(((r21*x11596))+(((-1.0)*r20*x11598)));
evalcond[2]=(((r11*x11596))+(((-1.0)*r10*x11598)));
evalcond[3]=(((r20*x11595))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11597)));
evalcond[4]=(((r10*x11595))+(((-1.0)*cj2*sj1*x11594))+(((-1.0)*cj1*sj2*x11594))+(((-1.0)*r11*x11597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11599=((-1.0)*r21);
IkReal x11600=((-1.0)*px);
CheckValue<IkReal> x11602 = IKatan2WithCheck(IkReal(x11599),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11602.valid){
continue;
}
IkReal x11601=((1.0)*(x11602.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11601)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11600);
rxp1_1=(px*r21);
rxp1_2=(r11*x11600);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11601)));
IkReal gconst4=x11599;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11603=((-1.0)*r21);
IkReal x11604=((-1.0)*px);
CheckValue<IkReal> x11606 = IKatan2WithCheck(IkReal(x11603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11606.valid){
continue;
}
IkReal x11605=((1.0)*(x11606.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11605)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11604);
rxp1_1=(px*r21);
rxp1_2=(r11*x11604);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11605)));
IkReal gconst4=x11603;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11607=((-1.0)*r21);
IkReal x11608=((-1.0)*px);
CheckValue<IkReal> x11610 = IKatan2WithCheck(IkReal(x11607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11610.valid){
continue;
}
IkReal x11609=((1.0)*(x11610.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11609)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11608);
rxp1_1=(px*r21);
rxp1_2=(r11*x11608);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11609)));
IkReal gconst4=x11607;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11613=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11613.valid){
continue;
}
IkReal x11611=x11613.value;
IkReal x11612=(sj0*x11611);
cj4array[0]=(((cj1*sj2*x11612))+((cj2*sj1*x11612)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11614=IKsin(j4);
IkReal x11615=IKcos(j4);
IkReal x11616=(gconst5*r20);
IkReal x11617=(gconst4*x11614);
IkReal x11618=((1.0)*x11615);
IkReal x11619=((1.0)*x11614);
evalcond[0]=(r02*x11614);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11618)));
evalcond[2]=((((-1.0)*x11616*x11619))+((r21*x11617)));
evalcond[3]=(((r11*x11617))+(((-1.0)*gconst5*r10*x11619)));
evalcond[4]=(((gconst4*r21*x11615))+(((-1.0)*x11616*x11618))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11621=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11621.valid){
continue;
}
IkReal x11620=x11621.value;
cj4array[0]=(((cj1*cj2*x11620))+(((-1.0)*sj1*sj2*x11620)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11622=IKsin(j4);
IkReal x11623=IKcos(j4);
IkReal x11624=(gconst4*r11);
IkReal x11625=((1.0)*sj0);
IkReal x11626=(gconst5*r10);
IkReal x11627=((1.0)*x11623);
IkReal x11628=((1.0)*x11622);
evalcond[0]=(r02*x11622);
evalcond[1]=((((-1.0)*x11625))+(((-1.0)*r02*x11627)));
evalcond[2]=(((gconst4*r21*x11622))+(((-1.0)*gconst5*r20*x11628)));
evalcond[3]=(((x11622*x11624))+(((-1.0)*x11626*x11628)));
evalcond[4]=(((x11623*x11624))+(((-1.0)*cj1*sj2*x11625))+(((-1.0)*x11626*x11627))+(((-1.0)*cj2*sj1*x11625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11629=IKPowWithIntegerCheck(r02,-1);
if(!x11629.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11629.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11630=IKsin(j4);
IkReal x11631=IKcos(j4);
IkReal x11632=(gconst4*r11);
IkReal x11633=((1.0)*cj1);
IkReal x11634=(gconst4*r21);
IkReal x11635=((1.0)*gconst5*x11631);
IkReal x11636=((1.0)*gconst5*x11630);
evalcond[0]=(r02*x11630);
evalcond[1]=(((x11630*x11634))+(((-1.0)*r20*x11636)));
evalcond[2]=((((-1.0)*r10*x11636))+((x11630*x11632)));
evalcond[3]=(((sj1*sj2))+((x11631*x11634))+(((-1.0)*r20*x11635))+(((-1.0)*cj2*x11633)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11635))+(((-1.0)*sj0*sj2*x11633))+((x11631*x11632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11638=IKPowWithIntegerCheck(r02,-1);
if(!x11638.valid){
continue;
}
IkReal x11637=x11638.value;
CheckValue<IkReal> x11639=IKPowWithIntegerCheck(cj3,-1);
if(!x11639.valid){
continue;
}
if( IKabs((x11637*(x11639.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11637)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11637*(x11639.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11637))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11637*(x11639.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11637));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11640=IKsin(j4);
IkReal x11641=IKcos(j4);
IkReal x11642=(gconst5*sj3);
IkReal x11643=(gconst4*r11);
IkReal x11644=(sj1*sj2);
IkReal x11645=((1.0)*gconst5);
IkReal x11646=(cj2*sj1);
IkReal x11647=((1.0)*sj0);
IkReal x11648=((1.0)*cj0);
IkReal x11649=(gconst4*r21);
IkReal x11650=(cj1*sj2);
IkReal x11651=(cj3*gconst4);
IkReal x11652=(gconst4*sj3);
IkReal x11653=(cj3*gconst5);
IkReal x11654=(r20*x11641);
IkReal x11655=((1.0)*cj1*cj2);
IkReal x11656=(r10*x11641);
IkReal x11657=(cj3*x11641);
IkReal x11658=(r02*x11640);
IkReal x11659=((1.0)*sj3*x11641);
evalcond[0]=((((-1.0)*r02*x11641))+(((-1.0)*x11647)));
evalcond[1]=(((x11640*x11649))+(((-1.0)*r20*x11640*x11645)));
evalcond[2]=(((x11640*x11643))+cj0+(((-1.0)*r10*x11640*x11645)));
evalcond[3]=((((-1.0)*cj1*cj2*x11648))+((cj3*x11658))+((cj0*x11644)));
evalcond[4]=((((-1.0)*x11646*x11648))+(((-1.0)*sj3*x11658))+(((-1.0)*x11648*x11650)));
evalcond[5]=(x11646+x11650+((r21*x11642))+(((-1.0)*cj3*x11645*x11654))+((r20*x11652))+((x11649*x11657)));
evalcond[6]=((((-1.0)*x11655))+x11644+((x11642*x11654))+((r21*x11653))+((r20*x11651))+(((-1.0)*x11649*x11659)));
evalcond[7]=(((r11*x11642))+(((-1.0)*cj1*cj2*x11647))+((r10*x11652))+((x11643*x11657))+((sj0*x11644))+(((-1.0)*cj3*x11645*x11656)));
evalcond[8]=((((-1.0)*x11646*x11647))+((r11*x11653))+((r10*x11651))+(((-1.0)*x11647*x11650))+(((-1.0)*x11643*x11659))+((x11642*x11656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11660=((1.0)*gconst5);
CheckValue<IkReal> x11661=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11660))),-1);
if(!x11661.valid){
continue;
}
CheckValue<IkReal> x11662=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11660))),-1);
if(!x11662.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11661.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11662.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11660)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11661.value)))+IKsqr(((x11662.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11660))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11661.value)), ((x11662.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11660))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11663=IKsin(j4);
IkReal x11664=IKcos(j4);
IkReal x11665=(gconst5*sj3);
IkReal x11666=(gconst4*r11);
IkReal x11667=(sj1*sj2);
IkReal x11668=((1.0)*gconst5);
IkReal x11669=(cj2*sj1);
IkReal x11670=((1.0)*sj0);
IkReal x11671=((1.0)*cj0);
IkReal x11672=(gconst4*r21);
IkReal x11673=(cj1*sj2);
IkReal x11674=(cj3*gconst4);
IkReal x11675=(gconst4*sj3);
IkReal x11676=(cj3*gconst5);
IkReal x11677=(r20*x11664);
IkReal x11678=((1.0)*cj1*cj2);
IkReal x11679=(r10*x11664);
IkReal x11680=(cj3*x11664);
IkReal x11681=(r02*x11663);
IkReal x11682=((1.0)*sj3*x11664);
evalcond[0]=((((-1.0)*r02*x11664))+(((-1.0)*x11670)));
evalcond[1]=(((x11663*x11672))+(((-1.0)*r20*x11663*x11668)));
evalcond[2]=(cj0+((x11663*x11666))+(((-1.0)*r10*x11663*x11668)));
evalcond[3]=(((cj0*x11667))+((cj3*x11681))+(((-1.0)*cj1*cj2*x11671)));
evalcond[4]=((((-1.0)*x11669*x11671))+(((-1.0)*x11671*x11673))+(((-1.0)*sj3*x11681)));
evalcond[5]=(((r21*x11665))+x11669+x11673+((r20*x11675))+(((-1.0)*cj3*x11668*x11677))+((x11672*x11680)));
evalcond[6]=(x11667+(((-1.0)*x11672*x11682))+((r20*x11674))+((x11665*x11677))+((r21*x11676))+(((-1.0)*x11678)));
evalcond[7]=((((-1.0)*cj3*x11668*x11679))+((r11*x11665))+(((-1.0)*cj1*cj2*x11670))+((r10*x11675))+((x11666*x11680))+((sj0*x11667)));
evalcond[8]=((((-1.0)*x11669*x11670))+(((-1.0)*x11670*x11673))+((r11*x11676))+((x11665*x11679))+((r10*x11674))+(((-1.0)*x11666*x11682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11683=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11683.valid){
continue;
}
CheckValue<IkReal> x11684=IKPowWithIntegerCheck(r02,-1);
if(!x11684.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11683.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11684.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11683.value)))+IKsqr(((-1.0)*sj0*(x11684.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11683.value)), ((-1.0)*sj0*(x11684.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11685=IKsin(j4);
IkReal x11686=IKcos(j4);
IkReal x11687=(gconst5*sj3);
IkReal x11688=(gconst4*r11);
IkReal x11689=(sj1*sj2);
IkReal x11690=((1.0)*gconst5);
IkReal x11691=(cj2*sj1);
IkReal x11692=((1.0)*sj0);
IkReal x11693=((1.0)*cj0);
IkReal x11694=(gconst4*r21);
IkReal x11695=(cj1*sj2);
IkReal x11696=(cj3*gconst4);
IkReal x11697=(gconst4*sj3);
IkReal x11698=(cj3*gconst5);
IkReal x11699=(r20*x11686);
IkReal x11700=((1.0)*cj1*cj2);
IkReal x11701=(r10*x11686);
IkReal x11702=(cj3*x11686);
IkReal x11703=(r02*x11685);
IkReal x11704=((1.0)*sj3*x11686);
evalcond[0]=((((-1.0)*r02*x11686))+(((-1.0)*x11692)));
evalcond[1]=((((-1.0)*r20*x11685*x11690))+((x11685*x11694)));
evalcond[2]=(((x11685*x11688))+cj0+(((-1.0)*r10*x11685*x11690)));
evalcond[3]=(((cj3*x11703))+((cj0*x11689))+(((-1.0)*cj1*cj2*x11693)));
evalcond[4]=((((-1.0)*x11691*x11693))+(((-1.0)*sj3*x11703))+(((-1.0)*x11693*x11695)));
evalcond[5]=(x11695+x11691+((r20*x11697))+((r21*x11687))+(((-1.0)*cj3*x11690*x11699))+((x11694*x11702)));
evalcond[6]=(x11689+(((-1.0)*x11694*x11704))+((x11687*x11699))+((r20*x11696))+(((-1.0)*x11700))+((r21*x11698)));
evalcond[7]=(((x11688*x11702))+((sj0*x11689))+((r11*x11687))+(((-1.0)*cj3*x11690*x11701))+((r10*x11697))+(((-1.0)*cj1*cj2*x11692)));
evalcond[8]=((((-1.0)*x11691*x11692))+(((-1.0)*x11692*x11695))+((r10*x11696))+((r11*x11698))+((x11687*x11701))+(((-1.0)*x11688*x11704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11705=((1.0)*sj0);
IkReal x11706=((1.0)*gconst4);
CheckValue<IkReal> x11707 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11705)))),IkReal(((((-1.0)*cj0*r01*x11706))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*gconst4*r11*x11705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11707.valid){
continue;
}
CheckValue<IkReal> x11708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11706))+(((-1.0)*gconst5*r21)))),-1);
if(!x11708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11707.value)+(((1.5707963267949)*(x11708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11709=IKsin(j4);
IkReal x11710=IKcos(j4);
IkReal x11711=(gconst5*sj3);
IkReal x11712=(cj3*gconst5);
IkReal x11713=(gconst4*r11);
IkReal x11714=(sj1*sj2);
IkReal x11715=(cj2*sj1);
IkReal x11716=((1.0)*sj0);
IkReal x11717=(gconst4*r01);
IkReal x11718=(gconst4*r21);
IkReal x11719=((1.0)*cj0);
IkReal x11720=(cj1*sj2);
IkReal x11721=(gconst4*sj3);
IkReal x11722=(cj3*gconst4);
IkReal x11723=((1.0)*x11710);
IkReal x11724=((1.0)*cj1*cj2);
IkReal x11725=(cj3*x11709);
IkReal x11726=(cj3*x11710);
IkReal x11727=((1.0)*gconst5*x11709);
IkReal x11728=((1.0)*sj3*x11709);
evalcond[0]=((((-1.0)*r20*x11727))+(((-1.0)*r22*x11723))+((x11709*x11718)));
evalcond[1]=(cj0+(((-1.0)*r12*x11723))+(((-1.0)*r10*x11727))+((x11709*x11713)));
evalcond[2]=((((-1.0)*x11716))+(((-1.0)*r00*x11727))+(((-1.0)*r02*x11723))+((x11709*x11717)));
evalcond[3]=(x11720+x11715+((r20*x11721))+(((-1.0)*r20*x11712*x11723))+((r22*x11725))+((r21*x11711))+((x11718*x11726)));
evalcond[4]=(x11714+(((-1.0)*x11724))+(((-1.0)*r22*x11728))+((r20*x11710*x11711))+((r20*x11722))+(((-1.0)*sj3*x11718*x11723))+((r21*x11712)));
evalcond[5]=((((-1.0)*r00*x11712*x11723))+((r01*x11711))+((r00*x11721))+((cj0*x11714))+((r02*x11725))+(((-1.0)*cj1*cj2*x11719))+((x11717*x11726)));
evalcond[6]=(((r12*x11725))+((sj0*x11714))+((x11713*x11726))+(((-1.0)*cj1*cj2*x11716))+((r10*x11721))+(((-1.0)*r10*x11712*x11723))+((r11*x11711)));
evalcond[7]=(((r01*x11712))+((r00*x11722))+(((-1.0)*x11715*x11719))+(((-1.0)*sj3*x11717*x11723))+((r00*x11710*x11711))+(((-1.0)*x11719*x11720))+(((-1.0)*r02*x11728)));
evalcond[8]=((((-1.0)*x11715*x11716))+(((-1.0)*r12*x11728))+((r10*x11710*x11711))+((r10*x11722))+(((-1.0)*sj3*x11713*x11723))+(((-1.0)*x11716*x11720))+((r11*x11712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11729=((1.0)*gconst5);
CheckValue<IkReal> x11730 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11729))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11730.valid){
continue;
}
CheckValue<IkReal> x11731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11729))+(((-1.0)*gconst4*r10)))),-1);
if(!x11731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11730.value)+(((1.5707963267949)*(x11731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11732=IKsin(j4);
IkReal x11733=IKcos(j4);
IkReal x11734=(gconst5*sj3);
IkReal x11735=(cj3*gconst5);
IkReal x11736=(gconst4*r11);
IkReal x11737=(sj1*sj2);
IkReal x11738=(cj2*sj1);
IkReal x11739=((1.0)*sj0);
IkReal x11740=(gconst4*r01);
IkReal x11741=(gconst4*r21);
IkReal x11742=((1.0)*cj0);
IkReal x11743=(cj1*sj2);
IkReal x11744=(gconst4*sj3);
IkReal x11745=(cj3*gconst4);
IkReal x11746=((1.0)*x11733);
IkReal x11747=((1.0)*cj1*cj2);
IkReal x11748=(cj3*x11732);
IkReal x11749=(cj3*x11733);
IkReal x11750=((1.0)*gconst5*x11732);
IkReal x11751=((1.0)*sj3*x11732);
evalcond[0]=((((-1.0)*r22*x11746))+((x11732*x11741))+(((-1.0)*r20*x11750)));
evalcond[1]=(cj0+(((-1.0)*r10*x11750))+(((-1.0)*r12*x11746))+((x11732*x11736)));
evalcond[2]=((((-1.0)*x11739))+((x11732*x11740))+(((-1.0)*r02*x11746))+(((-1.0)*r00*x11750)));
evalcond[3]=(x11743+x11738+(((-1.0)*r20*x11735*x11746))+((x11741*x11749))+((r20*x11744))+((r21*x11734))+((r22*x11748)));
evalcond[4]=(x11737+(((-1.0)*sj3*x11741*x11746))+(((-1.0)*x11747))+(((-1.0)*r22*x11751))+((r20*x11745))+((r21*x11735))+((r20*x11733*x11734)));
evalcond[5]=((((-1.0)*r00*x11735*x11746))+((r01*x11734))+((r00*x11744))+((cj0*x11737))+(((-1.0)*cj1*cj2*x11742))+((r02*x11748))+((x11740*x11749)));
evalcond[6]=(((r11*x11734))+((x11736*x11749))+((sj0*x11737))+(((-1.0)*cj1*cj2*x11739))+((r10*x11744))+(((-1.0)*r10*x11735*x11746))+((r12*x11748)));
evalcond[7]=(((r01*x11735))+(((-1.0)*x11738*x11742))+((r00*x11745))+(((-1.0)*x11742*x11743))+(((-1.0)*sj3*x11740*x11746))+(((-1.0)*r02*x11751))+((r00*x11733*x11734)));
evalcond[8]=(((r11*x11735))+(((-1.0)*x11739*x11743))+(((-1.0)*r12*x11751))+(((-1.0)*x11738*x11739))+((r10*x11733*x11734))+((r10*x11745))+(((-1.0)*sj3*x11736*x11746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11752=((1.0)*gconst5);
CheckValue<IkReal> x11753 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11752))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11753.valid){
continue;
}
CheckValue<IkReal> x11754=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11752)))),-1);
if(!x11754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11753.value)+(((1.5707963267949)*(x11754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11755=IKsin(j4);
IkReal x11756=IKcos(j4);
IkReal x11757=(gconst5*sj3);
IkReal x11758=(cj3*gconst5);
IkReal x11759=(gconst4*r11);
IkReal x11760=(sj1*sj2);
IkReal x11761=(cj2*sj1);
IkReal x11762=((1.0)*sj0);
IkReal x11763=(gconst4*r01);
IkReal x11764=(gconst4*r21);
IkReal x11765=((1.0)*cj0);
IkReal x11766=(cj1*sj2);
IkReal x11767=(gconst4*sj3);
IkReal x11768=(cj3*gconst4);
IkReal x11769=((1.0)*x11756);
IkReal x11770=((1.0)*cj1*cj2);
IkReal x11771=(cj3*x11755);
IkReal x11772=(cj3*x11756);
IkReal x11773=((1.0)*gconst5*x11755);
IkReal x11774=((1.0)*sj3*x11755);
evalcond[0]=((((-1.0)*r22*x11769))+(((-1.0)*r20*x11773))+((x11755*x11764)));
evalcond[1]=((((-1.0)*r12*x11769))+cj0+(((-1.0)*r10*x11773))+((x11755*x11759)));
evalcond[2]=((((-1.0)*r02*x11769))+(((-1.0)*r00*x11773))+(((-1.0)*x11762))+((x11755*x11763)));
evalcond[3]=(x11761+x11766+((r20*x11767))+(((-1.0)*r20*x11758*x11769))+((x11764*x11772))+((r21*x11757))+((r22*x11771)));
evalcond[4]=(x11760+((r20*x11768))+((r20*x11756*x11757))+(((-1.0)*r22*x11774))+(((-1.0)*x11770))+((r21*x11758))+(((-1.0)*sj3*x11764*x11769)));
evalcond[5]=(((cj0*x11760))+(((-1.0)*cj1*cj2*x11765))+((x11763*x11772))+((r02*x11771))+((r00*x11767))+(((-1.0)*r00*x11758*x11769))+((r01*x11757)));
evalcond[6]=((((-1.0)*r10*x11758*x11769))+(((-1.0)*cj1*cj2*x11762))+((r12*x11771))+((r11*x11757))+((r10*x11767))+((sj0*x11760))+((x11759*x11772)));
evalcond[7]=((((-1.0)*x11765*x11766))+(((-1.0)*r02*x11774))+(((-1.0)*sj3*x11763*x11769))+((r00*x11768))+((r01*x11758))+(((-1.0)*x11761*x11765))+((r00*x11756*x11757)));
evalcond[8]=(((r11*x11758))+(((-1.0)*sj3*x11759*x11769))+((r10*x11768))+(((-1.0)*r12*x11774))+(((-1.0)*x11762*x11766))+((r10*x11756*x11757))+(((-1.0)*x11761*x11762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11775=((-1.0)*r10);
IkReal x11777 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11777)==0){
continue;
}
IkReal x11776=pow(x11777,-0.5);
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11775),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11778.value));
IkReal gconst7=(r11*x11776);
IkReal gconst8=(x11775*x11776);
CheckValue<IkReal> x11779 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11779.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11779.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11780=((-1.0)*r10);
IkReal x11781=x11776;
CheckValue<IkReal> x11783 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11780),IKFAST_ATAN2_MAGTHRESH);
if(!x11783.valid){
continue;
}
IkReal x11782=((-1.0)*(x11783.value));
sj5=gconst7;
cj5=gconst8;
j5=x11782;
IkReal gconst6=x11782;
IkReal gconst7=(r11*x11781);
IkReal gconst8=(x11780*x11781);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11784=((1.0)*sj0);
IkReal x11785=((1.0)*gconst7);
CheckValue<IkReal> x11786 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11784))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11785))+(((-1.0)*gconst7*r11*x11784))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11786.valid){
continue;
}
CheckValue<IkReal> x11787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11785))+(((-1.0)*gconst8*r21)))),-1);
if(!x11787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11786.value)+(((1.5707963267949)*(x11787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11788=IKsin(j4);
IkReal x11789=IKcos(j4);
IkReal x11790=(gconst7*sj3);
IkReal x11791=(cj3*gconst8);
IkReal x11792=(cj3*gconst7);
IkReal x11793=(sj1*sj2);
IkReal x11794=(cj2*sj1);
IkReal x11795=((1.0)*sj0);
IkReal x11796=((1.0)*cj0);
IkReal x11797=(gconst8*sj3);
IkReal x11798=(cj1*sj2);
IkReal x11799=((1.0)*x11789);
IkReal x11800=((1.0)*x11788);
IkReal x11801=((1.0)*cj1*cj2);
IkReal x11802=(cj3*x11788);
IkReal x11803=(gconst7*x11788);
IkReal x11804=(x11789*x11797);
evalcond[0]=(((r21*x11803))+(((-1.0)*gconst8*r20*x11800))+(((-1.0)*r22*x11799)));
evalcond[1]=((((-1.0)*gconst8*r10*x11800))+cj0+(((-1.0)*r12*x11799))+((r11*x11803)));
evalcond[2]=((((-1.0)*gconst8*r00*x11800))+(((-1.0)*r02*x11799))+((r01*x11803))+(((-1.0)*x11795)));
evalcond[3]=(x11798+x11794+((r20*x11790))+((r22*x11802))+((r21*x11789*x11792))+(((-1.0)*r20*x11791*x11799))+((r21*x11797)));
evalcond[4]=(x11793+(((-1.0)*r21*x11790*x11799))+((r20*x11792))+(((-1.0)*r22*sj3*x11800))+(((-1.0)*x11801))+((r20*x11804))+((r21*x11791)));
evalcond[5]=(((r01*x11789*x11792))+(((-1.0)*cj1*cj2*x11796))+(((-1.0)*r00*x11791*x11799))+((r02*x11802))+((r01*x11797))+((r00*x11790))+((cj0*x11793)));
evalcond[6]=((((-1.0)*cj1*cj2*x11795))+((r11*x11797))+((r10*x11790))+(((-1.0)*r10*x11791*x11799))+((sj0*x11793))+((r12*x11802))+((r11*x11789*x11792)));
evalcond[7]=(((r00*x11804))+(((-1.0)*r02*sj3*x11800))+(((-1.0)*x11794*x11796))+((r01*x11791))+(((-1.0)*x11796*x11798))+(((-1.0)*r01*x11790*x11799))+((r00*x11792)));
evalcond[8]=((((-1.0)*x11795*x11798))+((r11*x11791))+(((-1.0)*x11794*x11795))+(((-1.0)*r11*x11790*x11799))+((r10*x11792))+((r10*x11804))+(((-1.0)*r12*sj3*x11800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11805=((1.0)*gconst8);
CheckValue<IkReal> x11806 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11805))+((cj0*gconst7*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11806.valid){
continue;
}
CheckValue<IkReal> x11807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11805)))),-1);
if(!x11807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11806.value)+(((1.5707963267949)*(x11807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11808=IKsin(j4);
IkReal x11809=IKcos(j4);
IkReal x11810=(gconst7*sj3);
IkReal x11811=(cj3*gconst8);
IkReal x11812=(cj3*gconst7);
IkReal x11813=(sj1*sj2);
IkReal x11814=(cj2*sj1);
IkReal x11815=((1.0)*sj0);
IkReal x11816=((1.0)*cj0);
IkReal x11817=(gconst8*sj3);
IkReal x11818=(cj1*sj2);
IkReal x11819=((1.0)*x11809);
IkReal x11820=((1.0)*x11808);
IkReal x11821=((1.0)*cj1*cj2);
IkReal x11822=(cj3*x11808);
IkReal x11823=(gconst7*x11808);
IkReal x11824=(x11809*x11817);
evalcond[0]=((((-1.0)*r22*x11819))+(((-1.0)*gconst8*r20*x11820))+((r21*x11823)));
evalcond[1]=(cj0+(((-1.0)*r12*x11819))+((r11*x11823))+(((-1.0)*gconst8*r10*x11820)));
evalcond[2]=((((-1.0)*gconst8*r00*x11820))+(((-1.0)*r02*x11819))+(((-1.0)*x11815))+((r01*x11823)));
evalcond[3]=(((r21*x11817))+(((-1.0)*r20*x11811*x11819))+((r22*x11822))+((r21*x11809*x11812))+((r20*x11810))+x11814+x11818);
evalcond[4]=((((-1.0)*r22*sj3*x11820))+((r21*x11811))+(((-1.0)*r21*x11810*x11819))+(((-1.0)*x11821))+((r20*x11824))+((r20*x11812))+x11813);
evalcond[5]=(((r01*x11817))+((r01*x11809*x11812))+((r00*x11810))+((r02*x11822))+(((-1.0)*r00*x11811*x11819))+((cj0*x11813))+(((-1.0)*cj1*cj2*x11816)));
evalcond[6]=(((sj0*x11813))+(((-1.0)*r10*x11811*x11819))+((r11*x11809*x11812))+((r12*x11822))+((r10*x11810))+((r11*x11817))+(((-1.0)*cj1*cj2*x11815)));
evalcond[7]=((((-1.0)*r01*x11810*x11819))+((r01*x11811))+((r00*x11812))+(((-1.0)*x11816*x11818))+(((-1.0)*x11814*x11816))+((r00*x11824))+(((-1.0)*r02*sj3*x11820)));
evalcond[8]=((((-1.0)*x11815*x11818))+(((-1.0)*r11*x11810*x11819))+((r10*x11824))+((r10*x11812))+(((-1.0)*r12*sj3*x11820))+((r11*x11811))+(((-1.0)*x11814*x11815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11825=((-1.0)*r11);
IkReal x11827 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11827)==0){
continue;
}
IkReal x11826=pow(x11827,-0.5);
CheckValue<IkReal> x11828 = IKatan2WithCheck(IkReal(x11825),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11828.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11828.value))));
IkReal gconst10=(x11825*x11826);
IkReal gconst11=((1.0)*r10*x11826);
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11829.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11830=((-1.0)*r11);
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(x11830),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
IkReal x11831=((1.0)*(x11833.value));
IkReal x11832=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11831)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11831)));
IkReal gconst10=(x11830*x11832);
IkReal gconst11=((1.0)*r10*x11832);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11834=((-1.0)*r11);
CheckValue<IkReal> x11837 = IKatan2WithCheck(IkReal(x11834),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11837.valid){
continue;
}
IkReal x11835=((1.0)*(x11837.value));
IkReal x11836=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11835)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11835)));
IkReal gconst10=(x11834*x11836);
IkReal gconst11=((1.0)*r10*x11836);
IkReal x11838=r12*r12;
IkReal x11839=((1.0)*sj0);
IkReal x11840=(cj0*r02);
IkReal x11841=x11826;
j4eval[0]=((IKabs((((r12*x11840*x11841))+((sj0*x11838*x11841))+(((-1.0)*x11839*x11841)))))+(IKabs(((((-1.0)*x11840))+(((-1.0)*r12*x11839))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11842=((-1.0)*r11);
CheckValue<IkReal> x11845 = IKatan2WithCheck(IkReal(x11842),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11845.valid){
continue;
}
IkReal x11843=((1.0)*(x11845.value));
IkReal x11844=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11843)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11843)));
IkReal gconst10=(x11842*x11844);
IkReal gconst11=((1.0)*r10*x11844);
IkReal x11846=((1.0)*cj3);
CheckValue<IkReal> x11851=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11851.valid){
continue;
}
IkReal x11847=x11851.value;
IkReal x11848=(cj3*x11847);
IkReal x11849=(x11846*x11847);
IkReal x11850=((((-1.0)*x11849*(r10*r10)*(r20*r20)))+(((-1.0)*x11846*(r22*r22)))+(((-1.0)*x11849*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11848)));
j4eval[0]=x11850;
j4eval[1]=IKsign(x11850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11852=((-1.0)*r11);
CheckValue<IkReal> x11855 = IKatan2WithCheck(IkReal(x11852),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11855.valid){
continue;
}
IkReal x11853=((1.0)*(x11855.value));
IkReal x11854=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11853)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11853)));
IkReal gconst10=(x11852*x11854);
IkReal gconst11=((1.0)*r10*x11854);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11856=((-1.0)*r11);
CheckValue<IkReal> x11859 = IKatan2WithCheck(IkReal(x11856),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11859.valid){
continue;
}
IkReal x11857=((1.0)*(x11859.value));
IkReal x11858=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11857)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11857)));
IkReal gconst10=(x11856*x11858);
IkReal gconst11=((1.0)*r10*x11858);
IkReal x11860=r12*r12;
IkReal x11861=((1.0)*sj0);
IkReal x11862=(cj0*r02);
IkReal x11863=x11826;
j4eval[0]=((IKabs(((((-1.0)*x11861*x11863))+((r12*x11862*x11863))+((sj0*x11860*x11863)))))+(IKabs(((((-1.0)*x11862))+(((-1.0)*r12*x11861))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11864=((-1.0)*r11);
CheckValue<IkReal> x11867 = IKatan2WithCheck(IkReal(x11864),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11867.valid){
continue;
}
IkReal x11865=((1.0)*(x11867.value));
IkReal x11866=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11865)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11865)));
IkReal gconst10=(x11864*x11866);
IkReal gconst11=((1.0)*r10*x11866);
IkReal x11868=r12*r12;
IkReal x11869=(cj1*cj2*r22);
IkReal x11870=(r22*sj1*sj2);
CheckValue<IkReal> x11874=IKPowWithIntegerCheck(((-1.0)+x11868),-1);
if(!x11874.valid){
continue;
}
IkReal x11871=x11874.value;
if((((1.0)+(((-1.0)*x11868)))) < -0.00001)
continue;
IkReal x11872=IKsqrt(((1.0)+(((-1.0)*x11868))));
IkReal x11873=(r12*x11871*x11872);
j4eval[0]=((IKabs((((x11869*x11873))+(((-1.0)*x11870*x11873)))))+(IKabs(((((-1.0)*x11869))+x11870))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11875=((-1.0)*r11);
CheckValue<IkReal> x11878 = IKatan2WithCheck(IkReal(x11875),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11878.valid){
continue;
}
IkReal x11876=((1.0)*(x11878.value));
IkReal x11877=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11876)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11876)));
IkReal gconst10=(x11875*x11877);
IkReal gconst11=((1.0)*r10*x11877);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11879=((-1.0)*r11);
CheckValue<IkReal> x11882 = IKatan2WithCheck(IkReal(x11879),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11882.valid){
continue;
}
IkReal x11880=((1.0)*(x11882.value));
IkReal x11881=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11880)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11880)));
IkReal gconst10=(x11879*x11881);
IkReal gconst11=((1.0)*r10*x11881);
IkReal x11883=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11887=IKPowWithIntegerCheck(x11883,-1);
if(!x11887.valid){
continue;
}
IkReal x11884=x11887.value;
IkReal x11885=((1.0)*x11884);
IkReal x11886=((((-1.0)*x11885*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11884))+(((-1.0)*(r02*r02)))+(((-1.0)*x11885*(r01*r01)*(r11*r11))));
j4eval[0]=x11886;
j4eval[1]=IKsign(x11886);
j4eval[2]=r02;
j4eval[3]=x11883;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11888=((-1.0)*r11);
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal(x11888),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
IkReal x11889=((1.0)*(x11891.value));
IkReal x11890=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11889)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11889)));
IkReal gconst10=(x11888*x11890);
IkReal gconst11=((1.0)*r10*x11890);
IkReal x11892=r12*r12;
IkReal x11893=(cj1*cj2*r22);
IkReal x11894=(r22*sj1*sj2);
CheckValue<IkReal> x11898=IKPowWithIntegerCheck(((-1.0)+x11892),-1);
if(!x11898.valid){
continue;
}
IkReal x11895=x11898.value;
if((((1.0)+(((-1.0)*x11892)))) < -0.00001)
continue;
IkReal x11896=IKsqrt(((1.0)+(((-1.0)*x11892))));
IkReal x11897=(r12*x11895*x11896);
j4eval[0]=((IKabs(((((-1.0)*x11894*x11897))+((x11893*x11897)))))+(IKabs(((((-1.0)*x11893))+x11894))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11899=(gconst10*r21);
IkReal x11900=(gconst11*r20);
IkReal x11901=(sj1*sj2);
IkReal x11902=(cj1*cj2);
CheckValue<IkReal> x11903=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x11899*x11900))+(x11899*x11899)+(x11900*x11900))),-1);
if(!x11903.valid){
continue;
}
CheckValue<IkReal> x11904 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11902))+((r22*x11901)))),IkReal(((((-1.0)*x11900*x11901))+(((-1.0)*x11899*x11902))+((x11900*x11902))+((x11899*x11901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11903.value)))+(x11904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11905=IKsin(j4);
IkReal x11906=IKcos(j4);
IkReal x11907=((1.0)*cj2);
IkReal x11908=((1.0)*x11906);
IkReal x11909=(gconst10*x11905);
IkReal x11910=((1.0)*x11905);
IkReal x11911=(gconst11*x11906);
IkReal x11912=(gconst11*x11910);
evalcond[0]=((((-1.0)*r22*x11908))+(((-1.0)*r20*x11912))+((r21*x11909)));
evalcond[1]=((((-1.0)*r12*x11908))+(((-1.0)*r10*x11912))+((r11*x11909)));
evalcond[2]=(((r00*x11911))+(((-1.0)*gconst10*r01*x11908))+(((-1.0)*r02*x11910)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11908))+((r01*x11909))+(((-1.0)*r00*x11912)));
evalcond[4]=((((-1.0)*gconst10*r21*x11908))+(((-1.0)*r22*x11910))+(((-1.0)*cj1*x11907))+((sj1*sj2))+((r20*x11911)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11907))+((r10*x11911))+(((-1.0)*gconst10*r11*x11908))+(((-1.0)*r12*x11910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11913=(gconst11*r00);
IkReal x11914=(gconst10*r01);
CheckValue<IkReal> x11915=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11914*x11914)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11913*x11913)))+(((2.0)*x11913*x11914)))),-1);
if(!x11915.valid){
continue;
}
CheckValue<IkReal> x11916 = IKatan2WithCheck(IkReal((x11913+(((-1.0)*x11914)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11915.value)))+(x11916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11917=IKsin(j4);
IkReal x11918=IKcos(j4);
IkReal x11919=((1.0)*cj2);
IkReal x11920=((1.0)*x11918);
IkReal x11921=(gconst10*x11917);
IkReal x11922=((1.0)*x11917);
IkReal x11923=(gconst11*x11918);
IkReal x11924=(gconst11*x11922);
evalcond[0]=((((-1.0)*r20*x11924))+((r21*x11921))+(((-1.0)*r22*x11920)));
evalcond[1]=((((-1.0)*r10*x11924))+((r11*x11921))+(((-1.0)*r12*x11920)));
evalcond[2]=((((-1.0)*r02*x11922))+((r00*x11923))+(((-1.0)*gconst10*r01*x11920)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11920))+(((-1.0)*r00*x11924))+((r01*x11921)));
evalcond[4]=((((-1.0)*cj1*x11919))+((r20*x11923))+((sj1*sj2))+(((-1.0)*r22*x11922))+(((-1.0)*gconst10*r21*x11920)));
evalcond[5]=(((r10*x11923))+(((-1.0)*gconst10*r11*x11920))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11919))+(((-1.0)*r12*x11922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11925 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11925.valid){
continue;
}
CheckValue<IkReal> x11926=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11925.value)+(((1.5707963267949)*(x11926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11927=IKsin(j4);
IkReal x11928=IKcos(j4);
IkReal x11929=((1.0)*cj2);
IkReal x11930=((1.0)*x11928);
IkReal x11931=(gconst10*x11927);
IkReal x11932=((1.0)*x11927);
IkReal x11933=(gconst11*x11928);
IkReal x11934=(gconst11*x11932);
evalcond[0]=(((r21*x11931))+(((-1.0)*r22*x11930))+(((-1.0)*r20*x11934)));
evalcond[1]=((((-1.0)*r10*x11934))+((r11*x11931))+(((-1.0)*r12*x11930)));
evalcond[2]=((((-1.0)*gconst10*r01*x11930))+(((-1.0)*r02*x11932))+((r00*x11933)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11930))+(((-1.0)*r00*x11934))+((r01*x11931)));
evalcond[4]=((((-1.0)*cj1*x11929))+((r20*x11933))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11930))+(((-1.0)*r22*x11932)));
evalcond[5]=(((r10*x11933))+(((-1.0)*gconst10*r11*x11930))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11932))+(((-1.0)*sj1*x11929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11935=((-1.0)*r11);
CheckValue<IkReal> x11938 = IKatan2WithCheck(IkReal(x11935),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11938.valid){
continue;
}
IkReal x11936=((1.0)*(x11938.value));
IkReal x11937=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11936)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11936)));
IkReal gconst10=(x11935*x11937);
IkReal gconst11=((1.0)*r10*x11937);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11939=((-1.0)*r11);
CheckValue<IkReal> x11942 = IKatan2WithCheck(IkReal(x11939),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11942.valid){
continue;
}
IkReal x11940=((1.0)*(x11942.value));
IkReal x11941=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11940)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11940)));
IkReal gconst10=(x11939*x11941);
IkReal gconst11=((1.0)*r10*x11941);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11943=((-1.0)*r11);
CheckValue<IkReal> x11946 = IKatan2WithCheck(IkReal(x11943),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11946.valid){
continue;
}
IkReal x11944=((1.0)*(x11946.value));
IkReal x11945=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11944)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11944)));
IkReal gconst10=(x11943*x11945);
IkReal gconst11=((1.0)*r10*x11945);
IkReal x11947=r12*r12;
CheckValue<IkReal> x11950=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11947))),-1);
if(!x11950.valid){
continue;
}
IkReal x11948=x11950.value;
IkReal x11949=((1.0)*x11948);
j4eval[0]=IKsign((x11947+(((2.0)*x11948*(r10*r10)*(r11*r11)))+((x11949*(r11*r11*r11*r11)))+((x11949*(r10*r10*r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11951=(cj2*sj1);
IkReal x11952=(gconst10*r11);
IkReal x11953=(gconst11*r10);
IkReal x11954=(cj1*sj2);
CheckValue<IkReal> x11955=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11953*x11953)+(x11952*x11952)+(((-2.0)*x11952*x11953)))),-1);
if(!x11955.valid){
continue;
}
CheckValue<IkReal> x11956 = IKatan2WithCheck(IkReal((((r12*x11954))+((r12*x11951)))),IkReal(((((-1.0)*x11951*x11953))+((x11952*x11954))+((x11951*x11952))+(((-1.0)*x11953*x11954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11955.value)))+(x11956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11957=IKsin(j4);
IkReal x11958=IKcos(j4);
IkReal x11959=((1.0)*x11958);
IkReal x11960=(gconst10*x11957);
IkReal x11961=((1.0)*x11957);
IkReal x11962=(gconst11*x11958);
IkReal x11963=(gconst11*x11961);
evalcond[0]=((((-1.0)*r20*x11963))+(((-1.0)*r22*x11959))+((r21*x11960)));
evalcond[1]=((((-1.0)*r12*x11959))+(((-1.0)*r10*x11963))+((r11*x11960)));
evalcond[2]=((((-1.0)*gconst10*r01*x11959))+((r00*x11962))+(((-1.0)*r02*x11961)));
evalcond[3]=((1.0)+((r01*x11960))+(((-1.0)*r02*x11959))+(((-1.0)*r00*x11963)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11959))+(((-1.0)*r12*x11961))+((cj1*sj2))+((r10*x11962)));
evalcond[5]=((((-1.0)*gconst10*r21*x11959))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11962))+(((-1.0)*r22*x11961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11964=(gconst11*r00);
IkReal x11965=(gconst10*r01);
CheckValue<IkReal> x11966=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11964*x11965))+(x11965*x11965)+(x11964*x11964)+(r02*r02))),-1);
if(!x11966.valid){
continue;
}
CheckValue<IkReal> x11967 = IKatan2WithCheck(IkReal((x11964+(((-1.0)*x11965)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11966.value)))+(x11967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11968=IKsin(j4);
IkReal x11969=IKcos(j4);
IkReal x11970=((1.0)*x11969);
IkReal x11971=(gconst10*x11968);
IkReal x11972=((1.0)*x11968);
IkReal x11973=(gconst11*x11969);
IkReal x11974=(gconst11*x11972);
evalcond[0]=((((-1.0)*r20*x11974))+(((-1.0)*r22*x11970))+((r21*x11971)));
evalcond[1]=((((-1.0)*r10*x11974))+(((-1.0)*r12*x11970))+((r11*x11971)));
evalcond[2]=(((r00*x11973))+(((-1.0)*gconst10*r01*x11970))+(((-1.0)*r02*x11972)));
evalcond[3]=((1.0)+((r01*x11971))+(((-1.0)*r00*x11974))+(((-1.0)*r02*x11970)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11972))+(((-1.0)*gconst10*r11*x11970))+((cj1*sj2))+((r10*x11973)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11973))+(((-1.0)*r22*x11972))+(((-1.0)*gconst10*r21*x11970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11975=((1.0)*gconst11);
CheckValue<IkReal> x11976 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11976.valid){
continue;
}
CheckValue<IkReal> x11977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11975))+(((-1.0)*gconst10*r20)))),-1);
if(!x11977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11976.value)+(((1.5707963267949)*(x11977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11978=IKsin(j4);
IkReal x11979=IKcos(j4);
IkReal x11980=((1.0)*x11979);
IkReal x11981=(gconst10*x11978);
IkReal x11982=((1.0)*x11978);
IkReal x11983=(gconst11*x11979);
IkReal x11984=(gconst11*x11982);
evalcond[0]=(((r21*x11981))+(((-1.0)*r22*x11980))+(((-1.0)*r20*x11984)));
evalcond[1]=((((-1.0)*r12*x11980))+(((-1.0)*r10*x11984))+((r11*x11981)));
evalcond[2]=((((-1.0)*gconst10*r01*x11980))+(((-1.0)*r02*x11982))+((r00*x11983)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11980))+(((-1.0)*r00*x11984))+((r01*x11981)));
evalcond[4]=((((-1.0)*r12*x11982))+((cj2*sj1))+((r10*x11983))+(((-1.0)*gconst10*r11*x11980))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11980))+((r20*x11983))+(((-1.0)*r22*x11982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11985=((-1.0)*r11);
IkReal x11986=((-1.0)*r10);
CheckValue<IkReal> x11988 = IKatan2WithCheck(IkReal(x11985),IkReal(x11986),IKFAST_ATAN2_MAGTHRESH);
if(!x11988.valid){
continue;
}
IkReal x11987=((1.0)*(x11988.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11987)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11986);
rxp1_1=(px*r21);
rxp1_2=(px*x11985);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11987)));
IkReal gconst10=x11985;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11989=((-1.0)*r11);
IkReal x11990=((-1.0)*r10);
CheckValue<IkReal> x11992 = IKatan2WithCheck(IkReal(x11989),IkReal(x11990),IKFAST_ATAN2_MAGTHRESH);
if(!x11992.valid){
continue;
}
IkReal x11991=((1.0)*(x11992.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11991)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11990);
rxp1_1=(px*r21);
rxp1_2=(px*x11989);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11991)));
IkReal gconst10=x11989;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11993=((-1.0)*r11);
IkReal x11994=((-1.0)*r10);
CheckValue<IkReal> x11996 = IKatan2WithCheck(IkReal(x11993),IkReal(x11994),IKFAST_ATAN2_MAGTHRESH);
if(!x11996.valid){
continue;
}
IkReal x11995=((1.0)*(x11996.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11995)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11994);
rxp1_1=(px*r21);
rxp1_2=(px*x11993);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11995)));
IkReal gconst10=x11993;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11999=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11999.valid){
continue;
}
IkReal x11997=x11999.value;
IkReal x11998=(sj0*x11997);
cj4array[0]=(((cj1*sj2*x11998))+((cj2*sj1*x11998)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12000=IKsin(j4);
IkReal x12001=IKcos(j4);
IkReal x12002=(gconst10*r21);
IkReal x12003=(gconst11*r20);
IkReal x12004=((1.0)*x12000);
IkReal x12005=((1.0)*x12001);
evalcond[0]=((-1.0)*r02*x12000);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12005)));
evalcond[2]=(((x12000*x12002))+(((-1.0)*x12003*x12004)));
evalcond[3]=(((gconst10*r11*x12000))+(((-1.0)*gconst11*r10*x12004)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12002*x12005))+((x12001*x12003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12007=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12007.valid){
continue;
}
IkReal x12006=x12007.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12006))+((cj1*cj2*x12006)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12008=IKsin(j4);
IkReal x12009=IKcos(j4);
IkReal x12010=((1.0)*sj0);
IkReal x12011=(gconst10*x12008);
IkReal x12012=((1.0)*x12009);
IkReal x12013=((1.0)*gconst11*x12008);
evalcond[0]=((-1.0)*r02*x12008);
evalcond[1]=((((-1.0)*r02*x12012))+(((-1.0)*x12010)));
evalcond[2]=(((r21*x12011))+(((-1.0)*r20*x12013)));
evalcond[3]=(((r11*x12011))+(((-1.0)*r10*x12013)));
evalcond[4]=((((-1.0)*cj2*sj1*x12010))+(((-1.0)*cj1*sj2*x12010))+((gconst11*r10*x12009))+(((-1.0)*gconst10*r11*x12012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12014=IKPowWithIntegerCheck(r02,-1);
if(!x12014.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12014.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12015=IKsin(j4);
IkReal x12016=IKcos(j4);
IkReal x12017=(gconst10*r21);
IkReal x12018=((1.0)*sj0);
IkReal x12019=(gconst10*r11);
IkReal x12020=(gconst11*x12016);
IkReal x12021=((1.0)*x12016);
IkReal x12022=((1.0)*gconst11*x12015);
evalcond[0]=((-1.0)*r02*x12015);
evalcond[1]=((((-1.0)*r20*x12022))+((x12015*x12017)));
evalcond[2]=(((x12015*x12019))+(((-1.0)*r10*x12022)));
evalcond[3]=(((r20*x12020))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12017*x12021)));
evalcond[4]=((((-1.0)*cj2*sj1*x12018))+(((-1.0)*cj1*sj2*x12018))+((r10*x12020))+(((-1.0)*x12019*x12021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12023=((1.0)*gconst11);
CheckValue<IkReal> x12024 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12023))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12024.valid){
continue;
}
CheckValue<IkReal> x12025=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12024.value)+(((1.5707963267949)*(x12025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12026=IKsin(j4);
IkReal x12027=IKcos(j4);
IkReal x12028=((1.0)*cj2);
IkReal x12029=((1.0)*sj0);
IkReal x12030=(cj1*sj2);
IkReal x12031=(gconst10*x12026);
IkReal x12032=((1.0)*x12027);
IkReal x12033=(gconst11*x12027);
IkReal x12034=((1.0)*x12026);
IkReal x12035=(gconst11*x12034);
evalcond[0]=((((-1.0)*r20*x12035))+((r21*x12031)));
evalcond[1]=(cj0+(((-1.0)*r12*x12032))+((r11*x12031))+(((-1.0)*r10*x12035)));
evalcond[2]=((((-1.0)*cj1*x12028))+((r20*x12033))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12032)));
evalcond[3]=((((-1.0)*x12029))+((r01*x12031))+(((-1.0)*r02*x12032))+(((-1.0)*r00*x12035)));
evalcond[4]=((((-1.0)*gconst10*r01*x12032))+((r00*x12033))+(((-1.0)*r02*x12034))+(((-1.0)*cj0*sj1*x12028))+(((-1.0)*cj0*x12030)));
evalcond[5]=((((-1.0)*x12029*x12030))+(((-1.0)*gconst10*r11*x12032))+(((-1.0)*r12*x12034))+((r10*x12033))+(((-1.0)*sj0*sj1*x12028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12036=(gconst10*r21);
IkReal x12037=(gconst11*r20);
IkReal x12038=(sj1*sj2);
IkReal x12039=(cj1*cj2);
CheckValue<IkReal> x12040 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12039))+((r22*x12038)))),IkReal(((((-1.0)*x12037*x12038))+(((-1.0)*x12036*x12039))+((x12036*x12038))+((x12037*x12039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12040.valid){
continue;
}
CheckValue<IkReal> x12041=IKPowWithIntegerCheck(IKsign(((x12036*x12036)+(r22*r22)+(x12037*x12037)+(((-2.0)*x12036*x12037)))),-1);
if(!x12041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12040.value)+(((1.5707963267949)*(x12041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12042=IKsin(j4);
IkReal x12043=IKcos(j4);
IkReal x12044=((1.0)*cj2);
IkReal x12045=((1.0)*sj0);
IkReal x12046=(cj1*sj2);
IkReal x12047=((1.0)*x12043);
IkReal x12048=(gconst10*x12042);
IkReal x12049=((1.0)*x12042);
IkReal x12050=(gconst11*x12043);
IkReal x12051=(gconst11*x12049);
evalcond[0]=((((-1.0)*r20*x12051))+((r21*x12048))+(((-1.0)*r22*x12047)));
evalcond[1]=((((-1.0)*r12*x12047))+(((-1.0)*r10*x12051))+cj0+((r11*x12048)));
evalcond[2]=((((-1.0)*x12045))+((r01*x12048))+(((-1.0)*r00*x12051))+(((-1.0)*r02*x12047)));
evalcond[3]=(((r20*x12050))+(((-1.0)*cj1*x12044))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12047))+(((-1.0)*r22*x12049)));
evalcond[4]=((((-1.0)*cj0*x12046))+(((-1.0)*gconst10*r01*x12047))+((r00*x12050))+(((-1.0)*r02*x12049))+(((-1.0)*cj0*sj1*x12044)));
evalcond[5]=(((r10*x12050))+(((-1.0)*r12*x12049))+(((-1.0)*x12045*x12046))+(((-1.0)*sj0*sj1*x12044))+(((-1.0)*gconst10*r11*x12047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12052=((1.0)*sj0);
IkReal x12053=((1.0)*gconst10);
CheckValue<IkReal> x12054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12053))+(((-1.0)*gconst11*r21)))),-1);
if(!x12054.valid){
continue;
}
CheckValue<IkReal> x12055 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12052)))),IkReal(((((-1.0)*gconst10*r11*x12052))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12053))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12054.value)))+(x12055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12056=IKsin(j4);
IkReal x12057=IKcos(j4);
IkReal x12058=((1.0)*cj2);
IkReal x12059=((1.0)*sj0);
IkReal x12060=(cj1*sj2);
IkReal x12061=((1.0)*x12057);
IkReal x12062=(gconst10*x12056);
IkReal x12063=((1.0)*x12056);
IkReal x12064=(gconst11*x12057);
IkReal x12065=(gconst11*x12063);
evalcond[0]=(((r21*x12062))+(((-1.0)*r20*x12065))+(((-1.0)*r22*x12061)));
evalcond[1]=(cj0+(((-1.0)*r10*x12065))+(((-1.0)*r12*x12061))+((r11*x12062)));
evalcond[2]=((((-1.0)*x12059))+((r01*x12062))+(((-1.0)*r02*x12061))+(((-1.0)*r00*x12065)));
evalcond[3]=((((-1.0)*cj1*x12058))+(((-1.0)*gconst10*r21*x12061))+((sj1*sj2))+((r20*x12064))+(((-1.0)*r22*x12063)));
evalcond[4]=(((r00*x12064))+(((-1.0)*cj0*x12060))+(((-1.0)*cj0*sj1*x12058))+(((-1.0)*r02*x12063))+(((-1.0)*gconst10*r01*x12061)));
evalcond[5]=(((r10*x12064))+(((-1.0)*gconst10*r11*x12061))+(((-1.0)*r12*x12063))+(((-1.0)*sj0*sj1*x12058))+(((-1.0)*x12059*x12060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12066=((1.0)*gconst11);
CheckValue<IkReal> x12067 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12066))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12067.valid){
continue;
}
CheckValue<IkReal> x12068=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12066)))),-1);
if(!x12068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12067.value)+(((1.5707963267949)*(x12068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12069=IKsin(j4);
IkReal x12070=IKcos(j4);
IkReal x12071=((1.0)*cj2);
IkReal x12072=((1.0)*sj0);
IkReal x12073=(cj1*sj2);
IkReal x12074=((1.0)*x12070);
IkReal x12075=(gconst10*x12069);
IkReal x12076=((1.0)*x12069);
IkReal x12077=(gconst11*x12070);
IkReal x12078=(gconst11*x12076);
evalcond[0]=((((-1.0)*r20*x12078))+(((-1.0)*r22*x12074))+((r21*x12075)));
evalcond[1]=(cj0+((r11*x12075))+(((-1.0)*r10*x12078))+(((-1.0)*r12*x12074)));
evalcond[2]=((((-1.0)*r02*x12074))+(((-1.0)*r00*x12078))+(((-1.0)*x12072))+((r01*x12075)));
evalcond[3]=((((-1.0)*gconst10*r21*x12074))+((sj1*sj2))+((r20*x12077))+(((-1.0)*cj1*x12071))+(((-1.0)*r22*x12076)));
evalcond[4]=((((-1.0)*gconst10*r01*x12074))+(((-1.0)*r02*x12076))+(((-1.0)*cj0*sj1*x12071))+(((-1.0)*cj0*x12073))+((r00*x12077)));
evalcond[5]=((((-1.0)*sj0*sj1*x12071))+(((-1.0)*x12072*x12073))+(((-1.0)*gconst10*r11*x12074))+((r10*x12077))+(((-1.0)*r12*x12076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12079=((-1.0)*r11);
CheckValue<IkReal> x12082 = IKatan2WithCheck(IkReal(x12079),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12082.valid){
continue;
}
IkReal x12080=((1.0)*(x12082.value));
IkReal x12081=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12080)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12080)));
IkReal gconst10=(x12079*x12081);
IkReal gconst11=((1.0)*r10*x12081);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12083=((-1.0)*r11);
CheckValue<IkReal> x12086 = IKatan2WithCheck(IkReal(x12083),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12086.valid){
continue;
}
IkReal x12084=((1.0)*(x12086.value));
IkReal x12085=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12084)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12084)));
IkReal gconst10=(x12083*x12085);
IkReal gconst11=((1.0)*r10*x12085);
IkReal x12087=r12*r12;
IkReal x12088=((1.0)*sj0);
IkReal x12089=(cj0*r02);
IkReal x12090=x11826;
j4eval[0]=((IKabs(((((-1.0)*x12088*x12090))+((r12*x12089*x12090))+((sj0*x12087*x12090)))))+(IKabs(((((-1.0)*r12*x12088))+(((-1.0)*x12089))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12091=((-1.0)*r11);
CheckValue<IkReal> x12094 = IKatan2WithCheck(IkReal(x12091),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12094.valid){
continue;
}
IkReal x12092=((1.0)*(x12094.value));
IkReal x12093=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12092)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12092)));
IkReal gconst10=(x12091*x12093);
IkReal gconst11=((1.0)*r10*x12093);
IkReal x12095=r12*r12;
IkReal x12096=((1.0)+(((-1.0)*x12095)));
IkReal x12097=(r22*sj1*sj2);
IkReal x12098=(cj1*cj2*r22);
CheckValue<IkReal> x12105=IKPowWithIntegerCheck(x12096,-1);
if(!x12105.valid){
continue;
}
IkReal x12099=x12105.value;
CheckValue<IkReal> x12106=IKPowWithIntegerCheck(((-1.0)+x12095),-1);
if(!x12106.valid){
continue;
}
IkReal x12100=x12106.value;
IkReal x12101=((1.0)*x12099);
if((x12096) < -0.00001)
continue;
IkReal x12102=IKsqrt(x12096);
IkReal x12103=(r12*x12100*x12102);
IkReal x12104=((((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12099))+(((-1.0)*x12101*(r11*r11)*(r21*r21)))+(((-1.0)*x12101*(r10*r10)*(r20*r20))));
j4eval[0]=x12104;
j4eval[1]=((IKabs(((((-1.0)*x12098))+x12097)))+(IKabs((((x12098*x12103))+(((-1.0)*x12097*x12103))))));
j4eval[2]=IKsign(x12104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12107=((-1.0)*r11);
CheckValue<IkReal> x12110 = IKatan2WithCheck(IkReal(x12107),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12110.valid){
continue;
}
IkReal x12108=((1.0)*(x12110.value));
IkReal x12109=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12108)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12108)));
IkReal gconst10=(x12107*x12109);
IkReal gconst11=((1.0)*r10*x12109);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12111=((-1.0)*r11);
CheckValue<IkReal> x12114 = IKatan2WithCheck(IkReal(x12111),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12114.valid){
continue;
}
IkReal x12112=((1.0)*(x12114.value));
IkReal x12113=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12112)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12112)));
IkReal gconst10=(x12111*x12113);
IkReal gconst11=((1.0)*r10*x12113);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12115=((-1.0)*r11);
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(x12115),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
IkReal x12116=((1.0)*(x12118.value));
IkReal x12117=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12116)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12116)));
IkReal gconst10=(x12115*x12117);
IkReal gconst11=((1.0)*r10*x12117);
IkReal x12119=(cj1*r02*sj2);
IkReal x12120=(cj2*r02*sj1);
IkReal x12121=x11826;
IkReal x12122=(r12*x12121);
j4eval[0]=((IKabs((x12120+x12119)))+(IKabs((((x12119*x12122))+((x12120*x12122))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12123=(cj1*sj2);
IkReal x12124=(cj2*sj1);
IkReal x12125=(gconst11*r00);
IkReal x12126=((1.0)*gconst10*r01);
CheckValue<IkReal> x12127=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12127.valid){
continue;
}
CheckValue<IkReal> x12128 = IKatan2WithCheck(IkReal((((x12124*x12125))+((x12123*x12125))+(((-1.0)*x12124*x12126))+(((-1.0)*x12123*x12126)))),IkReal((((r02*x12123))+((r02*x12124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12127.value)))+(x12128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12129=IKcos(j4);
IkReal x12130=IKsin(j4);
IkReal x12131=((1.0)*cj2);
IkReal x12132=((1.0)*x12129);
IkReal x12133=(gconst10*x12129);
IkReal x12134=(gconst10*x12130);
IkReal x12135=((1.0)*gconst11*x12130);
evalcond[0]=((((-1.0)*gconst11*r00*x12132))+((r01*x12133))+((r02*x12130)));
evalcond[1]=((((-1.0)*r20*x12135))+((r21*x12134))+(((-1.0)*r22*x12132)));
evalcond[2]=((((-1.0)*r12*x12132))+(((-1.0)*r10*x12135))+((r11*x12134)));
evalcond[3]=((-1.0)+((r01*x12134))+(((-1.0)*r00*x12135))+(((-1.0)*r02*x12132)));
evalcond[4]=((((-1.0)*cj1*x12131))+((sj1*sj2))+((r21*x12133))+((r22*x12130))+(((-1.0)*gconst11*r20*x12132)));
evalcond[5]=(((r12*x12130))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12132))+((r11*x12133))+(((-1.0)*sj1*x12131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12136=(gconst10*r01);
IkReal x12137=(gconst11*r00);
CheckValue<IkReal> x12138 = IKatan2WithCheck(IkReal((x12136+(((-1.0)*x12137)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12138.valid){
continue;
}
CheckValue<IkReal> x12139=IKPowWithIntegerCheck(IKsign(((x12137*x12137)+(x12136*x12136)+(((-2.0)*x12136*x12137))+(r02*r02))),-1);
if(!x12139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12138.value)+(((1.5707963267949)*(x12139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12140=IKcos(j4);
IkReal x12141=IKsin(j4);
IkReal x12142=((1.0)*cj2);
IkReal x12143=((1.0)*x12140);
IkReal x12144=(gconst10*x12140);
IkReal x12145=(gconst10*x12141);
IkReal x12146=((1.0)*gconst11*x12141);
evalcond[0]=(((r02*x12141))+((r01*x12144))+(((-1.0)*gconst11*r00*x12143)));
evalcond[1]=((((-1.0)*r22*x12143))+(((-1.0)*r20*x12146))+((r21*x12145)));
evalcond[2]=((((-1.0)*r12*x12143))+((r11*x12145))+(((-1.0)*r10*x12146)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12146))+(((-1.0)*r02*x12143))+((r01*x12145)));
evalcond[4]=(((r22*x12141))+(((-1.0)*gconst11*r20*x12143))+((sj1*sj2))+(((-1.0)*cj1*x12142))+((r21*x12144)));
evalcond[5]=((((-1.0)*gconst11*r10*x12143))+(((-1.0)*cj1*sj2))+((r12*x12141))+((r11*x12144))+(((-1.0)*sj1*x12142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12147 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12147.valid){
continue;
}
CheckValue<IkReal> x12148=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12147.value)+(((1.5707963267949)*(x12148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12149=IKcos(j4);
IkReal x12150=IKsin(j4);
IkReal x12151=((1.0)*cj2);
IkReal x12152=((1.0)*x12149);
IkReal x12153=(gconst10*x12149);
IkReal x12154=(gconst10*x12150);
IkReal x12155=((1.0)*gconst11*x12150);
evalcond[0]=(((r02*x12150))+((r01*x12153))+(((-1.0)*gconst11*r00*x12152)));
evalcond[1]=((((-1.0)*r22*x12152))+((r21*x12154))+(((-1.0)*r20*x12155)));
evalcond[2]=((((-1.0)*r12*x12152))+((r11*x12154))+(((-1.0)*r10*x12155)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12152))+(((-1.0)*r00*x12155))+((r01*x12154)));
evalcond[4]=((((-1.0)*gconst11*r20*x12152))+((r22*x12150))+((sj1*sj2))+((r21*x12153))+(((-1.0)*cj1*x12151)));
evalcond[5]=((((-1.0)*gconst11*r10*x12152))+((r12*x12150))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12151))+((r11*x12153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12156=((-1.0)*r11);
CheckValue<IkReal> x12159 = IKatan2WithCheck(IkReal(x12156),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12159.valid){
continue;
}
IkReal x12157=((1.0)*(x12159.value));
IkReal x12158=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12157)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12157)));
IkReal gconst10=(x12156*x12158);
IkReal gconst11=((1.0)*r10*x12158);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12160=((-1.0)*r11);
CheckValue<IkReal> x12163 = IKatan2WithCheck(IkReal(x12160),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12163.valid){
continue;
}
IkReal x12161=((1.0)*(x12163.value));
IkReal x12162=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12161)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12161)));
IkReal gconst10=(x12160*x12162);
IkReal gconst11=((1.0)*r10*x12162);
IkReal x12164=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12168=IKPowWithIntegerCheck(x12164,-1);
if(!x12168.valid){
continue;
}
IkReal x12165=x12168.value;
IkReal x12166=((1.0)*x12165);
IkReal x12167=((((-2.0)*r00*r01*r10*r11*x12165))+(((-1.0)*(r02*r02)))+(((-1.0)*x12166*(r01*r01)*(r11*r11)))+(((-1.0)*x12166*(r00*r00)*(r10*r10))));
j4eval[0]=x12167;
j4eval[1]=r02;
j4eval[2]=x12164;
j4eval[3]=IKsign(x12167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12169=((-1.0)*r11);
CheckValue<IkReal> x12172 = IKatan2WithCheck(IkReal(x12169),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12172.valid){
continue;
}
IkReal x12170=((1.0)*(x12172.value));
IkReal x12171=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12170)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12170)));
IkReal gconst10=(x12169*x12171);
IkReal gconst11=((1.0)*r10*x12171);
IkReal x12173=r12*r12;
IkReal x12174=((1.0)*r02);
IkReal x12175=(cj1*sj2);
IkReal x12176=(cj2*sj1);
CheckValue<IkReal> x12180=IKPowWithIntegerCheck(((-1.0)+x12173),-1);
if(!x12180.valid){
continue;
}
IkReal x12177=x12180.value;
if((((1.0)+(((-1.0)*x12173)))) < -0.00001)
continue;
IkReal x12178=IKsqrt(((1.0)+(((-1.0)*x12173))));
IkReal x12179=(r12*x12177*x12178);
j4eval[0]=((IKabs(((((-1.0)*x12174*x12175))+(((-1.0)*x12174*x12176)))))+(IKabs(((((-1.0)*x12174*x12175*x12179))+(((-1.0)*x12174*x12176*x12179))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12181=(cj1*sj2);
IkReal x12182=(gconst10*r01);
IkReal x12183=(cj2*sj1);
IkReal x12184=((1.0)*r02);
IkReal x12185=((1.0)*gconst11*r00);
CheckValue<IkReal> x12186=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12186.valid){
continue;
}
CheckValue<IkReal> x12187 = IKatan2WithCheck(IkReal(((((-1.0)*x12183*x12185))+((x12182*x12183))+((x12181*x12182))+(((-1.0)*x12181*x12185)))),IkReal(((((-1.0)*x12183*x12184))+(((-1.0)*x12181*x12184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12186.value)))+(x12187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12188=IKcos(j4);
IkReal x12189=IKsin(j4);
IkReal x12190=((1.0)*x12188);
IkReal x12191=(gconst10*x12188);
IkReal x12192=(gconst10*x12189);
IkReal x12193=((1.0)*gconst11*x12189);
evalcond[0]=((((-1.0)*gconst11*r00*x12190))+((r02*x12189))+((r01*x12191)));
evalcond[1]=((((-1.0)*r20*x12193))+((r21*x12192))+(((-1.0)*r22*x12190)));
evalcond[2]=(((r11*x12192))+(((-1.0)*r10*x12193))+(((-1.0)*r12*x12190)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12190))+((r01*x12192))+(((-1.0)*r00*x12193)));
evalcond[4]=(((cj2*sj1))+((r12*x12189))+((cj1*sj2))+((r11*x12191))+(((-1.0)*gconst11*r10*x12190)));
evalcond[5]=(((r21*x12191))+(((-1.0)*cj1*cj2))+((r22*x12189))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12194=(gconst10*r01);
IkReal x12195=(gconst11*r00);
CheckValue<IkReal> x12196 = IKatan2WithCheck(IkReal((x12194+(((-1.0)*x12195)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12196.valid){
continue;
}
CheckValue<IkReal> x12197=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12194*x12194)))+(((-1.0)*(x12195*x12195)))+(((2.0)*x12194*x12195)))),-1);
if(!x12197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12196.value)+(((1.5707963267949)*(x12197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12198=IKcos(j4);
IkReal x12199=IKsin(j4);
IkReal x12200=((1.0)*x12198);
IkReal x12201=(gconst10*x12198);
IkReal x12202=(gconst10*x12199);
IkReal x12203=((1.0)*gconst11*x12199);
evalcond[0]=((((-1.0)*gconst11*r00*x12200))+((r02*x12199))+((r01*x12201)));
evalcond[1]=((((-1.0)*r22*x12200))+((r21*x12202))+(((-1.0)*r20*x12203)));
evalcond[2]=((((-1.0)*r12*x12200))+(((-1.0)*r10*x12203))+((r11*x12202)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12200))+(((-1.0)*r00*x12203))+((r01*x12202)));
evalcond[4]=(((cj2*sj1))+((r12*x12199))+(((-1.0)*gconst11*r10*x12200))+((cj1*sj2))+((r11*x12201)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12199))+(((-1.0)*gconst11*r20*x12200))+((r21*x12201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12204=((1.0)*gconst11);
CheckValue<IkReal> x12205=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12204)))),-1);
if(!x12205.valid){
continue;
}
CheckValue<IkReal> x12206 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12205.value)))+(x12206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12207=IKcos(j4);
IkReal x12208=IKsin(j4);
IkReal x12209=((1.0)*x12207);
IkReal x12210=(gconst10*x12207);
IkReal x12211=(gconst10*x12208);
IkReal x12212=((1.0)*gconst11*x12208);
evalcond[0]=(((r02*x12208))+(((-1.0)*gconst11*r00*x12209))+((r01*x12210)));
evalcond[1]=((((-1.0)*r22*x12209))+((r21*x12211))+(((-1.0)*r20*x12212)));
evalcond[2]=((((-1.0)*r12*x12209))+(((-1.0)*r10*x12212))+((r11*x12211)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12209))+(((-1.0)*r00*x12212))+((r01*x12211)));
evalcond[4]=(((cj2*sj1))+((r12*x12208))+(((-1.0)*gconst11*r10*x12209))+((cj1*sj2))+((r11*x12210)));
evalcond[5]=(((r22*x12208))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12209))+((r21*x12210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12213=((-1.0)*r11);
IkReal x12214=((-1.0)*r10);
CheckValue<IkReal> x12216 = IKatan2WithCheck(IkReal(x12213),IkReal(x12214),IKFAST_ATAN2_MAGTHRESH);
if(!x12216.valid){
continue;
}
IkReal x12215=((1.0)*(x12216.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12215)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12214);
rxp1_1=(px*r21);
rxp1_2=(px*x12213);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12215)));
IkReal gconst10=x12213;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12217=((-1.0)*r11);
IkReal x12218=((-1.0)*r10);
CheckValue<IkReal> x12220 = IKatan2WithCheck(IkReal(x12217),IkReal(x12218),IKFAST_ATAN2_MAGTHRESH);
if(!x12220.valid){
continue;
}
IkReal x12219=((1.0)*(x12220.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12219)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12218);
rxp1_1=(px*r21);
rxp1_2=(px*x12217);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12219)));
IkReal gconst10=x12217;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12221=((-1.0)*r11);
IkReal x12222=((-1.0)*r10);
CheckValue<IkReal> x12224 = IKatan2WithCheck(IkReal(x12221),IkReal(x12222),IKFAST_ATAN2_MAGTHRESH);
if(!x12224.valid){
continue;
}
IkReal x12223=((1.0)*(x12224.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12223)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12222);
rxp1_1=(px*r21);
rxp1_2=(px*x12221);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12223)));
IkReal gconst10=x12221;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12227=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12227.valid){
continue;
}
IkReal x12225=x12227.value;
IkReal x12226=(sj0*x12225);
cj4array[0]=(((cj1*sj2*x12226))+((cj2*sj1*x12226)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12228=IKsin(j4);
IkReal x12229=IKcos(j4);
IkReal x12230=(gconst10*r21);
IkReal x12231=((1.0)*x12229);
IkReal x12232=((1.0)*gconst11*x12228);
evalcond[0]=(r02*x12228);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12231)));
evalcond[2]=((((-1.0)*r20*x12232))+((x12228*x12230)));
evalcond[3]=(((gconst10*r11*x12228))+(((-1.0)*r10*x12232)));
evalcond[4]=((((-1.0)*gconst11*r20*x12231))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12229*x12230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12234=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12234.valid){
continue;
}
IkReal x12233=x12234.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12233))+((cj1*cj2*x12233)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12235=IKsin(j4);
IkReal x12236=IKcos(j4);
IkReal x12237=((1.0)*sj0);
IkReal x12238=(gconst10*x12235);
IkReal x12239=((1.0)*x12236);
IkReal x12240=((1.0)*gconst11*x12235);
evalcond[0]=(r02*x12235);
evalcond[1]=((((-1.0)*r02*x12239))+(((-1.0)*x12237)));
evalcond[2]=((((-1.0)*r20*x12240))+((r21*x12238)));
evalcond[3]=((((-1.0)*r10*x12240))+((r11*x12238)));
evalcond[4]=((((-1.0)*cj1*sj2*x12237))+(((-1.0)*gconst11*r10*x12239))+((gconst10*r11*x12236))+(((-1.0)*cj2*sj1*x12237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12241=IKPowWithIntegerCheck(r02,-1);
if(!x12241.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12241.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12242=IKsin(j4);
IkReal x12243=IKcos(j4);
IkReal x12244=(gconst10*r21);
IkReal x12245=((1.0)*cj1);
IkReal x12246=(gconst10*r11);
IkReal x12247=((1.0)*gconst11*x12242);
IkReal x12248=((1.0)*gconst11*x12243);
evalcond[0]=(r02*x12242);
evalcond[1]=((((-1.0)*r20*x12247))+((x12242*x12244)));
evalcond[2]=((((-1.0)*r10*x12247))+((x12242*x12246)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x12248))+((x12243*x12244))+(((-1.0)*cj2*x12245)));
evalcond[4]=((((-1.0)*r10*x12248))+(((-1.0)*cj2*sj0*sj1))+((x12243*x12246))+(((-1.0)*sj0*sj2*x12245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12249=((1.0)*gconst11);
CheckValue<IkReal> x12250 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12249))+((gconst10*r11*sj0))+(((-1.0)*cj0*r00*x12249))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12250.valid){
continue;
}
CheckValue<IkReal> x12251=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12250.value)+(((1.5707963267949)*(x12251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12252=IKsin(j4);
IkReal x12253=IKcos(j4);
IkReal x12254=((1.0)*gconst11);
IkReal x12255=((1.0)*cj2);
IkReal x12256=((1.0)*sj0);
IkReal x12257=(cj1*sj2);
IkReal x12258=(gconst10*x12253);
IkReal x12259=(gconst10*x12252);
IkReal x12260=((1.0)*x12253);
evalcond[0]=((((-1.0)*r20*x12252*x12254))+((r21*x12259)));
evalcond[1]=((((-1.0)*r10*x12252*x12254))+(((-1.0)*r12*x12260))+cj0+((r11*x12259)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r20*x12253*x12254))+((r21*x12258))+(((-1.0)*cj1*x12255)));
evalcond[3]=(((r01*x12259))+(((-1.0)*r00*x12252*x12254))+(((-1.0)*r02*x12260))+(((-1.0)*x12256)));
evalcond[4]=((((-1.0)*r00*x12253*x12254))+(((-1.0)*cj0*sj1*x12255))+((r01*x12258))+(((-1.0)*cj0*x12257))+((r02*x12252)));
evalcond[5]=((((-1.0)*x12256*x12257))+((r12*x12252))+((r11*x12258))+(((-1.0)*r10*x12253*x12254))+(((-1.0)*sj0*sj1*x12255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12261=(gconst10*r21);
IkReal x12262=(gconst11*r20);
IkReal x12263=(sj1*sj2);
IkReal x12264=(cj1*cj2);
CheckValue<IkReal> x12265=IKPowWithIntegerCheck(IKsign(((((2.0)*x12261*x12262))+(((-1.0)*(x12262*x12262)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12261*x12261))))),-1);
if(!x12265.valid){
continue;
}
CheckValue<IkReal> x12266 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12264))+((r22*x12263)))),IkReal(((((-1.0)*x12261*x12264))+((x12261*x12263))+((x12262*x12264))+(((-1.0)*x12262*x12263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12265.value)))+(x12266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12267=IKsin(j4);
IkReal x12268=IKcos(j4);
IkReal x12269=((1.0)*cj2);
IkReal x12270=((1.0)*sj0);
IkReal x12271=(cj1*sj2);
IkReal x12272=((1.0)*x12268);
IkReal x12273=(gconst10*x12268);
IkReal x12274=(gconst10*x12267);
IkReal x12275=((1.0)*gconst11*x12267);
evalcond[0]=(((r21*x12274))+(((-1.0)*r22*x12272))+(((-1.0)*r20*x12275)));
evalcond[1]=(cj0+(((-1.0)*r10*x12275))+(((-1.0)*r12*x12272))+((r11*x12274)));
evalcond[2]=((((-1.0)*r02*x12272))+(((-1.0)*x12270))+(((-1.0)*r00*x12275))+((r01*x12274)));
evalcond[3]=(((r21*x12273))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12272))+(((-1.0)*cj1*x12269))+((r22*x12267)));
evalcond[4]=((((-1.0)*cj0*x12271))+(((-1.0)*cj0*sj1*x12269))+(((-1.0)*gconst11*r00*x12272))+((r01*x12273))+((r02*x12267)));
evalcond[5]=(((r12*x12267))+(((-1.0)*x12270*x12271))+((r11*x12273))+(((-1.0)*gconst11*r10*x12272))+(((-1.0)*sj0*sj1*x12269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12276=((1.0)*sj0);
IkReal x12277=((1.0)*gconst10);
CheckValue<IkReal> x12278=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12277)))),-1);
if(!x12278.valid){
continue;
}
CheckValue<IkReal> x12279 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12276)))),IkReal(((((-1.0)*cj0*r01*x12277))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12276))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12278.value)))+(x12279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12280=IKsin(j4);
IkReal x12281=IKcos(j4);
IkReal x12282=((1.0)*cj2);
IkReal x12283=((1.0)*sj0);
IkReal x12284=(cj1*sj2);
IkReal x12285=((1.0)*x12281);
IkReal x12286=(gconst10*x12281);
IkReal x12287=(gconst10*x12280);
IkReal x12288=((1.0)*gconst11*x12280);
evalcond[0]=((((-1.0)*r22*x12285))+(((-1.0)*r20*x12288))+((r21*x12287)));
evalcond[1]=((((-1.0)*r10*x12288))+cj0+(((-1.0)*r12*x12285))+((r11*x12287)));
evalcond[2]=(((r01*x12287))+(((-1.0)*r00*x12288))+(((-1.0)*r02*x12285))+(((-1.0)*x12283)));
evalcond[3]=(((r22*x12280))+(((-1.0)*gconst11*r20*x12285))+(((-1.0)*cj1*x12282))+((sj1*sj2))+((r21*x12286)));
evalcond[4]=(((r02*x12280))+(((-1.0)*gconst11*r00*x12285))+(((-1.0)*cj0*sj1*x12282))+((r01*x12286))+(((-1.0)*cj0*x12284)));
evalcond[5]=((((-1.0)*sj0*sj1*x12282))+(((-1.0)*gconst11*r10*x12285))+((r12*x12280))+((r11*x12286))+(((-1.0)*x12283*x12284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12289=((1.0)*gconst11);
CheckValue<IkReal> x12290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12289)))),-1);
if(!x12290.valid){
continue;
}
CheckValue<IkReal> x12291 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12290.value)))+(x12291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12292=IKsin(j4);
IkReal x12293=IKcos(j4);
IkReal x12294=((1.0)*cj2);
IkReal x12295=((1.0)*sj0);
IkReal x12296=(cj1*sj2);
IkReal x12297=((1.0)*x12293);
IkReal x12298=(gconst10*x12293);
IkReal x12299=(gconst10*x12292);
IkReal x12300=((1.0)*gconst11*x12292);
evalcond[0]=(((r21*x12299))+(((-1.0)*r20*x12300))+(((-1.0)*r22*x12297)));
evalcond[1]=(cj0+((r11*x12299))+(((-1.0)*r10*x12300))+(((-1.0)*r12*x12297)));
evalcond[2]=(((r01*x12299))+(((-1.0)*x12295))+(((-1.0)*r00*x12300))+(((-1.0)*r02*x12297)));
evalcond[3]=(((r21*x12298))+((sj1*sj2))+((r22*x12292))+(((-1.0)*cj1*x12294))+(((-1.0)*gconst11*r20*x12297)));
evalcond[4]=((((-1.0)*cj0*sj1*x12294))+((r01*x12298))+(((-1.0)*cj0*x12296))+((r02*x12292))+(((-1.0)*gconst11*r00*x12297)));
evalcond[5]=((((-1.0)*x12295*x12296))+((r11*x12298))+((r12*x12292))+(((-1.0)*gconst11*r10*x12297))+(((-1.0)*sj0*sj1*x12294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12301=((-1.0)*r11);
CheckValue<IkReal> x12304 = IKatan2WithCheck(IkReal(x12301),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12304.valid){
continue;
}
IkReal x12302=((1.0)*(x12304.value));
IkReal x12303=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12302)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12302)));
IkReal gconst10=(x12301*x12303);
IkReal gconst11=((1.0)*r10*x12303);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12305=gconst10*gconst10;
IkReal x12306=gconst11*gconst11;
IkReal x12307=(gconst10*r21);
IkReal x12308=(cj3*r00);
IkReal x12309=(r00*sj3);
IkReal x12310=((1.0)*gconst11);
IkReal x12311=(gconst10*r20);
IkReal x12312=(r01*sj3);
IkReal x12313=(cj3*gconst11*r01);
IkReal x12314=(r21*x12305);
IkReal x12315=(r20*x12306);
CheckValue<IkReal> x12316=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12307*x12309*x12310))+((x12309*x12315))+((x12312*x12314))+(((-1.0)*x12310*x12311*x12312))+((r02*r22*sj3)))),-1);
if(!x12316.valid){
continue;
}
CheckValue<IkReal> x12317 = IKatan2WithCheck(IkReal((((r22*x12313))+((gconst10*r22*x12308)))),IkReal((((x12308*x12314))+((x12307*x12313))+(((-1.0)*x12308*x12310*x12311))+(((-1.0)*cj3*r01*x12315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12316.value)))+(x12317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12318=IKsin(j4);
IkReal x12319=IKcos(j4);
IkReal x12320=(sj1*sj2);
IkReal x12321=(gconst10*sj3);
IkReal x12322=(cj3*gconst10);
IkReal x12323=(gconst11*r20);
IkReal x12324=(gconst11*r21);
IkReal x12325=(gconst11*r00);
IkReal x12326=(cj3*gconst11);
IkReal x12327=(gconst11*r10);
IkReal x12328=((1.0)*cj1);
IkReal x12329=(cj2*sj1);
IkReal x12330=(gconst11*sj3);
IkReal x12331=(cj2*x12328);
IkReal x12332=((1.0)*x12319);
IkReal x12333=((1.0)*x12318);
IkReal x12334=(gconst10*x12318);
IkReal x12335=(cj3*x12318);
IkReal x12336=(sj3*x12319);
evalcond[0]=((((-1.0)*r22*x12332))+((r21*x12334))+(((-1.0)*x12323*x12333)));
evalcond[1]=((((-1.0)*x12327*x12333))+((r11*x12334))+(((-1.0)*r12*x12332)));
evalcond[2]=((-1.0)+((r01*x12334))+(((-1.0)*r02*x12332))+(((-1.0)*x12325*x12333)));
evalcond[3]=(((r01*x12319*x12322))+((r00*x12321))+((r01*x12330))+(((-1.0)*cj3*x12325*x12332))+((r02*x12335)));
evalcond[4]=(((r00*x12322))+((r01*x12326))+((x12325*x12336))+(((-1.0)*r02*sj3*x12333))+(((-1.0)*r01*x12321*x12332)));
evalcond[5]=(((cj1*sj2))+x12329+((r20*x12321))+((r21*x12319*x12322))+((sj3*x12324))+((r22*x12335))+(((-1.0)*cj3*x12323*x12332)));
evalcond[6]=(x12320+(((-1.0)*x12331))+(((-1.0)*r10*x12326*x12332))+((r12*x12335))+((r10*x12321))+((r11*x12319*x12322))+((r11*x12330)));
evalcond[7]=(x12320+((r20*x12322))+((x12323*x12336))+(((-1.0)*x12331))+(((-1.0)*r21*x12321*x12332))+((cj3*x12324))+(((-1.0)*r22*sj3*x12333)));
evalcond[8]=((((-1.0)*r11*x12321*x12332))+((x12327*x12336))+(((-1.0)*sj2*x12328))+(((-1.0)*r12*sj3*x12333))+((r10*x12322))+((r11*x12326))+(((-1.0)*x12329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12337 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12337.valid){
continue;
}
CheckValue<IkReal> x12338=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12337.value)+(((1.5707963267949)*(x12338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12339=IKsin(j4);
IkReal x12340=IKcos(j4);
IkReal x12341=(sj1*sj2);
IkReal x12342=(gconst10*sj3);
IkReal x12343=(cj3*gconst10);
IkReal x12344=(gconst11*r20);
IkReal x12345=(gconst11*r21);
IkReal x12346=(gconst11*r00);
IkReal x12347=(cj3*gconst11);
IkReal x12348=(gconst11*r10);
IkReal x12349=((1.0)*cj1);
IkReal x12350=(cj2*sj1);
IkReal x12351=(gconst11*sj3);
IkReal x12352=(cj2*x12349);
IkReal x12353=((1.0)*x12340);
IkReal x12354=((1.0)*x12339);
IkReal x12355=(gconst10*x12339);
IkReal x12356=(cj3*x12339);
IkReal x12357=(sj3*x12340);
evalcond[0]=((((-1.0)*x12344*x12354))+((r21*x12355))+(((-1.0)*r22*x12353)));
evalcond[1]=((((-1.0)*x12348*x12354))+((r11*x12355))+(((-1.0)*r12*x12353)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12353))+(((-1.0)*x12346*x12354))+((r01*x12355)));
evalcond[3]=(((r01*x12340*x12343))+((r00*x12342))+((r01*x12351))+((r02*x12356))+(((-1.0)*cj3*x12346*x12353)));
evalcond[4]=((((-1.0)*r01*x12342*x12353))+((r00*x12343))+((x12346*x12357))+((r01*x12347))+(((-1.0)*r02*sj3*x12354)));
evalcond[5]=(((r21*x12340*x12343))+(((-1.0)*cj3*x12344*x12353))+((r20*x12342))+((cj1*sj2))+x12350+((sj3*x12345))+((r22*x12356)));
evalcond[6]=(((r11*x12340*x12343))+(((-1.0)*x12352))+x12341+((r11*x12351))+((r12*x12356))+((r10*x12342))+(((-1.0)*r10*x12347*x12353)));
evalcond[7]=(((x12344*x12357))+((r20*x12343))+(((-1.0)*x12352))+x12341+((cj3*x12345))+(((-1.0)*r21*x12342*x12353))+(((-1.0)*r22*sj3*x12354)));
evalcond[8]=((((-1.0)*x12350))+(((-1.0)*sj2*x12349))+((r11*x12347))+((x12348*x12357))+((r10*x12343))+(((-1.0)*r12*sj3*x12354))+(((-1.0)*r11*x12342*x12353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12358=((-1.0)*r11);
CheckValue<IkReal> x12361 = IKatan2WithCheck(IkReal(x12358),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12361.valid){
continue;
}
IkReal x12359=((1.0)*(x12361.value));
IkReal x12360=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12359)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12359)));
IkReal gconst10=(x12358*x12360);
IkReal gconst11=((1.0)*r10*x12360);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12362=gconst10*gconst10;
IkReal x12363=gconst11*gconst11;
IkReal x12364=(gconst10*r21);
IkReal x12365=(cj3*r00);
IkReal x12366=(r00*sj3);
IkReal x12367=((1.0)*gconst11);
IkReal x12368=(gconst10*r20);
IkReal x12369=(r01*sj3);
IkReal x12370=(cj3*gconst11*r01);
IkReal x12371=(r21*x12362);
IkReal x12372=(r20*x12363);
CheckValue<IkReal> x12373 = IKatan2WithCheck(IkReal((((gconst10*r22*x12365))+((r22*x12370)))),IkReal(((((-1.0)*cj3*r01*x12372))+((x12364*x12370))+((x12365*x12371))+(((-1.0)*x12365*x12367*x12368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12373.valid){
continue;
}
CheckValue<IkReal> x12374=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12367*x12368*x12369))+((x12366*x12372))+(((-1.0)*x12364*x12366*x12367))+((x12369*x12371))+((r02*r22*sj3)))),-1);
if(!x12374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12373.value)+(((1.5707963267949)*(x12374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12375=IKsin(j4);
IkReal x12376=IKcos(j4);
IkReal x12377=(cj2*sj1);
IkReal x12378=(cj1*sj2);
IkReal x12379=(gconst10*sj3);
IkReal x12380=(cj3*gconst10);
IkReal x12381=(gconst11*r20);
IkReal x12382=(gconst11*r21);
IkReal x12383=(gconst11*r00);
IkReal x12384=(sj1*sj2);
IkReal x12385=(cj3*gconst11);
IkReal x12386=(gconst11*r10);
IkReal x12387=(cj1*cj2);
IkReal x12388=(gconst11*sj3);
IkReal x12389=((1.0)*x12376);
IkReal x12390=((1.0)*x12375);
IkReal x12391=(gconst10*x12375);
IkReal x12392=(cj3*x12375);
IkReal x12393=(sj3*x12376);
IkReal x12394=(x12377+x12378);
evalcond[0]=(((r21*x12391))+(((-1.0)*x12381*x12390))+(((-1.0)*r22*x12389)));
evalcond[1]=(((r11*x12391))+(((-1.0)*x12386*x12390))+(((-1.0)*r12*x12389)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12389))+(((-1.0)*x12383*x12390))+((r01*x12391)));
evalcond[3]=(((r02*x12392))+(((-1.0)*cj3*x12383*x12389))+((r01*x12388))+((r01*x12376*x12380))+((r00*x12379)));
evalcond[4]=(((r00*x12380))+((r01*x12385))+((x12383*x12393))+(((-1.0)*r01*x12379*x12389))+(((-1.0)*r02*sj3*x12390)));
evalcond[5]=(((r22*x12392))+x12394+((r21*x12376*x12380))+((sj3*x12382))+(((-1.0)*cj3*x12381*x12389))+((r20*x12379)));
evalcond[6]=(((r11*x12388))+((r11*x12376*x12380))+((r10*x12379))+x12387+(((-1.0)*x12384))+(((-1.0)*r10*x12385*x12389))+((r12*x12392)));
evalcond[7]=((((-1.0)*r11*x12379*x12389))+((r11*x12385))+((r10*x12380))+x12394+((x12386*x12393))+(((-1.0)*r12*sj3*x12390)));
evalcond[8]=(((cj3*x12382))+((x12381*x12393))+(((-1.0)*r22*sj3*x12390))+x12384+(((-1.0)*r21*x12379*x12389))+((r20*x12380))+(((-1.0)*x12387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12395=((1.0)*gconst11);
CheckValue<IkReal> x12396 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12396.valid){
continue;
}
CheckValue<IkReal> x12397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12395))+(((-1.0)*gconst10*r20)))),-1);
if(!x12397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12396.value)+(((1.5707963267949)*(x12397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12398=IKsin(j4);
IkReal x12399=IKcos(j4);
IkReal x12400=(cj2*sj1);
IkReal x12401=(cj1*sj2);
IkReal x12402=(gconst10*sj3);
IkReal x12403=(cj3*gconst10);
IkReal x12404=(gconst11*r20);
IkReal x12405=(gconst11*r21);
IkReal x12406=(gconst11*r00);
IkReal x12407=(sj1*sj2);
IkReal x12408=(cj3*gconst11);
IkReal x12409=(gconst11*r10);
IkReal x12410=(cj1*cj2);
IkReal x12411=(gconst11*sj3);
IkReal x12412=((1.0)*x12399);
IkReal x12413=((1.0)*x12398);
IkReal x12414=(gconst10*x12398);
IkReal x12415=(cj3*x12398);
IkReal x12416=(sj3*x12399);
IkReal x12417=(x12400+x12401);
evalcond[0]=((((-1.0)*r22*x12412))+((r21*x12414))+(((-1.0)*x12404*x12413)));
evalcond[1]=(((r11*x12414))+(((-1.0)*x12409*x12413))+(((-1.0)*r12*x12412)));
evalcond[2]=((1.0)+(((-1.0)*x12406*x12413))+((r01*x12414))+(((-1.0)*r02*x12412)));
evalcond[3]=((((-1.0)*cj3*x12406*x12412))+((r01*x12411))+((r02*x12415))+((r01*x12399*x12403))+((r00*x12402)));
evalcond[4]=((((-1.0)*r02*sj3*x12413))+((x12406*x12416))+(((-1.0)*r01*x12402*x12412))+((r01*x12408))+((r00*x12403)));
evalcond[5]=(((sj3*x12405))+((r21*x12399*x12403))+((r22*x12415))+(((-1.0)*cj3*x12404*x12412))+((r20*x12402))+x12417);
evalcond[6]=(((r11*x12411))+((r12*x12415))+(((-1.0)*r10*x12408*x12412))+((r10*x12402))+x12410+((r11*x12399*x12403))+(((-1.0)*x12407)));
evalcond[7]=(((x12409*x12416))+(((-1.0)*r11*x12402*x12412))+((r10*x12403))+(((-1.0)*r12*sj3*x12413))+x12417+((r11*x12408)));
evalcond[8]=(((x12404*x12416))+(((-1.0)*x12410))+((cj3*x12405))+(((-1.0)*r22*sj3*x12413))+(((-1.0)*r21*x12402*x12412))+((r20*x12403))+x12407);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12418=((-1.0)*r11);
IkReal x12419=((-1.0)*r10);
CheckValue<IkReal> x12421 = IKatan2WithCheck(IkReal(x12418),IkReal(x12419),IKFAST_ATAN2_MAGTHRESH);
if(!x12421.valid){
continue;
}
IkReal x12420=((1.0)*(x12421.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12420)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12419);
rxp1_1=(px*r21);
rxp1_2=(px*x12418);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12420)));
IkReal gconst10=x12418;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12422=((-1.0)*r11);
IkReal x12423=((-1.0)*r10);
CheckValue<IkReal> x12425 = IKatan2WithCheck(IkReal(x12422),IkReal(x12423),IKFAST_ATAN2_MAGTHRESH);
if(!x12425.valid){
continue;
}
IkReal x12424=((1.0)*(x12425.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12424)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12423);
rxp1_1=(px*r21);
rxp1_2=(px*x12422);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12424)));
IkReal gconst10=x12422;
IkReal gconst11=((1.0)*r10);
IkReal x12426=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12426))+(((-1.0)*r10*r20*x12426)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12427=((-1.0)*r11);
IkReal x12428=((-1.0)*r10);
CheckValue<IkReal> x12430 = IKatan2WithCheck(IkReal(x12427),IkReal(x12428),IKFAST_ATAN2_MAGTHRESH);
if(!x12430.valid){
continue;
}
IkReal x12429=((1.0)*(x12430.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12429)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12428);
rxp1_1=(px*r21);
rxp1_2=(px*x12427);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12429)));
IkReal gconst10=x12427;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12432=IKPowWithIntegerCheck(r02,-1);
if(!x12432.valid){
continue;
}
IkReal x12431=x12432.value;
CheckValue<IkReal> x12433=IKPowWithIntegerCheck(cj3,-1);
if(!x12433.valid){
continue;
}
if( IKabs((x12431*(x12433.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12431)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12431*(x12433.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12431))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12431*(x12433.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12431));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12434=IKsin(j4);
IkReal x12435=IKcos(j4);
IkReal x12436=(cj3*r10);
IkReal x12437=((1.0)*gconst11);
IkReal x12438=(sj1*sj2);
IkReal x12439=(gconst11*sj3);
IkReal x12440=(cj3*r11);
IkReal x12441=(cj2*sj1);
IkReal x12442=(gconst10*r20);
IkReal x12443=(gconst10*sj3);
IkReal x12444=((1.0)*cj0);
IkReal x12445=((1.0)*sj0);
IkReal x12446=(cj1*sj2);
IkReal x12447=(cj3*r21);
IkReal x12448=((1.0)*cj1*cj2);
IkReal x12449=(r20*x12435);
IkReal x12450=(gconst10*x12434);
IkReal x12451=(gconst10*x12435);
IkReal x12452=(r02*x12434);
IkReal x12453=((1.0)*x12435);
evalcond[0]=((((-1.0)*x12445))+(((-1.0)*r02*x12453)));
evalcond[1]=((((-1.0)*r20*x12434*x12437))+((r21*x12450)));
evalcond[2]=((((-1.0)*r10*x12434*x12437))+cj0+((r11*x12450)));
evalcond[3]=(((cj0*x12438))+((cj3*x12452))+(((-1.0)*cj1*cj2*x12444)));
evalcond[4]=((((-1.0)*x12441*x12444))+(((-1.0)*x12444*x12446))+(((-1.0)*sj3*x12452)));
evalcond[5]=((((-1.0)*cj3*x12437*x12449))+((r21*x12439))+((x12447*x12451))+((sj3*x12442))+x12446+x12441);
evalcond[6]=((((-1.0)*x12448))+(((-1.0)*r21*x12443*x12453))+((cj3*x12442))+((x12439*x12449))+x12438+((gconst11*x12447)));
evalcond[7]=(((sj0*x12438))+((r11*x12439))+((x12440*x12451))+(((-1.0)*cj1*cj2*x12445))+((r10*x12443))+(((-1.0)*x12435*x12436*x12437)));
evalcond[8]=((((-1.0)*x12441*x12445))+((r10*x12435*x12439))+((gconst10*x12436))+(((-1.0)*x12445*x12446))+(((-1.0)*r11*x12443*x12453))+((gconst11*x12440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12454=((1.0)*r20);
IkReal x12455=((1.0)*gconst11);
CheckValue<IkReal> x12456=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12455))),-1);
if(!x12456.valid){
continue;
}
CheckValue<IkReal> x12457=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12454))+((cj3*gconst10*r21))),-1);
if(!x12457.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12456.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12457.value)*(((((-1.0)*gconst10*sj3*x12454))+(((-1.0)*r21*sj3*x12455))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12456.value)))+IKsqr(((x12457.value)*(((((-1.0)*gconst10*sj3*x12454))+(((-1.0)*r21*sj3*x12455))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12456.value)), ((x12457.value)*(((((-1.0)*gconst10*sj3*x12454))+(((-1.0)*r21*sj3*x12455))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12458=IKsin(j4);
IkReal x12459=IKcos(j4);
IkReal x12460=(cj3*r10);
IkReal x12461=((1.0)*gconst11);
IkReal x12462=(sj1*sj2);
IkReal x12463=(gconst11*sj3);
IkReal x12464=(cj3*r11);
IkReal x12465=(cj2*sj1);
IkReal x12466=(gconst10*r20);
IkReal x12467=(gconst10*sj3);
IkReal x12468=((1.0)*cj0);
IkReal x12469=((1.0)*sj0);
IkReal x12470=(cj1*sj2);
IkReal x12471=(cj3*r21);
IkReal x12472=((1.0)*cj1*cj2);
IkReal x12473=(r20*x12459);
IkReal x12474=(gconst10*x12458);
IkReal x12475=(gconst10*x12459);
IkReal x12476=(r02*x12458);
IkReal x12477=((1.0)*x12459);
evalcond[0]=((((-1.0)*r02*x12477))+(((-1.0)*x12469)));
evalcond[1]=((((-1.0)*r20*x12458*x12461))+((r21*x12474)));
evalcond[2]=((((-1.0)*r10*x12458*x12461))+cj0+((r11*x12474)));
evalcond[3]=(((cj3*x12476))+((cj0*x12462))+(((-1.0)*cj1*cj2*x12468)));
evalcond[4]=((((-1.0)*x12465*x12468))+(((-1.0)*sj3*x12476))+(((-1.0)*x12468*x12470)));
evalcond[5]=((((-1.0)*cj3*x12461*x12473))+((sj3*x12466))+((x12471*x12475))+x12470+x12465+((r21*x12463)));
evalcond[6]=(((cj3*x12466))+((x12463*x12473))+(((-1.0)*x12472))+x12462+((gconst11*x12471))+(((-1.0)*r21*x12467*x12477)));
evalcond[7]=(((x12464*x12475))+((r11*x12463))+(((-1.0)*x12459*x12460*x12461))+((sj0*x12462))+(((-1.0)*cj1*cj2*x12469))+((r10*x12467)));
evalcond[8]=(((gconst11*x12464))+(((-1.0)*x12465*x12469))+((r10*x12459*x12463))+(((-1.0)*r11*x12467*x12477))+((gconst10*x12460))+(((-1.0)*x12469*x12470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12478=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12478.valid){
continue;
}
CheckValue<IkReal> x12479=IKPowWithIntegerCheck(r02,-1);
if(!x12479.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12478.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12479.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12478.value)))+IKsqr(((-1.0)*sj0*(x12479.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12478.value)), ((-1.0)*sj0*(x12479.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12480=IKsin(j4);
IkReal x12481=IKcos(j4);
IkReal x12482=(cj3*r10);
IkReal x12483=((1.0)*gconst11);
IkReal x12484=(sj1*sj2);
IkReal x12485=(gconst11*sj3);
IkReal x12486=(cj3*r11);
IkReal x12487=(cj2*sj1);
IkReal x12488=(gconst10*r20);
IkReal x12489=(gconst10*sj3);
IkReal x12490=((1.0)*cj0);
IkReal x12491=((1.0)*sj0);
IkReal x12492=(cj1*sj2);
IkReal x12493=(cj3*r21);
IkReal x12494=((1.0)*cj1*cj2);
IkReal x12495=(r20*x12481);
IkReal x12496=(gconst10*x12480);
IkReal x12497=(gconst10*x12481);
IkReal x12498=(r02*x12480);
IkReal x12499=((1.0)*x12481);
evalcond[0]=((((-1.0)*r02*x12499))+(((-1.0)*x12491)));
evalcond[1]=((((-1.0)*r20*x12480*x12483))+((r21*x12496)));
evalcond[2]=((((-1.0)*r10*x12480*x12483))+cj0+((r11*x12496)));
evalcond[3]=(((cj3*x12498))+((cj0*x12484))+(((-1.0)*cj1*cj2*x12490)));
evalcond[4]=((((-1.0)*sj3*x12498))+(((-1.0)*x12487*x12490))+(((-1.0)*x12490*x12492)));
evalcond[5]=(((x12493*x12497))+(((-1.0)*cj3*x12483*x12495))+((sj3*x12488))+x12487+x12492+((r21*x12485)));
evalcond[6]=((((-1.0)*r21*x12489*x12499))+((gconst11*x12493))+(((-1.0)*x12494))+((x12485*x12495))+((cj3*x12488))+x12484);
evalcond[7]=(((x12486*x12497))+((r11*x12485))+((sj0*x12484))+(((-1.0)*x12481*x12482*x12483))+((r10*x12489))+(((-1.0)*cj1*cj2*x12491)));
evalcond[8]=(((gconst10*x12482))+((r10*x12481*x12485))+(((-1.0)*x12491*x12492))+(((-1.0)*x12487*x12491))+(((-1.0)*r11*x12489*x12499))+((gconst11*x12486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12500=((-1.0)*r11);
CheckValue<IkReal> x12503 = IKatan2WithCheck(IkReal(x12500),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12503.valid){
continue;
}
IkReal x12501=((1.0)*(x12503.value));
IkReal x12502=x11826;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12501)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12501)));
IkReal gconst10=(x12500*x12502);
IkReal gconst11=((1.0)*r10*x12502);
IkReal x12504=r12*r12;
IkReal x12505=((1.0)*sj0);
IkReal x12506=(cj0*r02);
IkReal x12507=x11826;
j4eval[0]=((IKabs(((((-1.0)*r12*x12505))+(((-1.0)*x12506)))))+(IKabs(((((-1.0)*x12505*x12507))+((r12*x12506*x12507))+((sj0*x12504*x12507))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12508=((1.0)*r12);
IkReal x12509=(sj1*sj2);
IkReal x12510=((1.0)*r21);
IkReal x12511=(cj3*gconst11);
IkReal x12512=(r11*sj3);
IkReal x12513=(gconst11*r20);
IkReal x12514=((1.0)*sj3);
IkReal x12515=(cj1*cj2);
IkReal x12516=(gconst10*r21*sj3);
IkReal x12517=(cj3*gconst10*r20);
CheckValue<IkReal> x12518=IKPowWithIntegerCheck((((gconst10*x12512*x12513))+(((-1.0)*x12510*x12512*(gconst10*gconst10)))+(((-1.0)*gconst11*r10*x12513*x12514))+((gconst11*r10*x12516))),-1);
if(!x12518.valid){
continue;
}
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12510))+((sj3*x12513))),-1);
if(!x12519.valid){
continue;
}
if( IKabs(((x12518.value)*((((r12*x12515))+(((-1.0)*r21*x12508*x12511))+(((-1.0)*x12508*x12517))+(((-1.0)*x12508*x12509))+(((-1.0)*cj0*x12513*x12514))+((cj0*x12516)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12519.value)*(((((-1.0)*x12509))+(((-1.0)*x12517))+x12515+(((-1.0)*x12510*x12511)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12518.value)*((((r12*x12515))+(((-1.0)*r21*x12508*x12511))+(((-1.0)*x12508*x12517))+(((-1.0)*x12508*x12509))+(((-1.0)*cj0*x12513*x12514))+((cj0*x12516))))))+IKsqr(((x12519.value)*(((((-1.0)*x12509))+(((-1.0)*x12517))+x12515+(((-1.0)*x12510*x12511))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12518.value)*((((r12*x12515))+(((-1.0)*r21*x12508*x12511))+(((-1.0)*x12508*x12517))+(((-1.0)*x12508*x12509))+(((-1.0)*cj0*x12513*x12514))+((cj0*x12516))))), ((x12519.value)*(((((-1.0)*x12509))+(((-1.0)*x12517))+x12515+(((-1.0)*x12510*x12511))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12520=IKsin(j4);
IkReal x12521=IKcos(j4);
IkReal x12522=(cj3*r10);
IkReal x12523=(gconst11*r20);
IkReal x12524=(gconst11*sj3);
IkReal x12525=(sj1*sj2);
IkReal x12526=(cj3*r11);
IkReal x12527=(r10*sj3);
IkReal x12528=(gconst10*r01);
IkReal x12529=(gconst10*sj3);
IkReal x12530=(cj2*sj1);
IkReal x12531=((1.0)*sj0);
IkReal x12532=(cj1*sj2);
IkReal x12533=(gconst10*r21);
IkReal x12534=(cj3*gconst10);
IkReal x12535=(cj3*gconst11);
IkReal x12536=((1.0)*cj0);
IkReal x12537=((1.0)*x12520);
IkReal x12538=((1.0)*cj1*cj2);
IkReal x12539=(gconst11*x12521);
IkReal x12540=(sj3*x12521);
IkReal x12541=(gconst10*x12520);
IkReal x12542=((1.0)*x12521);
IkReal x12543=(cj3*x12521);
IkReal x12544=(cj3*x12520);
evalcond[0]=((((-1.0)*x12523*x12537))+((x12520*x12533)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12537))+((r11*x12541))+(((-1.0)*r12*x12542)));
evalcond[2]=(((x12520*x12528))+(((-1.0)*gconst11*r00*x12537))+(((-1.0)*x12531))+(((-1.0)*r02*x12542)));
evalcond[3]=((((-1.0)*cj3*x12523*x12542))+((x12533*x12543))+((r21*x12524))+((r20*x12529))+x12530+x12532);
evalcond[4]=(((x12523*x12540))+((r20*x12534))+((r21*x12535))+(((-1.0)*r21*x12529*x12542))+x12525+(((-1.0)*x12538)));
evalcond[5]=(((cj0*x12525))+(((-1.0)*cj1*cj2*x12536))+((r02*x12544))+((r01*x12524))+((r00*x12529))+(((-1.0)*r00*x12535*x12542))+((x12528*x12543)));
evalcond[6]=(((sj0*x12525))+((r12*x12544))+((gconst10*x12521*x12526))+(((-1.0)*cj1*cj2*x12531))+((gconst10*x12527))+(((-1.0)*x12522*x12539))+((r11*x12524)));
evalcond[7]=(((r00*x12534))+((r00*x12521*x12524))+(((-1.0)*x12530*x12536))+(((-1.0)*x12532*x12536))+(((-1.0)*x12528*x12540))+(((-1.0)*r02*sj3*x12537))+((r01*x12535)));
evalcond[8]=(((r10*x12521*x12524))+(((-1.0)*x12530*x12531))+((gconst11*x12526))+((gconst10*x12522))+(((-1.0)*r12*sj3*x12537))+(((-1.0)*r11*x12529*x12542))+(((-1.0)*x12531*x12532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12545=((1.0)*sj0);
IkReal x12546=((1.0)*gconst10);
CheckValue<IkReal> x12547 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12545)))),IkReal(((((-1.0)*gconst10*r11*x12545))+(((-1.0)*cj0*r01*x12546))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12547.valid){
continue;
}
CheckValue<IkReal> x12548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12546))+(((-1.0)*gconst11*r21)))),-1);
if(!x12548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12547.value)+(((1.5707963267949)*(x12548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12549=IKsin(j4);
IkReal x12550=IKcos(j4);
IkReal x12551=(cj3*r10);
IkReal x12552=(gconst11*r20);
IkReal x12553=(gconst11*sj3);
IkReal x12554=(sj1*sj2);
IkReal x12555=(cj3*r11);
IkReal x12556=(r10*sj3);
IkReal x12557=(gconst10*r01);
IkReal x12558=(gconst10*sj3);
IkReal x12559=(cj2*sj1);
IkReal x12560=((1.0)*sj0);
IkReal x12561=(cj1*sj2);
IkReal x12562=(gconst10*r21);
IkReal x12563=(cj3*gconst10);
IkReal x12564=(cj3*gconst11);
IkReal x12565=((1.0)*cj0);
IkReal x12566=((1.0)*x12549);
IkReal x12567=((1.0)*cj1*cj2);
IkReal x12568=(gconst11*x12550);
IkReal x12569=(sj3*x12550);
IkReal x12570=(gconst10*x12549);
IkReal x12571=((1.0)*x12550);
IkReal x12572=(cj3*x12550);
IkReal x12573=(cj3*x12549);
evalcond[0]=(((x12549*x12562))+(((-1.0)*x12552*x12566)));
evalcond[1]=((((-1.0)*gconst11*r10*x12566))+cj0+(((-1.0)*r12*x12571))+((r11*x12570)));
evalcond[2]=((((-1.0)*gconst11*r00*x12566))+((x12549*x12557))+(((-1.0)*r02*x12571))+(((-1.0)*x12560)));
evalcond[3]=(((r20*x12558))+(((-1.0)*cj3*x12552*x12571))+((r21*x12553))+((x12562*x12572))+x12559+x12561);
evalcond[4]=(((r20*x12563))+((x12552*x12569))+(((-1.0)*r21*x12558*x12571))+((r21*x12564))+x12554+(((-1.0)*x12567)));
evalcond[5]=(((r01*x12553))+((r00*x12558))+((r02*x12573))+((cj0*x12554))+(((-1.0)*cj1*cj2*x12565))+(((-1.0)*r00*x12564*x12571))+((x12557*x12572)));
evalcond[6]=(((gconst10*x12556))+(((-1.0)*x12551*x12568))+((sj0*x12554))+((r11*x12553))+((r12*x12573))+(((-1.0)*cj1*cj2*x12560))+((gconst10*x12550*x12555)));
evalcond[7]=((((-1.0)*x12561*x12565))+(((-1.0)*x12557*x12569))+((r01*x12564))+(((-1.0)*r02*sj3*x12566))+((r00*x12563))+(((-1.0)*x12559*x12565))+((r00*x12550*x12553)));
evalcond[8]=((((-1.0)*x12560*x12561))+((gconst10*x12551))+(((-1.0)*r11*x12558*x12571))+((r10*x12550*x12553))+(((-1.0)*x12559*x12560))+((gconst11*x12555))+(((-1.0)*r12*sj3*x12566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12574=gconst10*gconst10;
IkReal x12575=r21*r21;
IkReal x12576=gconst11*gconst11;
IkReal x12577=r20*r20;
IkReal x12578=((1.0)*cj3);
IkReal x12579=(r20*sj3);
IkReal x12580=(gconst10*gconst11);
IkReal x12581=(cj2*sj1);
IkReal x12582=(gconst10*r21);
IkReal x12583=(cj1*sj2);
IkReal x12584=((1.0)*gconst11*r20);
CheckValue<IkReal> x12585=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12576*x12577*x12578))+(((-1.0)*x12578*(r22*r22)))+(((-1.0)*x12574*x12575*x12578))+(((2.0)*cj3*r20*r21*x12580)))),-1);
if(!x12585.valid){
continue;
}
CheckValue<IkReal> x12586 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12581))+((r22*x12583))+((gconst10*r22*x12579)))),IkReal(((((-1.0)*x12581*x12584))+((x12582*x12583))+(((-1.0)*sj3*x12577*x12580))+((sj3*x12575*x12580))+((r21*x12574*x12579))+(((-1.0)*x12583*x12584))+(((-1.0)*r21*x12576*x12579))+((x12581*x12582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12585.value)))+(x12586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12587=IKsin(j4);
IkReal x12588=IKcos(j4);
IkReal x12589=(cj3*r10);
IkReal x12590=(gconst11*r20);
IkReal x12591=(gconst11*sj3);
IkReal x12592=(sj1*sj2);
IkReal x12593=(gconst11*r00);
IkReal x12594=(cj3*r11);
IkReal x12595=(gconst10*sj3);
IkReal x12596=(cj2*sj1);
IkReal x12597=(cj3*r01);
IkReal x12598=((1.0)*sj0);
IkReal x12599=(cj1*sj2);
IkReal x12600=(cj3*r21);
IkReal x12601=(cj3*gconst10);
IkReal x12602=((1.0)*cj0);
IkReal x12603=((1.0)*x12588);
IkReal x12604=((1.0)*x12587);
IkReal x12605=((1.0)*cj1*cj2);
IkReal x12606=(cj3*x12587);
IkReal x12607=(gconst10*x12587);
IkReal x12608=(gconst10*x12588);
evalcond[0]=((((-1.0)*x12590*x12604))+(((-1.0)*r22*x12603))+((r21*x12607)));
evalcond[1]=(cj0+((r11*x12607))+(((-1.0)*gconst11*r10*x12604))+(((-1.0)*r12*x12603)));
evalcond[2]=(((r01*x12607))+(((-1.0)*x12593*x12604))+(((-1.0)*x12598))+(((-1.0)*r02*x12603)));
evalcond[3]=(((x12600*x12608))+(((-1.0)*cj3*x12590*x12603))+((r21*x12591))+((r22*x12606))+x12596+x12599+((r20*x12595)));
evalcond[4]=(((r20*x12601))+(((-1.0)*r22*sj3*x12604))+((sj3*x12588*x12590))+(((-1.0)*x12605))+((gconst11*x12600))+x12592+(((-1.0)*r21*x12595*x12603)));
evalcond[5]=(((r01*x12591))+((cj0*x12592))+((r00*x12595))+((r02*x12606))+((x12597*x12608))+(((-1.0)*cj3*x12593*x12603))+(((-1.0)*cj1*cj2*x12602)));
evalcond[6]=((((-1.0)*gconst11*x12589*x12603))+((r12*x12606))+(((-1.0)*cj1*cj2*x12598))+((x12594*x12608))+((sj0*x12592))+((r11*x12591))+((r10*x12595)));
evalcond[7]=(((r00*x12601))+((r00*x12588*x12591))+((gconst11*x12597))+(((-1.0)*r02*sj3*x12604))+(((-1.0)*x12599*x12602))+(((-1.0)*x12596*x12602))+(((-1.0)*r01*x12595*x12603)));
evalcond[8]=((((-1.0)*x12596*x12598))+((r10*x12588*x12591))+((gconst11*x12594))+(((-1.0)*x12598*x12599))+((gconst10*x12589))+(((-1.0)*r12*sj3*x12604))+(((-1.0)*r11*x12595*x12603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12609=((1.0)*sj0);
IkReal x12610=((1.0)*gconst10);
CheckValue<IkReal> x12611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12610))+(((-1.0)*gconst11*r21)))),-1);
if(!x12611.valid){
continue;
}
CheckValue<IkReal> x12612 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12609)))),IkReal(((((-1.0)*cj0*r01*x12610))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12611.value)))+(x12612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12613=IKsin(j4);
IkReal x12614=IKcos(j4);
IkReal x12615=(cj3*r10);
IkReal x12616=(gconst11*r20);
IkReal x12617=(gconst11*sj3);
IkReal x12618=(sj1*sj2);
IkReal x12619=(gconst11*r00);
IkReal x12620=(cj3*r11);
IkReal x12621=(gconst10*sj3);
IkReal x12622=(cj2*sj1);
IkReal x12623=(cj3*r01);
IkReal x12624=((1.0)*sj0);
IkReal x12625=(cj1*sj2);
IkReal x12626=(cj3*r21);
IkReal x12627=(cj3*gconst10);
IkReal x12628=((1.0)*cj0);
IkReal x12629=((1.0)*x12614);
IkReal x12630=((1.0)*x12613);
IkReal x12631=((1.0)*cj1*cj2);
IkReal x12632=(cj3*x12613);
IkReal x12633=(gconst10*x12613);
IkReal x12634=(gconst10*x12614);
evalcond[0]=((((-1.0)*r22*x12629))+(((-1.0)*x12616*x12630))+((r21*x12633)));
evalcond[1]=(((r11*x12633))+cj0+(((-1.0)*r12*x12629))+(((-1.0)*gconst11*r10*x12630)));
evalcond[2]=((((-1.0)*x12624))+(((-1.0)*r02*x12629))+(((-1.0)*x12619*x12630))+((r01*x12633)));
evalcond[3]=(((x12626*x12634))+(((-1.0)*cj3*x12616*x12629))+((r21*x12617))+x12622+x12625+((r22*x12632))+((r20*x12621)));
evalcond[4]=(((gconst11*x12626))+((sj3*x12614*x12616))+(((-1.0)*x12631))+x12618+(((-1.0)*r21*x12621*x12629))+((r20*x12627))+(((-1.0)*r22*sj3*x12630)));
evalcond[5]=((((-1.0)*cj3*x12619*x12629))+((x12623*x12634))+((r02*x12632))+((r00*x12621))+(((-1.0)*cj1*cj2*x12628))+((r01*x12617))+((cj0*x12618)));
evalcond[6]=(((r12*x12632))+((sj0*x12618))+((x12620*x12634))+(((-1.0)*cj1*cj2*x12624))+((r11*x12617))+(((-1.0)*gconst11*x12615*x12629))+((r10*x12621)));
evalcond[7]=((((-1.0)*x12622*x12628))+(((-1.0)*r02*sj3*x12630))+(((-1.0)*r01*x12621*x12629))+((gconst11*x12623))+(((-1.0)*x12625*x12628))+((r00*x12614*x12617))+((r00*x12627)));
evalcond[8]=((((-1.0)*x12622*x12624))+((gconst11*x12620))+(((-1.0)*r11*x12621*x12629))+((r10*x12614*x12617))+((gconst10*x12615))+(((-1.0)*r12*sj3*x12630))+(((-1.0)*x12624*x12625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12635=((1.0)*gconst11);
CheckValue<IkReal> x12636 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12635))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12636.valid){
continue;
}
CheckValue<IkReal> x12637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12635)))),-1);
if(!x12637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12636.value)+(((1.5707963267949)*(x12637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12638=IKsin(j4);
IkReal x12639=IKcos(j4);
IkReal x12640=(cj3*r10);
IkReal x12641=(gconst11*r20);
IkReal x12642=(gconst11*sj3);
IkReal x12643=(sj1*sj2);
IkReal x12644=(gconst11*r00);
IkReal x12645=(cj3*r11);
IkReal x12646=(gconst10*sj3);
IkReal x12647=(cj2*sj1);
IkReal x12648=(cj3*r01);
IkReal x12649=((1.0)*sj0);
IkReal x12650=(cj1*sj2);
IkReal x12651=(cj3*r21);
IkReal x12652=(cj3*gconst10);
IkReal x12653=((1.0)*cj0);
IkReal x12654=((1.0)*x12639);
IkReal x12655=((1.0)*x12638);
IkReal x12656=((1.0)*cj1*cj2);
IkReal x12657=(cj3*x12638);
IkReal x12658=(gconst10*x12638);
IkReal x12659=(gconst10*x12639);
evalcond[0]=((((-1.0)*x12641*x12655))+((r21*x12658))+(((-1.0)*r22*x12654)));
evalcond[1]=(cj0+((r11*x12658))+(((-1.0)*r12*x12654))+(((-1.0)*gconst11*r10*x12655)));
evalcond[2]=((((-1.0)*x12644*x12655))+(((-1.0)*r02*x12654))+(((-1.0)*x12649))+((r01*x12658)));
evalcond[3]=(((x12651*x12659))+((r22*x12657))+((r20*x12646))+(((-1.0)*cj3*x12641*x12654))+x12647+x12650+((r21*x12642)));
evalcond[4]=((((-1.0)*r21*x12646*x12654))+(((-1.0)*x12656))+((gconst11*x12651))+((sj3*x12639*x12641))+(((-1.0)*r22*sj3*x12655))+x12643+((r20*x12652)));
evalcond[5]=(((r02*x12657))+((r00*x12646))+((x12648*x12659))+((r01*x12642))+((cj0*x12643))+(((-1.0)*cj3*x12644*x12654))+(((-1.0)*cj1*cj2*x12653)));
evalcond[6]=(((x12645*x12659))+(((-1.0)*gconst11*x12640*x12654))+(((-1.0)*cj1*cj2*x12649))+((r12*x12657))+((sj0*x12643))+((r10*x12646))+((r11*x12642)));
evalcond[7]=((((-1.0)*x12647*x12653))+(((-1.0)*r01*x12646*x12654))+(((-1.0)*r02*sj3*x12655))+(((-1.0)*x12650*x12653))+((r00*x12639*x12642))+((gconst11*x12648))+((r00*x12652)));
evalcond[8]=((((-1.0)*x12647*x12649))+(((-1.0)*x12649*x12650))+((r10*x12639*x12642))+(((-1.0)*r11*x12646*x12654))+((gconst10*x12640))+(((-1.0)*r12*sj3*x12655))+((gconst11*x12645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12660=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12660;
j4eval[1]=IKsign(x12660);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12661=((1.0)*cj5);
IkReal x12662=((((-1.0)*r01*x12661))+(((-1.0)*r00*sj5)));
j4eval[0]=x12662;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12661))))));
j4eval[2]=IKsign(x12662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12663=cj5*cj5;
IkReal x12664=(cj3*r21);
IkReal x12665=(cj5*sj5);
IkReal x12666=((1.0)*cj3);
IkReal x12667=(((r11*x12663*x12664))+((r10*x12664*x12665))+((cj3*r11*r20*x12665))+(((-1.0)*r10*r20*x12663*x12666))+(((-1.0)*r12*r22*x12666))+(((-1.0)*r11*x12664)));
j4eval[0]=x12667;
j4eval[1]=IKsign(x12667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12668=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12668;
j4eval[1]=IKsign(x12668);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12669=((1.0)*cj5);
IkReal x12670=((((-1.0)*r01*x12669))+(((-1.0)*r00*sj5)));
j4eval[0]=x12670;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12669)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12671=cj5*cj5;
IkReal x12672=r11*r11;
IkReal x12673=(r11*sj5);
IkReal x12674=(cj5*r10);
IkReal x12675=((r12*r12)+((x12671*(r10*r10)))+x12672+(((-2.0)*x12673*x12674))+(((-1.0)*x12671*x12672)));
j4eval[0]=x12675;
j4eval[1]=IKsign(x12675);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12673))+x12674))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12676=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12676);
rxp1_1=(px*r21);
rxp1_2=(r11*x12676);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12677=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12677);
rxp1_1=(px*r21);
rxp1_2=(r11*x12677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12678=((1.0)*sj1);
CheckValue<IkReal> x12679=IKPowWithIntegerCheck(r02,-1);
if(!x12679.valid){
continue;
}
CheckValue<IkReal> x12680=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12680.valid){
continue;
}
if( IKabs(((x12679.value)*(((((-1.0)*cj2*x12678))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12680.value)*((((cj1*cj2))+(((-1.0)*sj2*x12678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12679.value)*(((((-1.0)*cj2*x12678))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12680.value)*((((cj1*cj2))+(((-1.0)*sj2*x12678))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12679.value)*(((((-1.0)*cj2*x12678))+(((-1.0)*cj1*sj2))))), ((x12680.value)*((((cj1*cj2))+(((-1.0)*sj2*x12678))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12681=IKsin(j4);
IkReal x12682=IKcos(j4);
IkReal x12683=(cj5*r20);
IkReal x12684=((1.0)*cj2);
IkReal x12685=(cj5*r10);
IkReal x12686=((1.0)*x12681);
IkReal x12687=(sj5*x12681);
IkReal x12688=((1.0)*sj5*x12682);
evalcond[0]=((-1.0)*r02*x12682);
evalcond[1]=(((r21*x12687))+(((-1.0)*x12683*x12686)));
evalcond[2]=(((x12682*x12685))+(((-1.0)*r11*x12688)));
evalcond[3]=((1.0)+((r11*x12687))+(((-1.0)*x12685*x12686)));
evalcond[4]=((((-1.0)*sj1*x12684))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12686)));
evalcond[5]=((((-1.0)*cj1*x12684))+(((-1.0)*r21*x12688))+((x12682*x12683))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12689=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12689.valid){
continue;
}
CheckValue<IkReal> x12690=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12690.valid){
continue;
}
if( IKabs(((-1.0)*(x12689.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12690.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12689.value)))+IKsqr(((x12690.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12689.value)), ((x12690.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12691=IKsin(j4);
IkReal x12692=IKcos(j4);
IkReal x12693=(cj5*r20);
IkReal x12694=((1.0)*cj2);
IkReal x12695=(cj5*r10);
IkReal x12696=((1.0)*x12691);
IkReal x12697=(sj5*x12691);
IkReal x12698=((1.0)*sj5*x12692);
evalcond[0]=((-1.0)*r02*x12692);
evalcond[1]=(((r21*x12697))+(((-1.0)*x12693*x12696)));
evalcond[2]=((((-1.0)*r11*x12698))+((x12692*x12695)));
evalcond[3]=((1.0)+((r11*x12697))+(((-1.0)*x12695*x12696)));
evalcond[4]=((((-1.0)*r02*x12696))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12694)));
evalcond[5]=((((-1.0)*cj1*x12694))+((sj1*sj2))+((x12692*x12693))+(((-1.0)*r21*x12698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12699=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12699);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12699);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12700=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12700);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12700);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12701=IKPowWithIntegerCheck(r22,-1);
if(!x12701.valid){
continue;
}
CheckValue<IkReal> x12702=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12702.valid){
continue;
}
if( IKabs(((x12701.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12702.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12701.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12702.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12701.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12702.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12703=IKsin(j4);
IkReal x12704=IKcos(j4);
IkReal x12705=((1.0)*cj2);
IkReal x12706=(cj5*x12704);
IkReal x12707=(sj5*x12703);
IkReal x12708=((1.0)*sj5*x12704);
IkReal x12709=((1.0)*cj5*x12703);
evalcond[0]=((-1.0)*r22*x12704);
evalcond[1]=(((r01*x12707))+(((-1.0)*r00*x12709)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12705))+(((-1.0)*r22*x12703)));
evalcond[3]=((((-1.0)*r11*x12708))+((r10*x12706)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12709))+((r11*x12707)));
evalcond[5]=((((-1.0)*r01*x12708))+(((-1.0)*sj1*x12705))+(((-1.0)*cj1*sj2))+((r00*x12706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12710=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12710.valid){
continue;
}
CheckValue<IkReal> x12711=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12711.valid){
continue;
}
if( IKabs(((-1.0)*(x12710.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12711.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12710.value)))+IKsqr(((x12711.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12710.value)), ((x12711.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12712=IKsin(j4);
IkReal x12713=IKcos(j4);
IkReal x12714=((1.0)*cj2);
IkReal x12715=(cj5*x12713);
IkReal x12716=(sj5*x12712);
IkReal x12717=((1.0)*sj5*x12713);
IkReal x12718=((1.0)*cj5*x12712);
evalcond[0]=((-1.0)*r22*x12713);
evalcond[1]=((((-1.0)*r00*x12718))+((r01*x12716)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12712))+(((-1.0)*cj1*x12714)));
evalcond[3]=(((r10*x12715))+(((-1.0)*r11*x12717)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12718))+((r11*x12716)));
evalcond[5]=((((-1.0)*sj1*x12714))+(((-1.0)*cj1*sj2))+((r00*x12715))+(((-1.0)*r01*x12717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12719=cj5*cj5;
IkReal x12720=r11*r11;
IkReal x12721=(cj5*r10);
IkReal x12722=(r11*sj5);
CheckValue<IkReal> x12723=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12719*x12720))+(r12*r12)+(((-2.0)*x12721*x12722))+x12720+((x12719*(r10*r10))))),-1);
if(!x12723.valid){
continue;
}
CheckValue<IkReal> x12724 = IKatan2WithCheck(IkReal(((((-1.0)*x12722))+x12721)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12723.value)))+(x12724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12725=IKsin(j4);
IkReal x12726=IKcos(j4);
IkReal x12727=(cj5*r10);
IkReal x12728=(r01*sj5);
IkReal x12729=((1.0)*cj2);
IkReal x12730=(cj5*r00);
IkReal x12731=(cj5*r20);
IkReal x12732=((1.0)*x12726);
IkReal x12733=((1.0)*x12725);
IkReal x12734=(sj5*x12725);
evalcond[0]=(((r21*x12734))+(((-1.0)*r22*x12732))+(((-1.0)*x12731*x12733)));
evalcond[1]=((((-1.0)*r02*x12732))+((x12725*x12728))+(((-1.0)*x12730*x12733)));
evalcond[2]=((((-1.0)*r11*sj5*x12732))+(((-1.0)*r12*x12733))+((x12726*x12727)));
evalcond[3]=((1.0)+(((-1.0)*x12727*x12733))+((r11*x12734))+(((-1.0)*r12*x12732)));
evalcond[4]=((((-1.0)*r22*x12733))+((sj1*sj2))+(((-1.0)*r21*sj5*x12732))+(((-1.0)*cj1*x12729))+((x12726*x12731)));
evalcond[5]=((((-1.0)*sj1*x12729))+(((-1.0)*r02*x12733))+(((-1.0)*x12728*x12732))+(((-1.0)*cj1*sj2))+((x12726*x12730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12735=((1.0)*cj5);
CheckValue<IkReal> x12736 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12736.valid){
continue;
}
CheckValue<IkReal> x12737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12735))+(((-1.0)*r00*sj5)))),-1);
if(!x12737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12736.value)+(((1.5707963267949)*(x12737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12738=IKsin(j4);
IkReal x12739=IKcos(j4);
IkReal x12740=(cj5*r10);
IkReal x12741=(r01*sj5);
IkReal x12742=((1.0)*cj2);
IkReal x12743=(cj5*r00);
IkReal x12744=(cj5*r20);
IkReal x12745=((1.0)*x12739);
IkReal x12746=((1.0)*x12738);
IkReal x12747=(sj5*x12738);
evalcond[0]=((((-1.0)*r22*x12745))+(((-1.0)*x12744*x12746))+((r21*x12747)));
evalcond[1]=((((-1.0)*r02*x12745))+(((-1.0)*x12743*x12746))+((x12738*x12741)));
evalcond[2]=((((-1.0)*r12*x12746))+(((-1.0)*r11*sj5*x12745))+((x12739*x12740)));
evalcond[3]=((1.0)+((r11*x12747))+(((-1.0)*r12*x12745))+(((-1.0)*x12740*x12746)));
evalcond[4]=((((-1.0)*r21*sj5*x12745))+((sj1*sj2))+(((-1.0)*r22*x12746))+((x12739*x12744))+(((-1.0)*cj1*x12742)));
evalcond[5]=((((-1.0)*x12741*x12745))+(((-1.0)*r02*x12746))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12742))+((x12739*x12743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12748=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12748.valid){
continue;
}
CheckValue<IkReal> x12749 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12748.value)))+(x12749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12750=IKsin(j4);
IkReal x12751=IKcos(j4);
IkReal x12752=(cj5*r10);
IkReal x12753=(r01*sj5);
IkReal x12754=((1.0)*cj2);
IkReal x12755=(cj5*r00);
IkReal x12756=(cj5*r20);
IkReal x12757=((1.0)*x12751);
IkReal x12758=((1.0)*x12750);
IkReal x12759=(sj5*x12750);
evalcond[0]=((((-1.0)*r22*x12757))+(((-1.0)*x12756*x12758))+((r21*x12759)));
evalcond[1]=((((-1.0)*r02*x12757))+(((-1.0)*x12755*x12758))+((x12750*x12753)));
evalcond[2]=(((x12751*x12752))+(((-1.0)*r12*x12758))+(((-1.0)*r11*sj5*x12757)));
evalcond[3]=((1.0)+((r11*x12759))+(((-1.0)*x12752*x12758))+(((-1.0)*r12*x12757)));
evalcond[4]=(((x12751*x12756))+(((-1.0)*r21*sj5*x12757))+(((-1.0)*r22*x12758))+((sj1*sj2))+(((-1.0)*cj1*x12754)));
evalcond[5]=(((x12751*x12755))+(((-1.0)*r02*x12758))+(((-1.0)*sj1*x12754))+(((-1.0)*cj1*sj2))+(((-1.0)*x12753*x12757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12760=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12760;
j4eval[1]=IKsign(x12760);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12761=((1.0)*cj5);
IkReal x12762=((((-1.0)*r01*x12761))+(((-1.0)*r00*sj5)));
j4eval[0]=x12762;
j4eval[1]=((IKabs(((((-1.0)*r20*x12761))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12763=(sj1*sj2);
IkReal x12764=(cj5*r10);
IkReal x12765=(r11*sj5);
IkReal x12766=(cj1*cj2);
IkReal x12767=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12767;
j4eval[1]=((IKabs((((r12*x12766))+(((-1.0)*r12*x12763)))))+(IKabs((((x12763*x12765))+((x12764*x12766))+(((-1.0)*x12765*x12766))+(((-1.0)*x12763*x12764))))));
j4eval[2]=IKsign(x12767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12768=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12768);
rxp1_1=(px*r21);
rxp1_2=(r11*x12768);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12769=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12769);
rxp1_1=(px*r21);
rxp1_2=(r11*x12769);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12770=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12770)));
j4eval[1]=((((-1.0)*r20*x12770))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12771=((1.0)*cj5);
CheckValue<IkReal> x12772=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12771))),-1);
if(!x12772.valid){
continue;
}
CheckValue<IkReal> x12773=IKPowWithIntegerCheck(((((-1.0)*r20*x12771))+((r21*sj5))),-1);
if(!x12773.valid){
continue;
}
if( IKabs(((-1.0)*(x12772.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12773.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12772.value)))+IKsqr(((x12773.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12772.value)), ((x12773.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12774=IKsin(j4);
IkReal x12775=IKcos(j4);
IkReal x12776=((1.0)*cj2);
IkReal x12777=(r21*sj5);
IkReal x12778=(r11*sj5);
IkReal x12779=((1.0)*cj5*x12774);
IkReal x12780=((1.0)*cj5*x12775);
evalcond[0]=((-1.0)*r02*x12775);
evalcond[1]=((((-1.0)*r20*x12779))+((x12774*x12777)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12776))+((r02*x12774)));
evalcond[3]=((((-1.0)*r10*x12780))+((x12775*x12778)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12779))+((x12774*x12778)));
evalcond[5]=((((-1.0)*cj1*x12776))+((sj1*sj2))+(((-1.0)*r20*x12780))+((x12775*x12777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12781=IKPowWithIntegerCheck(r02,-1);
if(!x12781.valid){
continue;
}
CheckValue<IkReal> x12782=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12782.valid){
continue;
}
if( IKabs(((x12781.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12782.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12781.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12782.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12781.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12782.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12783=IKsin(j4);
IkReal x12784=IKcos(j4);
IkReal x12785=((1.0)*cj2);
IkReal x12786=(r21*sj5);
IkReal x12787=(r11*sj5);
IkReal x12788=((1.0)*cj5*x12783);
IkReal x12789=((1.0)*cj5*x12784);
evalcond[0]=((-1.0)*r02*x12784);
evalcond[1]=(((x12783*x12786))+(((-1.0)*r20*x12788)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12785))+((r02*x12783)));
evalcond[3]=(((x12784*x12787))+(((-1.0)*r10*x12789)));
evalcond[4]=((1.0)+((x12783*x12787))+(((-1.0)*r10*x12788)));
evalcond[5]=(((x12784*x12786))+((sj1*sj2))+(((-1.0)*r20*x12789))+(((-1.0)*cj1*x12785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12790=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12790;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12791=((1.0)*cj5);
IkReal x12792=((((-1.0)*r21*x12791))+(((-1.0)*r20*sj5)));
j4eval[0]=x12792;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12791))+((r11*sj5))))));
j4eval[2]=IKsign(x12792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12793=cj5*cj5;
IkReal x12794=(r11*r21);
IkReal x12795=((1.0)*r20);
IkReal x12796=(cj5*sj5);
IkReal x12797=((((-1.0)*r12*r22))+((x12793*x12794))+((r10*r21*x12796))+(((-1.0)*x12794))+(((-1.0)*r10*x12793*x12795))+((r11*r20*x12796)));
j4eval[0]=x12797;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12795))))));
j4eval[2]=IKsign(x12797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12798=cj5*cj5;
IkReal x12799=(r21*sj5);
IkReal x12800=(r11*r21);
IkReal x12801=((1.0)*r20);
CheckValue<IkReal> x12802=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12799))+(((-1.0)*r12*r22))+((x12798*x12800))+(((-1.0)*r10*x12798*x12801))+(((-1.0)*x12800))+((cj5*r11*r20*sj5)))),-1);
if(!x12802.valid){
continue;
}
CheckValue<IkReal> x12803 = IKatan2WithCheck(IkReal((x12799+(((-1.0)*cj5*x12801)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12802.value)))+(x12803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12804=IKcos(j4);
IkReal x12805=IKsin(j4);
IkReal x12806=(cj5*r00);
IkReal x12807=(cj5*r20);
IkReal x12808=(cj5*r10);
IkReal x12809=((1.0)*x12804);
IkReal x12810=((1.0)*x12805);
IkReal x12811=(sj5*x12804);
IkReal x12812=(sj5*x12805);
evalcond[0]=(((r21*x12811))+(((-1.0)*x12807*x12809))+((r22*x12805)));
evalcond[1]=(((r12*x12805))+((r11*x12811))+(((-1.0)*x12808*x12809)));
evalcond[2]=(((r21*x12812))+(((-1.0)*r22*x12809))+(((-1.0)*x12807*x12810)));
evalcond[3]=(((r01*x12812))+(((-1.0)*r02*x12809))+(((-1.0)*x12806*x12810)));
evalcond[4]=((-1.0)+((r02*x12805))+((r01*x12811))+(((-1.0)*x12806*x12809)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12809))+((r11*x12812))+(((-1.0)*x12808*x12810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12813=((1.0)*cj5);
CheckValue<IkReal> x12814 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12813))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12814.valid){
continue;
}
CheckValue<IkReal> x12815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12813))+(((-1.0)*r20*sj5)))),-1);
if(!x12815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12814.value)+(((1.5707963267949)*(x12815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12816=IKcos(j4);
IkReal x12817=IKsin(j4);
IkReal x12818=(cj5*r00);
IkReal x12819=(cj5*r20);
IkReal x12820=(cj5*r10);
IkReal x12821=((1.0)*x12816);
IkReal x12822=((1.0)*x12817);
IkReal x12823=(sj5*x12816);
IkReal x12824=(sj5*x12817);
evalcond[0]=(((r21*x12823))+(((-1.0)*x12819*x12821))+((r22*x12817)));
evalcond[1]=(((r12*x12817))+((r11*x12823))+(((-1.0)*x12820*x12821)));
evalcond[2]=((((-1.0)*r22*x12821))+((r21*x12824))+(((-1.0)*x12819*x12822)));
evalcond[3]=((((-1.0)*r02*x12821))+((r01*x12824))+(((-1.0)*x12818*x12822)));
evalcond[4]=((-1.0)+((r01*x12823))+((r02*x12817))+(((-1.0)*x12818*x12821)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12821))+((r11*x12824))+(((-1.0)*x12820*x12822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12825 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12825.valid){
continue;
}
CheckValue<IkReal> x12826=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12825.value)+(((1.5707963267949)*(x12826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12827=IKcos(j4);
IkReal x12828=IKsin(j4);
IkReal x12829=(cj5*r00);
IkReal x12830=(cj5*r20);
IkReal x12831=(cj5*r10);
IkReal x12832=((1.0)*x12827);
IkReal x12833=((1.0)*x12828);
IkReal x12834=(sj5*x12827);
IkReal x12835=(sj5*x12828);
evalcond[0]=(((r21*x12834))+((r22*x12828))+(((-1.0)*x12830*x12832)));
evalcond[1]=(((r11*x12834))+((r12*x12828))+(((-1.0)*x12831*x12832)));
evalcond[2]=(((r21*x12835))+(((-1.0)*r22*x12832))+(((-1.0)*x12830*x12833)));
evalcond[3]=((((-1.0)*x12829*x12833))+(((-1.0)*r02*x12832))+((r01*x12835)));
evalcond[4]=((-1.0)+(((-1.0)*x12829*x12832))+((r02*x12828))+((r01*x12834)));
evalcond[5]=((1.0)+((r11*x12835))+(((-1.0)*r12*x12832))+(((-1.0)*x12831*x12833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12836=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12836;
j4eval[1]=IKsign(x12836);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12837=((1.0)*cj5);
IkReal x12838=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12837)));
j4eval[0]=x12838;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12837))))));
j4eval[2]=IKsign(x12838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12839=cj5*cj5;
IkReal x12840=(r11*r21);
IkReal x12841=((1.0)*r20);
IkReal x12842=(cj5*sj5);
IkReal x12843=(((x12839*x12840))+((r11*r20*x12842))+(((-1.0)*r12*r22))+(((-1.0)*x12840))+((r10*r21*x12842))+(((-1.0)*r10*x12839*x12841)));
j4eval[0]=x12843;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12841)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12844=cj5*cj5;
IkReal x12845=(r21*sj5);
IkReal x12846=(r11*r21);
IkReal x12847=((1.0)*r20);
CheckValue<IkReal> x12848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12844*x12847))+(((-1.0)*x12846))+((x12844*x12846))+((cj5*r10*x12845))+((cj5*r11*r20*sj5)))),-1);
if(!x12848.valid){
continue;
}
CheckValue<IkReal> x12849 = IKatan2WithCheck(IkReal((x12845+(((-1.0)*cj5*x12847)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12848.value)))+(x12849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12850=IKcos(j4);
IkReal x12851=IKsin(j4);
IkReal x12852=(cj5*r00);
IkReal x12853=(cj5*r20);
IkReal x12854=(cj5*r10);
IkReal x12855=((1.0)*x12850);
IkReal x12856=((1.0)*x12851);
IkReal x12857=(sj5*x12850);
IkReal x12858=(sj5*x12851);
evalcond[0]=((((-1.0)*x12853*x12855))+((r22*x12851))+((r21*x12857)));
evalcond[1]=((((-1.0)*x12854*x12855))+((r11*x12857))+((r12*x12851)));
evalcond[2]=((((-1.0)*r22*x12855))+(((-1.0)*x12853*x12856))+((r21*x12858)));
evalcond[3]=((((-1.0)*r02*x12855))+(((-1.0)*x12852*x12856))+((r01*x12858)));
evalcond[4]=((1.0)+(((-1.0)*x12852*x12855))+((r01*x12857))+((r02*x12851)));
evalcond[5]=((1.0)+(((-1.0)*x12854*x12856))+(((-1.0)*r12*x12855))+((r11*x12858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12859=((1.0)*cj5);
CheckValue<IkReal> x12860 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12859)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12860.valid){
continue;
}
CheckValue<IkReal> x12861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12859)))),-1);
if(!x12861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12860.value)+(((1.5707963267949)*(x12861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12862=IKcos(j4);
IkReal x12863=IKsin(j4);
IkReal x12864=(cj5*r00);
IkReal x12865=(cj5*r20);
IkReal x12866=(cj5*r10);
IkReal x12867=((1.0)*x12862);
IkReal x12868=((1.0)*x12863);
IkReal x12869=(sj5*x12862);
IkReal x12870=(sj5*x12863);
evalcond[0]=(((r21*x12869))+(((-1.0)*x12865*x12867))+((r22*x12863)));
evalcond[1]=(((r11*x12869))+((r12*x12863))+(((-1.0)*x12866*x12867)));
evalcond[2]=((((-1.0)*x12865*x12868))+(((-1.0)*r22*x12867))+((r21*x12870)));
evalcond[3]=(((r01*x12870))+(((-1.0)*x12864*x12868))+(((-1.0)*r02*x12867)));
evalcond[4]=((1.0)+(((-1.0)*x12864*x12867))+((r01*x12869))+((r02*x12863)));
evalcond[5]=((1.0)+((r11*x12870))+(((-1.0)*x12866*x12868))+(((-1.0)*r12*x12867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12871=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12871.valid){
continue;
}
CheckValue<IkReal> x12872 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12871.value)))+(x12872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12873=IKcos(j4);
IkReal x12874=IKsin(j4);
IkReal x12875=(cj5*r00);
IkReal x12876=(cj5*r20);
IkReal x12877=(cj5*r10);
IkReal x12878=((1.0)*x12873);
IkReal x12879=((1.0)*x12874);
IkReal x12880=(sj5*x12873);
IkReal x12881=(sj5*x12874);
evalcond[0]=(((r22*x12874))+(((-1.0)*x12876*x12878))+((r21*x12880)));
evalcond[1]=(((r12*x12874))+(((-1.0)*x12877*x12878))+((r11*x12880)));
evalcond[2]=((((-1.0)*r22*x12878))+(((-1.0)*x12876*x12879))+((r21*x12881)));
evalcond[3]=((((-1.0)*r02*x12878))+((r01*x12881))+(((-1.0)*x12875*x12879)));
evalcond[4]=((1.0)+((r01*x12880))+((r02*x12874))+(((-1.0)*x12875*x12878)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12878))+(((-1.0)*x12877*x12879))+((r11*x12881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12882=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12882;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12883=((1.0)*cj5);
IkReal x12884=((((-1.0)*r21*x12883))+(((-1.0)*r20*sj5)));
j4eval[0]=x12884;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12883))))));
j4eval[2]=IKsign(x12884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12885=cj5*cj5;
IkReal x12886=(r11*r21);
IkReal x12887=((1.0)*r20);
IkReal x12888=(cj5*sj5);
IkReal x12889=((((-1.0)*x12886))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12885*x12887))+((r10*r21*x12888))+((x12885*x12886))+((r11*r20*x12888)));
j4eval[0]=x12889;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12887)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12890=cj5*cj5;
IkReal x12891=(r21*sj5);
IkReal x12892=(r11*r21);
IkReal x12893=((1.0)*r20);
CheckValue<IkReal> x12894=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12892))+((cj5*r10*x12891))+(((-1.0)*r10*x12890*x12893))+(((-1.0)*r12*r22))+((x12890*x12892))+((cj5*r11*r20*sj5)))),-1);
if(!x12894.valid){
continue;
}
CheckValue<IkReal> x12895 = IKatan2WithCheck(IkReal((x12891+(((-1.0)*cj5*x12893)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12894.value)))+(x12895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12896=IKcos(j4);
IkReal x12897=IKsin(j4);
IkReal x12898=(cj5*r00);
IkReal x12899=(cj5*r20);
IkReal x12900=(cj5*r10);
IkReal x12901=((1.0)*x12896);
IkReal x12902=((1.0)*x12897);
IkReal x12903=(sj5*x12896);
IkReal x12904=(sj5*x12897);
evalcond[0]=(((r22*x12897))+(((-1.0)*x12899*x12901))+((r21*x12903)));
evalcond[1]=(((r12*x12897))+(((-1.0)*x12900*x12901))+((r11*x12903)));
evalcond[2]=((((-1.0)*x12899*x12902))+((r21*x12904))+(((-1.0)*r22*x12901)));
evalcond[3]=(((r01*x12904))+(((-1.0)*x12898*x12902))+(((-1.0)*r02*x12901)));
evalcond[4]=((-1.0)+((r01*x12903))+(((-1.0)*x12898*x12901))+((r02*x12897)));
evalcond[5]=((1.0)+(((-1.0)*x12900*x12902))+(((-1.0)*r12*x12901))+((r11*x12904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12905=((1.0)*cj5);
CheckValue<IkReal> x12906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12905))+(((-1.0)*r20*sj5)))),-1);
if(!x12906.valid){
continue;
}
CheckValue<IkReal> x12907 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12905))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12906.value)))+(x12907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12908=IKcos(j4);
IkReal x12909=IKsin(j4);
IkReal x12910=(cj5*r00);
IkReal x12911=(cj5*r20);
IkReal x12912=(cj5*r10);
IkReal x12913=((1.0)*x12908);
IkReal x12914=((1.0)*x12909);
IkReal x12915=(sj5*x12908);
IkReal x12916=(sj5*x12909);
evalcond[0]=((((-1.0)*x12911*x12913))+((r21*x12915))+((r22*x12909)));
evalcond[1]=((((-1.0)*x12912*x12913))+((r12*x12909))+((r11*x12915)));
evalcond[2]=((((-1.0)*x12911*x12914))+((r21*x12916))+(((-1.0)*r22*x12913)));
evalcond[3]=((((-1.0)*x12910*x12914))+(((-1.0)*r02*x12913))+((r01*x12916)));
evalcond[4]=((-1.0)+(((-1.0)*x12910*x12913))+((r02*x12909))+((r01*x12915)));
evalcond[5]=((1.0)+(((-1.0)*x12912*x12914))+(((-1.0)*r12*x12913))+((r11*x12916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12917 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12917.valid){
continue;
}
CheckValue<IkReal> x12918=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12917.value)+(((1.5707963267949)*(x12918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12919=IKcos(j4);
IkReal x12920=IKsin(j4);
IkReal x12921=(cj5*r00);
IkReal x12922=(cj5*r20);
IkReal x12923=(cj5*r10);
IkReal x12924=((1.0)*x12919);
IkReal x12925=((1.0)*x12920);
IkReal x12926=(sj5*x12919);
IkReal x12927=(sj5*x12920);
evalcond[0]=((((-1.0)*x12922*x12924))+((r21*x12926))+((r22*x12920)));
evalcond[1]=(((r11*x12926))+(((-1.0)*x12923*x12924))+((r12*x12920)));
evalcond[2]=((((-1.0)*x12922*x12925))+((r21*x12927))+(((-1.0)*r22*x12924)));
evalcond[3]=((((-1.0)*r02*x12924))+((r01*x12927))+(((-1.0)*x12921*x12925)));
evalcond[4]=((-1.0)+((r02*x12920))+((r01*x12926))+(((-1.0)*x12921*x12924)));
evalcond[5]=((1.0)+((r11*x12927))+(((-1.0)*r12*x12924))+(((-1.0)*x12923*x12925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12928=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12928;
j4eval[1]=IKsign(x12928);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12929=((1.0)*cj5);
IkReal x12930=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12929)));
j4eval[0]=x12930;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12929))+((r21*sj5))))));
j4eval[2]=IKsign(x12930);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12931=cj5*cj5;
IkReal x12932=(r11*r21);
IkReal x12933=((1.0)*r20);
IkReal x12934=(cj5*sj5);
IkReal x12935=(((r11*r20*x12934))+(((-1.0)*r10*x12931*x12933))+(((-1.0)*r12*r22))+(((-1.0)*x12932))+((r10*r21*x12934))+((x12931*x12932)));
j4eval[0]=x12935;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12933))))));
j4eval[2]=IKsign(x12935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12936=cj5*cj5;
IkReal x12937=(r21*sj5);
IkReal x12938=(r11*r21);
IkReal x12939=((1.0)*r20);
CheckValue<IkReal> x12940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12936*x12939))+((cj5*r10*x12937))+(((-1.0)*r12*r22))+(((-1.0)*x12938))+((x12936*x12938))+((cj5*r11*r20*sj5)))),-1);
if(!x12940.valid){
continue;
}
CheckValue<IkReal> x12941 = IKatan2WithCheck(IkReal((x12937+(((-1.0)*cj5*x12939)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12940.value)))+(x12941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12942=IKcos(j4);
IkReal x12943=IKsin(j4);
IkReal x12944=(cj5*r00);
IkReal x12945=(cj5*r20);
IkReal x12946=(cj5*r10);
IkReal x12947=((1.0)*x12942);
IkReal x12948=((1.0)*x12943);
IkReal x12949=(sj5*x12942);
IkReal x12950=(sj5*x12943);
evalcond[0]=(((r22*x12943))+((r21*x12949))+(((-1.0)*x12945*x12947)));
evalcond[1]=((((-1.0)*x12946*x12947))+((r12*x12943))+((r11*x12949)));
evalcond[2]=(((r21*x12950))+(((-1.0)*x12945*x12948))+(((-1.0)*r22*x12947)));
evalcond[3]=(((r01*x12950))+(((-1.0)*x12944*x12948))+(((-1.0)*r02*x12947)));
evalcond[4]=((1.0)+((r01*x12949))+(((-1.0)*x12944*x12947))+((r02*x12943)));
evalcond[5]=((1.0)+(((-1.0)*x12946*x12948))+((r11*x12950))+(((-1.0)*r12*x12947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12951=((1.0)*cj5);
CheckValue<IkReal> x12952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12951)))),-1);
if(!x12952.valid){
continue;
}
CheckValue<IkReal> x12953 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12951)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12952.value)))+(x12953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12954=IKcos(j4);
IkReal x12955=IKsin(j4);
IkReal x12956=(cj5*r00);
IkReal x12957=(cj5*r20);
IkReal x12958=(cj5*r10);
IkReal x12959=((1.0)*x12954);
IkReal x12960=((1.0)*x12955);
IkReal x12961=(sj5*x12954);
IkReal x12962=(sj5*x12955);
evalcond[0]=((((-1.0)*x12957*x12959))+((r22*x12955))+((r21*x12961)));
evalcond[1]=((((-1.0)*x12958*x12959))+((r12*x12955))+((r11*x12961)));
evalcond[2]=((((-1.0)*r22*x12959))+(((-1.0)*x12957*x12960))+((r21*x12962)));
evalcond[3]=(((r01*x12962))+(((-1.0)*r02*x12959))+(((-1.0)*x12956*x12960)));
evalcond[4]=((1.0)+((r01*x12961))+(((-1.0)*x12956*x12959))+((r02*x12955)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12959))+(((-1.0)*x12958*x12960))+((r11*x12962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12963=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12963.valid){
continue;
}
CheckValue<IkReal> x12964 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12963.value)))+(x12964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12965=IKcos(j4);
IkReal x12966=IKsin(j4);
IkReal x12967=(cj5*r00);
IkReal x12968=(cj5*r20);
IkReal x12969=(cj5*r10);
IkReal x12970=((1.0)*x12965);
IkReal x12971=((1.0)*x12966);
IkReal x12972=(sj5*x12965);
IkReal x12973=(sj5*x12966);
evalcond[0]=(((r22*x12966))+(((-1.0)*x12968*x12970))+((r21*x12972)));
evalcond[1]=(((r11*x12972))+((r12*x12966))+(((-1.0)*x12969*x12970)));
evalcond[2]=((((-1.0)*r22*x12970))+(((-1.0)*x12968*x12971))+((r21*x12973)));
evalcond[3]=(((r01*x12973))+(((-1.0)*r02*x12970))+(((-1.0)*x12967*x12971)));
evalcond[4]=((1.0)+((r01*x12972))+((r02*x12966))+(((-1.0)*x12967*x12970)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12970))+((r11*x12973))+(((-1.0)*x12969*x12971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12974=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12974;
j4eval[1]=IKsign(x12974);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12975=((1.0)*cj5);
IkReal x12976=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12975)));
j4eval[0]=x12976;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12975))))));
j4eval[2]=IKsign(x12976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12977=cj5*cj5;
IkReal x12978=(r11*r21);
IkReal x12979=((1.0)*r20);
IkReal x12980=(cj5*sj5);
IkReal x12981=(((r10*r21*x12980))+(((-1.0)*r12*r22))+(((-1.0)*x12978))+((x12977*x12978))+(((-1.0)*r10*x12977*x12979))+((r11*r20*x12980)));
j4eval[0]=x12981;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12979)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12982=cj5*cj5;
IkReal x12983=(r21*sj5);
IkReal x12984=(r11*r21);
IkReal x12985=((1.0)*r20);
CheckValue<IkReal> x12986 = IKatan2WithCheck(IkReal((x12983+(((-1.0)*cj5*x12985)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12986.valid){
continue;
}
CheckValue<IkReal> x12987=IKPowWithIntegerCheck(IKsign((((x12982*x12984))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12982*x12985))+((cj5*r10*x12983))+(((-1.0)*x12984))+((cj5*r11*r20*sj5)))),-1);
if(!x12987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12986.value)+(((1.5707963267949)*(x12987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12988=IKcos(j4);
IkReal x12989=IKsin(j4);
IkReal x12990=(cj5*r00);
IkReal x12991=(cj5*r20);
IkReal x12992=(cj5*r10);
IkReal x12993=((1.0)*x12988);
IkReal x12994=((1.0)*x12989);
IkReal x12995=(sj5*x12988);
IkReal x12996=(sj5*x12989);
evalcond[0]=(((r22*x12989))+((r21*x12995))+(((-1.0)*x12991*x12993)));
evalcond[1]=((((-1.0)*x12992*x12993))+((r11*x12995))+((r12*x12989)));
evalcond[2]=((((-1.0)*r22*x12993))+((r21*x12996))+(((-1.0)*x12991*x12994)));
evalcond[3]=(((r01*x12996))+(((-1.0)*r02*x12993))+(((-1.0)*x12990*x12994)));
evalcond[4]=((1.0)+((r01*x12995))+(((-1.0)*x12990*x12993))+((r02*x12989)));
evalcond[5]=((1.0)+(((-1.0)*x12992*x12994))+((r11*x12996))+(((-1.0)*r12*x12993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12997=((1.0)*cj5);
CheckValue<IkReal> x12998 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12997)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12998.valid){
continue;
}
CheckValue<IkReal> x12999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12997)))),-1);
if(!x12999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12998.value)+(((1.5707963267949)*(x12999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13000=IKcos(j4);
IkReal x13001=IKsin(j4);
IkReal x13002=(cj5*r00);
IkReal x13003=(cj5*r20);
IkReal x13004=(cj5*r10);
IkReal x13005=((1.0)*x13000);
IkReal x13006=((1.0)*x13001);
IkReal x13007=(sj5*x13000);
IkReal x13008=(sj5*x13001);
evalcond[0]=((((-1.0)*x13003*x13005))+((r22*x13001))+((r21*x13007)));
evalcond[1]=((((-1.0)*x13004*x13005))+((r12*x13001))+((r11*x13007)));
evalcond[2]=((((-1.0)*x13003*x13006))+(((-1.0)*r22*x13005))+((r21*x13008)));
evalcond[3]=((((-1.0)*x13002*x13006))+(((-1.0)*r02*x13005))+((r01*x13008)));
evalcond[4]=((1.0)+(((-1.0)*x13002*x13005))+((r02*x13001))+((r01*x13007)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13005))+(((-1.0)*x13004*x13006))+((r11*x13008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13009=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13009.valid){
continue;
}
CheckValue<IkReal> x13010 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13009.value)))+(x13010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13011=IKcos(j4);
IkReal x13012=IKsin(j4);
IkReal x13013=(cj5*r00);
IkReal x13014=(cj5*r20);
IkReal x13015=(cj5*r10);
IkReal x13016=((1.0)*x13011);
IkReal x13017=((1.0)*x13012);
IkReal x13018=(sj5*x13011);
IkReal x13019=(sj5*x13012);
evalcond[0]=(((r21*x13018))+((r22*x13012))+(((-1.0)*x13014*x13016)));
evalcond[1]=((((-1.0)*x13015*x13016))+((r11*x13018))+((r12*x13012)));
evalcond[2]=((((-1.0)*r22*x13016))+((r21*x13019))+(((-1.0)*x13014*x13017)));
evalcond[3]=((((-1.0)*x13013*x13017))+((r01*x13019))+(((-1.0)*r02*x13016)));
evalcond[4]=((1.0)+(((-1.0)*x13013*x13016))+((r01*x13018))+((r02*x13012)));
evalcond[5]=((1.0)+(((-1.0)*x13015*x13017))+((r11*x13019))+(((-1.0)*r12*x13016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13020=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13020;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13021=((1.0)*cj5);
IkReal x13022=((((-1.0)*r21*x13021))+(((-1.0)*r20*sj5)));
j4eval[0]=x13022;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13021))+((r11*sj5))))));
j4eval[2]=IKsign(x13022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13023=cj5*cj5;
IkReal x13024=(r11*r21);
IkReal x13025=((1.0)*r20);
IkReal x13026=(cj5*sj5);
IkReal x13027=((((-1.0)*r12*r22))+((r11*r20*x13026))+((x13023*x13024))+(((-1.0)*x13024))+(((-1.0)*r10*x13023*x13025))+((r10*r21*x13026)));
j4eval[0]=x13027;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13025))))));
j4eval[2]=IKsign(x13027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13028=cj5*cj5;
IkReal x13029=(r21*sj5);
IkReal x13030=(r11*r21);
IkReal x13031=((1.0)*r20);
CheckValue<IkReal> x13032=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13030))+(((-1.0)*r10*x13028*x13031))+((cj5*r10*x13029))+(((-1.0)*r12*r22))+((x13028*x13030))+((cj5*r11*r20*sj5)))),-1);
if(!x13032.valid){
continue;
}
CheckValue<IkReal> x13033 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13031))+x13029)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13032.value)))+(x13033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13034=IKcos(j4);
IkReal x13035=IKsin(j4);
IkReal x13036=(cj5*r00);
IkReal x13037=(cj5*r20);
IkReal x13038=(cj5*r10);
IkReal x13039=((1.0)*x13034);
IkReal x13040=((1.0)*x13035);
IkReal x13041=(sj5*x13034);
IkReal x13042=(sj5*x13035);
evalcond[0]=(((r22*x13035))+((r21*x13041))+(((-1.0)*x13037*x13039)));
evalcond[1]=(((r11*x13041))+(((-1.0)*x13038*x13039))+((r12*x13035)));
evalcond[2]=(((r21*x13042))+(((-1.0)*r22*x13039))+(((-1.0)*x13037*x13040)));
evalcond[3]=((((-1.0)*x13036*x13040))+(((-1.0)*r02*x13039))+((r01*x13042)));
evalcond[4]=((-1.0)+(((-1.0)*x13036*x13039))+((r01*x13041))+((r02*x13035)));
evalcond[5]=((1.0)+(((-1.0)*x13038*x13040))+((r11*x13042))+(((-1.0)*r12*x13039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13043=((1.0)*cj5);
CheckValue<IkReal> x13044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13043))+(((-1.0)*r20*sj5)))),-1);
if(!x13044.valid){
continue;
}
CheckValue<IkReal> x13045 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13043))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13044.value)))+(x13045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13046=IKcos(j4);
IkReal x13047=IKsin(j4);
IkReal x13048=(cj5*r00);
IkReal x13049=(cj5*r20);
IkReal x13050=(cj5*r10);
IkReal x13051=((1.0)*x13046);
IkReal x13052=((1.0)*x13047);
IkReal x13053=(sj5*x13046);
IkReal x13054=(sj5*x13047);
evalcond[0]=((((-1.0)*x13049*x13051))+((r21*x13053))+((r22*x13047)));
evalcond[1]=((((-1.0)*x13050*x13051))+((r12*x13047))+((r11*x13053)));
evalcond[2]=((((-1.0)*x13049*x13052))+((r21*x13054))+(((-1.0)*r22*x13051)));
evalcond[3]=((((-1.0)*x13048*x13052))+(((-1.0)*r02*x13051))+((r01*x13054)));
evalcond[4]=((-1.0)+((r02*x13047))+(((-1.0)*x13048*x13051))+((r01*x13053)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13051))+(((-1.0)*x13050*x13052))+((r11*x13054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13055 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13055.valid){
continue;
}
CheckValue<IkReal> x13056=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13055.value)+(((1.5707963267949)*(x13056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13057=IKcos(j4);
IkReal x13058=IKsin(j4);
IkReal x13059=(cj5*r00);
IkReal x13060=(cj5*r20);
IkReal x13061=(cj5*r10);
IkReal x13062=((1.0)*x13057);
IkReal x13063=((1.0)*x13058);
IkReal x13064=(sj5*x13057);
IkReal x13065=(sj5*x13058);
evalcond[0]=((((-1.0)*x13060*x13062))+((r22*x13058))+((r21*x13064)));
evalcond[1]=(((r12*x13058))+(((-1.0)*x13061*x13062))+((r11*x13064)));
evalcond[2]=((((-1.0)*x13060*x13063))+((r21*x13065))+(((-1.0)*r22*x13062)));
evalcond[3]=((((-1.0)*x13059*x13063))+(((-1.0)*r02*x13062))+((r01*x13065)));
evalcond[4]=((-1.0)+((r02*x13058))+(((-1.0)*x13059*x13062))+((r01*x13064)));
evalcond[5]=((1.0)+(((-1.0)*x13061*x13063))+(((-1.0)*r12*x13062))+((r11*x13065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13066=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13066;
j4eval[1]=IKsign(x13066);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13067=((1.0)*cj5);
IkReal x13068=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13067)));
j4eval[0]=x13068;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13067))+((r21*sj5))))));
j4eval[2]=IKsign(x13068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13069=cj5*cj5;
IkReal x13070=(r11*r21);
IkReal x13071=((1.0)*r20);
IkReal x13072=(cj5*sj5);
IkReal x13073=((((-1.0)*r12*r22))+(((-1.0)*r10*x13069*x13071))+((r11*r20*x13072))+(((-1.0)*x13070))+((r10*r21*x13072))+((x13069*x13070)));
j4eval[0]=x13073;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13071))))));
j4eval[2]=IKsign(x13073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13074=cj5*cj5;
IkReal x13075=(r21*sj5);
IkReal x13076=(r11*r21);
IkReal x13077=((1.0)*r20);
CheckValue<IkReal> x13078=IKPowWithIntegerCheck(IKsign((((x13074*x13076))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13074*x13077))+(((-1.0)*x13076))+((cj5*r11*r20*sj5))+((cj5*r10*x13075)))),-1);
if(!x13078.valid){
continue;
}
CheckValue<IkReal> x13079 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13077))+x13075)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13078.value)))+(x13079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13080=IKcos(j4);
IkReal x13081=IKsin(j4);
IkReal x13082=(cj5*r00);
IkReal x13083=(cj5*r20);
IkReal x13084=(cj5*r10);
IkReal x13085=((1.0)*x13080);
IkReal x13086=((1.0)*x13081);
IkReal x13087=(sj5*x13080);
IkReal x13088=(sj5*x13081);
evalcond[0]=(((r22*x13081))+(((-1.0)*x13083*x13085))+((r21*x13087)));
evalcond[1]=((((-1.0)*x13084*x13085))+((r11*x13087))+((r12*x13081)));
evalcond[2]=((((-1.0)*r22*x13085))+(((-1.0)*x13083*x13086))+((r21*x13088)));
evalcond[3]=((((-1.0)*r02*x13085))+(((-1.0)*x13082*x13086))+((r01*x13088)));
evalcond[4]=((1.0)+((r02*x13081))+(((-1.0)*x13082*x13085))+((r01*x13087)));
evalcond[5]=((1.0)+(((-1.0)*x13084*x13086))+((r11*x13088))+(((-1.0)*r12*x13085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13089=((1.0)*cj5);
CheckValue<IkReal> x13090 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13089)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13090.valid){
continue;
}
CheckValue<IkReal> x13091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13089))+(((-1.0)*r10*sj5)))),-1);
if(!x13091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13090.value)+(((1.5707963267949)*(x13091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13092=IKcos(j4);
IkReal x13093=IKsin(j4);
IkReal x13094=(cj5*r00);
IkReal x13095=(cj5*r20);
IkReal x13096=(cj5*r10);
IkReal x13097=((1.0)*x13092);
IkReal x13098=((1.0)*x13093);
IkReal x13099=(sj5*x13092);
IkReal x13100=(sj5*x13093);
evalcond[0]=((((-1.0)*x13095*x13097))+((r22*x13093))+((r21*x13099)));
evalcond[1]=(((r11*x13099))+((r12*x13093))+(((-1.0)*x13096*x13097)));
evalcond[2]=((((-1.0)*x13095*x13098))+(((-1.0)*r22*x13097))+((r21*x13100)));
evalcond[3]=(((r01*x13100))+(((-1.0)*x13094*x13098))+(((-1.0)*r02*x13097)));
evalcond[4]=((1.0)+((r02*x13093))+(((-1.0)*x13094*x13097))+((r01*x13099)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13097))+(((-1.0)*x13096*x13098))+((r11*x13100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13101=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13101.valid){
continue;
}
CheckValue<IkReal> x13102 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13101.value)))+(x13102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13103=IKcos(j4);
IkReal x13104=IKsin(j4);
IkReal x13105=(cj5*r00);
IkReal x13106=(cj5*r20);
IkReal x13107=(cj5*r10);
IkReal x13108=((1.0)*x13103);
IkReal x13109=((1.0)*x13104);
IkReal x13110=(sj5*x13103);
IkReal x13111=(sj5*x13104);
evalcond[0]=((((-1.0)*x13106*x13108))+((r21*x13110))+((r22*x13104)));
evalcond[1]=((((-1.0)*x13107*x13108))+((r12*x13104))+((r11*x13110)));
evalcond[2]=((((-1.0)*x13106*x13109))+((r21*x13111))+(((-1.0)*r22*x13108)));
evalcond[3]=((((-1.0)*r02*x13108))+(((-1.0)*x13105*x13109))+((r01*x13111)));
evalcond[4]=((1.0)+((r02*x13104))+(((-1.0)*x13105*x13108))+((r01*x13110)));
evalcond[5]=((1.0)+(((-1.0)*x13107*x13109))+(((-1.0)*r12*x13108))+((r11*x13111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13112=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13112;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13113=((1.0)*cj5);
IkReal x13114=((((-1.0)*r21*x13113))+(((-1.0)*r20*sj5)));
j4eval[0]=x13114;
j4eval[1]=((IKabs(((((-1.0)*r10*x13113))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13115=cj5*cj5;
IkReal x13116=(r11*r21);
IkReal x13117=((1.0)*r20);
IkReal x13118=(cj5*sj5);
IkReal x13119=((((-1.0)*r12*r22))+(((-1.0)*r10*x13115*x13117))+(((-1.0)*x13116))+((x13115*x13116))+((r10*r21*x13118))+((r11*r20*x13118)));
j4eval[0]=x13119;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13117)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13120=cj5*cj5;
IkReal x13121=(r21*sj5);
IkReal x13122=(r11*r21);
IkReal x13123=((1.0)*r20);
CheckValue<IkReal> x13124=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13121))+(((-1.0)*r12*r22))+((x13120*x13122))+(((-1.0)*r10*x13120*x13123))+((cj5*r11*r20*sj5))+(((-1.0)*x13122)))),-1);
if(!x13124.valid){
continue;
}
CheckValue<IkReal> x13125 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13123))+x13121)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13124.value)))+(x13125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13126=IKcos(j4);
IkReal x13127=IKsin(j4);
IkReal x13128=(cj5*r00);
IkReal x13129=(cj5*r20);
IkReal x13130=(cj5*r10);
IkReal x13131=((1.0)*x13126);
IkReal x13132=((1.0)*x13127);
IkReal x13133=(sj5*x13126);
IkReal x13134=(sj5*x13127);
evalcond[0]=((((-1.0)*x13129*x13131))+((r21*x13133))+((r22*x13127)));
evalcond[1]=(((r12*x13127))+((r11*x13133))+(((-1.0)*x13130*x13131)));
evalcond[2]=((((-1.0)*x13129*x13132))+((r21*x13134))+(((-1.0)*r22*x13131)));
evalcond[3]=(((r01*x13134))+(((-1.0)*r02*x13131))+(((-1.0)*x13128*x13132)));
evalcond[4]=((-1.0)+((r01*x13133))+((r02*x13127))+(((-1.0)*x13128*x13131)));
evalcond[5]=((1.0)+((r11*x13134))+(((-1.0)*r12*x13131))+(((-1.0)*x13130*x13132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13135=((1.0)*cj5);
CheckValue<IkReal> x13136 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13135))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13136.valid){
continue;
}
CheckValue<IkReal> x13137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13135))+(((-1.0)*r20*sj5)))),-1);
if(!x13137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13136.value)+(((1.5707963267949)*(x13137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13138=IKcos(j4);
IkReal x13139=IKsin(j4);
IkReal x13140=(cj5*r00);
IkReal x13141=(cj5*r20);
IkReal x13142=(cj5*r10);
IkReal x13143=((1.0)*x13138);
IkReal x13144=((1.0)*x13139);
IkReal x13145=(sj5*x13138);
IkReal x13146=(sj5*x13139);
evalcond[0]=((((-1.0)*x13141*x13143))+((r21*x13145))+((r22*x13139)));
evalcond[1]=((((-1.0)*x13142*x13143))+((r12*x13139))+((r11*x13145)));
evalcond[2]=((((-1.0)*x13141*x13144))+(((-1.0)*r22*x13143))+((r21*x13146)));
evalcond[3]=((((-1.0)*x13140*x13144))+(((-1.0)*r02*x13143))+((r01*x13146)));
evalcond[4]=((-1.0)+(((-1.0)*x13140*x13143))+((r02*x13139))+((r01*x13145)));
evalcond[5]=((1.0)+(((-1.0)*x13142*x13144))+((r11*x13146))+(((-1.0)*r12*x13143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13147 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13147.valid){
continue;
}
CheckValue<IkReal> x13148=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13147.value)+(((1.5707963267949)*(x13148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13149=IKcos(j4);
IkReal x13150=IKsin(j4);
IkReal x13151=(cj5*r00);
IkReal x13152=(cj5*r20);
IkReal x13153=(cj5*r10);
IkReal x13154=((1.0)*x13149);
IkReal x13155=((1.0)*x13150);
IkReal x13156=(sj5*x13149);
IkReal x13157=(sj5*x13150);
evalcond[0]=(((r21*x13156))+(((-1.0)*x13152*x13154))+((r22*x13150)));
evalcond[1]=(((r11*x13156))+((r12*x13150))+(((-1.0)*x13153*x13154)));
evalcond[2]=(((r21*x13157))+(((-1.0)*x13152*x13155))+(((-1.0)*r22*x13154)));
evalcond[3]=((((-1.0)*x13151*x13155))+(((-1.0)*r02*x13154))+((r01*x13157)));
evalcond[4]=((-1.0)+(((-1.0)*x13151*x13154))+((r02*x13150))+((r01*x13156)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13154))+((r11*x13157))+(((-1.0)*x13153*x13155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13158=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13159=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13159);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13159);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13160=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13160)));
j4eval[1]=((((-1.0)*r00*x13160))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13161=((1.0)*cj5);
CheckValue<IkReal> x13162=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13161))),-1);
if(!x13162.valid){
continue;
}
CheckValue<IkReal> x13163=IKPowWithIntegerCheck(((((-1.0)*r00*x13161))+((r01*sj5))),-1);
if(!x13163.valid){
continue;
}
if( IKabs(((-1.0)*(x13162.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13163.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13162.value)))+IKsqr(((x13163.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13162.value)), ((x13163.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13164=IKsin(j4);
IkReal x13165=IKcos(j4);
IkReal x13166=((1.0)*cj5);
IkReal x13167=((1.0)*cj2);
IkReal x13168=(sj5*x13165);
IkReal x13169=(sj5*x13164);
evalcond[0]=((-1.0)*r22*x13165);
evalcond[1]=((((-1.0)*cj1*x13167))+((r22*x13164))+((sj1*sj2)));
evalcond[2]=(((r01*x13169))+(((-1.0)*r00*x13164*x13166)));
evalcond[3]=((((-1.0)*r10*x13165*x13166))+((r11*x13168)));
evalcond[4]=((1.0)+((r11*x13169))+(((-1.0)*r10*x13164*x13166)));
evalcond[5]=(((r01*x13168))+(((-1.0)*sj1*x13167))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13165*x13166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13170=IKPowWithIntegerCheck(r22,-1);
if(!x13170.valid){
continue;
}
CheckValue<IkReal> x13171=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13171.valid){
continue;
}
if( IKabs(((x13170.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13171.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13170.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13171.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13170.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13171.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13172=IKsin(j4);
IkReal x13173=IKcos(j4);
IkReal x13174=((1.0)*cj5);
IkReal x13175=((1.0)*cj2);
IkReal x13176=(sj5*x13173);
IkReal x13177=(sj5*x13172);
evalcond[0]=((-1.0)*r22*x13173);
evalcond[1]=((((-1.0)*cj1*x13175))+((sj1*sj2))+((r22*x13172)));
evalcond[2]=(((r01*x13177))+(((-1.0)*r00*x13172*x13174)));
evalcond[3]=((((-1.0)*r10*x13173*x13174))+((r11*x13176)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13172*x13174))+((r11*x13177)));
evalcond[5]=(((r01*x13176))+(((-1.0)*sj1*x13175))+(((-1.0)*r00*x13173*x13174))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13178=(sj1*sj2);
IkReal x13179=(cj5*r10);
IkReal x13180=(r11*sj5);
IkReal x13181=(cj1*cj2);
CheckValue<IkReal> x13182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13182.valid){
continue;
}
CheckValue<IkReal> x13183 = IKatan2WithCheck(IkReal((((x13179*x13181))+(((-1.0)*x13178*x13179))+(((-1.0)*x13180*x13181))+((x13178*x13180)))),IkReal((((r12*x13181))+(((-1.0)*r12*x13178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13182.value)))+(x13183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13184=IKcos(j4);
IkReal x13185=IKsin(j4);
IkReal x13186=(cj5*r00);
IkReal x13187=(cj5*r10);
IkReal x13188=(r21*sj5);
IkReal x13189=((1.0)*cj2);
IkReal x13190=(cj5*r20);
IkReal x13191=((1.0)*x13184);
IkReal x13192=((1.0)*x13185);
IkReal x13193=(sj5*x13185);
IkReal x13194=(sj5*x13184);
evalcond[0]=(((r12*x13185))+((r11*x13194))+(((-1.0)*x13187*x13191)));
evalcond[1]=((((-1.0)*r22*x13191))+((x13185*x13188))+(((-1.0)*x13190*x13192)));
evalcond[2]=((((-1.0)*r02*x13191))+((r01*x13193))+(((-1.0)*x13186*x13192)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13191))+((r11*x13193))+(((-1.0)*x13187*x13192)));
evalcond[4]=(((r22*x13185))+((sj1*sj2))+(((-1.0)*cj1*x13189))+(((-1.0)*x13190*x13191))+((x13184*x13188)));
evalcond[5]=(((r02*x13185))+(((-1.0)*cj1*sj2))+((r01*x13194))+(((-1.0)*sj1*x13189))+(((-1.0)*x13186*x13191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13195=((1.0)*cj5);
CheckValue<IkReal> x13196 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13196.valid){
continue;
}
CheckValue<IkReal> x13197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13195)))),-1);
if(!x13197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13196.value)+(((1.5707963267949)*(x13197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13198=IKcos(j4);
IkReal x13199=IKsin(j4);
IkReal x13200=(cj5*r00);
IkReal x13201=(cj5*r10);
IkReal x13202=(r21*sj5);
IkReal x13203=((1.0)*cj2);
IkReal x13204=(cj5*r20);
IkReal x13205=((1.0)*x13198);
IkReal x13206=((1.0)*x13199);
IkReal x13207=(sj5*x13199);
IkReal x13208=(sj5*x13198);
evalcond[0]=(((r12*x13199))+((r11*x13208))+(((-1.0)*x13201*x13205)));
evalcond[1]=(((x13199*x13202))+(((-1.0)*x13204*x13206))+(((-1.0)*r22*x13205)));
evalcond[2]=(((r01*x13207))+(((-1.0)*r02*x13205))+(((-1.0)*x13200*x13206)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13205))+((r11*x13207))+(((-1.0)*x13201*x13206)));
evalcond[4]=((((-1.0)*cj1*x13203))+((x13198*x13202))+((sj1*sj2))+(((-1.0)*x13204*x13205))+((r22*x13199)));
evalcond[5]=(((r01*x13208))+((r02*x13199))+(((-1.0)*cj1*sj2))+(((-1.0)*x13200*x13205))+(((-1.0)*sj1*x13203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13209=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13209.valid){
continue;
}
CheckValue<IkReal> x13210 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13209.value)))+(x13210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13211=IKcos(j4);
IkReal x13212=IKsin(j4);
IkReal x13213=(cj5*r00);
IkReal x13214=(cj5*r10);
IkReal x13215=(r21*sj5);
IkReal x13216=((1.0)*cj2);
IkReal x13217=(cj5*r20);
IkReal x13218=((1.0)*x13211);
IkReal x13219=((1.0)*x13212);
IkReal x13220=(sj5*x13212);
IkReal x13221=(sj5*x13211);
evalcond[0]=((((-1.0)*x13214*x13218))+((r12*x13212))+((r11*x13221)));
evalcond[1]=((((-1.0)*r22*x13218))+((x13212*x13215))+(((-1.0)*x13217*x13219)));
evalcond[2]=((((-1.0)*x13213*x13219))+(((-1.0)*r02*x13218))+((r01*x13220)));
evalcond[3]=((1.0)+(((-1.0)*x13214*x13219))+((r11*x13220))+(((-1.0)*r12*x13218)));
evalcond[4]=((((-1.0)*cj1*x13216))+((x13211*x13215))+((sj1*sj2))+((r22*x13212))+(((-1.0)*x13217*x13218)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13213*x13218))+(((-1.0)*sj1*x13216))+((r01*x13221))+((r02*x13212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13222=((-1.0)*r00);
IkReal x13224 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13224)==0){
continue;
}
IkReal x13223=pow(x13224,-0.5);
CheckValue<IkReal> x13225 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13222),IKFAST_ATAN2_MAGTHRESH);
if(!x13225.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13225.value));
IkReal gconst19=(r01*x13223);
IkReal gconst20=(x13222*x13223);
CheckValue<IkReal> x13226 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13226.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13226.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13227=((-1.0)*r00);
IkReal x13228=x13223;
CheckValue<IkReal> x13230 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13227),IKFAST_ATAN2_MAGTHRESH);
if(!x13230.valid){
continue;
}
IkReal x13229=((-1.0)*(x13230.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13229;
IkReal gconst18=x13229;
IkReal gconst19=(r01*x13228);
IkReal gconst20=(x13227*x13228);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13231=((-1.0)*r00);
IkReal x13232=x13223;
CheckValue<IkReal> x13234 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13231),IKFAST_ATAN2_MAGTHRESH);
if(!x13234.valid){
continue;
}
IkReal x13233=((-1.0)*(x13234.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13233;
IkReal gconst18=x13233;
IkReal gconst19=(r01*x13232);
IkReal gconst20=(x13231*x13232);
CheckValue<IkReal> x13242=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13242.valid){
continue;
}
IkReal x13235=x13242.value;
IkReal x13236=(sj3*x13235);
IkReal x13237=(r11*x13236);
IkReal x13238=(r21*x13236);
IkReal x13239=(r20*x13236);
IkReal x13240=(r10*x13236);
IkReal x13241=(r00*r01*x13236);
j4eval[0]=IKsign((((r00*r01*r20*x13237))+((r21*x13237*(r01*r01)))+((r12*r22*sj3))+((r10*x13239*(r00*r00)))+((r00*r01*r10*x13238))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13243=gconst19*gconst19;
IkReal x13244=gconst20*gconst20;
IkReal x13245=(gconst20*sj3);
IkReal x13246=((1.0)*cj3);
IkReal x13247=(r10*sj3);
IkReal x13248=(gconst19*r21);
IkReal x13249=(r11*r20);
IkReal x13250=(cj3*gconst20);
IkReal x13251=((1.0)*r10*r20);
IkReal x13252=(r21*x13243);
CheckValue<IkReal> x13253 = IKatan2WithCheck(IkReal((((gconst19*r22*x13247))+((r11*r22*x13245)))),IkReal((((r11*x13245*x13248))+(((-1.0)*sj3*x13244*x13249))+(((-1.0)*gconst19*x13245*x13251))+((x13247*x13252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13253.valid){
continue;
}
CheckValue<IkReal> x13254=IKPowWithIntegerCheck(IKsign((((r10*x13248*x13250))+(((-1.0)*r11*x13246*x13252))+(((-1.0)*r12*r22*x13246))+((gconst19*x13249*x13250))+(((-1.0)*r10*r20*x13244*x13246)))),-1);
if(!x13254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13253.value)+(((1.5707963267949)*(x13254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13255=IKsin(j4);
IkReal x13256=IKcos(j4);
IkReal x13257=(sj1*sj2);
IkReal x13258=(gconst20*sj3);
IkReal x13259=(gconst19*r21);
IkReal x13260=(gconst20*r10);
IkReal x13261=(cj3*gconst19);
IkReal x13262=(gconst19*sj3);
IkReal x13263=((1.0)*cj1);
IkReal x13264=(cj3*gconst20);
IkReal x13265=(cj2*sj1);
IkReal x13266=(cj2*x13263);
IkReal x13267=((1.0)*x13256);
IkReal x13268=((1.0)*x13255);
IkReal x13269=(cj3*x13255);
IkReal x13270=(gconst19*x13255);
evalcond[0]=(((x13255*x13259))+(((-1.0)*r22*x13267))+(((-1.0)*gconst20*r20*x13268)));
evalcond[1]=((((-1.0)*gconst20*r00*x13268))+((r01*x13270))+(((-1.0)*r02*x13267)));
evalcond[2]=((1.0)+((r11*x13270))+(((-1.0)*r12*x13267))+(((-1.0)*x13260*x13268)));
evalcond[3]=(((r12*x13269))+((r10*x13262))+((r11*x13258))+(((-1.0)*cj3*x13260*x13267))+((r11*x13256*x13261)));
evalcond[4]=(((r11*x13264))+((r10*x13261))+(((-1.0)*r11*x13262*x13267))+(((-1.0)*r12*sj3*x13268))+((r10*x13256*x13258)));
evalcond[5]=(((r21*x13258))+((cj3*x13256*x13259))+((cj1*sj2))+((r20*x13262))+(((-1.0)*r20*x13264*x13267))+((r22*x13269))+x13265);
evalcond[6]=((((-1.0)*x13266))+((r01*x13256*x13261))+((r00*x13262))+((r01*x13258))+((r02*x13269))+(((-1.0)*r00*x13264*x13267))+x13257);
evalcond[7]=((((-1.0)*x13266))+((r21*x13264))+((r20*x13256*x13258))+((r20*x13261))+(((-1.0)*r22*sj3*x13268))+(((-1.0)*sj3*x13259*x13267))+x13257);
evalcond[8]=((((-1.0)*x13265))+(((-1.0)*sj2*x13263))+((r00*x13261))+((r01*x13264))+((r00*x13256*x13258))+(((-1.0)*r02*sj3*x13268))+(((-1.0)*r01*x13262*x13267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13271=gconst19*gconst19;
IkReal x13272=gconst20*gconst20;
IkReal x13273=(r21*sj3);
IkReal x13274=(cj3*r11);
IkReal x13275=(gconst19*gconst20);
IkReal x13276=((1.0)*r10);
IkReal x13277=(cj3*r10);
IkReal x13278=(r20*x13272);
CheckValue<IkReal> x13279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj3*x13275))+((r11*x13271*x13273))+(((-1.0)*x13273*x13275*x13276))+((r12*r22*sj3))+((r10*sj3*x13278)))),-1);
if(!x13279.valid){
continue;
}
CheckValue<IkReal> x13280 = IKatan2WithCheck(IkReal((((gconst19*r22*x13277))+((gconst20*r22*x13274)))),IkReal((((r21*x13271*x13277))+(((-1.0)*cj3*r20*x13275*x13276))+((r21*x13274*x13275))+(((-1.0)*x13274*x13278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13279.value)))+(x13280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13281=IKsin(j4);
IkReal x13282=IKcos(j4);
IkReal x13283=(sj1*sj2);
IkReal x13284=(gconst20*sj3);
IkReal x13285=(gconst19*r21);
IkReal x13286=(gconst20*r10);
IkReal x13287=(cj3*gconst19);
IkReal x13288=(gconst19*sj3);
IkReal x13289=((1.0)*cj1);
IkReal x13290=(cj3*gconst20);
IkReal x13291=(cj2*sj1);
IkReal x13292=(cj2*x13289);
IkReal x13293=((1.0)*x13282);
IkReal x13294=((1.0)*x13281);
IkReal x13295=(cj3*x13281);
IkReal x13296=(gconst19*x13281);
evalcond[0]=((((-1.0)*gconst20*r20*x13294))+((x13281*x13285))+(((-1.0)*r22*x13293)));
evalcond[1]=((((-1.0)*gconst20*r00*x13294))+(((-1.0)*r02*x13293))+((r01*x13296)));
evalcond[2]=((1.0)+((r11*x13296))+(((-1.0)*x13286*x13294))+(((-1.0)*r12*x13293)));
evalcond[3]=(((r11*x13282*x13287))+((r12*x13295))+((r11*x13284))+((r10*x13288))+(((-1.0)*cj3*x13286*x13293)));
evalcond[4]=(((r11*x13290))+(((-1.0)*r11*x13288*x13293))+((r10*x13287))+((r10*x13282*x13284))+(((-1.0)*r12*sj3*x13294)));
evalcond[5]=(((r20*x13288))+((cj3*x13282*x13285))+((cj1*sj2))+((r22*x13295))+(((-1.0)*r20*x13290*x13293))+((r21*x13284))+x13291);
evalcond[6]=((((-1.0)*r00*x13290*x13293))+((r02*x13295))+x13283+((r01*x13284))+((r00*x13288))+(((-1.0)*x13292))+((r01*x13282*x13287)));
evalcond[7]=(((r20*x13287))+((r20*x13282*x13284))+(((-1.0)*r22*sj3*x13294))+(((-1.0)*sj3*x13285*x13293))+x13283+(((-1.0)*x13292))+((r21*x13290)));
evalcond[8]=((((-1.0)*sj2*x13289))+(((-1.0)*r01*x13288*x13293))+((r00*x13282*x13284))+(((-1.0)*x13291))+((r00*x13287))+(((-1.0)*r02*sj3*x13294))+((r01*x13290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13297 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13297.valid){
continue;
}
CheckValue<IkReal> x13298=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13297.value)+(((1.5707963267949)*(x13298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13299=IKsin(j4);
IkReal x13300=IKcos(j4);
IkReal x13301=(sj1*sj2);
IkReal x13302=(gconst20*sj3);
IkReal x13303=(gconst19*r21);
IkReal x13304=(gconst20*r10);
IkReal x13305=(cj3*gconst19);
IkReal x13306=(gconst19*sj3);
IkReal x13307=((1.0)*cj1);
IkReal x13308=(cj3*gconst20);
IkReal x13309=(cj2*sj1);
IkReal x13310=(cj2*x13307);
IkReal x13311=((1.0)*x13300);
IkReal x13312=((1.0)*x13299);
IkReal x13313=(cj3*x13299);
IkReal x13314=(gconst19*x13299);
evalcond[0]=((((-1.0)*gconst20*r20*x13312))+((x13299*x13303))+(((-1.0)*r22*x13311)));
evalcond[1]=((((-1.0)*gconst20*r00*x13312))+((r01*x13314))+(((-1.0)*r02*x13311)));
evalcond[2]=((1.0)+((r11*x13314))+(((-1.0)*x13304*x13312))+(((-1.0)*r12*x13311)));
evalcond[3]=(((r11*x13300*x13305))+((r10*x13306))+(((-1.0)*cj3*x13304*x13311))+((r11*x13302))+((r12*x13313)));
evalcond[4]=(((r10*x13305))+(((-1.0)*r11*x13306*x13311))+((r11*x13308))+((r10*x13300*x13302))+(((-1.0)*r12*sj3*x13312)));
evalcond[5]=(((cj3*x13300*x13303))+((r21*x13302))+((r20*x13306))+(((-1.0)*r20*x13308*x13311))+((cj1*sj2))+((r22*x13313))+x13309);
evalcond[6]=(((r01*x13300*x13305))+((r00*x13306))+((r01*x13302))+(((-1.0)*x13310))+(((-1.0)*r00*x13308*x13311))+x13301+((r02*x13313)));
evalcond[7]=(((r21*x13308))+(((-1.0)*r22*sj3*x13312))+((r20*x13305))+(((-1.0)*sj3*x13303*x13311))+((r20*x13300*x13302))+(((-1.0)*x13310))+x13301);
evalcond[8]=((((-1.0)*r01*x13306*x13311))+(((-1.0)*r02*sj3*x13312))+((r00*x13305))+((r01*x13308))+((r00*x13300*x13302))+(((-1.0)*sj2*x13307))+(((-1.0)*x13309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13315=((-1.0)*r01);
IkReal x13317 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13317)==0){
continue;
}
IkReal x13316=pow(x13317,-0.5);
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal(x13315),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13318.value))));
IkReal gconst22=(x13315*x13316);
IkReal gconst23=((1.0)*r00*x13316);
CheckValue<IkReal> x13319 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13319.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13319.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13320=((-1.0)*r01);
CheckValue<IkReal> x13323 = IKatan2WithCheck(IkReal(x13320),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13323.valid){
continue;
}
IkReal x13321=((1.0)*(x13323.value));
IkReal x13322=x13316;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13321)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13321)));
IkReal gconst22=(x13320*x13322);
IkReal gconst23=((1.0)*r00*x13322);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13324=((-1.0)*r01);
CheckValue<IkReal> x13327 = IKatan2WithCheck(IkReal(x13324),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13327.valid){
continue;
}
IkReal x13325=((1.0)*(x13327.value));
IkReal x13326=x13316;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13325)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13325)));
IkReal gconst22=(x13324*x13326);
IkReal gconst23=((1.0)*r00*x13326);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13328=gconst22*gconst22;
IkReal x13329=gconst23*gconst23;
IkReal x13330=(r21*sj3);
IkReal x13331=((1.0)*cj3);
IkReal x13332=(gconst23*r11);
IkReal x13333=(r22*sj3);
IkReal x13334=(gconst22*r10);
IkReal x13335=((1.0)*r20*sj3);
CheckValue<IkReal> x13336=IKPowWithIntegerCheck(IKsign((((cj3*gconst22*r20*x13332))+(((-1.0)*r12*r22*x13331))+(((-1.0)*r10*r20*x13329*x13331))+((cj3*gconst23*r21*x13334))+(((-1.0)*r11*r21*x13328*x13331)))),-1);
if(!x13336.valid){
continue;
}
CheckValue<IkReal> x13337 = IKatan2WithCheck(IkReal((((x13333*x13334))+((x13332*x13333)))),IkReal(((((-1.0)*gconst23*x13334*x13335))+((r10*x13328*x13330))+(((-1.0)*r11*x13329*x13335))+((gconst22*x13330*x13332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13336.value)))+(x13337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13338=IKsin(j4);
IkReal x13339=IKcos(j4);
IkReal x13340=(sj1*sj2);
IkReal x13341=(gconst23*sj3);
IkReal x13342=(gconst22*sj3);
IkReal x13343=(cj2*sj1);
IkReal x13344=((1.0)*cj1);
IkReal x13345=(cj3*gconst23);
IkReal x13346=(cj3*gconst22);
IkReal x13347=(cj2*x13344);
IkReal x13348=((1.0)*x13339);
IkReal x13349=(cj3*x13338);
IkReal x13350=(gconst22*x13338);
IkReal x13351=((1.0)*sj3*x13338);
IkReal x13352=(x13339*x13346);
IkReal x13353=((1.0)*gconst23*x13338);
evalcond[0]=(((r21*x13350))+(((-1.0)*r22*x13348))+(((-1.0)*r20*x13353)));
evalcond[1]=((((-1.0)*r02*x13348))+(((-1.0)*r00*x13353))+((r01*x13350)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13348))+((r11*x13350))+(((-1.0)*r10*x13353)));
evalcond[3]=(((r10*x13342))+((r12*x13349))+((r11*x13341))+(((-1.0)*r10*x13345*x13348))+((r11*x13352)));
evalcond[4]=((((-1.0)*r12*x13351))+((r10*x13346))+(((-1.0)*r11*x13342*x13348))+((r11*x13345))+((r10*x13339*x13341)));
evalcond[5]=(((cj1*sj2))+((r22*x13349))+((r21*x13341))+(((-1.0)*r20*x13345*x13348))+((r21*x13352))+((r20*x13342))+x13343);
evalcond[6]=((((-1.0)*x13347))+((r02*x13349))+((r01*x13352))+((r00*x13342))+((r01*x13341))+(((-1.0)*r00*x13345*x13348))+x13340);
evalcond[7]=((((-1.0)*r22*x13351))+(((-1.0)*x13347))+((r21*x13345))+((r20*x13339*x13341))+(((-1.0)*r21*x13342*x13348))+((r20*x13346))+x13340);
evalcond[8]=((((-1.0)*r02*x13351))+(((-1.0)*sj2*x13344))+(((-1.0)*x13343))+((r00*x13346))+((r01*x13345))+(((-1.0)*r01*x13342*x13348))+((r00*x13339*x13341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13354=((1.0)*gconst23);
CheckValue<IkReal> x13355 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13355.valid){
continue;
}
CheckValue<IkReal> x13356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13354)))),-1);
if(!x13356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13355.value)+(((1.5707963267949)*(x13356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13357=IKsin(j4);
IkReal x13358=IKcos(j4);
IkReal x13359=(sj1*sj2);
IkReal x13360=(gconst23*sj3);
IkReal x13361=(gconst22*sj3);
IkReal x13362=(cj2*sj1);
IkReal x13363=((1.0)*cj1);
IkReal x13364=(cj3*gconst23);
IkReal x13365=(cj3*gconst22);
IkReal x13366=(cj2*x13363);
IkReal x13367=((1.0)*x13358);
IkReal x13368=(cj3*x13357);
IkReal x13369=(gconst22*x13357);
IkReal x13370=((1.0)*sj3*x13357);
IkReal x13371=(x13358*x13365);
IkReal x13372=((1.0)*gconst23*x13357);
evalcond[0]=((((-1.0)*r22*x13367))+(((-1.0)*r20*x13372))+((r21*x13369)));
evalcond[1]=(((r01*x13369))+(((-1.0)*r00*x13372))+(((-1.0)*r02*x13367)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13367))+(((-1.0)*r10*x13372))+((r11*x13369)));
evalcond[3]=((((-1.0)*r10*x13364*x13367))+((r12*x13368))+((r10*x13361))+((r11*x13371))+((r11*x13360)));
evalcond[4]=(((r10*x13365))+((r11*x13364))+(((-1.0)*r11*x13361*x13367))+((r10*x13358*x13360))+(((-1.0)*r12*x13370)));
evalcond[5]=((((-1.0)*r20*x13364*x13367))+((r20*x13361))+((cj1*sj2))+((r21*x13360))+((r22*x13368))+((r21*x13371))+x13362);
evalcond[6]=(((r01*x13360))+((r01*x13371))+((r00*x13361))+(((-1.0)*r00*x13364*x13367))+(((-1.0)*x13366))+x13359+((r02*x13368)));
evalcond[7]=(((r20*x13365))+(((-1.0)*r22*x13370))+((r20*x13358*x13360))+(((-1.0)*r21*x13361*x13367))+(((-1.0)*x13366))+((r21*x13364))+x13359);
evalcond[8]=((((-1.0)*x13362))+(((-1.0)*r01*x13361*x13367))+(((-1.0)*sj2*x13363))+((r01*x13364))+((r00*x13365))+((r00*x13358*x13360))+(((-1.0)*r02*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13373=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13373.valid){
continue;
}
CheckValue<IkReal> x13374 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13373.value)))+(x13374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13375=IKsin(j4);
IkReal x13376=IKcos(j4);
IkReal x13377=(sj1*sj2);
IkReal x13378=(gconst23*sj3);
IkReal x13379=(gconst22*sj3);
IkReal x13380=(cj2*sj1);
IkReal x13381=((1.0)*cj1);
IkReal x13382=(cj3*gconst23);
IkReal x13383=(cj3*gconst22);
IkReal x13384=(cj2*x13381);
IkReal x13385=((1.0)*x13376);
IkReal x13386=(cj3*x13375);
IkReal x13387=(gconst22*x13375);
IkReal x13388=((1.0)*sj3*x13375);
IkReal x13389=(x13376*x13383);
IkReal x13390=((1.0)*gconst23*x13375);
evalcond[0]=((((-1.0)*r22*x13385))+(((-1.0)*r20*x13390))+((r21*x13387)));
evalcond[1]=(((r01*x13387))+(((-1.0)*r00*x13390))+(((-1.0)*r02*x13385)));
evalcond[2]=((1.0)+((r11*x13387))+(((-1.0)*r10*x13390))+(((-1.0)*r12*x13385)));
evalcond[3]=(((r10*x13379))+((r11*x13389))+((r11*x13378))+(((-1.0)*r10*x13382*x13385))+((r12*x13386)));
evalcond[4]=(((r11*x13382))+((r10*x13376*x13378))+((r10*x13383))+(((-1.0)*r11*x13379*x13385))+(((-1.0)*r12*x13388)));
evalcond[5]=(((cj1*sj2))+((r20*x13379))+((r22*x13386))+((r21*x13378))+x13380+(((-1.0)*r20*x13382*x13385))+((r21*x13389)));
evalcond[6]=(((r00*x13379))+((r01*x13378))+(((-1.0)*r00*x13382*x13385))+((r01*x13389))+(((-1.0)*x13384))+((r02*x13386))+x13377);
evalcond[7]=((((-1.0)*r22*x13388))+((r20*x13383))+(((-1.0)*r21*x13379*x13385))+(((-1.0)*x13384))+((r20*x13376*x13378))+x13377+((r21*x13382)));
evalcond[8]=((((-1.0)*x13380))+((r01*x13382))+((r00*x13383))+((r00*x13376*x13378))+(((-1.0)*r02*x13388))+(((-1.0)*r01*x13379*x13385))+(((-1.0)*sj2*x13381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13392 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13392)==0){
continue;
}
IkReal x13391=pow(x13392,-0.5);
CheckValue<IkReal> x13393 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13393.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13393.value));
IkReal gconst25=((-1.0)*r21*x13391);
IkReal gconst26=(r20*x13391);
CheckValue<IkReal> x13394 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13394.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13394.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13397 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13397.valid){
continue;
}
IkReal x13395=((-1.0)*(x13397.value));
IkReal x13396=x13391;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13395;
IkReal gconst24=x13395;
IkReal gconst25=((-1.0)*r21*x13396);
IkReal gconst26=(r20*x13396);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13400 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13400.valid){
continue;
}
IkReal x13398=((-1.0)*(x13400.value));
IkReal x13399=x13391;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13398;
IkReal gconst24=x13398;
IkReal gconst25=((-1.0)*r21*x13399);
IkReal gconst26=(r20*x13399);
CheckValue<IkReal> x13408=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13408.valid){
continue;
}
IkReal x13401=x13408.value;
IkReal x13402=(sj3*x13401);
IkReal x13403=(r11*x13402);
IkReal x13404=(r00*x13402);
IkReal x13405=(r01*x13402);
IkReal x13406=(r10*x13402);
IkReal x13407=(r20*r21*x13402);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x13405))+((r10*x13404*(r20*r20)))+((r01*x13403*(r21*r21)))+((r00*r20*r21*x13403))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13409=gconst25*gconst25;
IkReal x13410=gconst26*gconst26;
IkReal x13411=(r00*r11);
IkReal x13412=(r01*r10);
IkReal x13413=(r02*sj3);
IkReal x13414=(gconst25*r10);
IkReal x13415=(gconst26*r11);
IkReal x13416=((1.0)*sj3);
IkReal x13417=((1.0)*cj3);
IkReal x13418=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r11*x13409*x13417))+(((-1.0)*r00*r10*x13410*x13417))+(((-1.0)*r02*r12*x13417))+((x13412*x13418))+((x13411*x13418)))),-1);
if(!x13419.valid){
continue;
}
CheckValue<IkReal> x13420 = IKatan2WithCheck(IkReal((((x13413*x13415))+((x13413*x13414)))),IkReal((((gconst25*r01*sj3*x13415))+((sj3*x13409*x13412))+(((-1.0)*gconst26*r00*x13414*x13416))+(((-1.0)*x13410*x13411*x13416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13419.value)))+(x13420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13421=IKsin(j4);
IkReal x13422=IKcos(j4);
IkReal x13423=(sj1*sj2);
IkReal x13424=(gconst26*sj3);
IkReal x13425=(gconst25*sj3);
IkReal x13426=(gconst26*r10);
IkReal x13427=(gconst25*r11);
IkReal x13428=(cj3*gconst25);
IkReal x13429=((1.0)*cj2);
IkReal x13430=(cj1*sj2);
IkReal x13431=(gconst26*r00);
IkReal x13432=(gconst26*r20);
IkReal x13433=(cj3*gconst26);
IkReal x13434=(cj1*x13429);
IkReal x13435=((1.0)*x13422);
IkReal x13436=((1.0)*x13421);
IkReal x13437=(cj3*x13421);
IkReal x13438=(gconst25*x13421);
evalcond[0]=((((-1.0)*r22*x13435))+(((-1.0)*x13432*x13436))+((r21*x13438)));
evalcond[1]=(((r01*x13438))+(((-1.0)*x13431*x13436))+(((-1.0)*r02*x13435)));
evalcond[2]=((1.0)+(((-1.0)*x13426*x13436))+(((-1.0)*r12*x13435))+((x13421*x13427)));
evalcond[3]=((((-1.0)*cj3*x13426*x13435))+((r11*x13424))+((r12*x13437))+((cj3*x13422*x13427))+((r10*x13425)));
evalcond[4]=(((r10*x13422*x13424))+(((-1.0)*r11*x13425*x13435))+((r11*x13433))+(((-1.0)*r12*sj3*x13436))+((r10*x13428)));
evalcond[5]=(x13430+((cj2*sj1))+((r21*x13422*x13428))+((r22*x13437))+((r21*x13424))+((r20*x13425))+(((-1.0)*cj3*x13432*x13435)));
evalcond[6]=(x13423+(((-1.0)*x13434))+((r02*x13437))+((r01*x13422*x13428))+((r00*x13425))+(((-1.0)*cj3*x13431*x13435))+((r01*x13424)));
evalcond[7]=(x13423+((r20*x13422*x13424))+(((-1.0)*r21*x13425*x13435))+(((-1.0)*x13434))+((r21*x13433))+(((-1.0)*r22*sj3*x13436))+((r20*x13428)));
evalcond[8]=(((r01*x13433))+((r00*x13422*x13424))+(((-1.0)*x13430))+(((-1.0)*sj1*x13429))+(((-1.0)*r02*sj3*x13436))+((r00*x13428))+(((-1.0)*r01*x13425*x13435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13439=gconst26*gconst26;
IkReal x13440=gconst25*gconst25;
IkReal x13441=(r01*r10);
IkReal x13442=(cj3*r11);
IkReal x13443=(gconst25*gconst26);
IkReal x13444=(cj3*r10);
IkReal x13445=(r00*x13439);
IkReal x13446=((1.0)*sj3*x13443);
CheckValue<IkReal> x13447=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x13441*x13446))+((r01*r11*sj3*x13440))+(((-1.0)*r00*r11*x13446))+((r10*sj3*x13445)))),-1);
if(!x13447.valid){
continue;
}
CheckValue<IkReal> x13448 = IKatan2WithCheck(IkReal((((gconst26*r02*x13442))+((gconst25*r02*x13444)))),IkReal(((((-1.0)*r00*x13443*x13444))+(((-1.0)*x13442*x13445))+((r01*x13442*x13443))+((cj3*x13440*x13441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13447.value)))+(x13448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13449=IKsin(j4);
IkReal x13450=IKcos(j4);
IkReal x13451=(sj1*sj2);
IkReal x13452=(gconst26*sj3);
IkReal x13453=(gconst25*sj3);
IkReal x13454=(gconst26*r10);
IkReal x13455=(gconst25*r11);
IkReal x13456=(cj3*gconst25);
IkReal x13457=((1.0)*cj2);
IkReal x13458=(cj1*sj2);
IkReal x13459=(gconst26*r00);
IkReal x13460=(gconst26*r20);
IkReal x13461=(cj3*gconst26);
IkReal x13462=(cj1*x13457);
IkReal x13463=((1.0)*x13450);
IkReal x13464=((1.0)*x13449);
IkReal x13465=(cj3*x13449);
IkReal x13466=(gconst25*x13449);
evalcond[0]=((((-1.0)*r22*x13463))+((r21*x13466))+(((-1.0)*x13460*x13464)));
evalcond[1]=((((-1.0)*x13459*x13464))+(((-1.0)*r02*x13463))+((r01*x13466)));
evalcond[2]=((1.0)+((x13449*x13455))+(((-1.0)*x13454*x13464))+(((-1.0)*r12*x13463)));
evalcond[3]=(((r10*x13453))+((r12*x13465))+((r11*x13452))+((cj3*x13450*x13455))+(((-1.0)*cj3*x13454*x13463)));
evalcond[4]=(((r10*x13456))+(((-1.0)*r11*x13453*x13463))+((r11*x13461))+((r10*x13450*x13452))+(((-1.0)*r12*sj3*x13464)));
evalcond[5]=(x13458+((cj2*sj1))+((r20*x13453))+((r21*x13450*x13456))+((r21*x13452))+(((-1.0)*cj3*x13460*x13463))+((r22*x13465)));
evalcond[6]=(x13451+(((-1.0)*cj3*x13459*x13463))+((r01*x13450*x13456))+(((-1.0)*x13462))+((r02*x13465))+((r01*x13452))+((r00*x13453)));
evalcond[7]=(((r20*x13450*x13452))+x13451+((r20*x13456))+((r21*x13461))+(((-1.0)*x13462))+(((-1.0)*r21*x13453*x13463))+(((-1.0)*r22*sj3*x13464)));
evalcond[8]=((((-1.0)*r02*sj3*x13464))+((r00*x13450*x13452))+(((-1.0)*sj1*x13457))+(((-1.0)*r01*x13453*x13463))+(((-1.0)*x13458))+((r01*x13461))+((r00*x13456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13467=((1.0)*gconst26);
CheckValue<IkReal> x13468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13467))+(((-1.0)*gconst25*r00)))),-1);
if(!x13468.valid){
continue;
}
CheckValue<IkReal> x13469 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13467))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13468.value)))+(x13469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13470=IKsin(j4);
IkReal x13471=IKcos(j4);
IkReal x13472=(sj1*sj2);
IkReal x13473=(gconst26*sj3);
IkReal x13474=(gconst25*sj3);
IkReal x13475=(gconst26*r10);
IkReal x13476=(gconst25*r11);
IkReal x13477=(cj3*gconst25);
IkReal x13478=((1.0)*cj2);
IkReal x13479=(cj1*sj2);
IkReal x13480=(gconst26*r00);
IkReal x13481=(gconst26*r20);
IkReal x13482=(cj3*gconst26);
IkReal x13483=(cj1*x13478);
IkReal x13484=((1.0)*x13471);
IkReal x13485=((1.0)*x13470);
IkReal x13486=(cj3*x13470);
IkReal x13487=(gconst25*x13470);
evalcond[0]=((((-1.0)*x13481*x13485))+(((-1.0)*r22*x13484))+((r21*x13487)));
evalcond[1]=((((-1.0)*r02*x13484))+((r01*x13487))+(((-1.0)*x13480*x13485)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13484))+((x13470*x13476))+(((-1.0)*x13475*x13485)));
evalcond[3]=(((r11*x13473))+((r10*x13474))+((cj3*x13471*x13476))+(((-1.0)*cj3*x13475*x13484))+((r12*x13486)));
evalcond[4]=(((r10*x13477))+(((-1.0)*r12*sj3*x13485))+((r10*x13471*x13473))+((r11*x13482))+(((-1.0)*r11*x13474*x13484)));
evalcond[5]=(x13479+((cj2*sj1))+((r21*x13471*x13477))+((r21*x13473))+(((-1.0)*cj3*x13481*x13484))+((r20*x13474))+((r22*x13486)));
evalcond[6]=(x13472+(((-1.0)*x13483))+((r02*x13486))+((r00*x13474))+((r01*x13473))+(((-1.0)*cj3*x13480*x13484))+((r01*x13471*x13477)));
evalcond[7]=(x13472+(((-1.0)*x13483))+(((-1.0)*r22*sj3*x13485))+((r20*x13471*x13473))+(((-1.0)*r21*x13474*x13484))+((r20*x13477))+((r21*x13482)));
evalcond[8]=(((r00*x13477))+(((-1.0)*sj1*x13478))+(((-1.0)*r01*x13474*x13484))+(((-1.0)*x13479))+((r00*x13471*x13473))+((r01*x13482))+(((-1.0)*r02*sj3*x13485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13489 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13489)==0){
continue;
}
IkReal x13488=pow(x13489,-0.5);
CheckValue<IkReal> x13490 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13490.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13490.value))));
IkReal gconst28=((1.0)*r21*x13488);
IkReal gconst29=((-1.0)*r20*x13488);
CheckValue<IkReal> x13491 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13491.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13491.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13494 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13494.valid){
continue;
}
IkReal x13492=((1.0)*(x13494.value));
IkReal x13493=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13492)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13492)));
IkReal gconst28=((1.0)*r21*x13493);
IkReal gconst29=((-1.0)*r20*x13493);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13497 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13497.valid){
continue;
}
IkReal x13495=((1.0)*(x13497.value));
IkReal x13496=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13495)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13495)));
IkReal gconst28=((1.0)*r21*x13496);
IkReal gconst29=((-1.0)*r20*x13496);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13500 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13500.valid){
continue;
}
IkReal x13498=((1.0)*(x13500.value));
IkReal x13499=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13498)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13498)));
IkReal gconst28=((1.0)*r21*x13499);
IkReal gconst29=((-1.0)*r20*x13499);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13503 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13503.valid){
continue;
}
IkReal x13501=((1.0)*(x13503.value));
IkReal x13502=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13501)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13501)));
IkReal gconst28=((1.0)*r21*x13502);
IkReal gconst29=((-1.0)*r20*x13502);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13506 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13506.valid){
continue;
}
IkReal x13504=((1.0)*(x13506.value));
IkReal x13505=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13504)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13504)));
IkReal gconst28=((1.0)*r21*x13505);
IkReal gconst29=((-1.0)*r20*x13505);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13509 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13509.valid){
continue;
}
IkReal x13507=((1.0)*(x13509.value));
IkReal x13508=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13507)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13507)));
IkReal gconst28=((1.0)*r21*x13508);
IkReal gconst29=((-1.0)*r20*x13508);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13510=(gconst29*r10);
IkReal x13511=(gconst28*r11);
CheckValue<IkReal> x13512 = IKatan2WithCheck(IkReal((x13510+(((-1.0)*x13511)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13512.valid){
continue;
}
CheckValue<IkReal> x13513=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13510*x13511))+(x13510*x13510)+(x13511*x13511))),-1);
if(!x13513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13512.value)+(((1.5707963267949)*(x13513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13514=IKsin(j4);
IkReal x13515=IKcos(j4);
IkReal x13516=(gconst28*r11);
IkReal x13517=((1.0)*cj2);
IkReal x13518=((1.0)*x13515);
IkReal x13519=(gconst29*x13515);
IkReal x13520=(gconst28*x13514);
IkReal x13521=((1.0)*x13514);
IkReal x13522=(gconst29*x13521);
evalcond[0]=(((r21*x13520))+(((-1.0)*r22*x13518))+(((-1.0)*r20*x13522)));
evalcond[1]=(((r01*x13520))+(((-1.0)*r00*x13522))+(((-1.0)*r02*x13518)));
evalcond[2]=((((-1.0)*r12*x13521))+(((-1.0)*x13516*x13518))+((r10*x13519)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13518))+(((-1.0)*r10*x13522))+((x13514*x13516)));
evalcond[4]=((((-1.0)*r22*x13521))+((r20*x13519))+(((-1.0)*cj1*x13517))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13518)));
evalcond[5]=((((-1.0)*sj1*x13517))+(((-1.0)*gconst28*r01*x13518))+(((-1.0)*cj1*sj2))+((r00*x13519))+(((-1.0)*r02*x13521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13523=((1.0)*gconst29);
CheckValue<IkReal> x13524 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13523))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13524.valid){
continue;
}
CheckValue<IkReal> x13525=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13523)))),-1);
if(!x13525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13524.value)+(((1.5707963267949)*(x13525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13526=IKsin(j4);
IkReal x13527=IKcos(j4);
IkReal x13528=(gconst28*r11);
IkReal x13529=((1.0)*cj2);
IkReal x13530=((1.0)*x13527);
IkReal x13531=(gconst29*x13527);
IkReal x13532=(gconst28*x13526);
IkReal x13533=((1.0)*x13526);
IkReal x13534=(gconst29*x13533);
evalcond[0]=((((-1.0)*r22*x13530))+(((-1.0)*r20*x13534))+((r21*x13532)));
evalcond[1]=((((-1.0)*r02*x13530))+(((-1.0)*r00*x13534))+((r01*x13532)));
evalcond[2]=((((-1.0)*r12*x13533))+(((-1.0)*x13528*x13530))+((r10*x13531)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13530))+((x13526*x13528))+(((-1.0)*r10*x13534)));
evalcond[4]=((((-1.0)*r22*x13533))+((r20*x13531))+((sj1*sj2))+(((-1.0)*cj1*x13529))+(((-1.0)*gconst28*r21*x13530)));
evalcond[5]=((((-1.0)*sj1*x13529))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13530))+(((-1.0)*r02*x13533))+((r00*x13531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13535=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13535.valid){
continue;
}
CheckValue<IkReal> x13536 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13535.value)))+(x13536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13537=IKsin(j4);
IkReal x13538=IKcos(j4);
IkReal x13539=(gconst28*r11);
IkReal x13540=((1.0)*cj2);
IkReal x13541=((1.0)*x13538);
IkReal x13542=(gconst29*x13538);
IkReal x13543=(gconst28*x13537);
IkReal x13544=((1.0)*x13537);
IkReal x13545=(gconst29*x13544);
evalcond[0]=(((r21*x13543))+(((-1.0)*r22*x13541))+(((-1.0)*r20*x13545)));
evalcond[1]=(((r01*x13543))+(((-1.0)*r02*x13541))+(((-1.0)*r00*x13545)));
evalcond[2]=((((-1.0)*x13539*x13541))+((r10*x13542))+(((-1.0)*r12*x13544)));
evalcond[3]=((1.0)+((x13537*x13539))+(((-1.0)*r10*x13545))+(((-1.0)*r12*x13541)));
evalcond[4]=((((-1.0)*gconst28*r21*x13541))+((sj1*sj2))+((r20*x13542))+(((-1.0)*r22*x13544))+(((-1.0)*cj1*x13540)));
evalcond[5]=((((-1.0)*gconst28*r01*x13541))+((r00*x13542))+(((-1.0)*r02*x13544))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13548 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13548.valid){
continue;
}
IkReal x13546=((1.0)*(x13548.value));
IkReal x13547=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13546)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13546)));
IkReal gconst28=((1.0)*r21*x13547);
IkReal gconst29=((-1.0)*r20*x13547);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13551 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13551.valid){
continue;
}
IkReal x13549=((1.0)*(x13551.value));
IkReal x13550=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13549)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13549)));
IkReal gconst28=((1.0)*r21*x13550);
IkReal gconst29=((-1.0)*r20*x13550);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13554 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13554.valid){
continue;
}
IkReal x13552=((1.0)*(x13554.value));
IkReal x13553=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13552)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13552)));
IkReal gconst28=((1.0)*r21*x13553);
IkReal gconst29=((-1.0)*r20*x13553);
IkReal x13555=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13559=IKPowWithIntegerCheck(x13555,-1);
if(!x13559.valid){
continue;
}
IkReal x13556=x13559.value;
IkReal x13557=((1.0)*x13556);
IkReal x13558=((((-1.0)*x13557*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13557*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13556)));
j4eval[0]=x13558;
j4eval[1]=r12;
j4eval[2]=x13555;
j4eval[3]=IKsign(x13558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13560=(gconst28*r11);
IkReal x13561=(gconst29*r10);
CheckValue<IkReal> x13562=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13560*x13560)))+(((-1.0)*(r12*r12)))+(((2.0)*x13560*x13561))+(((-1.0)*(x13561*x13561))))),-1);
if(!x13562.valid){
continue;
}
CheckValue<IkReal> x13563 = IKatan2WithCheck(IkReal((x13560+(((-1.0)*x13561)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13562.value)))+(x13563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13564=IKcos(j4);
IkReal x13565=IKsin(j4);
IkReal x13566=(gconst29*r10);
IkReal x13567=(gconst29*r20);
IkReal x13568=(gconst28*r21);
IkReal x13569=((1.0)*cj2);
IkReal x13570=(gconst29*r00);
IkReal x13571=((1.0)*x13564);
IkReal x13572=((1.0)*x13565);
IkReal x13573=(gconst28*x13564);
IkReal x13574=(gconst28*x13565);
evalcond[0]=((((-1.0)*x13566*x13571))+((r11*x13573))+((r12*x13565)));
evalcond[1]=((((-1.0)*r22*x13571))+((x13565*x13568))+(((-1.0)*x13567*x13572)));
evalcond[2]=((((-1.0)*r02*x13571))+(((-1.0)*x13570*x13572))+((r01*x13574)));
evalcond[3]=((1.0)+(((-1.0)*x13566*x13572))+((r11*x13574))+(((-1.0)*r12*x13571)));
evalcond[4]=((((-1.0)*x13567*x13571))+((sj1*sj2))+(((-1.0)*cj1*x13569))+((r22*x13565))+((x13564*x13568)));
evalcond[5]=((((-1.0)*sj1*x13569))+(((-1.0)*cj1*sj2))+(((-1.0)*x13570*x13571))+((r02*x13565))+((r01*x13573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13575=((1.0)*gconst29);
CheckValue<IkReal> x13576 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13575))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13576.valid){
continue;
}
CheckValue<IkReal> x13577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13575))+(((-1.0)*gconst28*r00)))),-1);
if(!x13577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13576.value)+(((1.5707963267949)*(x13577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13578=IKcos(j4);
IkReal x13579=IKsin(j4);
IkReal x13580=(gconst29*r10);
IkReal x13581=(gconst29*r20);
IkReal x13582=(gconst28*r21);
IkReal x13583=((1.0)*cj2);
IkReal x13584=(gconst29*r00);
IkReal x13585=((1.0)*x13578);
IkReal x13586=((1.0)*x13579);
IkReal x13587=(gconst28*x13578);
IkReal x13588=(gconst28*x13579);
evalcond[0]=(((r12*x13579))+(((-1.0)*x13580*x13585))+((r11*x13587)));
evalcond[1]=((((-1.0)*x13581*x13586))+(((-1.0)*r22*x13585))+((x13579*x13582)));
evalcond[2]=((((-1.0)*r02*x13585))+(((-1.0)*x13584*x13586))+((r01*x13588)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13585))+(((-1.0)*x13580*x13586))+((r11*x13588)));
evalcond[4]=((((-1.0)*x13581*x13585))+((sj1*sj2))+(((-1.0)*cj1*x13583))+((r22*x13579))+((x13578*x13582)));
evalcond[5]=((((-1.0)*x13584*x13585))+(((-1.0)*sj1*x13583))+(((-1.0)*cj1*sj2))+((r01*x13587))+((r02*x13579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13589=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13589.valid){
continue;
}
CheckValue<IkReal> x13590 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13589.value)))+(x13590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13591=IKcos(j4);
IkReal x13592=IKsin(j4);
IkReal x13593=(gconst29*r10);
IkReal x13594=(gconst29*r20);
IkReal x13595=(gconst28*r21);
IkReal x13596=((1.0)*cj2);
IkReal x13597=(gconst29*r00);
IkReal x13598=((1.0)*x13591);
IkReal x13599=((1.0)*x13592);
IkReal x13600=(gconst28*x13591);
IkReal x13601=(gconst28*x13592);
evalcond[0]=(((r11*x13600))+(((-1.0)*x13593*x13598))+((r12*x13592)));
evalcond[1]=(((x13592*x13595))+(((-1.0)*r22*x13598))+(((-1.0)*x13594*x13599)));
evalcond[2]=((((-1.0)*x13597*x13599))+(((-1.0)*r02*x13598))+((r01*x13601)));
evalcond[3]=((1.0)+((r11*x13601))+(((-1.0)*r12*x13598))+(((-1.0)*x13593*x13599)));
evalcond[4]=(((r22*x13592))+((x13591*x13595))+((sj1*sj2))+(((-1.0)*cj1*x13596))+(((-1.0)*x13594*x13598)));
evalcond[5]=((((-1.0)*x13597*x13598))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13596))+((r02*x13592))+((r01*x13600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13604 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13604.valid){
continue;
}
IkReal x13602=((1.0)*(x13604.value));
IkReal x13603=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13602)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13602)));
IkReal gconst28=((1.0)*r21*x13603);
IkReal gconst29=((-1.0)*r20*x13603);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13607 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13607.valid){
continue;
}
IkReal x13605=((1.0)*(x13607.value));
IkReal x13606=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13605)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13605)));
IkReal gconst28=((1.0)*r21*x13606);
IkReal gconst29=((-1.0)*r20*x13606);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13610 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13610.valid){
continue;
}
IkReal x13608=((1.0)*(x13610.value));
IkReal x13609=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13608)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13608)));
IkReal gconst28=((1.0)*r21*x13609);
IkReal gconst29=((-1.0)*r20*x13609);
IkReal x13611=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13615=IKPowWithIntegerCheck(x13611,-1);
if(!x13615.valid){
continue;
}
IkReal x13612=x13615.value;
IkReal x13613=((1.0)*x13612);
IkReal x13614=((((-2.0)*r10*r11*r20*r21*x13612))+(((-1.0)*x13613*(r10*r10)*(r20*r20)))+(((-1.0)*x13613*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13614;
j4eval[1]=r12;
j4eval[2]=x13611;
j4eval[3]=IKsign(x13614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13616=(gconst28*r11);
IkReal x13617=(gconst29*r10);
CheckValue<IkReal> x13618=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13616*x13616)))+(((-1.0)*(x13617*x13617)))+(((-1.0)*(r12*r12)))+(((2.0)*x13616*x13617)))),-1);
if(!x13618.valid){
continue;
}
CheckValue<IkReal> x13619 = IKatan2WithCheck(IkReal((x13616+(((-1.0)*x13617)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13618.value)))+(x13619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13620=IKcos(j4);
IkReal x13621=IKsin(j4);
IkReal x13622=(gconst29*r10);
IkReal x13623=(gconst29*r20);
IkReal x13624=(gconst28*r21);
IkReal x13625=(gconst29*r00);
IkReal x13626=((1.0)*x13620);
IkReal x13627=((1.0)*x13621);
IkReal x13628=(gconst28*x13620);
IkReal x13629=(gconst28*x13621);
evalcond[0]=(((r12*x13621))+(((-1.0)*x13622*x13626))+((r11*x13628)));
evalcond[1]=((((-1.0)*x13623*x13627))+((x13621*x13624))+(((-1.0)*r22*x13626)));
evalcond[2]=((((-1.0)*x13625*x13627))+((r01*x13629))+(((-1.0)*r02*x13626)));
evalcond[3]=((1.0)+(((-1.0)*x13622*x13627))+((r11*x13629))+(((-1.0)*r12*x13626)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13623*x13626))+((cj1*sj2))+((x13620*x13624))+((r22*x13621)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13621))+(((-1.0)*x13625*x13626))+((r01*x13628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13630=((1.0)*gconst29);
CheckValue<IkReal> x13631 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13631.valid){
continue;
}
CheckValue<IkReal> x13632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13630))+(((-1.0)*gconst28*r00)))),-1);
if(!x13632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13631.value)+(((1.5707963267949)*(x13632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13633=IKcos(j4);
IkReal x13634=IKsin(j4);
IkReal x13635=(gconst29*r10);
IkReal x13636=(gconst29*r20);
IkReal x13637=(gconst28*r21);
IkReal x13638=(gconst29*r00);
IkReal x13639=((1.0)*x13633);
IkReal x13640=((1.0)*x13634);
IkReal x13641=(gconst28*x13633);
IkReal x13642=(gconst28*x13634);
evalcond[0]=(((r12*x13634))+((r11*x13641))+(((-1.0)*x13635*x13639)));
evalcond[1]=((((-1.0)*x13636*x13640))+((x13634*x13637))+(((-1.0)*r22*x13639)));
evalcond[2]=((((-1.0)*r02*x13639))+((r01*x13642))+(((-1.0)*x13638*x13640)));
evalcond[3]=((1.0)+(((-1.0)*x13635*x13640))+((r11*x13642))+(((-1.0)*r12*x13639)));
evalcond[4]=((((-1.0)*x13636*x13639))+((cj2*sj1))+((cj1*sj2))+((r22*x13634))+((x13633*x13637)));
evalcond[5]=((((-1.0)*x13638*x13639))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13634))+((r01*x13641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13643=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13643.valid){
continue;
}
CheckValue<IkReal> x13644 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13643.value)))+(x13644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13645=IKcos(j4);
IkReal x13646=IKsin(j4);
IkReal x13647=(gconst29*r10);
IkReal x13648=(gconst29*r20);
IkReal x13649=(gconst28*r21);
IkReal x13650=(gconst29*r00);
IkReal x13651=((1.0)*x13645);
IkReal x13652=((1.0)*x13646);
IkReal x13653=(gconst28*x13645);
IkReal x13654=(gconst28*x13646);
evalcond[0]=(((r12*x13646))+((r11*x13653))+(((-1.0)*x13647*x13651)));
evalcond[1]=((((-1.0)*x13648*x13652))+((x13646*x13649))+(((-1.0)*r22*x13651)));
evalcond[2]=(((r01*x13654))+(((-1.0)*r02*x13651))+(((-1.0)*x13650*x13652)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13651))+((r11*x13654))+(((-1.0)*x13647*x13652)));
evalcond[4]=((((-1.0)*x13648*x13651))+((cj2*sj1))+((r22*x13646))+((cj1*sj2))+((x13645*x13649)));
evalcond[5]=(((r02*x13646))+((r01*x13653))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13650*x13651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13657 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13657.valid){
continue;
}
IkReal x13655=((1.0)*(x13657.value));
IkReal x13656=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13655)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13655)));
IkReal gconst28=((1.0)*r21*x13656);
IkReal gconst29=((-1.0)*r20*x13656);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13660 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13660.valid){
continue;
}
IkReal x13658=((1.0)*(x13660.value));
IkReal x13659=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13658)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13658)));
IkReal gconst28=((1.0)*r21*x13659);
IkReal gconst29=((-1.0)*r20*x13659);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13663 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13663.valid){
continue;
}
IkReal x13661=((1.0)*(x13663.value));
IkReal x13662=x13488;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13661)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13661)));
IkReal gconst28=((1.0)*r21*x13662);
IkReal gconst29=((-1.0)*r20*x13662);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13664=(gconst29*r10);
IkReal x13665=(gconst28*r11);
CheckValue<IkReal> x13666=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13664*x13664)+(((-2.0)*x13664*x13665))+(x13665*x13665))),-1);
if(!x13666.valid){
continue;
}
CheckValue<IkReal> x13667 = IKatan2WithCheck(IkReal((x13664+(((-1.0)*x13665)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13666.value)))+(x13667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13668=IKsin(j4);
IkReal x13669=IKcos(j4);
IkReal x13670=(gconst28*r11);
IkReal x13671=((1.0)*x13669);
IkReal x13672=(gconst29*x13669);
IkReal x13673=(gconst28*x13668);
IkReal x13674=((1.0)*x13668);
IkReal x13675=(gconst29*x13674);
evalcond[0]=((((-1.0)*r20*x13675))+((r21*x13673))+(((-1.0)*r22*x13671)));
evalcond[1]=(((r01*x13673))+(((-1.0)*r00*x13675))+(((-1.0)*r02*x13671)));
evalcond[2]=((((-1.0)*r12*x13674))+(((-1.0)*x13670*x13671))+((r10*x13672)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13671))+((x13668*x13670))+(((-1.0)*r10*x13675)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13671))+((cj1*sj2))+((r20*x13672))+(((-1.0)*r22*x13674)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13672))+(((-1.0)*r02*x13674))+(((-1.0)*gconst28*r01*x13671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13676=((1.0)*gconst29);
CheckValue<IkReal> x13677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13676))+(((-1.0)*gconst28*r00)))),-1);
if(!x13677.valid){
continue;
}
CheckValue<IkReal> x13678 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13676))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13677.value)))+(x13678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13679=IKsin(j4);
IkReal x13680=IKcos(j4);
IkReal x13681=(gconst28*r11);
IkReal x13682=((1.0)*x13680);
IkReal x13683=(gconst29*x13680);
IkReal x13684=(gconst28*x13679);
IkReal x13685=((1.0)*x13679);
IkReal x13686=(gconst29*x13685);
evalcond[0]=((((-1.0)*r22*x13682))+(((-1.0)*r20*x13686))+((r21*x13684)));
evalcond[1]=((((-1.0)*r00*x13686))+((r01*x13684))+(((-1.0)*r02*x13682)));
evalcond[2]=((((-1.0)*r12*x13685))+((r10*x13683))+(((-1.0)*x13681*x13682)));
evalcond[3]=((1.0)+((x13679*x13681))+(((-1.0)*r10*x13686))+(((-1.0)*r12*x13682)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x13685))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13682))+((r20*x13683)));
evalcond[5]=((((-1.0)*gconst28*r01*x13682))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13683))+(((-1.0)*r02*x13685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13687=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13687.valid){
continue;
}
CheckValue<IkReal> x13688 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13687.value)))+(x13688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13689=IKsin(j4);
IkReal x13690=IKcos(j4);
IkReal x13691=(gconst28*r11);
IkReal x13692=((1.0)*x13690);
IkReal x13693=(gconst29*x13690);
IkReal x13694=(gconst28*x13689);
IkReal x13695=((1.0)*x13689);
IkReal x13696=(gconst29*x13695);
evalcond[0]=((((-1.0)*r20*x13696))+((r21*x13694))+(((-1.0)*r22*x13692)));
evalcond[1]=(((r01*x13694))+(((-1.0)*r02*x13692))+(((-1.0)*r00*x13696)));
evalcond[2]=(((r10*x13693))+(((-1.0)*x13691*x13692))+(((-1.0)*r12*x13695)));
evalcond[3]=((1.0)+((x13689*x13691))+(((-1.0)*r10*x13696))+(((-1.0)*r12*x13692)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13692))+((cj1*sj2))+((r20*x13693))+(((-1.0)*r22*x13695)));
evalcond[5]=(((r00*x13693))+(((-1.0)*r02*x13695))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13697=gconst28*gconst28;
IkReal x13698=gconst29*gconst29;
IkReal x13699=(r11*r21);
IkReal x13700=(gconst29*sj3);
IkReal x13701=((1.0)*cj3);
IkReal x13702=(r10*r20);
IkReal x13703=(r10*r21);
IkReal x13704=(r11*r20);
IkReal x13705=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13706 = IKatan2WithCheck(IkReal((((r11*r22*x13700))+((gconst28*r10*r22*sj3)))),IkReal((((gconst28*x13699*x13700))+(((-1.0)*sj3*x13698*x13704))+(((-1.0)*gconst28*x13700*x13702))+((sj3*x13697*x13703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13706.valid){
continue;
}
CheckValue<IkReal> x13707=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13697*x13699*x13701))+(((-1.0)*x13698*x13701*x13702))+((x13704*x13705))+(((-1.0)*r12*r22*x13701))+((x13703*x13705)))),-1);
if(!x13707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13706.value)+(((1.5707963267949)*(x13707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13708=IKsin(j4);
IkReal x13709=IKcos(j4);
IkReal x13710=(sj1*sj2);
IkReal x13711=(gconst29*r20);
IkReal x13712=(gconst28*r20);
IkReal x13713=((1.0)*cj2);
IkReal x13714=(r11*sj3);
IkReal x13715=(cj1*sj2);
IkReal x13716=(gconst29*r01);
IkReal x13717=(gconst29*r10);
IkReal x13718=(cj3*gconst28);
IkReal x13719=(cj3*gconst29);
IkReal x13720=(gconst28*sj3);
IkReal x13721=(gconst29*r00);
IkReal x13722=(cj1*x13713);
IkReal x13723=((1.0)*x13709);
IkReal x13724=((1.0)*x13708);
IkReal x13725=(gconst28*x13708);
IkReal x13726=(cj3*x13708);
IkReal x13727=(sj3*x13709);
evalcond[0]=((((-1.0)*x13711*x13724))+(((-1.0)*r22*x13723))+((r21*x13725)));
evalcond[1]=(((r01*x13725))+(((-1.0)*r02*x13723))+(((-1.0)*x13721*x13724)));
evalcond[2]=((1.0)+((r11*x13725))+(((-1.0)*r12*x13723))+(((-1.0)*x13717*x13724)));
evalcond[3]=(((r11*x13709*x13718))+((r12*x13726))+((r10*x13720))+((gconst29*x13714))+(((-1.0)*cj3*x13717*x13723)));
evalcond[4]=((((-1.0)*r12*sj3*x13724))+(((-1.0)*gconst28*x13714*x13723))+((r10*x13718))+((x13717*x13727))+((r11*x13719)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13712))+x13715+((r21*x13709*x13718))+((r22*x13726))+(((-1.0)*cj3*x13711*x13723)));
evalcond[6]=(((sj3*x13716))+((r00*x13720))+(((-1.0)*r00*x13719*x13723))+x13710+((r02*x13726))+(((-1.0)*x13722))+((r01*x13709*x13718)));
evalcond[7]=(((x13711*x13727))+((r21*x13719))+(((-1.0)*r21*x13720*x13723))+x13710+((cj3*x13712))+(((-1.0)*r22*sj3*x13724))+(((-1.0)*x13722)));
evalcond[8]=((((-1.0)*x13715))+(((-1.0)*sj1*x13713))+((cj3*x13716))+((r00*x13718))+((x13721*x13727))+(((-1.0)*r02*sj3*x13724))+(((-1.0)*r01*x13720*x13723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13728=((1.0)*gconst29);
CheckValue<IkReal> x13729 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13728))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13729.valid){
continue;
}
CheckValue<IkReal> x13730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13728))+(((-1.0)*gconst28*r00)))),-1);
if(!x13730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13729.value)+(((1.5707963267949)*(x13730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13731=IKsin(j4);
IkReal x13732=IKcos(j4);
IkReal x13733=(sj1*sj2);
IkReal x13734=(gconst29*r20);
IkReal x13735=(gconst28*r20);
IkReal x13736=((1.0)*cj2);
IkReal x13737=(r11*sj3);
IkReal x13738=(cj1*sj2);
IkReal x13739=(gconst29*r01);
IkReal x13740=(gconst29*r10);
IkReal x13741=(cj3*gconst28);
IkReal x13742=(cj3*gconst29);
IkReal x13743=(gconst28*sj3);
IkReal x13744=(gconst29*r00);
IkReal x13745=(cj1*x13736);
IkReal x13746=((1.0)*x13732);
IkReal x13747=((1.0)*x13731);
IkReal x13748=(gconst28*x13731);
IkReal x13749=(cj3*x13731);
IkReal x13750=(sj3*x13732);
evalcond[0]=((((-1.0)*r22*x13746))+(((-1.0)*x13734*x13747))+((r21*x13748)));
evalcond[1]=((((-1.0)*r02*x13746))+((r01*x13748))+(((-1.0)*x13744*x13747)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13746))+(((-1.0)*x13740*x13747))+((r11*x13748)));
evalcond[3]=((((-1.0)*cj3*x13740*x13746))+((r10*x13743))+((r12*x13749))+((gconst29*x13737))+((r11*x13732*x13741)));
evalcond[4]=(((x13740*x13750))+(((-1.0)*gconst28*x13737*x13746))+(((-1.0)*r12*sj3*x13747))+((r10*x13741))+((r11*x13742)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13738+((r22*x13749))+((sj3*x13735))+(((-1.0)*cj3*x13734*x13746))+((r21*x13732*x13741)));
evalcond[6]=(x13733+(((-1.0)*r00*x13742*x13746))+((sj3*x13739))+(((-1.0)*x13745))+((r02*x13749))+((r01*x13732*x13741))+((r00*x13743)));
evalcond[7]=(((x13734*x13750))+x13733+(((-1.0)*r22*sj3*x13747))+((r21*x13742))+(((-1.0)*x13745))+((cj3*x13735))+(((-1.0)*r21*x13743*x13746)));
evalcond[8]=((((-1.0)*sj1*x13736))+(((-1.0)*r02*sj3*x13747))+(((-1.0)*r01*x13743*x13746))+(((-1.0)*x13738))+((cj3*x13739))+((x13744*x13750))+((r00*x13741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13751=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13751.valid){
continue;
}
CheckValue<IkReal> x13752 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13751.value)))+(x13752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13753=IKsin(j4);
IkReal x13754=IKcos(j4);
IkReal x13755=(sj1*sj2);
IkReal x13756=(gconst29*r20);
IkReal x13757=(gconst28*r20);
IkReal x13758=((1.0)*cj2);
IkReal x13759=(r11*sj3);
IkReal x13760=(cj1*sj2);
IkReal x13761=(gconst29*r01);
IkReal x13762=(gconst29*r10);
IkReal x13763=(cj3*gconst28);
IkReal x13764=(cj3*gconst29);
IkReal x13765=(gconst28*sj3);
IkReal x13766=(gconst29*r00);
IkReal x13767=(cj1*x13758);
IkReal x13768=((1.0)*x13754);
IkReal x13769=((1.0)*x13753);
IkReal x13770=(gconst28*x13753);
IkReal x13771=(cj3*x13753);
IkReal x13772=(sj3*x13754);
evalcond[0]=((((-1.0)*r22*x13768))+(((-1.0)*x13756*x13769))+((r21*x13770)));
evalcond[1]=((((-1.0)*r02*x13768))+(((-1.0)*x13766*x13769))+((r01*x13770)));
evalcond[2]=((1.0)+((r11*x13770))+(((-1.0)*r12*x13768))+(((-1.0)*x13762*x13769)));
evalcond[3]=((((-1.0)*cj3*x13762*x13768))+((r10*x13765))+((r11*x13754*x13763))+((gconst29*x13759))+((r12*x13771)));
evalcond[4]=(((r11*x13764))+((r10*x13763))+(((-1.0)*gconst28*x13759*x13768))+(((-1.0)*r12*sj3*x13769))+((x13762*x13772)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13760+((sj3*x13757))+((r21*x13754*x13763))+(((-1.0)*cj3*x13756*x13768))+((r22*x13771)));
evalcond[6]=(((r01*x13754*x13763))+x13755+(((-1.0)*r00*x13764*x13768))+((r00*x13765))+((sj3*x13761))+(((-1.0)*x13767))+((r02*x13771)));
evalcond[7]=(x13755+(((-1.0)*r22*sj3*x13769))+((r21*x13764))+((x13756*x13772))+((cj3*x13757))+(((-1.0)*x13767))+(((-1.0)*r21*x13765*x13768)));
evalcond[8]=((((-1.0)*r01*x13765*x13768))+(((-1.0)*sj1*x13758))+(((-1.0)*x13760))+((r00*x13763))+((x13766*x13772))+((cj3*x13761))+(((-1.0)*r02*sj3*x13769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13773=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13773);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13773);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13774=(r11*sj5);
IkReal x13775=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13775))+x13774);
j4eval[1]=((((-1.0)*cj3*x13775))+((cj3*x13774)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13776=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13776);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13776);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13777=(cj5*r10);
IkReal x13778=(r11*sj5);
j4eval[0]=((((-1.0)*x13777))+x13778);
j4eval[1]=(((sj3*x13777))+(((-1.0)*sj3*x13778)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13779=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13779);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13779);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13780=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13780);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13780);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13781=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13781))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13781)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13782=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13782);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13782);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13783=((1.0)*sj1);
CheckValue<IkReal> x13784=IKPowWithIntegerCheck(r22,-1);
if(!x13784.valid){
continue;
}
CheckValue<IkReal> x13785=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13785.valid){
continue;
}
if( IKabs(((x13784.value)*(((((-1.0)*cj2*x13783))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13785.value)*(((((-1.0)*sj2*x13783))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13784.value)*(((((-1.0)*cj2*x13783))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13785.value)*(((((-1.0)*sj2*x13783))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13784.value)*(((((-1.0)*cj2*x13783))+(((-1.0)*cj1*sj2))))), ((x13785.value)*(((((-1.0)*sj2*x13783))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13786=IKsin(j4);
IkReal x13787=IKcos(j4);
IkReal x13788=((1.0)*cj5);
IkReal x13789=(sj5*x13787);
IkReal x13790=(sj5*x13786);
evalcond[0]=((-1.0)*r22*x13787);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13786)));
evalcond[2]=((((-1.0)*r00*x13786*x13788))+((r01*x13790)));
evalcond[3]=(((r11*x13789))+(((-1.0)*r10*x13787*x13788)));
evalcond[4]=((1.0)+((r11*x13790))+(((-1.0)*r10*x13786*x13788)));
evalcond[5]=(((r01*x13789))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13787*x13788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13791=((1.0)*cj5);
CheckValue<IkReal> x13792=IKPowWithIntegerCheck(((((-1.0)*r10*x13791))+((r11*sj5))),-1);
if(!x13792.valid){
continue;
}
CheckValue<IkReal> x13793=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13791))),-1);
if(!x13793.valid){
continue;
}
if( IKabs(((-1.0)*(x13792.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13793.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13792.value)))+IKsqr(((x13793.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13792.value)), ((x13793.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13794=IKsin(j4);
IkReal x13795=IKcos(j4);
IkReal x13796=((1.0)*cj5);
IkReal x13797=(sj5*x13795);
IkReal x13798=(sj5*x13794);
evalcond[0]=((-1.0)*r22*x13795);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13794)));
evalcond[2]=(((r01*x13798))+(((-1.0)*r00*x13794*x13796)));
evalcond[3]=((((-1.0)*r10*x13795*x13796))+((r11*x13797)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13794*x13796))+((r11*x13798)));
evalcond[5]=(((r01*x13797))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13795*x13796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13799=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13799);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13799);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13800=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13800);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13800);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13801=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13801.valid){
continue;
}
CheckValue<IkReal> x13802=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13802.valid){
continue;
}
if( IKabs(((-1.0)*(x13801.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13802.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13801.value)))+IKsqr(((x13802.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13801.value)), ((x13802.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13803=IKsin(j4);
IkReal x13804=IKcos(j4);
IkReal x13805=(cj5*x13804);
IkReal x13806=(sj5*x13803);
IkReal x13807=((1.0)*cj5*x13803);
IkReal x13808=((1.0)*sj5*x13804);
evalcond[0]=((-1.0)*r22*x13804);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13803)));
evalcond[2]=(((r01*x13806))+(((-1.0)*r00*x13807)));
evalcond[3]=((((-1.0)*r11*x13808))+((r10*x13805)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13807))+((r11*x13806)));
evalcond[5]=(((r00*x13805))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13809=IKPowWithIntegerCheck(r22,-1);
if(!x13809.valid){
continue;
}
CheckValue<IkReal> x13810=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13810.valid){
continue;
}
if( IKabs(((x13809.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13810.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13809.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13810.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13809.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13810.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13811=IKsin(j4);
IkReal x13812=IKcos(j4);
IkReal x13813=(cj5*x13812);
IkReal x13814=(sj5*x13811);
IkReal x13815=((1.0)*cj5*x13811);
IkReal x13816=((1.0)*sj5*x13812);
evalcond[0]=((-1.0)*r22*x13812);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13811)));
evalcond[2]=(((r01*x13814))+(((-1.0)*r00*x13815)));
evalcond[3]=(((r10*x13813))+(((-1.0)*r11*x13816)));
evalcond[4]=((1.0)+((r11*x13814))+(((-1.0)*r10*x13815)));
evalcond[5]=(((r00*x13813))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13817=((1.0)*r10);
CheckValue<IkReal> x13818=IKPowWithIntegerCheck(cj3,-1);
if(!x13818.valid){
continue;
}
CheckValue<IkReal> x13819=IKPowWithIntegerCheck(r22,-1);
if(!x13819.valid){
continue;
}
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13817))+((cj3*r11*sj5))),-1);
if(!x13820.valid){
continue;
}
if( IKabs(((x13818.value)*(x13819.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13820.value)*(((((-1.0)*sj3*sj5*x13817))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13818.value)*(x13819.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13820.value)*(((((-1.0)*sj3*sj5*x13817))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13818.value)*(x13819.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13820.value)*(((((-1.0)*sj3*sj5*x13817))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13821=IKsin(j4);
IkReal x13822=IKcos(j4);
IkReal x13823=(sj1*sj2);
IkReal x13824=(r11*sj5);
IkReal x13825=(r00*sj3);
IkReal x13826=(cj5*r01);
IkReal x13827=((1.0)*cj1);
IkReal x13828=(cj3*sj5);
IkReal x13829=(cj5*r11);
IkReal x13830=(r10*sj3);
IkReal x13831=(cj2*sj1);
IkReal x13832=((1.0)*cj5);
IkReal x13833=((1.0)*sj3);
IkReal x13834=(r01*sj5);
IkReal x13835=(cj2*x13827);
IkReal x13836=(cj3*x13822);
IkReal x13837=(r22*x13821);
IkReal x13838=(cj5*x13822);
IkReal x13839=(x13821*x13832);
evalcond[0]=((-1.0)*r22*x13822);
evalcond[1]=(x13831+((cj1*sj2))+((cj3*x13837)));
evalcond[2]=(((x13821*x13834))+(((-1.0)*r00*x13839)));
evalcond[3]=((1.0)+((x13821*x13824))+(((-1.0)*r10*x13839)));
evalcond[4]=((((-1.0)*x13835))+x13823+(((-1.0)*x13833*x13837)));
evalcond[5]=(((sj5*x13830))+((sj3*x13829))+(((-1.0)*r10*x13832*x13836))+((x13824*x13836)));
evalcond[6]=(((r10*x13828))+(((-1.0)*x13822*x13824*x13833))+((x13830*x13838))+((cj3*x13829)));
evalcond[7]=((((-1.0)*x13835))+x13823+((r01*x13822*x13828))+(((-1.0)*r00*x13832*x13836))+((sj3*x13826))+((sj5*x13825)));
evalcond[8]=(((x13825*x13838))+((r00*x13828))+(((-1.0)*sj2*x13827))+(((-1.0)*x13822*x13833*x13834))+((cj3*x13826))+(((-1.0)*x13831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13840=(cj5*r10);
IkReal x13841=((1.0)*r11);
CheckValue<IkReal> x13842=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13840))),-1);
if(!x13842.valid){
continue;
}
CheckValue<IkReal> x13843=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13841))+((sj3*x13840))),-1);
if(!x13843.valid){
continue;
}
if( IKabs(((-1.0)*(x13842.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13843.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13841)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13842.value)))+IKsqr(((x13843.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13841))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13842.value)), ((x13843.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13841))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13844=IKsin(j4);
IkReal x13845=IKcos(j4);
IkReal x13846=(sj1*sj2);
IkReal x13847=(r11*sj5);
IkReal x13848=(r00*sj3);
IkReal x13849=(cj5*r01);
IkReal x13850=((1.0)*cj1);
IkReal x13851=(cj3*sj5);
IkReal x13852=(cj5*r11);
IkReal x13853=(r10*sj3);
IkReal x13854=(cj2*sj1);
IkReal x13855=((1.0)*cj5);
IkReal x13856=((1.0)*sj3);
IkReal x13857=(r01*sj5);
IkReal x13858=(cj2*x13850);
IkReal x13859=(cj3*x13845);
IkReal x13860=(r22*x13844);
IkReal x13861=(cj5*x13845);
IkReal x13862=(x13844*x13855);
evalcond[0]=((-1.0)*r22*x13845);
evalcond[1]=(x13854+((cj1*sj2))+((cj3*x13860)));
evalcond[2]=((((-1.0)*r00*x13862))+((x13844*x13857)));
evalcond[3]=((1.0)+((x13844*x13847))+(((-1.0)*r10*x13862)));
evalcond[4]=(x13846+(((-1.0)*x13856*x13860))+(((-1.0)*x13858)));
evalcond[5]=(((sj3*x13852))+((sj5*x13853))+((x13847*x13859))+(((-1.0)*r10*x13855*x13859)));
evalcond[6]=((((-1.0)*x13845*x13847*x13856))+((x13853*x13861))+((cj3*x13852))+((r10*x13851)));
evalcond[7]=(((r01*x13845*x13851))+x13846+((sj5*x13848))+(((-1.0)*r00*x13855*x13859))+((sj3*x13849))+(((-1.0)*x13858)));
evalcond[8]=((((-1.0)*x13845*x13856*x13857))+(((-1.0)*x13854))+((r00*x13851))+(((-1.0)*sj2*x13850))+((x13848*x13861))+((cj3*x13849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13863=((1.0)*sj3);
IkReal x13864=(r11*sj5);
IkReal x13865=((1.0)*cj5*r10);
CheckValue<IkReal> x13866=IKPowWithIntegerCheck((x13864+(((-1.0)*x13865))),-1);
if(!x13866.valid){
continue;
}
CheckValue<IkReal> x13867=IKPowWithIntegerCheck(((((-1.0)*cj3*x13865))+((cj3*x13864))),-1);
if(!x13867.valid){
continue;
}
if( IKabs(((-1.0)*(x13866.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13867.value)*(((((-1.0)*r10*sj5*x13863))+(((-1.0)*cj5*r11*x13863)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13866.value)))+IKsqr(((x13867.value)*(((((-1.0)*r10*sj5*x13863))+(((-1.0)*cj5*r11*x13863))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13866.value)), ((x13867.value)*(((((-1.0)*r10*sj5*x13863))+(((-1.0)*cj5*r11*x13863))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13868=IKsin(j4);
IkReal x13869=IKcos(j4);
IkReal x13870=(sj1*sj2);
IkReal x13871=(r11*sj5);
IkReal x13872=(r00*sj3);
IkReal x13873=(cj5*r01);
IkReal x13874=((1.0)*cj1);
IkReal x13875=(cj3*sj5);
IkReal x13876=(cj5*r11);
IkReal x13877=(r10*sj3);
IkReal x13878=(cj2*sj1);
IkReal x13879=((1.0)*cj5);
IkReal x13880=((1.0)*sj3);
IkReal x13881=(r01*sj5);
IkReal x13882=(cj2*x13874);
IkReal x13883=(cj3*x13869);
IkReal x13884=(r22*x13868);
IkReal x13885=(cj5*x13869);
IkReal x13886=(x13868*x13879);
evalcond[0]=((-1.0)*r22*x13869);
evalcond[1]=(((cj3*x13884))+x13878+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13886))+((x13868*x13881)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13886))+((x13868*x13871)));
evalcond[4]=(x13870+(((-1.0)*x13880*x13884))+(((-1.0)*x13882)));
evalcond[5]=(((sj3*x13876))+((sj5*x13877))+((x13871*x13883))+(((-1.0)*r10*x13879*x13883)));
evalcond[6]=(((cj3*x13876))+(((-1.0)*x13869*x13871*x13880))+((r10*x13875))+((x13877*x13885)));
evalcond[7]=(((sj3*x13873))+((sj5*x13872))+x13870+((r01*x13869*x13875))+(((-1.0)*x13882))+(((-1.0)*r00*x13879*x13883)));
evalcond[8]=(((cj3*x13873))+((x13872*x13885))+(((-1.0)*x13878))+(((-1.0)*sj2*x13874))+((r00*x13875))+(((-1.0)*x13869*x13880*x13881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13887=cj5*cj5;
IkReal x13888=((1.0)*cj3);
IkReal x13889=(r10*r21);
IkReal x13890=(cj5*sj5);
IkReal x13891=(r11*r21);
IkReal x13892=(r11*r20);
IkReal x13893=(r22*sj3);
IkReal x13894=(r10*r20);
IkReal x13895=((1.0)*sj3*x13887);
CheckValue<IkReal> x13896=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13888*x13891))+((cj3*x13887*x13891))+(((-1.0)*r12*r22*x13888))+((cj3*x13889*x13890))+(((-1.0)*x13887*x13888*x13894))+((cj3*x13890*x13892)))),-1);
if(!x13896.valid){
continue;
}
CheckValue<IkReal> x13897 = IKatan2WithCheck(IkReal((((r10*sj5*x13893))+((cj5*r11*x13893)))),IkReal(((((-1.0)*x13889*x13895))+((sj3*x13889))+((sj3*x13890*x13891))+(((-1.0)*x13892*x13895))+(((-1.0)*sj3*x13890*x13894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13896.value)))+(x13897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13898=IKsin(j4);
IkReal x13899=IKcos(j4);
IkReal x13900=(sj1*sj2);
IkReal x13901=(cj5*sj3);
IkReal x13902=(cj5*r10);
IkReal x13903=(r00*sj5);
IkReal x13904=(r11*sj5);
IkReal x13905=(cj3*cj5);
IkReal x13906=((1.0)*cj1);
IkReal x13907=(cj3*sj5);
IkReal x13908=(r21*sj5);
IkReal x13909=(cj2*sj1);
IkReal x13910=(sj3*sj5);
IkReal x13911=(r01*sj5);
IkReal x13912=(cj2*x13906);
IkReal x13913=((1.0)*x13899);
IkReal x13914=((1.0)*x13898);
IkReal x13915=(cj3*x13898);
IkReal x13916=(cj3*x13899);
evalcond[0]=((((-1.0)*r22*x13913))+(((-1.0)*cj5*r20*x13914))+((x13898*x13908)));
evalcond[1]=((((-1.0)*cj5*r00*x13914))+((x13898*x13911))+(((-1.0)*r02*x13913)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13913))+((x13898*x13904))+(((-1.0)*x13902*x13914)));
evalcond[3]=(((r10*x13910))+((r12*x13915))+((r11*x13901))+(((-1.0)*cj3*x13902*x13913))+((x13904*x13916)));
evalcond[4]=((((-1.0)*sj3*x13904*x13913))+((r10*x13907))+(((-1.0)*r12*sj3*x13914))+((r11*x13905))+((r10*x13899*x13901)));
evalcond[5]=(((r22*x13915))+((r21*x13899*x13907))+((cj1*sj2))+x13909+((r20*x13910))+((r21*x13901))+(((-1.0)*r20*x13905*x13913)));
evalcond[6]=((((-1.0)*r00*x13905*x13913))+((r02*x13915))+((r01*x13899*x13907))+x13900+((r01*x13901))+((sj3*x13903))+(((-1.0)*x13912)));
evalcond[7]=((((-1.0)*sj3*x13908*x13913))+(((-1.0)*r22*sj3*x13914))+((r20*x13899*x13901))+x13900+((r20*x13907))+((r21*x13905))+(((-1.0)*x13912)));
evalcond[8]=((((-1.0)*r02*sj3*x13914))+((r00*x13899*x13901))+(((-1.0)*x13909))+(((-1.0)*sj2*x13906))+((r01*x13905))+((cj3*x13903))+(((-1.0)*r01*x13910*x13913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13917=((1.0)*cj5);
CheckValue<IkReal> x13918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13917)))),-1);
if(!x13918.valid){
continue;
}
CheckValue<IkReal> x13919 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13918.value)))+(x13919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13920=IKsin(j4);
IkReal x13921=IKcos(j4);
IkReal x13922=(sj1*sj2);
IkReal x13923=(cj5*sj3);
IkReal x13924=(cj5*r10);
IkReal x13925=(r00*sj5);
IkReal x13926=(r11*sj5);
IkReal x13927=(cj3*cj5);
IkReal x13928=((1.0)*cj1);
IkReal x13929=(cj3*sj5);
IkReal x13930=(r21*sj5);
IkReal x13931=(cj2*sj1);
IkReal x13932=(sj3*sj5);
IkReal x13933=(r01*sj5);
IkReal x13934=(cj2*x13928);
IkReal x13935=((1.0)*x13921);
IkReal x13936=((1.0)*x13920);
IkReal x13937=(cj3*x13920);
IkReal x13938=(cj3*x13921);
evalcond[0]=((((-1.0)*cj5*r20*x13936))+(((-1.0)*r22*x13935))+((x13920*x13930)));
evalcond[1]=((((-1.0)*cj5*r00*x13936))+(((-1.0)*r02*x13935))+((x13920*x13933)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13935))+(((-1.0)*x13924*x13936))+((x13920*x13926)));
evalcond[3]=((((-1.0)*cj3*x13924*x13935))+((x13926*x13938))+((r10*x13932))+((r11*x13923))+((r12*x13937)));
evalcond[4]=((((-1.0)*r12*sj3*x13936))+((r10*x13929))+((r10*x13921*x13923))+(((-1.0)*sj3*x13926*x13935))+((r11*x13927)));
evalcond[5]=(((r20*x13932))+((r21*x13923))+((cj1*sj2))+x13931+((r22*x13937))+((r21*x13921*x13929))+(((-1.0)*r20*x13927*x13935)));
evalcond[6]=(((sj3*x13925))+((r01*x13921*x13929))+x13922+(((-1.0)*x13934))+((r01*x13923))+(((-1.0)*r00*x13927*x13935))+((r02*x13937)));
evalcond[7]=(((r21*x13927))+(((-1.0)*sj3*x13930*x13935))+((r20*x13929))+(((-1.0)*r22*sj3*x13936))+x13922+(((-1.0)*x13934))+((r20*x13921*x13923)));
evalcond[8]=(((r00*x13921*x13923))+(((-1.0)*sj2*x13928))+(((-1.0)*r02*sj3*x13936))+(((-1.0)*r01*x13932*x13935))+((r01*x13927))+(((-1.0)*x13931))+((cj3*x13925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13939=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13939.valid){
continue;
}
CheckValue<IkReal> x13940 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13939.value)))+(x13940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13941=IKsin(j4);
IkReal x13942=IKcos(j4);
IkReal x13943=(sj1*sj2);
IkReal x13944=(cj5*sj3);
IkReal x13945=(cj5*r10);
IkReal x13946=(r00*sj5);
IkReal x13947=(r11*sj5);
IkReal x13948=(cj3*cj5);
IkReal x13949=((1.0)*cj1);
IkReal x13950=(cj3*sj5);
IkReal x13951=(r21*sj5);
IkReal x13952=(cj2*sj1);
IkReal x13953=(sj3*sj5);
IkReal x13954=(r01*sj5);
IkReal x13955=(cj2*x13949);
IkReal x13956=((1.0)*x13942);
IkReal x13957=((1.0)*x13941);
IkReal x13958=(cj3*x13941);
IkReal x13959=(cj3*x13942);
evalcond[0]=((((-1.0)*cj5*r20*x13957))+(((-1.0)*r22*x13956))+((x13941*x13951)));
evalcond[1]=((((-1.0)*r02*x13956))+((x13941*x13954))+(((-1.0)*cj5*r00*x13957)));
evalcond[2]=((1.0)+(((-1.0)*x13945*x13957))+((x13941*x13947))+(((-1.0)*r12*x13956)));
evalcond[3]=(((r12*x13958))+((x13947*x13959))+(((-1.0)*cj3*x13945*x13956))+((r10*x13953))+((r11*x13944)));
evalcond[4]=(((r10*x13942*x13944))+(((-1.0)*r12*sj3*x13957))+(((-1.0)*sj3*x13947*x13956))+((r10*x13950))+((r11*x13948)));
evalcond[5]=(((cj1*sj2))+x13952+((r22*x13958))+((r21*x13942*x13950))+((r20*x13953))+((r21*x13944))+(((-1.0)*r20*x13948*x13956)));
evalcond[6]=(((r01*x13942*x13950))+(((-1.0)*r00*x13948*x13956))+(((-1.0)*x13955))+x13943+((sj3*x13946))+((r01*x13944))+((r02*x13958)));
evalcond[7]=((((-1.0)*x13955))+x13943+(((-1.0)*sj3*x13951*x13956))+(((-1.0)*r22*sj3*x13957))+((r20*x13942*x13944))+((r20*x13950))+((r21*x13948)));
evalcond[8]=(((cj3*x13946))+(((-1.0)*r02*sj3*x13957))+((r00*x13942*x13944))+(((-1.0)*r01*x13953*x13956))+(((-1.0)*sj2*x13949))+((r01*x13948))+(((-1.0)*x13952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13960=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13960;
j4eval[1]=IKsign(x13960);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13961=((1.0)*cj5);
IkReal x13962=((((-1.0)*r21*x13961))+(((-1.0)*r20*sj5)));
j4eval[0]=x13962;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13961))))));
j4eval[2]=IKsign(x13962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13963=cj5*cj5;
IkReal x13964=(cj3*r21);
IkReal x13965=(cj5*sj5);
IkReal x13966=((1.0)*cj3);
IkReal x13967=((((-1.0)*r12*r22*x13966))+((r10*x13964*x13965))+((cj3*r11*r20*x13965))+(((-1.0)*r11*x13964))+((r11*x13963*x13964))+(((-1.0)*r10*r20*x13963*x13966)));
j4eval[0]=x13967;
j4eval[1]=IKsign(x13967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13968=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13968;
j4eval[1]=IKsign(x13968);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13969=((1.0)*cj5);
IkReal x13970=((((-1.0)*r21*x13969))+(((-1.0)*r20*sj5)));
j4eval[0]=x13970;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13969))))));
j4eval[2]=IKsign(x13970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13971=cj5*cj5;
IkReal x13972=r11*r11;
IkReal x13973=(cj5*r10);
IkReal x13974=(r11*sj5);
IkReal x13975=((((-1.0)*x13972))+((x13971*x13972))+(((-1.0)*(r12*r12)))+(((-1.0)*x13971*(r10*r10)))+(((2.0)*x13973*x13974)));
j4eval[0]=x13975;
j4eval[1]=((IKabs(r12))+(IKabs((x13973+(((-1.0)*x13974))))));
j4eval[2]=IKsign(x13975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13976=cj5*cj5;
IkReal x13977=r11*r11;
IkReal x13978=(cj5*r10);
IkReal x13979=(r11*sj5);
CheckValue<IkReal> x13980 = IKatan2WithCheck(IkReal((x13978+(((-1.0)*x13979)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13980.valid){
continue;
}
CheckValue<IkReal> x13981=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13976*(r10*r10)))+(((-1.0)*x13977))+((x13976*x13977))+(((-1.0)*(r12*r12)))+(((2.0)*x13978*x13979)))),-1);
if(!x13981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13980.value)+(((1.5707963267949)*(x13981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13982=IKsin(j4);
IkReal x13983=IKcos(j4);
IkReal x13984=(cj5*r10);
IkReal x13985=(r01*sj5);
IkReal x13986=(cj5*r00);
IkReal x13987=(cj5*r20);
IkReal x13988=((1.0)*x13983);
IkReal x13989=((1.0)*x13982);
IkReal x13990=(sj5*x13982);
evalcond[0]=((((-1.0)*x13987*x13989))+((r21*x13990))+(((-1.0)*r22*x13988)));
evalcond[1]=((((-1.0)*r02*x13988))+(((-1.0)*x13986*x13989))+((x13982*x13985)));
evalcond[2]=(((x13983*x13984))+(((-1.0)*r11*sj5*x13988))+(((-1.0)*r12*x13989)));
evalcond[3]=((-1.0)+(((-1.0)*x13984*x13989))+((r11*x13990))+(((-1.0)*r12*x13988)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13985*x13988))+((x13983*x13986))+((cj1*sj2))+(((-1.0)*r02*x13989)));
evalcond[5]=((((-1.0)*r21*sj5*x13988))+((x13983*x13987))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13991=((1.0)*cj5);
CheckValue<IkReal> x13992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13991))+(((-1.0)*r20*sj5)))),-1);
if(!x13992.valid){
continue;
}
CheckValue<IkReal> x13993 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13992.value)))+(x13993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13994=IKsin(j4);
IkReal x13995=IKcos(j4);
IkReal x13996=(cj5*r10);
IkReal x13997=(r01*sj5);
IkReal x13998=(cj5*r00);
IkReal x13999=(cj5*r20);
IkReal x14000=((1.0)*x13995);
IkReal x14001=((1.0)*x13994);
IkReal x14002=(sj5*x13994);
evalcond[0]=(((r21*x14002))+(((-1.0)*x13999*x14001))+(((-1.0)*r22*x14000)));
evalcond[1]=((((-1.0)*r02*x14000))+(((-1.0)*x13998*x14001))+((x13994*x13997)));
evalcond[2]=(((x13995*x13996))+(((-1.0)*r11*sj5*x14000))+(((-1.0)*r12*x14001)));
evalcond[3]=((-1.0)+((r11*x14002))+(((-1.0)*x13996*x14001))+(((-1.0)*r12*x14000)));
evalcond[4]=((((-1.0)*r02*x14001))+((cj2*sj1))+((x13995*x13998))+((cj1*sj2))+(((-1.0)*x13997*x14000)));
evalcond[5]=(((x13995*x13999))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14000))+(((-1.0)*r22*x14001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14003 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14003.valid){
continue;
}
CheckValue<IkReal> x14004=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14003.value)+(((1.5707963267949)*(x14004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14005=IKsin(j4);
IkReal x14006=IKcos(j4);
IkReal x14007=(cj5*r10);
IkReal x14008=(r01*sj5);
IkReal x14009=(cj5*r00);
IkReal x14010=(cj5*r20);
IkReal x14011=((1.0)*x14006);
IkReal x14012=((1.0)*x14005);
IkReal x14013=(sj5*x14005);
evalcond[0]=(((r21*x14013))+(((-1.0)*x14010*x14012))+(((-1.0)*r22*x14011)));
evalcond[1]=((((-1.0)*r02*x14011))+(((-1.0)*x14009*x14012))+((x14005*x14008)));
evalcond[2]=(((x14006*x14007))+(((-1.0)*r11*sj5*x14011))+(((-1.0)*r12*x14012)));
evalcond[3]=((-1.0)+((r11*x14013))+(((-1.0)*x14007*x14012))+(((-1.0)*r12*x14011)));
evalcond[4]=((((-1.0)*x14008*x14011))+((cj2*sj1))+((x14006*x14009))+(((-1.0)*r02*x14012))+((cj1*sj2)));
evalcond[5]=(((x14006*x14010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14011))+(((-1.0)*r22*x14012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14014=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14014;
j4eval[1]=IKsign(x14014);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14015=((1.0)*cj5);
IkReal x14016=((((-1.0)*r21*x14015))+(((-1.0)*r20*sj5)));
j4eval[0]=x14016;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x14015)))))+(IKabs(r02)));
j4eval[2]=IKsign(x14016);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14017=cj5*cj5;
IkReal x14018=r11*r11;
IkReal x14019=(r11*sj5);
IkReal x14020=(cj5*r10);
IkReal x14021=((r12*r12)+(((-1.0)*x14017*x14018))+(((-2.0)*x14019*x14020))+((x14017*(r10*r10)))+x14018);
j4eval[0]=x14021;
j4eval[1]=IKsign(x14021);
j4eval[2]=((IKabs(((((-1.0)*x14020))+x14019)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14022=cj5*cj5;
IkReal x14023=r11*r11;
IkReal x14024=(cj5*r10);
IkReal x14025=(r11*sj5);
CheckValue<IkReal> x14026 = IKatan2WithCheck(IkReal(((((-1.0)*x14024))+x14025)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14026.valid){
continue;
}
CheckValue<IkReal> x14027=IKPowWithIntegerCheck(IKsign((((x14022*(r10*r10)))+(((-2.0)*x14024*x14025))+(r12*r12)+(((-1.0)*x14022*x14023))+x14023)),-1);
if(!x14027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14026.value)+(((1.5707963267949)*(x14027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14028=IKcos(j4);
IkReal x14029=IKsin(j4);
IkReal x14030=(cj5*r00);
IkReal x14031=(cj5*r10);
IkReal x14032=(r21*sj5);
IkReal x14033=(cj5*r20);
IkReal x14034=((1.0)*x14028);
IkReal x14035=((1.0)*x14029);
IkReal x14036=(sj5*x14029);
IkReal x14037=(sj5*x14028);
evalcond[0]=(((r11*x14037))+(((-1.0)*x14031*x14034))+((r12*x14029)));
evalcond[1]=((((-1.0)*x14033*x14035))+(((-1.0)*r22*x14034))+((x14029*x14032)));
evalcond[2]=(((r01*x14036))+(((-1.0)*x14030*x14035))+(((-1.0)*r02*x14034)));
evalcond[3]=((-1.0)+((r11*x14036))+(((-1.0)*x14031*x14035))+(((-1.0)*r12*x14034)));
evalcond[4]=(((r01*x14037))+((cj2*sj1))+(((-1.0)*x14030*x14034))+((cj1*sj2))+((r02*x14029)));
evalcond[5]=(((r22*x14029))+(((-1.0)*x14033*x14034))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14028*x14032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14038=((1.0)*cj5);
CheckValue<IkReal> x14039=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14038))+(((-1.0)*r20*sj5)))),-1);
if(!x14039.valid){
continue;
}
CheckValue<IkReal> x14040 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14039.value)))+(x14040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14041=IKcos(j4);
IkReal x14042=IKsin(j4);
IkReal x14043=(cj5*r00);
IkReal x14044=(cj5*r10);
IkReal x14045=(r21*sj5);
IkReal x14046=(cj5*r20);
IkReal x14047=((1.0)*x14041);
IkReal x14048=((1.0)*x14042);
IkReal x14049=(sj5*x14042);
IkReal x14050=(sj5*x14041);
evalcond[0]=((((-1.0)*x14044*x14047))+((r11*x14050))+((r12*x14042)));
evalcond[1]=(((x14042*x14045))+(((-1.0)*r22*x14047))+(((-1.0)*x14046*x14048)));
evalcond[2]=((((-1.0)*x14043*x14048))+((r01*x14049))+(((-1.0)*r02*x14047)));
evalcond[3]=((-1.0)+((r11*x14049))+(((-1.0)*x14044*x14048))+(((-1.0)*r12*x14047)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14043*x14047))+((cj1*sj2))+((r02*x14042))+((r01*x14050)));
evalcond[5]=(((r22*x14042))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14041*x14045))+(((-1.0)*x14046*x14047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14051 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14051.valid){
continue;
}
CheckValue<IkReal> x14052=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14051.value)+(((1.5707963267949)*(x14052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14053=IKcos(j4);
IkReal x14054=IKsin(j4);
IkReal x14055=(cj5*r00);
IkReal x14056=(cj5*r10);
IkReal x14057=(r21*sj5);
IkReal x14058=(cj5*r20);
IkReal x14059=((1.0)*x14053);
IkReal x14060=((1.0)*x14054);
IkReal x14061=(sj5*x14054);
IkReal x14062=(sj5*x14053);
evalcond[0]=(((r12*x14054))+((r11*x14062))+(((-1.0)*x14056*x14059)));
evalcond[1]=((((-1.0)*x14058*x14060))+((x14054*x14057))+(((-1.0)*r22*x14059)));
evalcond[2]=((((-1.0)*x14055*x14060))+(((-1.0)*r02*x14059))+((r01*x14061)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14059))+(((-1.0)*x14056*x14060))+((r11*x14061)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x14054))+((r01*x14062))+(((-1.0)*x14055*x14059)));
evalcond[5]=(((x14053*x14057))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14058*x14059))+((r22*x14054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14064 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14064)==0){
continue;
}
IkReal x14063=pow(x14064,-0.5);
CheckValue<IkReal> x14065 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14065.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14065.value));
IkReal gconst37=((-1.0)*r01*x14063);
IkReal gconst38=(r00*x14063);
CheckValue<IkReal> x14066 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14066.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14066.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14069 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14069.valid){
continue;
}
IkReal x14067=((-1.0)*(x14069.value));
IkReal x14068=x14063;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14067;
IkReal gconst36=x14067;
IkReal gconst37=((-1.0)*r01*x14068);
IkReal gconst38=(r00*x14068);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14072 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14072.valid){
continue;
}
IkReal x14070=((-1.0)*(x14072.value));
IkReal x14071=x14063;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14070;
IkReal gconst36=x14070;
IkReal gconst37=((-1.0)*r01*x14071);
IkReal gconst38=(r00*x14071);
CheckValue<IkReal> x14080=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14080.valid){
continue;
}
IkReal x14073=x14080.value;
IkReal x14074=(sj3*x14073);
IkReal x14075=(r11*x14074);
IkReal x14076=(r21*x14074);
IkReal x14077=(r20*x14074);
IkReal x14078=(r10*x14074);
IkReal x14079=(r00*r01*x14074);
j4eval[0]=IKsign((((r21*x14075*(r01*r01)))+((r12*r22*sj3))+((r10*x14077*(r00*r00)))+((r00*r01*r20*x14075))+((r00*r01*r10*x14076))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14081=gconst38*gconst38;
IkReal x14082=gconst37*gconst37;
IkReal x14083=((1.0)*cj3);
IkReal x14084=(r11*r20);
IkReal x14085=(r10*sj3);
IkReal x14086=(gconst37*gconst38);
IkReal x14087=(r11*sj3);
IkReal x14088=(r21*x14082);
IkReal x14089=(cj3*x14086);
CheckValue<IkReal> x14090 = IKatan2WithCheck(IkReal((((gconst38*r22*x14087))+((gconst37*r22*x14085)))),IkReal(((((-1.0)*r20*x14085*x14086))+(((-1.0)*sj3*x14081*x14084))+((x14085*x14088))+((r21*x14086*x14087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14090.valid){
continue;
}
CheckValue<IkReal> x14091=IKPowWithIntegerCheck(IKsign((((x14084*x14089))+(((-1.0)*r12*r22*x14083))+((r10*r21*x14089))+(((-1.0)*r11*x14083*x14088))+(((-1.0)*r10*r20*x14081*x14083)))),-1);
if(!x14091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14090.value)+(((1.5707963267949)*(x14091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14092=IKsin(j4);
IkReal x14093=IKcos(j4);
IkReal x14094=(cj2*sj1);
IkReal x14095=(cj1*sj2);
IkReal x14096=(gconst38*r21);
IkReal x14097=(cj3*r20);
IkReal x14098=(gconst38*r10);
IkReal x14099=(cj3*gconst37);
IkReal x14100=(sj1*sj2);
IkReal x14101=(gconst38*r00);
IkReal x14102=(cj1*cj2);
IkReal x14103=(gconst37*sj3);
IkReal x14104=(gconst38*r20);
IkReal x14105=(gconst38*r01);
IkReal x14106=(gconst38*r11);
IkReal x14107=((1.0)*x14093);
IkReal x14108=((1.0)*x14092);
IkReal x14109=(cj3*x14092);
IkReal x14110=(sj3*x14093);
IkReal x14111=(gconst37*x14092);
IkReal x14112=(x14095+x14094);
evalcond[0]=((((-1.0)*x14104*x14108))+(((-1.0)*r22*x14107))+((r21*x14111)));
evalcond[1]=(((r01*x14111))+(((-1.0)*x14101*x14108))+(((-1.0)*r02*x14107)));
evalcond[2]=((-1.0)+((r11*x14111))+(((-1.0)*r12*x14107))+(((-1.0)*x14098*x14108)));
evalcond[3]=(((sj3*x14106))+(((-1.0)*cj3*x14098*x14107))+((r10*x14103))+((r11*x14093*x14099))+((r12*x14109)));
evalcond[4]=((((-1.0)*r11*x14103*x14107))+((cj3*x14106))+((x14098*x14110))+((r10*x14099))+(((-1.0)*r12*sj3*x14108)));
evalcond[5]=(((sj3*x14096))+(((-1.0)*gconst38*x14097*x14107))+((r22*x14109))+((r21*x14093*x14099))+x14112+((r20*x14103)));
evalcond[6]=(((sj3*x14105))+((r02*x14109))+((r00*x14103))+((r01*x14093*x14099))+(((-1.0)*x14100))+x14102+(((-1.0)*cj3*x14101*x14107)));
evalcond[7]=(((r00*x14099))+(((-1.0)*r01*x14103*x14107))+(((-1.0)*r02*sj3*x14108))+((cj3*x14105))+((x14101*x14110))+x14112);
evalcond[8]=((((-1.0)*r22*sj3*x14108))+(((-1.0)*x14102))+((gconst37*x14097))+(((-1.0)*r21*x14103*x14107))+x14100+((x14104*x14110))+((cj3*x14096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14113=gconst38*gconst38;
IkReal x14114=gconst37*gconst37;
IkReal x14115=(gconst37*r10);
IkReal x14116=(cj3*r22);
IkReal x14117=((1.0)*gconst38);
IkReal x14118=(r21*sj3);
IkReal x14119=(gconst38*r11);
IkReal x14120=(cj3*r20);
IkReal x14121=(cj3*r21);
IkReal x14122=(r20*sj3);
CheckValue<IkReal> x14123 = IKatan2WithCheck(IkReal((((x14115*x14116))+((x14116*x14119)))),IkReal(((((-1.0)*x14115*x14117*x14120))+((gconst37*x14119*x14121))+(((-1.0)*r11*x14113*x14120))+((r10*x14114*x14121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14123.valid){
continue;
}
CheckValue<IkReal> x14124=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14115*x14117*x14118))+((r10*x14113*x14122))+((r12*r22*sj3))+(((-1.0)*gconst37*r11*x14117*x14122))+((r11*x14114*x14118)))),-1);
if(!x14124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14123.value)+(((1.5707963267949)*(x14124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14125=IKsin(j4);
IkReal x14126=IKcos(j4);
IkReal x14127=(cj2*sj1);
IkReal x14128=(cj1*sj2);
IkReal x14129=(gconst38*r21);
IkReal x14130=(cj3*r20);
IkReal x14131=(gconst38*r10);
IkReal x14132=(cj3*gconst37);
IkReal x14133=(sj1*sj2);
IkReal x14134=(gconst38*r00);
IkReal x14135=(cj1*cj2);
IkReal x14136=(gconst37*sj3);
IkReal x14137=(gconst38*r20);
IkReal x14138=(gconst38*r01);
IkReal x14139=(gconst38*r11);
IkReal x14140=((1.0)*x14126);
IkReal x14141=((1.0)*x14125);
IkReal x14142=(cj3*x14125);
IkReal x14143=(sj3*x14126);
IkReal x14144=(gconst37*x14125);
IkReal x14145=(x14128+x14127);
evalcond[0]=((((-1.0)*r22*x14140))+((r21*x14144))+(((-1.0)*x14137*x14141)));
evalcond[1]=((((-1.0)*x14134*x14141))+((r01*x14144))+(((-1.0)*r02*x14140)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14140))+(((-1.0)*x14131*x14141))+((r11*x14144)));
evalcond[3]=((((-1.0)*cj3*x14131*x14140))+((sj3*x14139))+((r10*x14136))+((r12*x14142))+((r11*x14126*x14132)));
evalcond[4]=((((-1.0)*r12*sj3*x14141))+((r10*x14132))+(((-1.0)*r11*x14136*x14140))+((x14131*x14143))+((cj3*x14139)));
evalcond[5]=(((r21*x14126*x14132))+((r20*x14136))+(((-1.0)*gconst38*x14130*x14140))+((r22*x14142))+x14145+((sj3*x14129)));
evalcond[6]=((((-1.0)*x14133))+(((-1.0)*cj3*x14134*x14140))+((r02*x14142))+((sj3*x14138))+x14135+((r01*x14126*x14132))+((r00*x14136)));
evalcond[7]=((((-1.0)*r01*x14136*x14140))+(((-1.0)*r02*sj3*x14141))+((x14134*x14143))+x14145+((cj3*x14138))+((r00*x14132)));
evalcond[8]=((((-1.0)*x14135))+(((-1.0)*r22*sj3*x14141))+(((-1.0)*r21*x14136*x14140))+((cj3*x14129))+((gconst37*x14130))+x14133+((x14137*x14143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14146=((1.0)*gconst38);
CheckValue<IkReal> x14147=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14146)))),-1);
if(!x14147.valid){
continue;
}
CheckValue<IkReal> x14148 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14146))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14147.value)))+(x14148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14149=IKsin(j4);
IkReal x14150=IKcos(j4);
IkReal x14151=(cj2*sj1);
IkReal x14152=(cj1*sj2);
IkReal x14153=(gconst38*r21);
IkReal x14154=(cj3*r20);
IkReal x14155=(gconst38*r10);
IkReal x14156=(cj3*gconst37);
IkReal x14157=(sj1*sj2);
IkReal x14158=(gconst38*r00);
IkReal x14159=(cj1*cj2);
IkReal x14160=(gconst37*sj3);
IkReal x14161=(gconst38*r20);
IkReal x14162=(gconst38*r01);
IkReal x14163=(gconst38*r11);
IkReal x14164=((1.0)*x14150);
IkReal x14165=((1.0)*x14149);
IkReal x14166=(cj3*x14149);
IkReal x14167=(sj3*x14150);
IkReal x14168=(gconst37*x14149);
IkReal x14169=(x14151+x14152);
evalcond[0]=((((-1.0)*r22*x14164))+((r21*x14168))+(((-1.0)*x14161*x14165)));
evalcond[1]=((((-1.0)*r02*x14164))+((r01*x14168))+(((-1.0)*x14158*x14165)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14164))+((r11*x14168))+(((-1.0)*x14155*x14165)));
evalcond[3]=(((r10*x14160))+((sj3*x14163))+((r12*x14166))+(((-1.0)*cj3*x14155*x14164))+((r11*x14150*x14156)));
evalcond[4]=(((cj3*x14163))+((r10*x14156))+((x14155*x14167))+(((-1.0)*r12*sj3*x14165))+(((-1.0)*r11*x14160*x14164)));
evalcond[5]=(((sj3*x14153))+((r21*x14150*x14156))+((r22*x14166))+(((-1.0)*gconst38*x14154*x14164))+x14169+((r20*x14160)));
evalcond[6]=(((sj3*x14162))+((r02*x14166))+((r00*x14160))+x14159+((r01*x14150*x14156))+(((-1.0)*cj3*x14158*x14164))+(((-1.0)*x14157)));
evalcond[7]=(((cj3*x14162))+(((-1.0)*r02*sj3*x14165))+((x14158*x14167))+((r00*x14156))+x14169+(((-1.0)*r01*x14160*x14164)));
evalcond[8]=(((x14161*x14167))+((cj3*x14153))+(((-1.0)*r22*sj3*x14165))+((gconst37*x14154))+x14157+(((-1.0)*r21*x14160*x14164))+(((-1.0)*x14159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14171 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14171)==0){
continue;
}
IkReal x14170=pow(x14171,-0.5);
CheckValue<IkReal> x14172 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14172.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14172.value))));
IkReal gconst40=((1.0)*r01*x14170);
IkReal gconst41=((-1.0)*r00*x14170);
CheckValue<IkReal> x14173 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14173.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14173.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14176 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14176.valid){
continue;
}
IkReal x14174=((1.0)*(x14176.value));
IkReal x14175=x14170;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14174)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14174)));
IkReal gconst40=((1.0)*r01*x14175);
IkReal gconst41=((-1.0)*r00*x14175);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14179 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14179.valid){
continue;
}
IkReal x14177=((1.0)*(x14179.value));
IkReal x14178=x14170;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14177)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14177)));
IkReal gconst40=((1.0)*r01*x14178);
IkReal gconst41=((-1.0)*r00*x14178);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14180=gconst41*gconst41;
IkReal x14181=gconst40*gconst40;
IkReal x14182=(gconst40*r10);
IkReal x14183=(r22*sj3);
IkReal x14184=(r11*sj3);
IkReal x14185=((1.0)*cj3);
IkReal x14186=(gconst41*r21);
IkReal x14187=(gconst41*r20);
IkReal x14188=(r21*x14181);
IkReal x14189=((1.0)*r20*x14180);
CheckValue<IkReal> x14190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14180*x14185))+(((-1.0)*r12*r22*x14185))+((cj3*gconst40*r11*x14187))+((cj3*x14182*x14186))+(((-1.0)*r11*x14185*x14188)))),-1);
if(!x14190.valid){
continue;
}
CheckValue<IkReal> x14191 = IKatan2WithCheck(IkReal((((gconst41*r11*x14183))+((x14182*x14183)))),IkReal(((((-1.0)*sj3*x14182*x14187))+(((-1.0)*x14184*x14189))+((r10*sj3*x14188))+((gconst40*x14184*x14186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14190.value)))+(x14191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14192=IKsin(j4);
IkReal x14193=IKcos(j4);
IkReal x14194=(cj2*sj1);
IkReal x14195=(cj1*sj2);
IkReal x14196=(gconst40*sj3);
IkReal x14197=(gconst41*sj3);
IkReal x14198=(gconst41*r20);
IkReal x14199=(cj3*gconst41);
IkReal x14200=(sj1*sj2);
IkReal x14201=(cj1*cj2);
IkReal x14202=(cj3*gconst40);
IkReal x14203=((1.0)*x14193);
IkReal x14204=((1.0)*x14192);
IkReal x14205=(cj3*x14192);
IkReal x14206=(gconst40*x14192);
IkReal x14207=(x14194+x14195);
IkReal x14208=(x14193*x14202);
evalcond[0]=((((-1.0)*x14198*x14204))+((r21*x14206))+(((-1.0)*r22*x14203)));
evalcond[1]=((((-1.0)*gconst41*r00*x14204))+(((-1.0)*r02*x14203))+((r01*x14206)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14204))+(((-1.0)*r12*x14203))+((r11*x14206)));
evalcond[3]=(((r10*x14196))+(((-1.0)*r10*x14199*x14203))+((r11*x14197))+((r12*x14205))+((r11*x14208)));
evalcond[4]=(((r10*x14193*x14197))+((r10*x14202))+(((-1.0)*r11*x14196*x14203))+((r11*x14199))+(((-1.0)*r12*sj3*x14204)));
evalcond[5]=((((-1.0)*cj3*x14198*x14203))+((r21*x14208))+((r22*x14205))+((r21*x14197))+x14207+((r20*x14196)));
evalcond[6]=((((-1.0)*r00*x14199*x14203))+((r02*x14205))+((r01*x14197))+((r01*x14208))+(((-1.0)*x14200))+((r00*x14196))+x14201);
evalcond[7]=((((-1.0)*r02*sj3*x14204))+((r00*x14202))+((r00*x14193*x14197))+((r01*x14199))+x14207+(((-1.0)*r01*x14196*x14203)));
evalcond[8]=(((r20*x14193*x14197))+(((-1.0)*r21*x14196*x14203))+((r20*x14202))+(((-1.0)*x14201))+((r21*x14199))+(((-1.0)*r22*sj3*x14204))+x14200);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14209=((1.0)*gconst41);
CheckValue<IkReal> x14210 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14209))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14210.valid){
continue;
}
CheckValue<IkReal> x14211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14209))+(((-1.0)*gconst40*r20)))),-1);
if(!x14211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14210.value)+(((1.5707963267949)*(x14211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14212=IKsin(j4);
IkReal x14213=IKcos(j4);
IkReal x14214=(cj2*sj1);
IkReal x14215=(cj1*sj2);
IkReal x14216=(gconst40*sj3);
IkReal x14217=(gconst41*sj3);
IkReal x14218=(gconst41*r20);
IkReal x14219=(cj3*gconst41);
IkReal x14220=(sj1*sj2);
IkReal x14221=(cj1*cj2);
IkReal x14222=(cj3*gconst40);
IkReal x14223=((1.0)*x14213);
IkReal x14224=((1.0)*x14212);
IkReal x14225=(cj3*x14212);
IkReal x14226=(gconst40*x14212);
IkReal x14227=(x14215+x14214);
IkReal x14228=(x14213*x14222);
evalcond[0]=(((r21*x14226))+(((-1.0)*r22*x14223))+(((-1.0)*x14218*x14224)));
evalcond[1]=((((-1.0)*gconst41*r00*x14224))+(((-1.0)*r02*x14223))+((r01*x14226)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14223))+((r11*x14226))+(((-1.0)*gconst41*r10*x14224)));
evalcond[3]=(((r11*x14217))+(((-1.0)*r10*x14219*x14223))+((r10*x14216))+((r11*x14228))+((r12*x14225)));
evalcond[4]=(((r10*x14213*x14217))+(((-1.0)*r11*x14216*x14223))+((r11*x14219))+((r10*x14222))+(((-1.0)*r12*sj3*x14224)));
evalcond[5]=(((r22*x14225))+((r21*x14228))+((r21*x14217))+(((-1.0)*cj3*x14218*x14223))+((r20*x14216))+x14227);
evalcond[6]=(((r02*x14225))+((r01*x14217))+(((-1.0)*r00*x14219*x14223))+((r00*x14216))+(((-1.0)*x14220))+((r01*x14228))+x14221);
evalcond[7]=((((-1.0)*r01*x14216*x14223))+((r01*x14219))+((r00*x14213*x14217))+((r00*x14222))+(((-1.0)*r02*sj3*x14224))+x14227);
evalcond[8]=(((r20*x14222))+((r20*x14213*x14217))+((r21*x14219))+(((-1.0)*x14221))+x14220+(((-1.0)*r22*sj3*x14224))+(((-1.0)*r21*x14216*x14223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14229 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14229.valid){
continue;
}
CheckValue<IkReal> x14230=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14229.value)+(((1.5707963267949)*(x14230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14231=IKsin(j4);
IkReal x14232=IKcos(j4);
IkReal x14233=(cj2*sj1);
IkReal x14234=(cj1*sj2);
IkReal x14235=(gconst40*sj3);
IkReal x14236=(gconst41*sj3);
IkReal x14237=(gconst41*r20);
IkReal x14238=(cj3*gconst41);
IkReal x14239=(sj1*sj2);
IkReal x14240=(cj1*cj2);
IkReal x14241=(cj3*gconst40);
IkReal x14242=((1.0)*x14232);
IkReal x14243=((1.0)*x14231);
IkReal x14244=(cj3*x14231);
IkReal x14245=(gconst40*x14231);
IkReal x14246=(x14234+x14233);
IkReal x14247=(x14232*x14241);
evalcond[0]=((((-1.0)*x14237*x14243))+((r21*x14245))+(((-1.0)*r22*x14242)));
evalcond[1]=((((-1.0)*gconst41*r00*x14243))+((r01*x14245))+(((-1.0)*r02*x14242)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14243))+((r11*x14245))+(((-1.0)*r12*x14242)));
evalcond[3]=((((-1.0)*r10*x14238*x14242))+((r10*x14235))+((r12*x14244))+((r11*x14247))+((r11*x14236)));
evalcond[4]=(((r10*x14232*x14236))+((r10*x14241))+(((-1.0)*r11*x14235*x14242))+((r11*x14238))+(((-1.0)*r12*sj3*x14243)));
evalcond[5]=(((r21*x14247))+((r20*x14235))+((r21*x14236))+(((-1.0)*cj3*x14237*x14242))+x14246+((r22*x14244)));
evalcond[6]=((((-1.0)*r00*x14238*x14242))+((r02*x14244))+((r01*x14236))+((r00*x14235))+(((-1.0)*x14239))+((r01*x14247))+x14240);
evalcond[7]=((((-1.0)*r02*sj3*x14243))+((r01*x14238))+((r00*x14232*x14236))+(((-1.0)*r01*x14235*x14242))+x14246+((r00*x14241)));
evalcond[8]=((((-1.0)*r22*sj3*x14243))+(((-1.0)*x14240))+(((-1.0)*r21*x14235*x14242))+((r21*x14238))+((r20*x14241))+((r20*x14232*x14236))+x14239);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14248=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14248);
rxp1_1=(px*r21);
rxp1_2=(r11*x14248);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14249=(r11*sj5);
IkReal x14250=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14250))+x14249);
j4eval[1]=(((cj3*x14249))+(((-1.0)*cj3*x14250)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14251=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14251);
rxp1_1=(px*r21);
rxp1_2=(r11*x14251);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14252=(cj5*r10);
IkReal x14253=(r11*sj5);
j4eval[0]=(x14253+(((-1.0)*x14252)));
j4eval[1]=((((-1.0)*sj3*x14253))+((sj3*x14252)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14254=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14254);
rxp1_1=(px*r21);
rxp1_2=(r11*x14254);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14255=((1.0)*r10);
CheckValue<IkReal> x14256=IKPowWithIntegerCheck(cj3,-1);
if(!x14256.valid){
continue;
}
CheckValue<IkReal> x14257=IKPowWithIntegerCheck(r02,-1);
if(!x14257.valid){
continue;
}
CheckValue<IkReal> x14258=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14255))),-1);
if(!x14258.valid){
continue;
}
if( IKabs(((x14256.value)*(x14257.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14258.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14255)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14256.value)*(x14257.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14258.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14255))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14256.value)*(x14257.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14258.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14255))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14259=IKsin(j4);
IkReal x14260=IKcos(j4);
IkReal x14261=(cj2*sj1);
IkReal x14262=(cj1*sj2);
IkReal x14263=(cj5*r10);
IkReal x14264=(sj1*sj2);
IkReal x14265=(cj5*sj3);
IkReal x14266=(r11*sj5);
IkReal x14267=(cj3*sj5);
IkReal x14268=(r21*sj5);
IkReal x14269=(cj1*cj2);
IkReal x14270=(cj3*cj5);
IkReal x14271=(sj3*sj5);
IkReal x14272=((1.0)*x14259);
IkReal x14273=(r20*x14260);
IkReal x14274=(cj3*x14260);
IkReal x14275=(sj3*x14260);
IkReal x14276=(x14262+x14261);
evalcond[0]=((-1.0)*r02*x14260);
evalcond[1]=((((-1.0)*cj5*r20*x14272))+((x14259*x14268)));
evalcond[2]=((((-1.0)*x14264))+((cj3*r02*x14259))+x14269);
evalcond[3]=((((-1.0)*r02*sj3*x14272))+x14276);
evalcond[4]=((-1.0)+(((-1.0)*x14263*x14272))+((x14259*x14266)));
evalcond[5]=(((x14266*x14274))+(((-1.0)*x14263*x14274))+((r11*x14265))+((r10*x14271)));
evalcond[6]=(((r11*x14270))+(((-1.0)*x14266*x14275))+((x14263*x14275))+((r10*x14267)));
evalcond[7]=((((-1.0)*x14270*x14273))+((r21*x14265))+((r20*x14271))+((r21*x14260*x14267))+x14276);
evalcond[8]=((((-1.0)*x14269))+((r21*x14270))+((r20*x14267))+(((-1.0)*x14268*x14275))+((x14265*x14273))+x14264);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14277=(cj5*r10);
IkReal x14278=((1.0)*r11);
CheckValue<IkReal> x14279=IKPowWithIntegerCheck(((((-1.0)*x14277))+((r11*sj5))),-1);
if(!x14279.valid){
continue;
}
CheckValue<IkReal> x14280=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14278))+((sj3*x14277))),-1);
if(!x14280.valid){
continue;
}
if( IKabs(x14279.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14280.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14278)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14279.value)+IKsqr(((x14280.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14278))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14279.value, ((x14280.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14278))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14281=IKsin(j4);
IkReal x14282=IKcos(j4);
IkReal x14283=(cj2*sj1);
IkReal x14284=(cj1*sj2);
IkReal x14285=(cj5*r10);
IkReal x14286=(sj1*sj2);
IkReal x14287=(cj5*sj3);
IkReal x14288=(r11*sj5);
IkReal x14289=(cj3*sj5);
IkReal x14290=(r21*sj5);
IkReal x14291=(cj1*cj2);
IkReal x14292=(cj3*cj5);
IkReal x14293=(sj3*sj5);
IkReal x14294=((1.0)*x14281);
IkReal x14295=(r20*x14282);
IkReal x14296=(cj3*x14282);
IkReal x14297=(sj3*x14282);
IkReal x14298=(x14283+x14284);
evalcond[0]=((-1.0)*r02*x14282);
evalcond[1]=(((x14281*x14290))+(((-1.0)*cj5*r20*x14294)));
evalcond[2]=(((cj3*r02*x14281))+(((-1.0)*x14286))+x14291);
evalcond[3]=((((-1.0)*r02*sj3*x14294))+x14298);
evalcond[4]=((-1.0)+((x14281*x14288))+(((-1.0)*x14285*x14294)));
evalcond[5]=((((-1.0)*x14285*x14296))+((r10*x14293))+((r11*x14287))+((x14288*x14296)));
evalcond[6]=((((-1.0)*x14288*x14297))+((r10*x14289))+((r11*x14292))+((x14285*x14297)));
evalcond[7]=(((r20*x14293))+((r21*x14287))+(((-1.0)*x14292*x14295))+((r21*x14282*x14289))+x14298);
evalcond[8]=(((x14287*x14295))+((r21*x14292))+(((-1.0)*x14290*x14297))+(((-1.0)*x14291))+x14286+((r20*x14289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14299=((1.0)*r10);
IkReal x14300=(r11*sj5);
CheckValue<IkReal> x14301=IKPowWithIntegerCheck(((((-1.0)*cj5*x14299))+x14300),-1);
if(!x14301.valid){
continue;
}
CheckValue<IkReal> x14302=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14299))+((cj3*x14300))),-1);
if(!x14302.valid){
continue;
}
if( IKabs(x14301.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14302.value)*(((((-1.0)*sj3*sj5*x14299))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14301.value)+IKsqr(((x14302.value)*(((((-1.0)*sj3*sj5*x14299))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14301.value, ((x14302.value)*(((((-1.0)*sj3*sj5*x14299))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14303=IKsin(j4);
IkReal x14304=IKcos(j4);
IkReal x14305=(cj2*sj1);
IkReal x14306=(cj1*sj2);
IkReal x14307=(cj5*r10);
IkReal x14308=(sj1*sj2);
IkReal x14309=(cj5*sj3);
IkReal x14310=(r11*sj5);
IkReal x14311=(cj3*sj5);
IkReal x14312=(r21*sj5);
IkReal x14313=(cj1*cj2);
IkReal x14314=(cj3*cj5);
IkReal x14315=(sj3*sj5);
IkReal x14316=((1.0)*x14303);
IkReal x14317=(r20*x14304);
IkReal x14318=(cj3*x14304);
IkReal x14319=(sj3*x14304);
IkReal x14320=(x14305+x14306);
evalcond[0]=((-1.0)*r02*x14304);
evalcond[1]=((((-1.0)*cj5*r20*x14316))+((x14303*x14312)));
evalcond[2]=(((cj3*r02*x14303))+(((-1.0)*x14308))+x14313);
evalcond[3]=((((-1.0)*r02*sj3*x14316))+x14320);
evalcond[4]=((-1.0)+((x14303*x14310))+(((-1.0)*x14307*x14316)));
evalcond[5]=(((r11*x14309))+(((-1.0)*x14307*x14318))+((x14310*x14318))+((r10*x14315)));
evalcond[6]=(((r11*x14314))+((x14307*x14319))+(((-1.0)*x14310*x14319))+((r10*x14311)));
evalcond[7]=(((r21*x14304*x14311))+(((-1.0)*x14314*x14317))+((r20*x14315))+x14320+((r21*x14309)));
evalcond[8]=(((x14309*x14317))+(((-1.0)*x14313))+((r20*x14311))+((r21*x14314))+x14308+(((-1.0)*x14312*x14319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14321=cj5*cj5;
IkReal x14322=((1.0)*cj3);
IkReal x14323=(r10*r21);
IkReal x14324=(cj5*sj5);
IkReal x14325=(r11*r21);
IkReal x14326=(r11*r20);
IkReal x14327=(r22*sj3);
IkReal x14328=(r10*r20);
IkReal x14329=((1.0)*sj3*x14321);
CheckValue<IkReal> x14330=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14321*x14322*x14328))+((cj3*x14324*x14326))+((cj3*x14323*x14324))+(((-1.0)*x14322*x14325))+((cj3*x14321*x14325))+(((-1.0)*r12*r22*x14322)))),-1);
if(!x14330.valid){
continue;
}
CheckValue<IkReal> x14331 = IKatan2WithCheck(IkReal((((r10*sj5*x14327))+((cj5*r11*x14327)))),IkReal((((sj3*x14324*x14325))+((sj3*x14323))+(((-1.0)*x14323*x14329))+(((-1.0)*sj3*x14324*x14328))+(((-1.0)*x14326*x14329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14330.value)))+(x14331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14332=IKsin(j4);
IkReal x14333=IKcos(j4);
IkReal x14334=(cj2*sj1);
IkReal x14335=(cj1*sj2);
IkReal x14336=(cj5*sj3);
IkReal x14337=(cj5*r10);
IkReal x14338=(r00*sj5);
IkReal x14339=(sj1*sj2);
IkReal x14340=(r11*sj5);
IkReal x14341=(cj3*cj5);
IkReal x14342=(cj3*sj5);
IkReal x14343=(r21*sj5);
IkReal x14344=(cj1*cj2);
IkReal x14345=(sj3*sj5);
IkReal x14346=(r01*sj5);
IkReal x14347=((1.0)*x14333);
IkReal x14348=((1.0)*x14332);
IkReal x14349=(cj3*x14332);
IkReal x14350=(cj3*x14333);
IkReal x14351=(x14334+x14335);
evalcond[0]=(((x14332*x14343))+(((-1.0)*r22*x14347))+(((-1.0)*cj5*r20*x14348)));
evalcond[1]=(((x14332*x14346))+(((-1.0)*cj5*r00*x14348))+(((-1.0)*r02*x14347)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14347))+((x14332*x14340))+(((-1.0)*x14337*x14348)));
evalcond[3]=(((r11*x14336))+((r10*x14345))+(((-1.0)*cj3*x14337*x14347))+((r12*x14349))+((x14340*x14350)));
evalcond[4]=(((r10*x14333*x14336))+((r11*x14341))+((r10*x14342))+(((-1.0)*r12*sj3*x14348))+(((-1.0)*sj3*x14340*x14347)));
evalcond[5]=((((-1.0)*r20*x14341*x14347))+((r22*x14349))+((r21*x14333*x14342))+((r20*x14345))+x14351+((r21*x14336)));
evalcond[6]=((((-1.0)*r00*x14341*x14347))+(((-1.0)*x14339))+((r01*x14336))+((r01*x14333*x14342))+((r02*x14349))+x14344+((sj3*x14338)));
evalcond[7]=(((r01*x14341))+(((-1.0)*r01*x14345*x14347))+(((-1.0)*r02*sj3*x14348))+((r00*x14333*x14336))+x14351+((cj3*x14338)));
evalcond[8]=(((r21*x14341))+(((-1.0)*x14344))+((r20*x14333*x14336))+(((-1.0)*sj3*x14343*x14347))+((r20*x14342))+x14339+(((-1.0)*r22*sj3*x14348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14352=((1.0)*cj5);
CheckValue<IkReal> x14353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14352))+(((-1.0)*r20*sj5)))),-1);
if(!x14353.valid){
continue;
}
CheckValue<IkReal> x14354 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14353.value)))+(x14354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14355=IKsin(j4);
IkReal x14356=IKcos(j4);
IkReal x14357=(cj2*sj1);
IkReal x14358=(cj1*sj2);
IkReal x14359=(cj5*sj3);
IkReal x14360=(cj5*r10);
IkReal x14361=(r00*sj5);
IkReal x14362=(sj1*sj2);
IkReal x14363=(r11*sj5);
IkReal x14364=(cj3*cj5);
IkReal x14365=(cj3*sj5);
IkReal x14366=(r21*sj5);
IkReal x14367=(cj1*cj2);
IkReal x14368=(sj3*sj5);
IkReal x14369=(r01*sj5);
IkReal x14370=((1.0)*x14356);
IkReal x14371=((1.0)*x14355);
IkReal x14372=(cj3*x14355);
IkReal x14373=(cj3*x14356);
IkReal x14374=(x14357+x14358);
evalcond[0]=((((-1.0)*r22*x14370))+(((-1.0)*cj5*r20*x14371))+((x14355*x14366)));
evalcond[1]=((((-1.0)*cj5*r00*x14371))+(((-1.0)*r02*x14370))+((x14355*x14369)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14370))+(((-1.0)*x14360*x14371))+((x14355*x14363)));
evalcond[3]=(((r10*x14368))+((x14363*x14373))+((r11*x14359))+(((-1.0)*cj3*x14360*x14370))+((r12*x14372)));
evalcond[4]=(((r10*x14365))+((r11*x14364))+(((-1.0)*sj3*x14363*x14370))+((r10*x14356*x14359))+(((-1.0)*r12*sj3*x14371)));
evalcond[5]=(((r20*x14368))+((r22*x14372))+((r21*x14359))+((r21*x14356*x14365))+x14374+(((-1.0)*r20*x14364*x14370)));
evalcond[6]=((((-1.0)*r00*x14364*x14370))+((r01*x14356*x14365))+((sj3*x14361))+((r01*x14359))+(((-1.0)*x14362))+x14367+((r02*x14372)));
evalcond[7]=(((cj3*x14361))+(((-1.0)*r02*sj3*x14371))+((r00*x14356*x14359))+((r01*x14364))+x14374+(((-1.0)*r01*x14368*x14370)));
evalcond[8]=(((r20*x14356*x14359))+(((-1.0)*sj3*x14366*x14370))+((r20*x14365))+(((-1.0)*x14367))+((r21*x14364))+(((-1.0)*r22*sj3*x14371))+x14362);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14375 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14375.valid){
continue;
}
CheckValue<IkReal> x14376=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14375.value)+(((1.5707963267949)*(x14376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14377=IKsin(j4);
IkReal x14378=IKcos(j4);
IkReal x14379=(cj2*sj1);
IkReal x14380=(cj1*sj2);
IkReal x14381=(cj5*sj3);
IkReal x14382=(cj5*r10);
IkReal x14383=(r00*sj5);
IkReal x14384=(sj1*sj2);
IkReal x14385=(r11*sj5);
IkReal x14386=(cj3*cj5);
IkReal x14387=(cj3*sj5);
IkReal x14388=(r21*sj5);
IkReal x14389=(cj1*cj2);
IkReal x14390=(sj3*sj5);
IkReal x14391=(r01*sj5);
IkReal x14392=((1.0)*x14378);
IkReal x14393=((1.0)*x14377);
IkReal x14394=(cj3*x14377);
IkReal x14395=(cj3*x14378);
IkReal x14396=(x14379+x14380);
evalcond[0]=(((x14377*x14388))+(((-1.0)*cj5*r20*x14393))+(((-1.0)*r22*x14392)));
evalcond[1]=(((x14377*x14391))+(((-1.0)*cj5*r00*x14393))+(((-1.0)*r02*x14392)));
evalcond[2]=((-1.0)+((x14377*x14385))+(((-1.0)*r12*x14392))+(((-1.0)*x14382*x14393)));
evalcond[3]=((((-1.0)*cj3*x14382*x14392))+((r12*x14394))+((r11*x14381))+((x14385*x14395))+((r10*x14390)));
evalcond[4]=(((r10*x14387))+((r11*x14386))+(((-1.0)*sj3*x14385*x14392))+((r10*x14378*x14381))+(((-1.0)*r12*sj3*x14393)));
evalcond[5]=(((r21*x14378*x14387))+((r21*x14381))+((r22*x14394))+(((-1.0)*r20*x14386*x14392))+x14396+((r20*x14390)));
evalcond[6]=((((-1.0)*x14384))+((r01*x14381))+((r01*x14378*x14387))+((r02*x14394))+x14389+((sj3*x14383))+(((-1.0)*r00*x14386*x14392)));
evalcond[7]=((((-1.0)*r02*sj3*x14393))+((r01*x14386))+((r00*x14378*x14381))+((cj3*x14383))+x14396+(((-1.0)*r01*x14390*x14392)));
evalcond[8]=(((r20*x14387))+((r20*x14378*x14381))+(((-1.0)*x14389))+((r21*x14386))+(((-1.0)*sj3*x14388*x14392))+(((-1.0)*r22*sj3*x14393))+x14384);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14397=((-1.0)*r00);
IkReal x14399 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14399)==0){
continue;
}
IkReal x14398=pow(x14399,-0.5);
CheckValue<IkReal> x14400 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14397),IKFAST_ATAN2_MAGTHRESH);
if(!x14400.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14400.value));
IkReal gconst13=(r01*x14398);
IkReal gconst14=(x14397*x14398);
CheckValue<IkReal> x14401 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14401.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14401.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14402=((-1.0)*r00);
IkReal x14403=x14398;
CheckValue<IkReal> x14405 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14402),IKFAST_ATAN2_MAGTHRESH);
if(!x14405.valid){
continue;
}
IkReal x14404=((-1.0)*(x14405.value));
sj5=gconst13;
cj5=gconst14;
j5=x14404;
IkReal gconst12=x14404;
IkReal gconst13=(r01*x14403);
IkReal gconst14=(x14402*x14403);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14406=((1.0)*sj0);
IkReal x14407=((1.0)*cj0);
CheckValue<IkReal> x14408 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14407))+(((-1.0)*r12*x14406)))),IkReal((((cj0*gconst14*r00))+(((-1.0)*gconst13*r11*x14406))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14408.valid){
continue;
}
CheckValue<IkReal> x14409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14408.value)+(((1.5707963267949)*(x14409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14410=IKsin(j4);
IkReal x14411=IKcos(j4);
IkReal x14412=((1.0)*r22);
IkReal x14413=((1.0)*r12);
IkReal x14414=(gconst13*sj3);
IkReal x14415=(gconst13*r01);
IkReal x14416=(sj1*sj2);
IkReal x14417=(gconst14*sj3);
IkReal x14418=(cj2*sj1);
IkReal x14419=((1.0)*sj0);
IkReal x14420=(cj3*gconst13);
IkReal x14421=(cj3*gconst14);
IkReal x14422=((1.0)*cj0);
IkReal x14423=((1.0)*gconst14);
IkReal x14424=(cj1*sj2);
IkReal x14425=(sj3*x14410);
IkReal x14426=((1.0)*cj1*cj2);
IkReal x14427=(cj3*x14411);
IkReal x14428=(cj3*x14410);
IkReal x14429=(gconst13*x14410);
IkReal x14430=((1.0)*x14411);
IkReal x14431=(x14410*x14423);
evalcond[0]=((((-1.0)*x14411*x14412))+(((-1.0)*r20*x14431))+((r21*x14429)));
evalcond[1]=((((-1.0)*r10*x14431))+cj0+((r11*x14429))+(((-1.0)*x14411*x14413)));
evalcond[2]=((((-1.0)*x14419))+(((-1.0)*r00*x14431))+(((-1.0)*r02*x14430))+((x14410*x14415)));
evalcond[3]=(((r21*x14417))+((r21*x14411*x14420))+x14424+x14418+((r22*x14428))+((r20*x14414))+(((-1.0)*r20*x14421*x14430)));
evalcond[4]=(((r20*x14420))+x14416+(((-1.0)*r21*x14414*x14430))+((r20*x14411*x14417))+(((-1.0)*x14426))+((r21*x14421))+(((-1.0)*x14412*x14425)));
evalcond[5]=(((cj0*x14416))+(((-1.0)*r00*x14421*x14430))+((r00*x14414))+((x14415*x14427))+((r01*x14417))+((r02*x14428))+(((-1.0)*cj1*cj2*x14422)));
evalcond[6]=((((-1.0)*cj1*cj2*x14419))+((r11*x14417))+((r12*x14428))+((sj0*x14416))+(((-1.0)*r10*x14421*x14430))+((r10*x14414))+((r11*x14411*x14420)));
evalcond[7]=(((r00*x14411*x14417))+(((-1.0)*x14422*x14424))+(((-1.0)*x14418*x14422))+((r01*x14421))+((r00*x14420))+(((-1.0)*r01*x14414*x14430))+(((-1.0)*r02*x14425)));
evalcond[8]=((((-1.0)*x14419*x14424))+(((-1.0)*x14413*x14425))+(((-1.0)*x14418*x14419))+(((-1.0)*r11*x14414*x14430))+((r11*x14421))+((r10*x14411*x14417))+((r10*x14420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14432=((1.0)*gconst14);
CheckValue<IkReal> x14433 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14432))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14433.valid){
continue;
}
CheckValue<IkReal> x14434=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14432)))),-1);
if(!x14434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14433.value)+(((1.5707963267949)*(x14434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14435=IKsin(j4);
IkReal x14436=IKcos(j4);
IkReal x14437=((1.0)*r22);
IkReal x14438=((1.0)*r12);
IkReal x14439=(gconst13*sj3);
IkReal x14440=(gconst13*r01);
IkReal x14441=(sj1*sj2);
IkReal x14442=(gconst14*sj3);
IkReal x14443=(cj2*sj1);
IkReal x14444=((1.0)*sj0);
IkReal x14445=(cj3*gconst13);
IkReal x14446=(cj3*gconst14);
IkReal x14447=((1.0)*cj0);
IkReal x14448=((1.0)*gconst14);
IkReal x14449=(cj1*sj2);
IkReal x14450=(sj3*x14435);
IkReal x14451=((1.0)*cj1*cj2);
IkReal x14452=(cj3*x14436);
IkReal x14453=(cj3*x14435);
IkReal x14454=(gconst13*x14435);
IkReal x14455=((1.0)*x14436);
IkReal x14456=(x14435*x14448);
evalcond[0]=((((-1.0)*x14436*x14437))+(((-1.0)*r20*x14456))+((r21*x14454)));
evalcond[1]=((((-1.0)*x14436*x14438))+cj0+((r11*x14454))+(((-1.0)*r10*x14456)));
evalcond[2]=((((-1.0)*x14444))+(((-1.0)*r00*x14456))+(((-1.0)*r02*x14455))+((x14435*x14440)));
evalcond[3]=(((r21*x14436*x14445))+((r20*x14439))+(((-1.0)*r20*x14446*x14455))+x14443+x14449+((r22*x14453))+((r21*x14442)));
evalcond[4]=((((-1.0)*r21*x14439*x14455))+(((-1.0)*x14451))+((r20*x14445))+x14441+(((-1.0)*x14437*x14450))+((r20*x14436*x14442))+((r21*x14446)));
evalcond[5]=((((-1.0)*r00*x14446*x14455))+((r01*x14442))+((x14440*x14452))+((r00*x14439))+(((-1.0)*cj1*cj2*x14447))+((r02*x14453))+((cj0*x14441)));
evalcond[6]=(((sj0*x14441))+((r12*x14453))+((r11*x14442))+((r10*x14439))+((r11*x14436*x14445))+(((-1.0)*r10*x14446*x14455))+(((-1.0)*cj1*cj2*x14444)));
evalcond[7]=((((-1.0)*r02*x14450))+((r01*x14446))+((r00*x14445))+((r00*x14436*x14442))+(((-1.0)*r01*x14439*x14455))+(((-1.0)*x14447*x14449))+(((-1.0)*x14443*x14447)));
evalcond[8]=((((-1.0)*x14438*x14450))+((r10*x14445))+((r11*x14446))+((r10*x14436*x14442))+(((-1.0)*r11*x14439*x14455))+(((-1.0)*x14444*x14449))+(((-1.0)*x14443*x14444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14457=((-1.0)*r01);
IkReal x14459 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14459)==0){
continue;
}
IkReal x14458=pow(x14459,-0.5);
CheckValue<IkReal> x14460 = IKatan2WithCheck(IkReal(x14457),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14460.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14460.value))));
IkReal gconst16=(x14457*x14458);
IkReal gconst17=((1.0)*r00*x14458);
CheckValue<IkReal> x14461 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14461.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14461.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14462=((-1.0)*r01);
CheckValue<IkReal> x14465 = IKatan2WithCheck(IkReal(x14462),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14465.valid){
continue;
}
IkReal x14463=((1.0)*(x14465.value));
IkReal x14464=x14458;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14463)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14463)));
IkReal gconst16=(x14462*x14464);
IkReal gconst17=((1.0)*r00*x14464);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14466=((-1.0)*r01);
CheckValue<IkReal> x14469 = IKatan2WithCheck(IkReal(x14466),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14469.valid){
continue;
}
IkReal x14467=((1.0)*(x14469.value));
IkReal x14468=x14458;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14467)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14467)));
IkReal gconst16=(x14466*x14468);
IkReal gconst17=((1.0)*r00*x14468);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14470=((-1.0)*r01);
CheckValue<IkReal> x14473 = IKatan2WithCheck(IkReal(x14470),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14473.valid){
continue;
}
IkReal x14471=((1.0)*(x14473.value));
IkReal x14472=x14458;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14471)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14471)));
IkReal gconst16=(x14470*x14472);
IkReal gconst17=((1.0)*r00*x14472);
IkReal x14474=r02*r02;
IkReal x14475=(r12*sj0);
IkReal x14476=((1.0)*cj0);
IkReal x14477=x14458;
j4eval[0]=((IKabs(((((-1.0)*x14475))+(((-1.0)*r02*x14476)))))+(IKabs(((((-1.0)*x14476*x14477))+((cj0*x14474*x14477))+((r02*x14475*x14477))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14478=((-1.0)*r01);
CheckValue<IkReal> x14481 = IKatan2WithCheck(IkReal(x14478),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14481.valid){
continue;
}
IkReal x14479=((1.0)*(x14481.value));
IkReal x14480=x14458;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14479)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14479)));
IkReal gconst16=(x14478*x14480);
IkReal gconst17=((1.0)*r00*x14480);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14482=((-1.0)*r01);
CheckValue<IkReal> x14485 = IKatan2WithCheck(IkReal(x14482),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14485.valid){
continue;
}
IkReal x14483=((1.0)*(x14485.value));
IkReal x14484=x14458;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14483)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14483)));
IkReal gconst16=(x14482*x14484);
IkReal gconst17=((1.0)*r00*x14484);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14486=gconst16*gconst16;
IkReal x14487=gconst17*gconst17;
IkReal x14488=(r11*sj3);
IkReal x14489=(cj3*r10);
IkReal x14490=((1.0)*cj3);
IkReal x14491=(r10*sj3);
IkReal x14492=(gconst16*gconst17);
IkReal x14493=(r21*x14486);
IkReal x14494=((1.0)*r20*x14487);
CheckValue<IkReal> x14495=IKPowWithIntegerCheck(IKsign((((r21*x14489*x14492))+(((-1.0)*r12*r22*x14490))+((cj3*r11*r20*x14492))+(((-1.0)*r11*x14490*x14493))+(((-1.0)*x14489*x14494)))),-1);
if(!x14495.valid){
continue;
}
CheckValue<IkReal> x14496 = IKatan2WithCheck(IkReal((((gconst17*r22*x14488))+((gconst16*r22*x14491)))),IkReal(((((-1.0)*r20*x14491*x14492))+(((-1.0)*x14488*x14494))+((x14491*x14493))+((r21*x14488*x14492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14495.value)))+(x14496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14497=IKsin(j4);
IkReal x14498=IKcos(j4);
IkReal x14499=(cj2*sj1);
IkReal x14500=(cj1*sj2);
IkReal x14501=(gconst16*r21);
IkReal x14502=(cj3*gconst17);
IkReal x14503=(gconst16*r20);
IkReal x14504=(sj1*sj2);
IkReal x14505=(gconst17*r20);
IkReal x14506=(gconst17*sj3);
IkReal x14507=(gconst16*r10);
IkReal x14508=(cj1*cj2);
IkReal x14509=(gconst16*sj3);
IkReal x14510=((1.0)*x14498);
IkReal x14511=((1.0)*x14497);
IkReal x14512=(gconst16*x14497);
IkReal x14513=(cj3*x14498);
IkReal x14514=(cj3*x14497);
IkReal x14515=(x14500+x14499);
evalcond[0]=(((x14497*x14501))+(((-1.0)*r22*x14510))+(((-1.0)*x14505*x14511)));
evalcond[1]=((((-1.0)*gconst17*r00*x14511))+((r01*x14512))+(((-1.0)*r02*x14510)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14511))+((r11*x14512))+(((-1.0)*r12*x14510)));
evalcond[3]=(((r12*x14514))+((sj3*x14507))+((r11*x14506))+((gconst16*r11*x14513))+(((-1.0)*r10*x14502*x14510)));
evalcond[4]=(((cj3*x14507))+((r10*x14498*x14506))+((r11*x14502))+(((-1.0)*r11*x14509*x14510))+(((-1.0)*r12*sj3*x14511)));
evalcond[5]=(((r22*x14514))+((r21*x14506))+x14515+((sj3*x14503))+(((-1.0)*r20*x14502*x14510))+((x14501*x14513)));
evalcond[6]=(((gconst16*r01*x14513))+(((-1.0)*x14504))+x14508+(((-1.0)*r00*x14502*x14510))+((r02*x14514))+((r00*x14509))+((r01*x14506)));
evalcond[7]=((((-1.0)*r01*x14509*x14510))+((r00*x14498*x14506))+(((-1.0)*r02*sj3*x14511))+x14515+((r01*x14502))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14503))+(((-1.0)*sj3*x14501*x14510))+(((-1.0)*x14508))+((r21*x14502))+x14504+(((-1.0)*r22*sj3*x14511))+((sj3*x14498*x14505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14516=((1.0)*gconst17);
CheckValue<IkReal> x14517 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14516))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14517.valid){
continue;
}
CheckValue<IkReal> x14518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14516))+(((-1.0)*gconst16*r20)))),-1);
if(!x14518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14517.value)+(((1.5707963267949)*(x14518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14519=IKsin(j4);
IkReal x14520=IKcos(j4);
IkReal x14521=(cj2*sj1);
IkReal x14522=(cj1*sj2);
IkReal x14523=(gconst16*r21);
IkReal x14524=(cj3*gconst17);
IkReal x14525=(gconst16*r20);
IkReal x14526=(sj1*sj2);
IkReal x14527=(gconst17*r20);
IkReal x14528=(gconst17*sj3);
IkReal x14529=(gconst16*r10);
IkReal x14530=(cj1*cj2);
IkReal x14531=(gconst16*sj3);
IkReal x14532=((1.0)*x14520);
IkReal x14533=((1.0)*x14519);
IkReal x14534=(gconst16*x14519);
IkReal x14535=(cj3*x14520);
IkReal x14536=(cj3*x14519);
IkReal x14537=(x14521+x14522);
evalcond[0]=((((-1.0)*r22*x14532))+(((-1.0)*x14527*x14533))+((x14519*x14523)));
evalcond[1]=(((r01*x14534))+(((-1.0)*gconst17*r00*x14533))+(((-1.0)*r02*x14532)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14533))+(((-1.0)*r12*x14532))+((r11*x14534)));
evalcond[3]=(((r12*x14536))+((sj3*x14529))+((r11*x14528))+((gconst16*r11*x14535))+(((-1.0)*r10*x14524*x14532)));
evalcond[4]=((((-1.0)*r12*sj3*x14533))+(((-1.0)*r11*x14531*x14532))+((cj3*x14529))+((r11*x14524))+((r10*x14520*x14528)));
evalcond[5]=(((sj3*x14525))+((r22*x14536))+((x14523*x14535))+x14537+((r21*x14528))+(((-1.0)*r20*x14524*x14532)));
evalcond[6]=((((-1.0)*x14526))+((r02*x14536))+((r01*x14528))+((r00*x14531))+x14530+((gconst16*r01*x14535))+(((-1.0)*r00*x14524*x14532)));
evalcond[7]=((((-1.0)*r02*sj3*x14533))+((r00*x14520*x14528))+((r01*x14524))+x14537+(((-1.0)*r01*x14531*x14532))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14523*x14532))+(((-1.0)*x14530))+((cj3*x14525))+((sj3*x14520*x14527))+x14526+((r21*x14524))+(((-1.0)*r22*sj3*x14533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14538=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14538.valid){
continue;
}
CheckValue<IkReal> x14539 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14538.value)))+(x14539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14540=IKsin(j4);
IkReal x14541=IKcos(j4);
IkReal x14542=(cj2*sj1);
IkReal x14543=(cj1*sj2);
IkReal x14544=(gconst16*r21);
IkReal x14545=(cj3*gconst17);
IkReal x14546=(gconst16*r20);
IkReal x14547=(sj1*sj2);
IkReal x14548=(gconst17*r20);
IkReal x14549=(gconst17*sj3);
IkReal x14550=(gconst16*r10);
IkReal x14551=(cj1*cj2);
IkReal x14552=(gconst16*sj3);
IkReal x14553=((1.0)*x14541);
IkReal x14554=((1.0)*x14540);
IkReal x14555=(gconst16*x14540);
IkReal x14556=(cj3*x14541);
IkReal x14557=(cj3*x14540);
IkReal x14558=(x14543+x14542);
evalcond[0]=((((-1.0)*r22*x14553))+(((-1.0)*x14548*x14554))+((x14540*x14544)));
evalcond[1]=((((-1.0)*r02*x14553))+((r01*x14555))+(((-1.0)*gconst17*r00*x14554)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14554))+(((-1.0)*r12*x14553))+((r11*x14555)));
evalcond[3]=(((sj3*x14550))+((r11*x14549))+(((-1.0)*r10*x14545*x14553))+((r12*x14557))+((gconst16*r11*x14556)));
evalcond[4]=(((r10*x14541*x14549))+((r11*x14545))+(((-1.0)*r11*x14552*x14553))+((cj3*x14550))+(((-1.0)*r12*sj3*x14554)));
evalcond[5]=(((x14544*x14556))+((r21*x14549))+x14558+(((-1.0)*r20*x14545*x14553))+((sj3*x14546))+((r22*x14557)));
evalcond[6]=(((gconst16*r01*x14556))+((r01*x14549))+(((-1.0)*x14547))+((r02*x14557))+x14551+(((-1.0)*r00*x14545*x14553))+((r00*x14552)));
evalcond[7]=(((r01*x14545))+(((-1.0)*r01*x14552*x14553))+x14558+(((-1.0)*r02*sj3*x14554))+((r00*x14541*x14549))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r22*sj3*x14554))+((cj3*x14546))+((r21*x14545))+x14547+(((-1.0)*x14551))+((sj3*x14541*x14548))+(((-1.0)*sj3*x14544*x14553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14559=((-1.0)*r01);
CheckValue<IkReal> x14562 = IKatan2WithCheck(IkReal(x14559),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14562.valid){
continue;
}
IkReal x14560=((1.0)*(x14562.value));
IkReal x14561=x14458;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14560)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14560)));
IkReal gconst16=(x14559*x14561);
IkReal gconst17=((1.0)*r00*x14561);
IkReal x14563=r02*r02;
IkReal x14564=(r12*sj0);
IkReal x14565=((1.0)*cj0);
IkReal x14566=x14458;
j4eval[0]=((IKabs((((cj0*x14563*x14566))+(((-1.0)*x14565*x14566))+((r02*x14564*x14566)))))+(IKabs(((((-1.0)*r02*x14565))+(((-1.0)*x14564))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14567=((1.0)*r12);
IkReal x14568=(sj1*sj2);
IkReal x14569=(cj1*cj2);
IkReal x14570=((1.0)*sj3);
IkReal x14571=(gconst16*r21);
IkReal x14572=(cj3*gconst16*r20);
IkReal x14573=(gconst17*r20*sj3);
IkReal x14574=(cj3*gconst17*r21);
CheckValue<IkReal> x14575=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14571))+(((-1.0)*r10*r20*x14570*(gconst17*gconst17)))+(((-1.0)*gconst16*r11*x14570*x14571))+((gconst16*r11*x14573))),-1);
if(!x14575.valid){
continue;
}
CheckValue<IkReal> x14576=IKPowWithIntegerCheck(((((-1.0)*x14570*x14571))+x14573),-1);
if(!x14576.valid){
continue;
}
if( IKabs(((x14575.value)*((((cj0*sj3*x14571))+((r12*x14569))+(((-1.0)*cj0*gconst17*r20*x14570))+(((-1.0)*x14567*x14568))+(((-1.0)*x14567*x14572))+(((-1.0)*x14567*x14574)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14576.value)*((x14569+(((-1.0)*x14568))+(((-1.0)*x14574))+(((-1.0)*x14572)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14575.value)*((((cj0*sj3*x14571))+((r12*x14569))+(((-1.0)*cj0*gconst17*r20*x14570))+(((-1.0)*x14567*x14568))+(((-1.0)*x14567*x14572))+(((-1.0)*x14567*x14574))))))+IKsqr(((x14576.value)*((x14569+(((-1.0)*x14568))+(((-1.0)*x14574))+(((-1.0)*x14572))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14575.value)*((((cj0*sj3*x14571))+((r12*x14569))+(((-1.0)*cj0*gconst17*r20*x14570))+(((-1.0)*x14567*x14568))+(((-1.0)*x14567*x14572))+(((-1.0)*x14567*x14574))))), ((x14576.value)*((x14569+(((-1.0)*x14568))+(((-1.0)*x14574))+(((-1.0)*x14572))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14577=IKsin(j4);
IkReal x14578=IKcos(j4);
IkReal x14579=((1.0)*gconst17);
IkReal x14580=(gconst17*sj3);
IkReal x14581=(gconst16*r21);
IkReal x14582=(cj3*gconst17);
IkReal x14583=(sj1*sj2);
IkReal x14584=((1.0)*sj0);
IkReal x14585=(gconst16*sj3);
IkReal x14586=(cj3*gconst16);
IkReal x14587=(cj2*sj1);
IkReal x14588=((1.0)*cj0);
IkReal x14589=((1.0)*sj3);
IkReal x14590=(cj1*sj2);
IkReal x14591=(cj3*x14578);
IkReal x14592=(gconst16*x14577);
IkReal x14593=((1.0)*x14578);
IkReal x14594=((1.0)*cj1*cj2);
IkReal x14595=(r02*x14577);
IkReal x14596=(r12*x14577);
evalcond[0]=((((-1.0)*r20*x14577*x14579))+((x14577*x14581)));
evalcond[1]=(cj0+(((-1.0)*r12*x14593))+(((-1.0)*r10*x14577*x14579))+((r11*x14592)));
evalcond[2]=((((-1.0)*r02*x14593))+(((-1.0)*x14584))+(((-1.0)*r00*x14577*x14579))+((r01*x14592)));
evalcond[3]=(((r20*x14585))+((x14581*x14591))+(((-1.0)*r20*x14579*x14591))+((r21*x14580))+x14587+x14590);
evalcond[4]=(((r20*x14586))+(((-1.0)*x14578*x14581*x14589))+(((-1.0)*x14594))+((r20*x14578*x14580))+((r21*x14582))+x14583);
evalcond[5]=(((cj3*x14595))+(((-1.0)*r00*x14579*x14591))+(((-1.0)*cj1*cj2*x14588))+((r01*x14578*x14586))+((r00*x14585))+((r01*x14580))+((cj0*x14583)));
evalcond[6]=(((cj3*x14596))+((sj0*x14583))+((r11*x14578*x14586))+(((-1.0)*cj1*cj2*x14584))+((r10*x14585))+(((-1.0)*r10*x14579*x14591))+((r11*x14580)));
evalcond[7]=((((-1.0)*x14587*x14588))+(((-1.0)*x14588*x14590))+(((-1.0)*r01*x14585*x14593))+((r00*x14586))+(((-1.0)*x14589*x14595))+((r01*x14582))+((r00*x14578*x14580)));
evalcond[8]=((((-1.0)*x14584*x14587))+(((-1.0)*x14584*x14590))+((r10*x14578*x14580))+((r10*x14586))+((r11*x14582))+(((-1.0)*r11*x14585*x14593))+(((-1.0)*x14589*x14596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14597=((1.0)*sj0);
IkReal x14598=((1.0)*cj0);
CheckValue<IkReal> x14599=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14599.valid){
continue;
}
CheckValue<IkReal> x14600 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14598))+(((-1.0)*r12*x14597)))),IkReal(((((-1.0)*gconst16*r01*x14598))+(((-1.0)*gconst16*r11*x14597))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14599.value)))+(x14600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14601=IKsin(j4);
IkReal x14602=IKcos(j4);
IkReal x14603=((1.0)*gconst17);
IkReal x14604=(gconst17*sj3);
IkReal x14605=(gconst16*r21);
IkReal x14606=(cj3*gconst17);
IkReal x14607=(sj1*sj2);
IkReal x14608=((1.0)*sj0);
IkReal x14609=(gconst16*sj3);
IkReal x14610=(cj3*gconst16);
IkReal x14611=(cj2*sj1);
IkReal x14612=((1.0)*cj0);
IkReal x14613=((1.0)*sj3);
IkReal x14614=(cj1*sj2);
IkReal x14615=(cj3*x14602);
IkReal x14616=(gconst16*x14601);
IkReal x14617=((1.0)*x14602);
IkReal x14618=((1.0)*cj1*cj2);
IkReal x14619=(r02*x14601);
IkReal x14620=(r12*x14601);
evalcond[0]=(((x14601*x14605))+(((-1.0)*r20*x14601*x14603)));
evalcond[1]=(cj0+(((-1.0)*r12*x14617))+((r11*x14616))+(((-1.0)*r10*x14601*x14603)));
evalcond[2]=((((-1.0)*r00*x14601*x14603))+((r01*x14616))+(((-1.0)*r02*x14617))+(((-1.0)*x14608)));
evalcond[3]=(((r21*x14604))+(((-1.0)*r20*x14603*x14615))+x14614+x14611+((x14605*x14615))+((r20*x14609)));
evalcond[4]=(((r20*x14602*x14604))+((r21*x14606))+x14607+(((-1.0)*x14602*x14605*x14613))+(((-1.0)*x14618))+((r20*x14610)));
evalcond[5]=(((r01*x14602*x14610))+(((-1.0)*r00*x14603*x14615))+((cj0*x14607))+((r01*x14604))+(((-1.0)*cj1*cj2*x14612))+((r00*x14609))+((cj3*x14619)));
evalcond[6]=(((sj0*x14607))+((r11*x14602*x14610))+((cj3*x14620))+((r10*x14609))+(((-1.0)*r10*x14603*x14615))+(((-1.0)*cj1*cj2*x14608))+((r11*x14604)));
evalcond[7]=((((-1.0)*x14612*x14614))+((r00*x14602*x14604))+(((-1.0)*r01*x14609*x14617))+(((-1.0)*x14613*x14619))+((r01*x14606))+((r00*x14610))+(((-1.0)*x14611*x14612)));
evalcond[8]=(((r10*x14610))+(((-1.0)*x14613*x14620))+((r10*x14602*x14604))+((r11*x14606))+(((-1.0)*x14608*x14611))+(((-1.0)*x14608*x14614))+(((-1.0)*r11*x14609*x14617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14621=((1.0)*sj0);
IkReal x14622=((1.0)*cj0);
CheckValue<IkReal> x14623=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14623.valid){
continue;
}
CheckValue<IkReal> x14624 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14622))+(((-1.0)*r12*x14621)))),IkReal(((((-1.0)*gconst16*r01*x14622))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14623.value)))+(x14624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14625=IKsin(j4);
IkReal x14626=IKcos(j4);
IkReal x14627=(cj3*gconst17);
IkReal x14628=(gconst16*r21);
IkReal x14629=(gconst17*sj3);
IkReal x14630=(gconst16*r20);
IkReal x14631=(sj1*sj2);
IkReal x14632=(gconst16*r10);
IkReal x14633=(cj2*sj1);
IkReal x14634=(gconst16*sj3);
IkReal x14635=((1.0)*cj0);
IkReal x14636=((1.0)*sj0);
IkReal x14637=(cj1*sj2);
IkReal x14638=((1.0)*x14626);
IkReal x14639=(gconst16*x14625);
IkReal x14640=(cj3*x14626);
IkReal x14641=(cj3*x14625);
IkReal x14642=((1.0)*cj1*cj2);
IkReal x14643=((1.0)*gconst17*x14625);
IkReal x14644=((1.0)*sj3*x14625);
evalcond[0]=((((-1.0)*r22*x14638))+((x14625*x14628))+(((-1.0)*r20*x14643)));
evalcond[1]=(cj0+(((-1.0)*r10*x14643))+((r11*x14639))+(((-1.0)*r12*x14638)));
evalcond[2]=((((-1.0)*x14636))+((r01*x14639))+(((-1.0)*r00*x14643))+(((-1.0)*r02*x14638)));
evalcond[3]=(((r21*x14629))+((x14628*x14640))+((sj3*x14630))+((r22*x14641))+(((-1.0)*r20*x14627*x14638))+x14633+x14637);
evalcond[4]=(((r21*x14627))+(((-1.0)*sj3*x14628*x14638))+(((-1.0)*r22*x14644))+((cj3*x14630))+((r20*x14626*x14629))+x14631+(((-1.0)*x14642)));
evalcond[5]=((((-1.0)*r00*x14627*x14638))+((cj0*x14631))+(((-1.0)*cj1*cj2*x14635))+((r00*x14634))+((r02*x14641))+((r01*x14629))+((gconst16*r01*x14640)));
evalcond[6]=(((gconst16*r11*x14640))+((r12*x14641))+((sj3*x14632))+((r11*x14629))+(((-1.0)*cj1*cj2*x14636))+((sj0*x14631))+(((-1.0)*r10*x14627*x14638)));
evalcond[7]=(((r00*x14626*x14629))+(((-1.0)*x14633*x14635))+(((-1.0)*r01*x14634*x14638))+(((-1.0)*r02*x14644))+(((-1.0)*x14635*x14637))+((r01*x14627))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14633*x14636))+(((-1.0)*r12*x14644))+(((-1.0)*r11*x14634*x14638))+(((-1.0)*x14636*x14637))+((r11*x14627))+((cj3*x14632))+((r10*x14626*x14629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14645=((1.0)*gconst17);
CheckValue<IkReal> x14646 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14646.valid){
continue;
}
CheckValue<IkReal> x14647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14645)))),-1);
if(!x14647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14646.value)+(((1.5707963267949)*(x14647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14648=IKsin(j4);
IkReal x14649=IKcos(j4);
IkReal x14650=(cj3*gconst17);
IkReal x14651=(gconst16*r21);
IkReal x14652=(gconst17*sj3);
IkReal x14653=(gconst16*r20);
IkReal x14654=(sj1*sj2);
IkReal x14655=(gconst16*r10);
IkReal x14656=(cj2*sj1);
IkReal x14657=(gconst16*sj3);
IkReal x14658=((1.0)*cj0);
IkReal x14659=((1.0)*sj0);
IkReal x14660=(cj1*sj2);
IkReal x14661=((1.0)*x14649);
IkReal x14662=(gconst16*x14648);
IkReal x14663=(cj3*x14649);
IkReal x14664=(cj3*x14648);
IkReal x14665=((1.0)*cj1*cj2);
IkReal x14666=((1.0)*gconst17*x14648);
IkReal x14667=((1.0)*sj3*x14648);
evalcond[0]=((((-1.0)*r22*x14661))+((x14648*x14651))+(((-1.0)*r20*x14666)));
evalcond[1]=(cj0+(((-1.0)*r10*x14666))+(((-1.0)*r12*x14661))+((r11*x14662)));
evalcond[2]=(((r01*x14662))+(((-1.0)*r00*x14666))+(((-1.0)*x14659))+(((-1.0)*r02*x14661)));
evalcond[3]=((((-1.0)*r20*x14650*x14661))+((sj3*x14653))+((r22*x14664))+x14656+x14660+((r21*x14652))+((x14651*x14663)));
evalcond[4]=((((-1.0)*sj3*x14651*x14661))+(((-1.0)*r22*x14667))+((r20*x14649*x14652))+x14654+((r21*x14650))+((cj3*x14653))+(((-1.0)*x14665)));
evalcond[5]=(((r02*x14664))+((gconst16*r01*x14663))+((cj0*x14654))+((r00*x14657))+((r01*x14652))+(((-1.0)*r00*x14650*x14661))+(((-1.0)*cj1*cj2*x14658)));
evalcond[6]=(((gconst16*r11*x14663))+(((-1.0)*r10*x14650*x14661))+((sj0*x14654))+((sj3*x14655))+(((-1.0)*cj1*cj2*x14659))+((r12*x14664))+((r11*x14652)));
evalcond[7]=((((-1.0)*x14656*x14658))+((r01*x14650))+(((-1.0)*x14658*x14660))+((r00*x14649*x14652))+(((-1.0)*r02*x14667))+((cj3*gconst16*r00))+(((-1.0)*r01*x14657*x14661)));
evalcond[8]=((((-1.0)*r11*x14657*x14661))+(((-1.0)*x14656*x14659))+(((-1.0)*x14659*x14660))+(((-1.0)*r12*x14667))+((r10*x14649*x14652))+((cj3*x14655))+((r11*x14650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14668=((1.0)*gconst17);
CheckValue<IkReal> x14669=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14668)))),-1);
if(!x14669.valid){
continue;
}
CheckValue<IkReal> x14670 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14668))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14669.value)))+(x14670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14671=IKsin(j4);
IkReal x14672=IKcos(j4);
IkReal x14673=(cj3*gconst17);
IkReal x14674=(gconst16*r21);
IkReal x14675=(gconst17*sj3);
IkReal x14676=(gconst16*r20);
IkReal x14677=(sj1*sj2);
IkReal x14678=(gconst16*r10);
IkReal x14679=(cj2*sj1);
IkReal x14680=(gconst16*sj3);
IkReal x14681=((1.0)*cj0);
IkReal x14682=((1.0)*sj0);
IkReal x14683=(cj1*sj2);
IkReal x14684=((1.0)*x14672);
IkReal x14685=(gconst16*x14671);
IkReal x14686=(cj3*x14672);
IkReal x14687=(cj3*x14671);
IkReal x14688=((1.0)*cj1*cj2);
IkReal x14689=((1.0)*gconst17*x14671);
IkReal x14690=((1.0)*sj3*x14671);
evalcond[0]=((((-1.0)*r20*x14689))+((x14671*x14674))+(((-1.0)*r22*x14684)));
evalcond[1]=(cj0+((r11*x14685))+(((-1.0)*r12*x14684))+(((-1.0)*r10*x14689)));
evalcond[2]=((((-1.0)*r00*x14689))+((r01*x14685))+(((-1.0)*r02*x14684))+(((-1.0)*x14682)));
evalcond[3]=(((x14674*x14686))+(((-1.0)*r20*x14673*x14684))+((r21*x14675))+x14683+x14679+((sj3*x14676))+((r22*x14687)));
evalcond[4]=(((r21*x14673))+((r20*x14672*x14675))+(((-1.0)*sj3*x14674*x14684))+(((-1.0)*x14688))+(((-1.0)*r22*x14690))+x14677+((cj3*x14676)));
evalcond[5]=(((r00*x14680))+(((-1.0)*cj1*cj2*x14681))+((cj0*x14677))+((r01*x14675))+((r02*x14687))+(((-1.0)*r00*x14673*x14684))+((gconst16*r01*x14686)));
evalcond[6]=(((sj0*x14677))+(((-1.0)*cj1*cj2*x14682))+((r12*x14687))+((gconst16*r11*x14686))+((r11*x14675))+((sj3*x14678))+(((-1.0)*r10*x14673*x14684)));
evalcond[7]=((((-1.0)*r02*x14690))+(((-1.0)*x14681*x14683))+((r01*x14673))+((r00*x14672*x14675))+(((-1.0)*r01*x14680*x14684))+((cj3*gconst16*r00))+(((-1.0)*x14679*x14681)));
evalcond[8]=(((r10*x14672*x14675))+(((-1.0)*x14682*x14683))+(((-1.0)*r11*x14680*x14684))+((cj3*x14678))+((r11*x14673))+(((-1.0)*r12*x14690))+(((-1.0)*x14679*x14682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14691=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14691;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14691);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14692=((1.0)*cj5);
IkReal x14693=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14692)));
j4eval[0]=x14693;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14692)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14694=cj5*cj5;
IkReal x14695=(cj3*r01);
IkReal x14696=(cj5*sj5);
IkReal x14697=((1.0)*cj3);
IkReal x14698=((((-1.0)*r02*r22*x14697))+((r20*x14695*x14696))+((r21*x14694*x14695))+(((-1.0)*r00*r20*x14694*x14697))+(((-1.0)*r21*x14695))+((cj3*r00*r21*x14696)));
j4eval[0]=x14698;
j4eval[1]=IKsign(x14698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14699=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14699;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14700=((1.0)*cj5);
IkReal x14701=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14700)));
j4eval[0]=x14701;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14700)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14702=cj5*cj5;
IkReal x14703=r01*r01;
IkReal x14704=(r01*sj5);
IkReal x14705=(cj5*r00);
IkReal x14706=((((2.0)*x14704*x14705))+(((-1.0)*x14703))+(((-1.0)*(r02*r02)))+(((-1.0)*x14702*(r00*r00)))+((x14702*x14703)));
j4eval[0]=x14706;
j4eval[1]=IKsign(x14706);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14704))+x14705))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14707=cj5*cj5;
IkReal x14708=r01*r01;
IkReal x14709=(r01*sj5);
IkReal x14710=(cj5*r00);
CheckValue<IkReal> x14711 = IKatan2WithCheck(IkReal(((((-1.0)*x14709))+x14710)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14711.valid){
continue;
}
CheckValue<IkReal> x14712=IKPowWithIntegerCheck(IKsign((((x14707*x14708))+(((-1.0)*x14708))+(((-1.0)*(r02*r02)))+(((2.0)*x14709*x14710))+(((-1.0)*x14707*(r00*r00))))),-1);
if(!x14712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14711.value)+(((1.5707963267949)*(x14712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14713=IKsin(j4);
IkReal x14714=IKcos(j4);
IkReal x14715=(cj5*r10);
IkReal x14716=(r01*sj5);
IkReal x14717=((1.0)*cj2);
IkReal x14718=(cj5*r00);
IkReal x14719=(cj5*r20);
IkReal x14720=((1.0)*x14714);
IkReal x14721=((1.0)*x14713);
IkReal x14722=(sj5*x14713);
evalcond[0]=(((r21*x14722))+(((-1.0)*x14719*x14721))+(((-1.0)*r22*x14720)));
evalcond[1]=((((-1.0)*r12*x14720))+(((-1.0)*x14715*x14721))+((r11*x14722)));
evalcond[2]=((((-1.0)*x14716*x14720))+((x14714*x14718))+(((-1.0)*r02*x14721)));
evalcond[3]=((-1.0)+(((-1.0)*x14718*x14721))+((x14713*x14716))+(((-1.0)*r02*x14720)));
evalcond[4]=((((-1.0)*r21*sj5*x14720))+((sj1*sj2))+(((-1.0)*r22*x14721))+((x14714*x14719))+(((-1.0)*cj1*x14717)));
evalcond[5]=((((-1.0)*sj1*x14717))+(((-1.0)*r12*x14721))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14720))+((x14714*x14715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14723=((1.0)*cj5);
CheckValue<IkReal> x14724 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14723))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14724.valid){
continue;
}
CheckValue<IkReal> x14725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14723))+(((-1.0)*r10*sj5)))),-1);
if(!x14725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14724.value)+(((1.5707963267949)*(x14725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14726=IKsin(j4);
IkReal x14727=IKcos(j4);
IkReal x14728=(cj5*r10);
IkReal x14729=(r01*sj5);
IkReal x14730=((1.0)*cj2);
IkReal x14731=(cj5*r00);
IkReal x14732=(cj5*r20);
IkReal x14733=((1.0)*x14727);
IkReal x14734=((1.0)*x14726);
IkReal x14735=(sj5*x14726);
evalcond[0]=((((-1.0)*x14732*x14734))+(((-1.0)*r22*x14733))+((r21*x14735)));
evalcond[1]=((((-1.0)*x14728*x14734))+(((-1.0)*r12*x14733))+((r11*x14735)));
evalcond[2]=((((-1.0)*x14729*x14733))+((x14727*x14731))+(((-1.0)*r02*x14734)));
evalcond[3]=((-1.0)+((x14726*x14729))+(((-1.0)*r02*x14733))+(((-1.0)*x14731*x14734)));
evalcond[4]=((((-1.0)*r21*sj5*x14733))+((x14727*x14732))+((sj1*sj2))+(((-1.0)*cj1*x14730))+(((-1.0)*r22*x14734)));
evalcond[5]=((((-1.0)*sj1*x14730))+(((-1.0)*r12*x14734))+((x14727*x14728))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14736=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14736.valid){
continue;
}
CheckValue<IkReal> x14737 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14736.value)))+(x14737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14738=IKsin(j4);
IkReal x14739=IKcos(j4);
IkReal x14740=(cj5*r10);
IkReal x14741=(r01*sj5);
IkReal x14742=((1.0)*cj2);
IkReal x14743=(cj5*r00);
IkReal x14744=(cj5*r20);
IkReal x14745=((1.0)*x14739);
IkReal x14746=((1.0)*x14738);
IkReal x14747=(sj5*x14738);
evalcond[0]=(((r21*x14747))+(((-1.0)*r22*x14745))+(((-1.0)*x14744*x14746)));
evalcond[1]=(((r11*x14747))+(((-1.0)*r12*x14745))+(((-1.0)*x14740*x14746)));
evalcond[2]=((((-1.0)*r02*x14746))+(((-1.0)*x14741*x14745))+((x14739*x14743)));
evalcond[3]=((-1.0)+(((-1.0)*x14743*x14746))+(((-1.0)*r02*x14745))+((x14738*x14741)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x14746))+(((-1.0)*cj1*x14742))+((x14739*x14744))+(((-1.0)*r21*sj5*x14745)));
evalcond[5]=((((-1.0)*r11*sj5*x14745))+(((-1.0)*cj1*sj2))+((x14739*x14740))+(((-1.0)*sj1*x14742))+(((-1.0)*r12*x14746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14748=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14748;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14749=((1.0)*cj5);
IkReal x14750=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14749)));
j4eval[0]=x14750;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14749))))));
j4eval[2]=IKsign(x14750);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14751=cj5*cj5;
IkReal x14752=r01*r01;
IkReal x14753=(cj5*r00);
IkReal x14754=(r01*sj5);
IkReal x14755=((((-2.0)*x14753*x14754))+((x14751*(r00*r00)))+(((-1.0)*x14751*x14752))+x14752+(r02*r02));
j4eval[0]=x14755;
j4eval[1]=IKsign(x14755);
j4eval[2]=((IKabs(r02))+(IKabs((x14754+(((-1.0)*x14753))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14756=cj5*cj5;
IkReal x14757=r01*r01;
IkReal x14758=(r01*sj5);
IkReal x14759=(cj5*r00);
CheckValue<IkReal> x14760 = IKatan2WithCheck(IkReal((x14758+(((-1.0)*x14759)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14760.valid){
continue;
}
CheckValue<IkReal> x14761=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14758*x14759))+x14757+((x14756*(r00*r00)))+(r02*r02)+(((-1.0)*x14756*x14757)))),-1);
if(!x14761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14760.value)+(((1.5707963267949)*(x14761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14762=IKcos(j4);
IkReal x14763=IKsin(j4);
IkReal x14764=(cj5*r00);
IkReal x14765=(cj5*r10);
IkReal x14766=(r21*sj5);
IkReal x14767=((1.0)*cj2);
IkReal x14768=(cj5*r20);
IkReal x14769=((1.0)*x14762);
IkReal x14770=((1.0)*x14763);
IkReal x14771=(sj5*x14763);
IkReal x14772=(sj5*x14762);
evalcond[0]=(((r01*x14772))+(((-1.0)*x14764*x14769))+((r02*x14763)));
evalcond[1]=((((-1.0)*x14768*x14770))+(((-1.0)*r22*x14769))+((x14763*x14766)));
evalcond[2]=((((-1.0)*x14765*x14770))+((r11*x14771))+(((-1.0)*r12*x14769)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14769))+((r01*x14771))+(((-1.0)*x14764*x14770)));
evalcond[4]=((((-1.0)*x14768*x14769))+((x14762*x14766))+((sj1*sj2))+(((-1.0)*cj1*x14767))+((r22*x14763)));
evalcond[5]=((((-1.0)*sj1*x14767))+((r11*x14772))+(((-1.0)*cj1*sj2))+((r12*x14763))+(((-1.0)*x14765*x14769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14773=((1.0)*cj5);
CheckValue<IkReal> x14774 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14774.valid){
continue;
}
CheckValue<IkReal> x14775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14773)))),-1);
if(!x14775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14774.value)+(((1.5707963267949)*(x14775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14776=IKcos(j4);
IkReal x14777=IKsin(j4);
IkReal x14778=(cj5*r00);
IkReal x14779=(cj5*r10);
IkReal x14780=(r21*sj5);
IkReal x14781=((1.0)*cj2);
IkReal x14782=(cj5*r20);
IkReal x14783=((1.0)*x14776);
IkReal x14784=((1.0)*x14777);
IkReal x14785=(sj5*x14777);
IkReal x14786=(sj5*x14776);
evalcond[0]=(((r01*x14786))+(((-1.0)*x14778*x14783))+((r02*x14777)));
evalcond[1]=((((-1.0)*x14782*x14784))+(((-1.0)*r22*x14783))+((x14777*x14780)));
evalcond[2]=((((-1.0)*x14779*x14784))+(((-1.0)*r12*x14783))+((r11*x14785)));
evalcond[3]=((-1.0)+((r01*x14785))+(((-1.0)*x14778*x14784))+(((-1.0)*r02*x14783)));
evalcond[4]=(((r22*x14777))+((sj1*sj2))+(((-1.0)*x14782*x14783))+(((-1.0)*cj1*x14781))+((x14776*x14780)));
evalcond[5]=(((r12*x14777))+(((-1.0)*x14779*x14783))+(((-1.0)*sj1*x14781))+(((-1.0)*cj1*sj2))+((r11*x14786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14787=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14787.valid){
continue;
}
CheckValue<IkReal> x14788 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14787.value)))+(x14788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14789=IKcos(j4);
IkReal x14790=IKsin(j4);
IkReal x14791=(cj5*r00);
IkReal x14792=(cj5*r10);
IkReal x14793=(r21*sj5);
IkReal x14794=((1.0)*cj2);
IkReal x14795=(cj5*r20);
IkReal x14796=((1.0)*x14789);
IkReal x14797=((1.0)*x14790);
IkReal x14798=(sj5*x14790);
IkReal x14799=(sj5*x14789);
evalcond[0]=((((-1.0)*x14791*x14796))+((r01*x14799))+((r02*x14790)));
evalcond[1]=(((x14790*x14793))+(((-1.0)*r22*x14796))+(((-1.0)*x14795*x14797)));
evalcond[2]=((((-1.0)*r12*x14796))+((r11*x14798))+(((-1.0)*x14792*x14797)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14796))+(((-1.0)*x14791*x14797))+((r01*x14798)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14794))+((r22*x14790))+(((-1.0)*x14795*x14796))+((x14789*x14793)));
evalcond[5]=((((-1.0)*sj1*x14794))+(((-1.0)*cj1*sj2))+((r11*x14799))+(((-1.0)*x14792*x14796))+((r12*x14790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14801 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14801)==0){
continue;
}
IkReal x14800=pow(x14801,-0.5);
CheckValue<IkReal> x14802 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14802.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14802.value));
IkReal gconst49=((-1.0)*r21*x14800);
IkReal gconst50=(r20*x14800);
CheckValue<IkReal> x14803 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14803.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14803.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14806 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14806.valid){
continue;
}
IkReal x14804=((-1.0)*(x14806.value));
IkReal x14805=x14800;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14804;
IkReal gconst48=x14804;
IkReal gconst49=((-1.0)*r21*x14805);
IkReal gconst50=(r20*x14805);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14809 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14809.valid){
continue;
}
IkReal x14807=((-1.0)*(x14809.value));
IkReal x14808=x14800;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14807;
IkReal gconst48=x14807;
IkReal gconst49=((-1.0)*r21*x14808);
IkReal gconst50=(r20*x14808);
CheckValue<IkReal> x14817=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14817.valid){
continue;
}
IkReal x14810=x14817.value;
IkReal x14811=(sj3*x14810);
IkReal x14812=(r11*x14811);
IkReal x14813=(r00*x14811);
IkReal x14814=(r01*x14811);
IkReal x14815=(r10*x14811);
IkReal x14816=(r20*r21*x14811);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14812))+((r10*x14813*(r20*r20)))+((r01*x14812*(r21*r21)))+((r10*r20*r21*x14814))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14818=gconst49*gconst49;
IkReal x14819=gconst50*gconst50;
IkReal x14820=((1.0)*cj3);
IkReal x14821=(gconst50*r01);
IkReal x14822=(gconst49*r10);
IkReal x14823=(r12*sj3);
IkReal x14824=(gconst49*r00);
IkReal x14825=(r00*sj3);
IkReal x14826=(r11*x14818);
IkReal x14827=(r10*x14819);
CheckValue<IkReal> x14828=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14824))+((cj3*x14821*x14822))+(((-1.0)*r02*r12*x14820))+(((-1.0)*r00*x14820*x14827))+(((-1.0)*r01*x14820*x14826)))),-1);
if(!x14828.valid){
continue;
}
CheckValue<IkReal> x14829 = IKatan2WithCheck(IkReal((((x14821*x14823))+((x14823*x14824)))),IkReal((((gconst49*r11*sj3*x14821))+((x14825*x14826))+(((-1.0)*gconst50*x14822*x14825))+(((-1.0)*r01*sj3*x14827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14828.value)))+(x14829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14830=IKsin(j4);
IkReal x14831=IKcos(j4);
IkReal x14832=(sj1*sj2);
IkReal x14833=(gconst50*r20);
IkReal x14834=(gconst50*sj3);
IkReal x14835=(cj3*r01);
IkReal x14836=(gconst50*r10);
IkReal x14837=(gconst49*sj3);
IkReal x14838=((1.0)*cj2);
IkReal x14839=(cj1*sj2);
IkReal x14840=(cj3*r11);
IkReal x14841=(gconst50*r00);
IkReal x14842=(cj3*r21);
IkReal x14843=(cj3*gconst49);
IkReal x14844=(cj1*x14838);
IkReal x14845=((1.0)*x14831);
IkReal x14846=((1.0)*x14830);
IkReal x14847=(gconst49*x14830);
IkReal x14848=(gconst49*x14831);
IkReal x14849=(cj3*x14830);
evalcond[0]=((((-1.0)*x14833*x14846))+(((-1.0)*r22*x14845))+((r21*x14847)));
evalcond[1]=((((-1.0)*x14836*x14846))+((r11*x14847))+(((-1.0)*r12*x14845)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14845))+((r01*x14847))+(((-1.0)*x14841*x14846)));
evalcond[3]=(((r02*x14849))+(((-1.0)*cj3*x14841*x14845))+((r01*x14834))+((r00*x14837))+((x14835*x14848)));
evalcond[4]=(((r00*x14831*x14834))+((gconst50*x14835))+(((-1.0)*r02*sj3*x14846))+(((-1.0)*r01*x14837*x14845))+((r00*x14843)));
evalcond[5]=(((cj2*sj1))+x14839+((r20*x14837))+((r21*x14834))+(((-1.0)*cj3*x14833*x14845))+((r22*x14849))+((x14842*x14848)));
evalcond[6]=(((x14840*x14848))+x14832+((r11*x14834))+((r12*x14849))+(((-1.0)*x14844))+((r10*x14837))+(((-1.0)*cj3*x14836*x14845)));
evalcond[7]=(((r20*x14843))+((sj3*x14831*x14833))+(((-1.0)*r21*x14837*x14845))+x14832+(((-1.0)*x14844))+((gconst50*x14842))+(((-1.0)*r22*sj3*x14846)));
evalcond[8]=((((-1.0)*x14839))+((r10*x14831*x14834))+(((-1.0)*r11*x14837*x14845))+(((-1.0)*sj1*x14838))+((gconst50*x14840))+((r10*x14843))+(((-1.0)*r12*sj3*x14846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14850=gconst49*gconst49;
IkReal x14851=gconst50*gconst50;
IkReal x14852=(cj3*r12);
IkReal x14853=(gconst49*r00);
IkReal x14854=(r01*r11);
IkReal x14855=(r00*r11);
IkReal x14856=(cj3*gconst50);
IkReal x14857=((1.0)*r01*r10);
IkReal x14858=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14859 = IKatan2WithCheck(IkReal((((x14852*x14853))+((gconst50*r01*x14852)))),IkReal((((cj3*x14850*x14855))+(((-1.0)*cj3*x14851*x14857))+(((-1.0)*r10*x14853*x14856))+((gconst49*x14854*x14856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14859.valid){
continue;
}
CheckValue<IkReal> x14860=IKPowWithIntegerCheck(IKsign((((sj3*x14850*x14854))+((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14853))+(((-1.0)*x14857*x14858))+((r00*r10*sj3*x14851)))),-1);
if(!x14860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14859.value)+(((1.5707963267949)*(x14860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14861=IKsin(j4);
IkReal x14862=IKcos(j4);
IkReal x14863=(sj1*sj2);
IkReal x14864=(gconst50*r20);
IkReal x14865=(gconst50*sj3);
IkReal x14866=(cj3*r01);
IkReal x14867=(gconst50*r10);
IkReal x14868=(gconst49*sj3);
IkReal x14869=((1.0)*cj2);
IkReal x14870=(cj1*sj2);
IkReal x14871=(cj3*r11);
IkReal x14872=(gconst50*r00);
IkReal x14873=(cj3*r21);
IkReal x14874=(cj3*gconst49);
IkReal x14875=(cj1*x14869);
IkReal x14876=((1.0)*x14862);
IkReal x14877=((1.0)*x14861);
IkReal x14878=(gconst49*x14861);
IkReal x14879=(gconst49*x14862);
IkReal x14880=(cj3*x14861);
evalcond[0]=((((-1.0)*x14864*x14877))+(((-1.0)*r22*x14876))+((r21*x14878)));
evalcond[1]=(((r11*x14878))+(((-1.0)*x14867*x14877))+(((-1.0)*r12*x14876)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14876))+(((-1.0)*x14872*x14877))+((r01*x14878)));
evalcond[3]=(((x14866*x14879))+(((-1.0)*cj3*x14872*x14876))+((r01*x14865))+((r00*x14868))+((r02*x14880)));
evalcond[4]=((((-1.0)*r01*x14868*x14876))+((r00*x14862*x14865))+((r00*x14874))+((gconst50*x14866))+(((-1.0)*r02*sj3*x14877)));
evalcond[5]=(((cj2*sj1))+((r20*x14868))+((x14873*x14879))+((r22*x14880))+x14870+(((-1.0)*cj3*x14864*x14876))+((r21*x14865)));
evalcond[6]=(((x14871*x14879))+((r12*x14880))+x14863+((r10*x14868))+(((-1.0)*x14875))+((r11*x14865))+(((-1.0)*cj3*x14867*x14876)));
evalcond[7]=((((-1.0)*r21*x14868*x14876))+((sj3*x14862*x14864))+(((-1.0)*r22*sj3*x14877))+x14863+((gconst50*x14873))+(((-1.0)*x14875))+((r20*x14874)));
evalcond[8]=(((r10*x14874))+(((-1.0)*r12*sj3*x14877))+(((-1.0)*sj1*x14869))+((gconst50*x14871))+(((-1.0)*r11*x14868*x14876))+((r10*x14862*x14865))+(((-1.0)*x14870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14881=((1.0)*gconst50);
CheckValue<IkReal> x14882 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14882.valid){
continue;
}
CheckValue<IkReal> x14883=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14881)))),-1);
if(!x14883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14882.value)+(((1.5707963267949)*(x14883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14884=IKsin(j4);
IkReal x14885=IKcos(j4);
IkReal x14886=(sj1*sj2);
IkReal x14887=(gconst50*r20);
IkReal x14888=(gconst50*sj3);
IkReal x14889=(cj3*r01);
IkReal x14890=(gconst50*r10);
IkReal x14891=(gconst49*sj3);
IkReal x14892=((1.0)*cj2);
IkReal x14893=(cj1*sj2);
IkReal x14894=(cj3*r11);
IkReal x14895=(gconst50*r00);
IkReal x14896=(cj3*r21);
IkReal x14897=(cj3*gconst49);
IkReal x14898=(cj1*x14892);
IkReal x14899=((1.0)*x14885);
IkReal x14900=((1.0)*x14884);
IkReal x14901=(gconst49*x14884);
IkReal x14902=(gconst49*x14885);
IkReal x14903=(cj3*x14884);
evalcond[0]=(((r21*x14901))+(((-1.0)*r22*x14899))+(((-1.0)*x14887*x14900)));
evalcond[1]=(((r11*x14901))+(((-1.0)*x14890*x14900))+(((-1.0)*r12*x14899)));
evalcond[2]=((-1.0)+((r01*x14901))+(((-1.0)*x14895*x14900))+(((-1.0)*r02*x14899)));
evalcond[3]=(((r00*x14891))+((r02*x14903))+((x14889*x14902))+((r01*x14888))+(((-1.0)*cj3*x14895*x14899)));
evalcond[4]=(((r00*x14897))+((r00*x14885*x14888))+(((-1.0)*r02*sj3*x14900))+((gconst50*x14889))+(((-1.0)*r01*x14891*x14899)));
evalcond[5]=(((r22*x14903))+((cj2*sj1))+(((-1.0)*cj3*x14887*x14899))+x14893+((r21*x14888))+((r20*x14891))+((x14896*x14902)));
evalcond[6]=(((r10*x14891))+((r11*x14888))+((x14894*x14902))+(((-1.0)*cj3*x14890*x14899))+x14886+((r12*x14903))+(((-1.0)*x14898)));
evalcond[7]=(x14886+(((-1.0)*r21*x14891*x14899))+((gconst50*x14896))+((sj3*x14885*x14887))+(((-1.0)*r22*sj3*x14900))+(((-1.0)*x14898))+((r20*x14897)));
evalcond[8]=((((-1.0)*sj1*x14892))+((r10*x14897))+((r10*x14885*x14888))+((gconst50*x14894))+(((-1.0)*r11*x14891*x14899))+(((-1.0)*x14893))+(((-1.0)*r12*sj3*x14900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14905 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14905)==0){
continue;
}
IkReal x14904=pow(x14905,-0.5);
CheckValue<IkReal> x14906 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14906.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14906.value))));
IkReal gconst52=((1.0)*r21*x14904);
IkReal gconst53=((-1.0)*r20*x14904);
CheckValue<IkReal> x14907 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14907.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14907.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14910 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14910.valid){
continue;
}
IkReal x14908=((1.0)*(x14910.value));
IkReal x14909=x14904;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14908)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14908)));
IkReal gconst52=((1.0)*r21*x14909);
IkReal gconst53=((-1.0)*r20*x14909);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14913 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14913.valid){
continue;
}
IkReal x14911=((1.0)*(x14913.value));
IkReal x14912=x14904;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14911)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14911)));
IkReal gconst52=((1.0)*r21*x14912);
IkReal gconst53=((-1.0)*r20*x14912);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14916 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14916.valid){
continue;
}
IkReal x14914=((1.0)*(x14916.value));
IkReal x14915=x14904;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14914)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14914)));
IkReal gconst52=((1.0)*r21*x14915);
IkReal gconst53=((-1.0)*r20*x14915);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14917=gconst52*gconst52;
IkReal x14918=gconst53*gconst53;
IkReal x14919=(gconst53*r01);
IkReal x14920=(cj3*r20);
IkReal x14921=(r22*sj3);
IkReal x14922=((1.0)*cj3);
IkReal x14923=(gconst52*sj3);
IkReal x14924=((1.0)*r00);
IkReal x14925=(gconst52*r00);
IkReal x14926=(r21*x14917);
CheckValue<IkReal> x14927=IKPowWithIntegerCheck(IKsign((((gconst52*x14919*x14920))+((cj3*gconst53*r21*x14925))+(((-1.0)*r02*r22*x14922))+(((-1.0)*x14918*x14920*x14924))+(((-1.0)*r01*x14922*x14926)))),-1);
if(!x14927.valid){
continue;
}
CheckValue<IkReal> x14928 = IKatan2WithCheck(IkReal((((x14921*x14925))+((x14919*x14921)))),IkReal((((r00*sj3*x14926))+(((-1.0)*gconst53*r20*x14923*x14924))+(((-1.0)*r01*r20*sj3*x14918))+((r21*x14919*x14923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14927.value)))+(x14928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14929=IKsin(j4);
IkReal x14930=IKcos(j4);
IkReal x14931=(sj1*sj2);
IkReal x14932=((1.0)*cj1);
IkReal x14933=(cj3*gconst52);
IkReal x14934=(gconst53*sj3);
IkReal x14935=(cj3*gconst53);
IkReal x14936=(cj2*sj1);
IkReal x14937=(gconst52*sj3);
IkReal x14938=(cj2*x14932);
IkReal x14939=((1.0)*x14930);
IkReal x14940=((1.0)*x14929);
IkReal x14941=(gconst52*x14929);
IkReal x14942=(cj3*x14929);
evalcond[0]=((((-1.0)*r22*x14939))+(((-1.0)*gconst53*r20*x14940))+((r21*x14941)));
evalcond[1]=((((-1.0)*r12*x14939))+(((-1.0)*gconst53*r10*x14940))+((r11*x14941)));
evalcond[2]=((-1.0)+((r01*x14941))+(((-1.0)*r02*x14939))+(((-1.0)*gconst53*r00*x14940)));
evalcond[3]=((((-1.0)*r00*x14935*x14939))+((r01*x14934))+((r00*x14937))+((r02*x14942))+((r01*x14930*x14933)));
evalcond[4]=((((-1.0)*r02*sj3*x14940))+((r01*x14935))+((r00*x14933))+(((-1.0)*r01*x14937*x14939))+((r00*x14930*x14934)));
evalcond[5]=(x14936+((r21*x14930*x14933))+((r22*x14942))+((cj1*sj2))+((r21*x14934))+(((-1.0)*r20*x14935*x14939))+((r20*x14937)));
evalcond[6]=((((-1.0)*r10*x14935*x14939))+((r12*x14942))+x14931+((r10*x14937))+((r11*x14930*x14933))+(((-1.0)*x14938))+((r11*x14934)));
evalcond[7]=(x14931+(((-1.0)*r21*x14937*x14939))+((r21*x14935))+(((-1.0)*x14938))+(((-1.0)*r22*sj3*x14940))+((r20*x14930*x14934))+((r20*x14933)));
evalcond[8]=((((-1.0)*x14936))+(((-1.0)*r12*sj3*x14940))+((r10*x14933))+(((-1.0)*sj2*x14932))+((r10*x14930*x14934))+((r11*x14935))+(((-1.0)*r11*x14937*x14939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14943=((1.0)*gconst53);
CheckValue<IkReal> x14944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14943))+(((-1.0)*gconst52*r10)))),-1);
if(!x14944.valid){
continue;
}
CheckValue<IkReal> x14945 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14943))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14944.value)))+(x14945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14946=IKsin(j4);
IkReal x14947=IKcos(j4);
IkReal x14948=(sj1*sj2);
IkReal x14949=((1.0)*cj1);
IkReal x14950=(cj3*gconst52);
IkReal x14951=(gconst53*sj3);
IkReal x14952=(cj3*gconst53);
IkReal x14953=(cj2*sj1);
IkReal x14954=(gconst52*sj3);
IkReal x14955=(cj2*x14949);
IkReal x14956=((1.0)*x14947);
IkReal x14957=((1.0)*x14946);
IkReal x14958=(gconst52*x14946);
IkReal x14959=(cj3*x14946);
evalcond[0]=((((-1.0)*gconst53*r20*x14957))+(((-1.0)*r22*x14956))+((r21*x14958)));
evalcond[1]=((((-1.0)*r12*x14956))+(((-1.0)*gconst53*r10*x14957))+((r11*x14958)));
evalcond[2]=((-1.0)+((r01*x14958))+(((-1.0)*r02*x14956))+(((-1.0)*gconst53*r00*x14957)));
evalcond[3]=(((r01*x14947*x14950))+((r01*x14951))+(((-1.0)*r00*x14952*x14956))+((r00*x14954))+((r02*x14959)));
evalcond[4]=((((-1.0)*r01*x14954*x14956))+(((-1.0)*r02*sj3*x14957))+((r01*x14952))+((r00*x14950))+((r00*x14947*x14951)));
evalcond[5]=((((-1.0)*r20*x14952*x14956))+x14953+((cj1*sj2))+((r22*x14959))+((r21*x14947*x14950))+((r21*x14951))+((r20*x14954)));
evalcond[6]=((((-1.0)*r10*x14952*x14956))+((r12*x14959))+x14948+((r11*x14947*x14950))+((r10*x14954))+(((-1.0)*x14955))+((r11*x14951)));
evalcond[7]=((((-1.0)*r21*x14954*x14956))+x14948+(((-1.0)*x14955))+((r20*x14947*x14951))+(((-1.0)*r22*sj3*x14957))+((r21*x14952))+((r20*x14950)));
evalcond[8]=((((-1.0)*sj2*x14949))+((r10*x14950))+(((-1.0)*r11*x14954*x14956))+(((-1.0)*r12*sj3*x14957))+((r10*x14947*x14951))+(((-1.0)*x14953))+((r11*x14952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14960 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14960.valid){
continue;
}
CheckValue<IkReal> x14961=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14960.value)+(((1.5707963267949)*(x14961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14962=IKsin(j4);
IkReal x14963=IKcos(j4);
IkReal x14964=(sj1*sj2);
IkReal x14965=((1.0)*cj1);
IkReal x14966=(cj3*gconst52);
IkReal x14967=(gconst53*sj3);
IkReal x14968=(cj3*gconst53);
IkReal x14969=(cj2*sj1);
IkReal x14970=(gconst52*sj3);
IkReal x14971=(cj2*x14965);
IkReal x14972=((1.0)*x14963);
IkReal x14973=((1.0)*x14962);
IkReal x14974=(gconst52*x14962);
IkReal x14975=(cj3*x14962);
evalcond[0]=((((-1.0)*gconst53*r20*x14973))+(((-1.0)*r22*x14972))+((r21*x14974)));
evalcond[1]=((((-1.0)*r12*x14972))+((r11*x14974))+(((-1.0)*gconst53*r10*x14973)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14973))+((r01*x14974))+(((-1.0)*r02*x14972)));
evalcond[3]=(((r01*x14967))+(((-1.0)*r00*x14968*x14972))+((r02*x14975))+((r01*x14963*x14966))+((r00*x14970)));
evalcond[4]=(((r01*x14968))+(((-1.0)*r01*x14970*x14972))+(((-1.0)*r02*sj3*x14973))+((r00*x14963*x14967))+((r00*x14966)));
evalcond[5]=(((r21*x14963*x14966))+((r22*x14975))+x14969+((cj1*sj2))+(((-1.0)*r20*x14968*x14972))+((r20*x14970))+((r21*x14967)));
evalcond[6]=(((r11*x14963*x14966))+(((-1.0)*r10*x14968*x14972))+x14964+((r12*x14975))+(((-1.0)*x14971))+((r11*x14967))+((r10*x14970)));
evalcond[7]=(((r20*x14963*x14967))+(((-1.0)*r22*sj3*x14973))+x14964+(((-1.0)*x14971))+(((-1.0)*r21*x14970*x14972))+((r20*x14966))+((r21*x14968)));
evalcond[8]=((((-1.0)*sj2*x14965))+(((-1.0)*x14969))+((r11*x14968))+(((-1.0)*r11*x14970*x14972))+((r10*x14966))+(((-1.0)*r12*sj3*x14973))+((r10*x14963*x14967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14976=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14976);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14976);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14977=(r01*sj5);
IkReal x14978=((1.0)*cj5*r00);
j4eval[0]=(x14977+(((-1.0)*x14978)));
j4eval[1]=(((cj3*x14977))+(((-1.0)*cj3*x14978)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14979=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14979);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14979);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14980=(cj5*r00);
IkReal x14981=(r01*sj5);
j4eval[0]=(x14981+(((-1.0)*x14980)));
j4eval[1]=(((sj3*x14980))+(((-1.0)*sj3*x14981)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14982=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14982);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14982);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14983=((1.0)*r00);
CheckValue<IkReal> x14984=IKPowWithIntegerCheck(cj3,-1);
if(!x14984.valid){
continue;
}
CheckValue<IkReal> x14985=IKPowWithIntegerCheck(r22,-1);
if(!x14985.valid){
continue;
}
CheckValue<IkReal> x14986=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14983))),-1);
if(!x14986.valid){
continue;
}
if( IKabs(((x14984.value)*(x14985.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14986.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14983)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14984.value)*(x14985.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14986.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14983))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14984.value)*(x14985.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14986.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14983))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14987=IKsin(j4);
IkReal x14988=IKcos(j4);
IkReal x14989=(sj1*sj2);
IkReal x14990=(cj5*sj3);
IkReal x14991=(r11*sj5);
IkReal x14992=(cj3*cj5);
IkReal x14993=((1.0)*cj1);
IkReal x14994=(cj3*sj5);
IkReal x14995=(sj3*sj5);
IkReal x14996=(cj2*sj1);
IkReal x14997=(r01*sj5);
IkReal x14998=((1.0)*sj3);
IkReal x14999=(cj2*x14993);
IkReal x15000=(r10*x14988);
IkReal x15001=(r22*x14987);
IkReal x15002=(cj3*x14988);
IkReal x15003=((1.0)*cj5*x14987);
evalcond[0]=((-1.0)*r22*x14988);
evalcond[1]=(x14996+((cj1*sj2))+((cj3*x15001)));
evalcond[2]=(((x14987*x14991))+(((-1.0)*r10*x15003)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15003))+((x14987*x14997)));
evalcond[4]=((((-1.0)*x14999))+x14989+(((-1.0)*x14998*x15001)));
evalcond[5]=((((-1.0)*r00*x14988*x14992))+((r00*x14995))+((r01*x14990))+((r01*x14988*x14994)));
evalcond[6]=((((-1.0)*r01*x14988*x14995))+((r00*x14988*x14990))+((r00*x14994))+((r01*x14992)));
evalcond[7]=((((-1.0)*x14999))+x14989+((r10*x14995))+((r11*x14990))+(((-1.0)*x14992*x15000))+((x14991*x15002)));
evalcond[8]=(((r10*x14994))+((r11*x14992))+(((-1.0)*x14988*x14991*x14998))+(((-1.0)*sj2*x14993))+((x14990*x15000))+(((-1.0)*x14996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15004=((1.0)*cj3);
IkReal x15005=(cj5*r00);
IkReal x15006=(r01*sj5);
CheckValue<IkReal> x15007=IKPowWithIntegerCheck(((((-1.0)*x15005))+x15006),-1);
if(!x15007.valid){
continue;
}
CheckValue<IkReal> x15008=IKPowWithIntegerCheck((((sj3*x15005))+(((-1.0)*sj3*x15006))),-1);
if(!x15008.valid){
continue;
}
if( IKabs(x15007.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15008.value)*(((((-1.0)*cj5*r01*x15004))+(((-1.0)*r00*sj5*x15004)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15007.value)+IKsqr(((x15008.value)*(((((-1.0)*cj5*r01*x15004))+(((-1.0)*r00*sj5*x15004))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15007.value, ((x15008.value)*(((((-1.0)*cj5*r01*x15004))+(((-1.0)*r00*sj5*x15004))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15009=IKsin(j4);
IkReal x15010=IKcos(j4);
IkReal x15011=(sj1*sj2);
IkReal x15012=(cj5*sj3);
IkReal x15013=(r11*sj5);
IkReal x15014=(cj3*cj5);
IkReal x15015=((1.0)*cj1);
IkReal x15016=(cj3*sj5);
IkReal x15017=(sj3*sj5);
IkReal x15018=(cj2*sj1);
IkReal x15019=(r01*sj5);
IkReal x15020=((1.0)*sj3);
IkReal x15021=(cj2*x15015);
IkReal x15022=(r10*x15010);
IkReal x15023=(r22*x15009);
IkReal x15024=(cj3*x15010);
IkReal x15025=((1.0)*cj5*x15009);
evalcond[0]=((-1.0)*r22*x15010);
evalcond[1]=(((cj1*sj2))+x15018+((cj3*x15023)));
evalcond[2]=(((x15009*x15013))+(((-1.0)*r10*x15025)));
evalcond[3]=((-1.0)+((x15009*x15019))+(((-1.0)*r00*x15025)));
evalcond[4]=(x15011+(((-1.0)*x15021))+(((-1.0)*x15020*x15023)));
evalcond[5]=(((r00*x15017))+(((-1.0)*r00*x15010*x15014))+((r01*x15012))+((r01*x15010*x15016)));
evalcond[6]=(((r00*x15010*x15012))+(((-1.0)*r01*x15010*x15017))+((r00*x15016))+((r01*x15014)));
evalcond[7]=((((-1.0)*x15014*x15022))+((x15013*x15024))+((r10*x15017))+x15011+(((-1.0)*x15021))+((r11*x15012)));
evalcond[8]=((((-1.0)*x15018))+((x15012*x15022))+((r10*x15016))+((r11*x15014))+(((-1.0)*sj2*x15015))+(((-1.0)*x15010*x15013*x15020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15026=((1.0)*sj3);
IkReal x15027=(r01*sj5);
IkReal x15028=((1.0)*cj5*r00);
CheckValue<IkReal> x15029=IKPowWithIntegerCheck((x15027+(((-1.0)*x15028))),-1);
if(!x15029.valid){
continue;
}
CheckValue<IkReal> x15030=IKPowWithIntegerCheck(((((-1.0)*cj3*x15028))+((cj3*x15027))),-1);
if(!x15030.valid){
continue;
}
if( IKabs(x15029.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15030.value)*(((((-1.0)*r00*sj5*x15026))+(((-1.0)*cj5*r01*x15026)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15029.value)+IKsqr(((x15030.value)*(((((-1.0)*r00*sj5*x15026))+(((-1.0)*cj5*r01*x15026))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15029.value, ((x15030.value)*(((((-1.0)*r00*sj5*x15026))+(((-1.0)*cj5*r01*x15026))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15031=IKsin(j4);
IkReal x15032=IKcos(j4);
IkReal x15033=(sj1*sj2);
IkReal x15034=(cj5*sj3);
IkReal x15035=(r11*sj5);
IkReal x15036=(cj3*cj5);
IkReal x15037=((1.0)*cj1);
IkReal x15038=(cj3*sj5);
IkReal x15039=(sj3*sj5);
IkReal x15040=(cj2*sj1);
IkReal x15041=(r01*sj5);
IkReal x15042=((1.0)*sj3);
IkReal x15043=(cj2*x15037);
IkReal x15044=(r10*x15032);
IkReal x15045=(r22*x15031);
IkReal x15046=(cj3*x15032);
IkReal x15047=((1.0)*cj5*x15031);
evalcond[0]=((-1.0)*r22*x15032);
evalcond[1]=(((cj3*x15045))+((cj1*sj2))+x15040);
evalcond[2]=(((x15031*x15035))+(((-1.0)*r10*x15047)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15047))+((x15031*x15041)));
evalcond[4]=((((-1.0)*x15043))+(((-1.0)*x15042*x15045))+x15033);
evalcond[5]=(((r00*x15039))+((r01*x15034))+((r01*x15032*x15038))+(((-1.0)*r00*x15032*x15036)));
evalcond[6]=(((r00*x15038))+((r01*x15036))+((r00*x15032*x15034))+(((-1.0)*r01*x15032*x15039)));
evalcond[7]=((((-1.0)*x15043))+x15033+((r10*x15039))+((r11*x15034))+(((-1.0)*x15036*x15044))+((x15035*x15046)));
evalcond[8]=((((-1.0)*sj2*x15037))+((r10*x15038))+((r11*x15036))+((x15034*x15044))+(((-1.0)*x15040))+(((-1.0)*x15032*x15035*x15042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15048=cj5*cj5;
IkReal x15049=(cj3*r20);
IkReal x15050=(r21*sj3);
IkReal x15051=((1.0)*cj3);
IkReal x15052=(r01*r21);
IkReal x15053=(r01*sj3);
IkReal x15054=(r00*sj5);
IkReal x15055=(cj5*r01*sj5);
IkReal x15056=((1.0)*x15048);
CheckValue<IkReal> x15057=IKPowWithIntegerCheck(IKsign((((x15049*x15055))+((cj3*cj5*r21*x15054))+(((-1.0)*r02*r22*x15051))+(((-1.0)*r00*x15049*x15056))+((cj3*x15048*x15052))+(((-1.0)*x15051*x15052)))),-1);
if(!x15057.valid){
continue;
}
CheckValue<IkReal> x15058 = IKatan2WithCheck(IkReal((((r22*sj3*x15054))+((cj5*r22*x15053)))),IkReal((((x15050*x15055))+(((-1.0)*r00*x15050*x15056))+(((-1.0)*cj5*r20*sj3*x15054))+(((-1.0)*r20*x15053*x15056))+((r00*x15050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15057.value)))+(x15058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15059=IKsin(j4);
IkReal x15060=IKcos(j4);
IkReal x15061=(sj1*sj2);
IkReal x15062=(r11*sj5);
IkReal x15063=(cj5*r10);
IkReal x15064=(cj5*r01);
IkReal x15065=(cj5*r00);
IkReal x15066=((1.0)*cj1);
IkReal x15067=(cj3*sj5);
IkReal x15068=(r21*sj5);
IkReal x15069=(cj5*sj3);
IkReal x15070=(sj3*sj5);
IkReal x15071=(cj2*sj1);
IkReal x15072=(r01*sj5);
IkReal x15073=(cj3*cj5);
IkReal x15074=(cj5*r20);
IkReal x15075=(cj2*x15066);
IkReal x15076=((1.0)*x15060);
IkReal x15077=((1.0)*x15059);
IkReal x15078=(cj3*x15060);
IkReal x15079=(sj3*x15060);
IkReal x15080=(cj3*x15059);
evalcond[0]=(((x15059*x15068))+(((-1.0)*r22*x15076))+(((-1.0)*x15074*x15077)));
evalcond[1]=((((-1.0)*r12*x15076))+((x15059*x15062))+(((-1.0)*x15063*x15077)));
evalcond[2]=((-1.0)+((x15059*x15072))+(((-1.0)*r02*x15076))+(((-1.0)*x15065*x15077)));
evalcond[3]=(((sj3*x15064))+((r01*x15060*x15067))+((r02*x15080))+((r00*x15070))+(((-1.0)*cj3*x15065*x15076)));
evalcond[4]=(((x15065*x15079))+((r00*x15067))+((cj3*x15064))+(((-1.0)*r01*x15070*x15076))+(((-1.0)*r02*sj3*x15077)));
evalcond[5]=(((r21*x15069))+(((-1.0)*r20*x15073*x15076))+((cj1*sj2))+((r22*x15080))+x15071+((r20*x15070))+((r21*x15060*x15067)));
evalcond[6]=((((-1.0)*x15075))+((r12*x15080))+((x15062*x15078))+x15061+((r11*x15069))+(((-1.0)*cj3*x15063*x15076))+((r10*x15070)));
evalcond[7]=((((-1.0)*x15075))+(((-1.0)*r22*sj3*x15077))+((r20*x15067))+x15061+((r21*x15073))+((r20*x15060*x15069))+(((-1.0)*sj3*x15068*x15076)));
evalcond[8]=((((-1.0)*sj2*x15066))+(((-1.0)*sj3*x15062*x15076))+(((-1.0)*r12*sj3*x15077))+((x15063*x15079))+((r11*x15073))+(((-1.0)*x15071))+((r10*x15067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15081=((1.0)*cj5);
CheckValue<IkReal> x15082 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15082.valid){
continue;
}
CheckValue<IkReal> x15083=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15081)))),-1);
if(!x15083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15082.value)+(((1.5707963267949)*(x15083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15084=IKsin(j4);
IkReal x15085=IKcos(j4);
IkReal x15086=(sj1*sj2);
IkReal x15087=(r11*sj5);
IkReal x15088=(cj5*r10);
IkReal x15089=(cj5*r01);
IkReal x15090=(cj5*r00);
IkReal x15091=((1.0)*cj1);
IkReal x15092=(cj3*sj5);
IkReal x15093=(r21*sj5);
IkReal x15094=(cj5*sj3);
IkReal x15095=(sj3*sj5);
IkReal x15096=(cj2*sj1);
IkReal x15097=(r01*sj5);
IkReal x15098=(cj3*cj5);
IkReal x15099=(cj5*r20);
IkReal x15100=(cj2*x15091);
IkReal x15101=((1.0)*x15085);
IkReal x15102=((1.0)*x15084);
IkReal x15103=(cj3*x15085);
IkReal x15104=(sj3*x15085);
IkReal x15105=(cj3*x15084);
evalcond[0]=((((-1.0)*x15099*x15102))+(((-1.0)*r22*x15101))+((x15084*x15093)));
evalcond[1]=((((-1.0)*x15088*x15102))+(((-1.0)*r12*x15101))+((x15084*x15087)));
evalcond[2]=((-1.0)+((x15084*x15097))+(((-1.0)*r02*x15101))+(((-1.0)*x15090*x15102)));
evalcond[3]=((((-1.0)*cj3*x15090*x15101))+((r00*x15095))+((sj3*x15089))+((r02*x15105))+((r01*x15085*x15092)));
evalcond[4]=(((x15090*x15104))+((r00*x15092))+(((-1.0)*r02*sj3*x15102))+(((-1.0)*r01*x15095*x15101))+((cj3*x15089)));
evalcond[5]=(((r21*x15085*x15092))+((r21*x15094))+((r22*x15105))+(((-1.0)*r20*x15098*x15101))+((r20*x15095))+((cj1*sj2))+x15096);
evalcond[6]=(((r12*x15105))+(((-1.0)*cj3*x15088*x15101))+x15086+((r11*x15094))+((r10*x15095))+(((-1.0)*x15100))+((x15087*x15103)));
evalcond[7]=(((r20*x15085*x15094))+((r21*x15098))+((r20*x15092))+x15086+(((-1.0)*sj3*x15093*x15101))+(((-1.0)*r22*sj3*x15102))+(((-1.0)*x15100)));
evalcond[8]=(((x15088*x15104))+(((-1.0)*sj3*x15087*x15101))+(((-1.0)*x15096))+((r11*x15098))+((r10*x15092))+(((-1.0)*r12*sj3*x15102))+(((-1.0)*sj2*x15091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15106=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15106.valid){
continue;
}
CheckValue<IkReal> x15107 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15106.value)))+(x15107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15108=IKsin(j4);
IkReal x15109=IKcos(j4);
IkReal x15110=(sj1*sj2);
IkReal x15111=(r11*sj5);
IkReal x15112=(cj5*r10);
IkReal x15113=(cj5*r01);
IkReal x15114=(cj5*r00);
IkReal x15115=((1.0)*cj1);
IkReal x15116=(cj3*sj5);
IkReal x15117=(r21*sj5);
IkReal x15118=(cj5*sj3);
IkReal x15119=(sj3*sj5);
IkReal x15120=(cj2*sj1);
IkReal x15121=(r01*sj5);
IkReal x15122=(cj3*cj5);
IkReal x15123=(cj5*r20);
IkReal x15124=(cj2*x15115);
IkReal x15125=((1.0)*x15109);
IkReal x15126=((1.0)*x15108);
IkReal x15127=(cj3*x15109);
IkReal x15128=(sj3*x15109);
IkReal x15129=(cj3*x15108);
evalcond[0]=((((-1.0)*x15123*x15126))+((x15108*x15117))+(((-1.0)*r22*x15125)));
evalcond[1]=((((-1.0)*x15112*x15126))+((x15108*x15111))+(((-1.0)*r12*x15125)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15125))+(((-1.0)*x15114*x15126))+((x15108*x15121)));
evalcond[3]=(((r01*x15109*x15116))+((sj3*x15113))+((r00*x15119))+((r02*x15129))+(((-1.0)*cj3*x15114*x15125)));
evalcond[4]=((((-1.0)*r02*sj3*x15126))+((x15114*x15128))+((cj3*x15113))+(((-1.0)*r01*x15119*x15125))+((r00*x15116)));
evalcond[5]=((((-1.0)*r20*x15122*x15125))+((r20*x15119))+((cj1*sj2))+((r22*x15129))+x15120+((r21*x15109*x15116))+((r21*x15118)));
evalcond[6]=(((r10*x15119))+(((-1.0)*x15124))+((x15111*x15127))+(((-1.0)*cj3*x15112*x15125))+((r11*x15118))+x15110+((r12*x15129)));
evalcond[7]=(((r20*x15109*x15118))+((r21*x15122))+(((-1.0)*x15124))+((r20*x15116))+(((-1.0)*r22*sj3*x15126))+(((-1.0)*sj3*x15117*x15125))+x15110);
evalcond[8]=((((-1.0)*sj2*x15115))+((r10*x15116))+(((-1.0)*r12*sj3*x15126))+((x15112*x15128))+(((-1.0)*sj3*x15111*x15125))+(((-1.0)*x15120))+((r11*x15122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15130=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15130;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15131=((1.0)*cj5);
IkReal x15132=((((-1.0)*r21*x15131))+(((-1.0)*r20*sj5)));
j4eval[0]=x15132;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15131))+((r11*sj5))))));
j4eval[2]=IKsign(x15132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15133=cj5*cj5;
IkReal x15134=(cj3*r01);
IkReal x15135=(cj5*sj5);
IkReal x15136=((1.0)*cj3);
IkReal x15137=((((-1.0)*r00*r20*x15133*x15136))+(((-1.0)*r02*r22*x15136))+((r20*x15134*x15135))+((cj3*r00*r21*x15135))+((r21*x15133*x15134))+(((-1.0)*r21*x15134)));
j4eval[0]=x15137;
j4eval[1]=IKsign(x15137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15138=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15138;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15139=((1.0)*cj5);
IkReal x15140=((((-1.0)*r21*x15139))+(((-1.0)*r20*sj5)));
j4eval[0]=x15140;
j4eval[1]=((IKabs(((((-1.0)*r10*x15139))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15141=cj5*cj5;
IkReal x15142=r01*r01;
IkReal x15143=(cj5*r00);
IkReal x15144=(r01*sj5);
IkReal x15145=((((-1.0)*x15141*x15142))+((x15141*(r00*r00)))+x15142+(((-2.0)*x15143*x15144))+(r02*r02));
j4eval[0]=x15145;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15144))+x15143))));
j4eval[2]=IKsign(x15145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15146=cj5*cj5;
IkReal x15147=r01*r01;
IkReal x15148=(r01*sj5);
IkReal x15149=(cj5*r00);
CheckValue<IkReal> x15150 = IKatan2WithCheck(IkReal(((((-1.0)*x15148))+x15149)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15150.valid){
continue;
}
CheckValue<IkReal> x15151=IKPowWithIntegerCheck(IKsign((((x15146*(r00*r00)))+x15147+(r02*r02)+(((-2.0)*x15148*x15149))+(((-1.0)*x15146*x15147)))),-1);
if(!x15151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15150.value)+(((1.5707963267949)*(x15151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15152=IKsin(j4);
IkReal x15153=IKcos(j4);
IkReal x15154=(cj5*r10);
IkReal x15155=(r01*sj5);
IkReal x15156=(cj5*r00);
IkReal x15157=(cj5*r20);
IkReal x15158=((1.0)*x15153);
IkReal x15159=((1.0)*x15152);
IkReal x15160=(sj5*x15152);
evalcond[0]=((((-1.0)*x15157*x15159))+(((-1.0)*r22*x15158))+((r21*x15160)));
evalcond[1]=(((r11*x15160))+(((-1.0)*r12*x15158))+(((-1.0)*x15154*x15159)));
evalcond[2]=((((-1.0)*r02*x15159))+(((-1.0)*x15155*x15158))+((x15153*x15156)));
evalcond[3]=((1.0)+((x15152*x15155))+(((-1.0)*r02*x15158))+(((-1.0)*x15156*x15159)));
evalcond[4]=(((cj2*sj1))+((x15153*x15154))+((cj1*sj2))+(((-1.0)*r12*x15159))+(((-1.0)*r11*sj5*x15158)));
evalcond[5]=(((x15153*x15157))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15159))+(((-1.0)*r21*sj5*x15158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15161=((1.0)*cj5);
CheckValue<IkReal> x15162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15161))+(((-1.0)*r20*sj5)))),-1);
if(!x15162.valid){
continue;
}
CheckValue<IkReal> x15163 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15162.value)))+(x15163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15164=IKsin(j4);
IkReal x15165=IKcos(j4);
IkReal x15166=(cj5*r10);
IkReal x15167=(r01*sj5);
IkReal x15168=(cj5*r00);
IkReal x15169=(cj5*r20);
IkReal x15170=((1.0)*x15165);
IkReal x15171=((1.0)*x15164);
IkReal x15172=(sj5*x15164);
evalcond[0]=(((r21*x15172))+(((-1.0)*r22*x15170))+(((-1.0)*x15169*x15171)));
evalcond[1]=(((r11*x15172))+(((-1.0)*x15166*x15171))+(((-1.0)*r12*x15170)));
evalcond[2]=(((x15165*x15168))+(((-1.0)*r02*x15171))+(((-1.0)*x15167*x15170)));
evalcond[3]=((1.0)+((x15164*x15167))+(((-1.0)*r02*x15170))+(((-1.0)*x15168*x15171)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15165*x15166))+(((-1.0)*r11*sj5*x15170))+(((-1.0)*r12*x15171)));
evalcond[5]=((((-1.0)*r21*sj5*x15170))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15165*x15169))+(((-1.0)*r22*x15171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15173 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15173.valid){
continue;
}
CheckValue<IkReal> x15174=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15173.value)+(((1.5707963267949)*(x15174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15175=IKsin(j4);
IkReal x15176=IKcos(j4);
IkReal x15177=(cj5*r10);
IkReal x15178=(r01*sj5);
IkReal x15179=(cj5*r00);
IkReal x15180=(cj5*r20);
IkReal x15181=((1.0)*x15176);
IkReal x15182=((1.0)*x15175);
IkReal x15183=(sj5*x15175);
evalcond[0]=((((-1.0)*x15180*x15182))+((r21*x15183))+(((-1.0)*r22*x15181)));
evalcond[1]=((((-1.0)*x15177*x15182))+((r11*x15183))+(((-1.0)*r12*x15181)));
evalcond[2]=((((-1.0)*r02*x15182))+((x15176*x15179))+(((-1.0)*x15178*x15181)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15181))+((x15175*x15178))+(((-1.0)*x15179*x15182)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15181))+((x15176*x15177))+((cj1*sj2))+(((-1.0)*r12*x15182)));
evalcond[5]=((((-1.0)*r21*sj5*x15181))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15176*x15180))+(((-1.0)*r22*x15182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15184=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15184;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15185=((1.0)*cj5);
IkReal x15186=((((-1.0)*r21*x15185))+(((-1.0)*r20*sj5)));
j4eval[0]=x15186;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15185))))));
j4eval[2]=IKsign(x15186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15187=cj5*cj5;
IkReal x15188=r01*r01;
IkReal x15189=(r01*sj5);
IkReal x15190=(cj5*r00);
IkReal x15191=((((-1.0)*x15188))+(((-1.0)*x15187*(r00*r00)))+((x15187*x15188))+(((-1.0)*(r02*r02)))+(((2.0)*x15189*x15190)));
j4eval[0]=x15191;
j4eval[1]=IKsign(x15191);
j4eval[2]=((IKabs(r02))+(IKabs((x15189+(((-1.0)*x15190))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15192=cj5*cj5;
IkReal x15193=r01*r01;
IkReal x15194=(r01*sj5);
IkReal x15195=(cj5*r00);
CheckValue<IkReal> x15196=IKPowWithIntegerCheck(IKsign((((x15192*x15193))+(((-1.0)*x15192*(r00*r00)))+(((2.0)*x15194*x15195))+(((-1.0)*(r02*r02)))+(((-1.0)*x15193)))),-1);
if(!x15196.valid){
continue;
}
CheckValue<IkReal> x15197 = IKatan2WithCheck(IkReal((x15194+(((-1.0)*x15195)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15196.value)))+(x15197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15198=IKcos(j4);
IkReal x15199=IKsin(j4);
IkReal x15200=(cj5*r00);
IkReal x15201=(cj5*r10);
IkReal x15202=(r21*sj5);
IkReal x15203=(cj5*r20);
IkReal x15204=((1.0)*x15198);
IkReal x15205=((1.0)*x15199);
IkReal x15206=(sj5*x15199);
IkReal x15207=(sj5*x15198);
evalcond[0]=(((r01*x15207))+((r02*x15199))+(((-1.0)*x15200*x15204)));
evalcond[1]=((((-1.0)*r22*x15204))+((x15199*x15202))+(((-1.0)*x15203*x15205)));
evalcond[2]=(((r11*x15206))+(((-1.0)*r12*x15204))+(((-1.0)*x15201*x15205)));
evalcond[3]=((1.0)+((r01*x15206))+(((-1.0)*r02*x15204))+(((-1.0)*x15200*x15205)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15207))+(((-1.0)*x15201*x15204))+((r12*x15199)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15199))+((x15198*x15202))+(((-1.0)*x15203*x15204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15208=((1.0)*cj5);
CheckValue<IkReal> x15209 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15209.valid){
continue;
}
CheckValue<IkReal> x15210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15208))+(((-1.0)*r20*sj5)))),-1);
if(!x15210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15209.value)+(((1.5707963267949)*(x15210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15211=IKcos(j4);
IkReal x15212=IKsin(j4);
IkReal x15213=(cj5*r00);
IkReal x15214=(cj5*r10);
IkReal x15215=(r21*sj5);
IkReal x15216=(cj5*r20);
IkReal x15217=((1.0)*x15211);
IkReal x15218=((1.0)*x15212);
IkReal x15219=(sj5*x15212);
IkReal x15220=(sj5*x15211);
evalcond[0]=((((-1.0)*x15213*x15217))+((r02*x15212))+((r01*x15220)));
evalcond[1]=((((-1.0)*r22*x15217))+((x15212*x15215))+(((-1.0)*x15216*x15218)));
evalcond[2]=((((-1.0)*x15214*x15218))+((r11*x15219))+(((-1.0)*r12*x15217)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15217))+((r01*x15219))+(((-1.0)*x15213*x15218)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15214*x15217))+((cj1*sj2))+((r12*x15212))+((r11*x15220)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15212))+(((-1.0)*x15216*x15217))+((x15211*x15215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15221 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15221.valid){
continue;
}
CheckValue<IkReal> x15222=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15221.value)+(((1.5707963267949)*(x15222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15223=IKcos(j4);
IkReal x15224=IKsin(j4);
IkReal x15225=(cj5*r00);
IkReal x15226=(cj5*r10);
IkReal x15227=(r21*sj5);
IkReal x15228=(cj5*r20);
IkReal x15229=((1.0)*x15223);
IkReal x15230=((1.0)*x15224);
IkReal x15231=(sj5*x15224);
IkReal x15232=(sj5*x15223);
evalcond[0]=(((r01*x15232))+((r02*x15224))+(((-1.0)*x15225*x15229)));
evalcond[1]=(((x15224*x15227))+(((-1.0)*x15228*x15230))+(((-1.0)*r22*x15229)));
evalcond[2]=((((-1.0)*r12*x15229))+((r11*x15231))+(((-1.0)*x15226*x15230)));
evalcond[3]=((1.0)+(((-1.0)*x15225*x15230))+((r01*x15231))+(((-1.0)*r02*x15229)));
evalcond[4]=(((r12*x15224))+((cj2*sj1))+(((-1.0)*x15226*x15229))+((cj1*sj2))+((r11*x15232)));
evalcond[5]=(((x15223*x15227))+((r22*x15224))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15228*x15229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15234 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15234)==0){
continue;
}
IkReal x15233=pow(x15234,-0.5);
CheckValue<IkReal> x15235 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15235.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15235.value));
IkReal gconst61=((-1.0)*r11*x15233);
IkReal gconst62=(r10*x15233);
CheckValue<IkReal> x15236 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15236.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15236.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15239 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15239.valid){
continue;
}
IkReal x15237=((-1.0)*(x15239.value));
IkReal x15238=x15233;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15237;
IkReal gconst60=x15237;
IkReal gconst61=((-1.0)*r11*x15238);
IkReal gconst62=(r10*x15238);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15242 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15242.valid){
continue;
}
IkReal x15240=((-1.0)*(x15242.value));
IkReal x15241=x15233;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15240;
IkReal gconst60=x15240;
IkReal gconst61=((-1.0)*r11*x15241);
IkReal gconst62=(r10*x15241);
CheckValue<IkReal> x15250=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15250.valid){
continue;
}
IkReal x15243=x15250.value;
IkReal x15244=(sj3*x15243);
IkReal x15245=(r20*x15244);
IkReal x15246=(r00*x15244);
IkReal x15247=(r01*x15244);
IkReal x15248=(r21*x15244);
IkReal x15249=(r10*r11*x15244);
j4eval[0]=IKsign((((r21*x15247*(r11*r11)))+((r10*r11*r21*x15246))+((r01*r10*r11*x15245))+((r02*r22*sj3))+((r00*x15245*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15251=gconst61*gconst61;
IkReal x15252=gconst62*gconst62;
IkReal x15253=(cj3*r01);
IkReal x15254=(r22*sj3);
IkReal x15255=(gconst61*r00);
IkReal x15256=((1.0)*cj3);
IkReal x15257=(gconst62*r01);
IkReal x15258=((1.0)*sj3);
IkReal x15259=(gconst61*gconst62*r20);
IkReal x15260=(r21*x15251);
IkReal x15261=(r20*x15252);
CheckValue<IkReal> x15262 = IKatan2WithCheck(IkReal((((x15254*x15255))+((x15254*x15257)))),IkReal((((gconst61*r21*sj3*x15257))+((r00*sj3*x15260))+(((-1.0)*r01*x15258*x15261))+(((-1.0)*gconst62*r20*x15255*x15258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15262.valid){
continue;
}
CheckValue<IkReal> x15263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15256*x15261))+(((-1.0)*x15253*x15260))+((cj3*gconst62*r21*x15255))+(((-1.0)*r02*r22*x15256))+((x15253*x15259)))),-1);
if(!x15263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15262.value)+(((1.5707963267949)*(x15263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15264=IKsin(j4);
IkReal x15265=IKcos(j4);
IkReal x15266=(cj2*sj1);
IkReal x15267=(cj1*sj2);
IkReal x15268=(gconst61*sj3);
IkReal x15269=(cj3*gconst61);
IkReal x15270=(cj3*gconst62);
IkReal x15271=(sj1*sj2);
IkReal x15272=(gconst62*sj3);
IkReal x15273=(cj1*cj2);
IkReal x15274=((1.0)*x15265);
IkReal x15275=((1.0)*x15264);
IkReal x15276=(gconst61*x15264);
IkReal x15277=(cj3*x15264);
IkReal x15278=(x15267+x15266);
evalcond[0]=((((-1.0)*gconst62*r20*x15275))+(((-1.0)*r22*x15274))+((r21*x15276)));
evalcond[1]=(((r11*x15276))+(((-1.0)*r12*x15274))+(((-1.0)*gconst62*r10*x15275)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15275))+(((-1.0)*r02*x15274))+((r01*x15276)));
evalcond[3]=(((r01*x15265*x15269))+(((-1.0)*r00*x15270*x15274))+((r02*x15277))+((r00*x15268))+((r01*x15272)));
evalcond[4]=((((-1.0)*r01*x15268*x15274))+((r00*x15265*x15272))+(((-1.0)*r02*sj3*x15275))+((r00*x15269))+((r01*x15270)));
evalcond[5]=(((r20*x15268))+((r22*x15277))+x15278+((r21*x15272))+(((-1.0)*r20*x15270*x15274))+((r21*x15265*x15269)));
evalcond[6]=(((r12*x15277))+((r11*x15272))+x15273+((r11*x15265*x15269))+(((-1.0)*r10*x15270*x15274))+((r10*x15268))+(((-1.0)*x15271)));
evalcond[7]=((((-1.0)*r11*x15268*x15274))+((r11*x15270))+x15278+(((-1.0)*r12*sj3*x15275))+((r10*x15265*x15272))+((r10*x15269)));
evalcond[8]=(((r20*x15269))+x15271+(((-1.0)*r22*sj3*x15275))+((r21*x15270))+(((-1.0)*x15273))+((r20*x15265*x15272))+(((-1.0)*r21*x15268*x15274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15279=gconst61*gconst61;
IkReal x15280=gconst62*gconst62;
IkReal x15281=(cj3*r22);
IkReal x15282=(gconst62*r01);
IkReal x15283=(gconst61*r00);
IkReal x15284=((1.0)*r20);
IkReal x15285=(cj3*r21);
IkReal x15286=(r21*sj3);
CheckValue<IkReal> x15287=IKPowWithIntegerCheck(IKsign((((r01*x15279*x15286))+(((-1.0)*gconst62*x15283*x15286))+((r00*r20*sj3*x15280))+((r02*r22*sj3))+(((-1.0)*gconst61*sj3*x15282*x15284)))),-1);
if(!x15287.valid){
continue;
}
CheckValue<IkReal> x15288 = IKatan2WithCheck(IkReal((((x15281*x15283))+((x15281*x15282)))),IkReal((((r00*x15279*x15285))+(((-1.0)*cj3*gconst62*x15283*x15284))+((gconst61*x15282*x15285))+(((-1.0)*cj3*r01*x15280*x15284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15287.value)))+(x15288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15289=IKsin(j4);
IkReal x15290=IKcos(j4);
IkReal x15291=(cj2*sj1);
IkReal x15292=(cj1*sj2);
IkReal x15293=(gconst61*sj3);
IkReal x15294=(cj3*gconst61);
IkReal x15295=(cj3*gconst62);
IkReal x15296=(sj1*sj2);
IkReal x15297=(gconst62*sj3);
IkReal x15298=(cj1*cj2);
IkReal x15299=((1.0)*x15290);
IkReal x15300=((1.0)*x15289);
IkReal x15301=(gconst61*x15289);
IkReal x15302=(cj3*x15289);
IkReal x15303=(x15291+x15292);
evalcond[0]=((((-1.0)*gconst62*r20*x15300))+(((-1.0)*r22*x15299))+((r21*x15301)));
evalcond[1]=((((-1.0)*gconst62*r10*x15300))+(((-1.0)*r12*x15299))+((r11*x15301)));
evalcond[2]=((1.0)+((r01*x15301))+(((-1.0)*r02*x15299))+(((-1.0)*gconst62*r00*x15300)));
evalcond[3]=((((-1.0)*r00*x15295*x15299))+((r02*x15302))+((r01*x15297))+((r01*x15290*x15294))+((r00*x15293)));
evalcond[4]=((((-1.0)*r02*sj3*x15300))+((r00*x15290*x15297))+((r01*x15295))+((r00*x15294))+(((-1.0)*r01*x15293*x15299)));
evalcond[5]=((((-1.0)*r20*x15295*x15299))+((r20*x15293))+x15303+((r21*x15290*x15294))+((r21*x15297))+((r22*x15302)));
evalcond[6]=(((r10*x15293))+(((-1.0)*r10*x15295*x15299))+(((-1.0)*x15296))+((r11*x15297))+x15298+((r11*x15290*x15294))+((r12*x15302)));
evalcond[7]=(((r10*x15294))+((r11*x15295))+(((-1.0)*r12*sj3*x15300))+x15303+((r10*x15290*x15297))+(((-1.0)*r11*x15293*x15299)));
evalcond[8]=(((r20*x15294))+(((-1.0)*x15298))+x15296+((r21*x15295))+(((-1.0)*r22*sj3*x15300))+(((-1.0)*r21*x15293*x15299))+((r20*x15290*x15297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15304=((1.0)*gconst62);
CheckValue<IkReal> x15305=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15304)))),-1);
if(!x15305.valid){
continue;
}
CheckValue<IkReal> x15306 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15304))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15305.value)))+(x15306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15307=IKsin(j4);
IkReal x15308=IKcos(j4);
IkReal x15309=(cj2*sj1);
IkReal x15310=(cj1*sj2);
IkReal x15311=(gconst61*sj3);
IkReal x15312=(cj3*gconst61);
IkReal x15313=(cj3*gconst62);
IkReal x15314=(sj1*sj2);
IkReal x15315=(gconst62*sj3);
IkReal x15316=(cj1*cj2);
IkReal x15317=((1.0)*x15308);
IkReal x15318=((1.0)*x15307);
IkReal x15319=(gconst61*x15307);
IkReal x15320=(cj3*x15307);
IkReal x15321=(x15310+x15309);
evalcond[0]=((((-1.0)*gconst62*r20*x15318))+((r21*x15319))+(((-1.0)*r22*x15317)));
evalcond[1]=(((r11*x15319))+(((-1.0)*gconst62*r10*x15318))+(((-1.0)*r12*x15317)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15318))+((r01*x15319))+(((-1.0)*r02*x15317)));
evalcond[3]=(((r01*x15315))+((r00*x15311))+(((-1.0)*r00*x15313*x15317))+((r02*x15320))+((r01*x15308*x15312)));
evalcond[4]=(((r01*x15313))+((r00*x15312))+((r00*x15308*x15315))+(((-1.0)*r01*x15311*x15317))+(((-1.0)*r02*sj3*x15318)));
evalcond[5]=(((r21*x15308*x15312))+((r22*x15320))+x15321+((r21*x15315))+(((-1.0)*r20*x15313*x15317))+((r20*x15311)));
evalcond[6]=(((r11*x15315))+(((-1.0)*x15314))+((r12*x15320))+((r11*x15308*x15312))+x15316+((r10*x15311))+(((-1.0)*r10*x15313*x15317)));
evalcond[7]=(((r11*x15313))+(((-1.0)*r11*x15311*x15317))+x15321+(((-1.0)*r12*sj3*x15318))+((r10*x15308*x15315))+((r10*x15312)));
evalcond[8]=((((-1.0)*x15316))+((r20*x15308*x15315))+x15314+(((-1.0)*r21*x15311*x15317))+(((-1.0)*r22*sj3*x15318))+((r21*x15313))+((r20*x15312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15323 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15323)==0){
continue;
}
IkReal x15322=pow(x15323,-0.5);
CheckValue<IkReal> x15324 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15324.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15324.value))));
IkReal gconst64=((1.0)*r11*x15322);
IkReal gconst65=((-1.0)*r10*x15322);
CheckValue<IkReal> x15325 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15325.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15325.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15328 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15328.valid){
continue;
}
IkReal x15326=((1.0)*(x15328.value));
IkReal x15327=x15322;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15326)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15326)));
IkReal gconst64=((1.0)*r11*x15327);
IkReal gconst65=((-1.0)*r10*x15327);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15329=gconst64*gconst64;
IkReal x15330=gconst65*gconst65;
IkReal x15331=(gconst65*r01);
IkReal x15332=(cj3*r22);
IkReal x15333=(gconst64*r00);
IkReal x15334=(cj3*r21);
IkReal x15335=((1.0)*gconst64*sj3);
IkReal x15336=((1.0)*cj3*r20);
CheckValue<IkReal> x15337 = IKatan2WithCheck(IkReal((((x15331*x15332))+((x15332*x15333)))),IkReal((((r00*x15329*x15334))+(((-1.0)*gconst65*x15333*x15336))+(((-1.0)*r01*x15330*x15336))+((gconst64*x15331*x15334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15337.valid){
continue;
}
CheckValue<IkReal> x15338=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x15329))+((r00*r20*sj3*x15330))+(((-1.0)*r20*x15331*x15335))+(((-1.0)*gconst65*r21*sj3*x15333))+((r02*r22*sj3)))),-1);
if(!x15338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15337.value)+(((1.5707963267949)*(x15338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15339=IKsin(j4);
IkReal x15340=IKcos(j4);
IkReal x15341=(cj2*sj1);
IkReal x15342=(cj1*sj2);
IkReal x15343=(cj3*gconst64);
IkReal x15344=(gconst65*r21);
IkReal x15345=(sj1*sj2);
IkReal x15346=(gconst65*sj3);
IkReal x15347=(gconst64*sj3);
IkReal x15348=(cj3*gconst65);
IkReal x15349=(cj1*cj2);
IkReal x15350=((1.0)*x15340);
IkReal x15351=((1.0)*x15339);
IkReal x15352=(cj3*x15339);
IkReal x15353=(gconst64*x15339);
IkReal x15354=(x15342+x15341);
evalcond[0]=((((-1.0)*r22*x15350))+(((-1.0)*gconst65*r20*x15351))+((r21*x15353)));
evalcond[1]=((((-1.0)*r12*x15350))+((r11*x15353))+(((-1.0)*gconst65*r10*x15351)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15351))+(((-1.0)*r02*x15350))+((r01*x15353)));
evalcond[3]=(((r00*x15347))+((r01*x15346))+(((-1.0)*r00*x15348*x15350))+((r02*x15352))+((r01*x15340*x15343)));
evalcond[4]=(((r00*x15343))+((r00*x15340*x15346))+((r01*x15348))+(((-1.0)*r01*x15347*x15350))+(((-1.0)*r02*sj3*x15351)));
evalcond[5]=((((-1.0)*r20*x15348*x15350))+((r22*x15352))+x15354+((r21*x15340*x15343))+((r20*x15347))+((sj3*x15344)));
evalcond[6]=((((-1.0)*r10*x15348*x15350))+((r11*x15346))+((r12*x15352))+((r10*x15347))+x15349+((r11*x15340*x15343))+(((-1.0)*x15345)));
evalcond[7]=((((-1.0)*r12*sj3*x15351))+(((-1.0)*r11*x15347*x15350))+((r11*x15348))+((r10*x15343))+((r10*x15340*x15346))+x15354);
evalcond[8]=(((cj3*x15344))+(((-1.0)*r22*sj3*x15351))+((r20*x15340*x15346))+x15345+((r20*x15343))+(((-1.0)*x15349))+(((-1.0)*r21*x15347*x15350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15355=((1.0)*gconst65);
CheckValue<IkReal> x15356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15355)))),-1);
if(!x15356.valid){
continue;
}
CheckValue<IkReal> x15357 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15355))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15356.value)))+(x15357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15358=IKsin(j4);
IkReal x15359=IKcos(j4);
IkReal x15360=(cj2*sj1);
IkReal x15361=(cj1*sj2);
IkReal x15362=(cj3*gconst64);
IkReal x15363=(gconst65*r21);
IkReal x15364=(sj1*sj2);
IkReal x15365=(gconst65*sj3);
IkReal x15366=(gconst64*sj3);
IkReal x15367=(cj3*gconst65);
IkReal x15368=(cj1*cj2);
IkReal x15369=((1.0)*x15359);
IkReal x15370=((1.0)*x15358);
IkReal x15371=(cj3*x15358);
IkReal x15372=(gconst64*x15358);
IkReal x15373=(x15360+x15361);
evalcond[0]=((((-1.0)*r22*x15369))+((r21*x15372))+(((-1.0)*gconst65*r20*x15370)));
evalcond[1]=((((-1.0)*gconst65*r10*x15370))+(((-1.0)*r12*x15369))+((r11*x15372)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15369))+((r01*x15372))+(((-1.0)*gconst65*r00*x15370)));
evalcond[3]=(((r02*x15371))+((r01*x15359*x15362))+((r00*x15366))+((r01*x15365))+(((-1.0)*r00*x15367*x15369)));
evalcond[4]=((((-1.0)*r01*x15366*x15369))+(((-1.0)*r02*sj3*x15370))+((r00*x15359*x15365))+((r00*x15362))+((r01*x15367)));
evalcond[5]=(((r21*x15359*x15362))+x15373+(((-1.0)*r20*x15367*x15369))+((r20*x15366))+((sj3*x15363))+((r22*x15371)));
evalcond[6]=(((r10*x15366))+x15368+((r11*x15365))+((r11*x15359*x15362))+(((-1.0)*x15364))+(((-1.0)*r10*x15367*x15369))+((r12*x15371)));
evalcond[7]=(((r10*x15362))+(((-1.0)*r12*sj3*x15370))+x15373+((r11*x15367))+((r10*x15359*x15365))+(((-1.0)*r11*x15366*x15369)));
evalcond[8]=(((r20*x15359*x15365))+((cj3*x15363))+x15364+(((-1.0)*x15368))+((r20*x15362))+(((-1.0)*r21*x15366*x15369))+(((-1.0)*r22*sj3*x15370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15374=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15374);
rxp0_2=(py*r00);
rxp1_0=(r21*x15374);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15375=(r01*sj5);
IkReal x15376=((1.0)*cj5*r00);
j4eval[0]=(x15375+(((-1.0)*x15376)));
j4eval[1]=((((-1.0)*cj3*x15376))+((cj3*x15375)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15377=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15377);
rxp0_2=(py*r00);
rxp1_0=(r21*x15377);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15378=(cj5*r00);
IkReal x15379=(r01*sj5);
j4eval[0]=((((-1.0)*x15378))+x15379);
j4eval[1]=((((-1.0)*sj3*x15379))+((sj3*x15378)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15380=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15380);
rxp0_2=(py*r00);
rxp1_0=(r21*x15380);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15381=((1.0)*r00);
CheckValue<IkReal> x15382=IKPowWithIntegerCheck(cj3,-1);
if(!x15382.valid){
continue;
}
CheckValue<IkReal> x15383=IKPowWithIntegerCheck(r12,-1);
if(!x15383.valid){
continue;
}
CheckValue<IkReal> x15384=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15381))),-1);
if(!x15384.valid){
continue;
}
if( IKabs(((x15382.value)*(x15383.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15384.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15381)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15382.value)*(x15383.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15384.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15381))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15382.value)*(x15383.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15384.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15381))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15385=IKsin(j4);
IkReal x15386=IKcos(j4);
IkReal x15387=(cj2*sj1);
IkReal x15388=(cj1*sj2);
IkReal x15389=(sj1*sj2);
IkReal x15390=(cj5*sj3);
IkReal x15391=(cj3*cj5);
IkReal x15392=(r21*sj5);
IkReal x15393=(cj1*cj2);
IkReal x15394=(r00*sj5);
IkReal x15395=(r01*sj5);
IkReal x15396=(r20*sj5);
IkReal x15397=((1.0)*x15385);
IkReal x15398=(r20*x15386);
IkReal x15399=(r00*x15386);
IkReal x15400=(cj3*x15386);
IkReal x15401=(x15387+x15388);
IkReal x15402=((1.0)*sj3*x15386);
evalcond[0]=((-1.0)*r12*x15386);
evalcond[1]=(((x15385*x15392))+(((-1.0)*cj5*r20*x15397)));
evalcond[2]=(x15393+(((-1.0)*x15389))+((cj3*r12*x15385)));
evalcond[3]=(x15401+(((-1.0)*r12*sj3*x15397)));
evalcond[4]=((1.0)+((x15385*x15395))+(((-1.0)*cj5*r00*x15397)));
evalcond[5]=((((-1.0)*x15391*x15399))+((sj3*x15394))+((x15395*x15400))+((r01*x15390)));
evalcond[6]=((((-1.0)*x15395*x15402))+((cj3*x15394))+((x15390*x15399))+((r01*x15391)));
evalcond[7]=((((-1.0)*x15391*x15398))+((r21*x15390))+((x15392*x15400))+((sj3*x15396))+x15401);
evalcond[8]=(((r21*x15391))+((cj3*x15396))+x15389+((x15390*x15398))+(((-1.0)*x15392*x15402))+(((-1.0)*x15393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15403=((1.0)*r01);
IkReal x15404=(cj5*r00);
CheckValue<IkReal> x15405=IKPowWithIntegerCheck(((((-1.0)*x15404))+((r01*sj5))),-1);
if(!x15405.valid){
continue;
}
CheckValue<IkReal> x15406=IKPowWithIntegerCheck((((sj3*x15404))+(((-1.0)*sj3*sj5*x15403))),-1);
if(!x15406.valid){
continue;
}
if( IKabs(((-1.0)*(x15405.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15406.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15403)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15405.value)))+IKsqr(((x15406.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15403))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15405.value)), ((x15406.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15403))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15407=IKsin(j4);
IkReal x15408=IKcos(j4);
IkReal x15409=(cj2*sj1);
IkReal x15410=(cj1*sj2);
IkReal x15411=(sj1*sj2);
IkReal x15412=(cj5*sj3);
IkReal x15413=(cj3*cj5);
IkReal x15414=(r21*sj5);
IkReal x15415=(cj1*cj2);
IkReal x15416=(r00*sj5);
IkReal x15417=(r01*sj5);
IkReal x15418=(r20*sj5);
IkReal x15419=((1.0)*x15407);
IkReal x15420=(r20*x15408);
IkReal x15421=(r00*x15408);
IkReal x15422=(cj3*x15408);
IkReal x15423=(x15409+x15410);
IkReal x15424=((1.0)*sj3*x15408);
evalcond[0]=((-1.0)*r12*x15408);
evalcond[1]=(((x15407*x15414))+(((-1.0)*cj5*r20*x15419)));
evalcond[2]=((((-1.0)*x15411))+x15415+((cj3*r12*x15407)));
evalcond[3]=(x15423+(((-1.0)*r12*sj3*x15419)));
evalcond[4]=((1.0)+((x15407*x15417))+(((-1.0)*cj5*r00*x15419)));
evalcond[5]=((((-1.0)*x15413*x15421))+((x15417*x15422))+((r01*x15412))+((sj3*x15416)));
evalcond[6]=(((cj3*x15416))+((r01*x15413))+(((-1.0)*x15417*x15424))+((x15412*x15421)));
evalcond[7]=((((-1.0)*x15413*x15420))+((x15414*x15422))+((sj3*x15418))+x15423+((r21*x15412)));
evalcond[8]=(((cj3*x15418))+(((-1.0)*x15415))+(((-1.0)*x15414*x15424))+((x15412*x15420))+x15411+((r21*x15413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15425=((1.0)*r00);
IkReal x15426=(r01*sj5);
CheckValue<IkReal> x15427=IKPowWithIntegerCheck(((((-1.0)*cj5*x15425))+x15426),-1);
if(!x15427.valid){
continue;
}
CheckValue<IkReal> x15428=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15425))+((cj3*x15426))),-1);
if(!x15428.valid){
continue;
}
if( IKabs(((-1.0)*(x15427.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15428.value)*(((((-1.0)*sj3*sj5*x15425))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15427.value)))+IKsqr(((x15428.value)*(((((-1.0)*sj3*sj5*x15425))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15427.value)), ((x15428.value)*(((((-1.0)*sj3*sj5*x15425))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15429=IKsin(j4);
IkReal x15430=IKcos(j4);
IkReal x15431=(cj2*sj1);
IkReal x15432=(cj1*sj2);
IkReal x15433=(sj1*sj2);
IkReal x15434=(cj5*sj3);
IkReal x15435=(cj3*cj5);
IkReal x15436=(r21*sj5);
IkReal x15437=(cj1*cj2);
IkReal x15438=(r00*sj5);
IkReal x15439=(r01*sj5);
IkReal x15440=(r20*sj5);
IkReal x15441=((1.0)*x15429);
IkReal x15442=(r20*x15430);
IkReal x15443=(r00*x15430);
IkReal x15444=(cj3*x15430);
IkReal x15445=(x15431+x15432);
IkReal x15446=((1.0)*sj3*x15430);
evalcond[0]=((-1.0)*r12*x15430);
evalcond[1]=((((-1.0)*cj5*r20*x15441))+((x15429*x15436)));
evalcond[2]=(((cj3*r12*x15429))+(((-1.0)*x15433))+x15437);
evalcond[3]=(x15445+(((-1.0)*r12*sj3*x15441)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15441))+((x15429*x15439)));
evalcond[5]=(((sj3*x15438))+((x15439*x15444))+((r01*x15434))+(((-1.0)*x15435*x15443)));
evalcond[6]=((((-1.0)*x15439*x15446))+((x15434*x15443))+((cj3*x15438))+((r01*x15435)));
evalcond[7]=(((sj3*x15440))+((r21*x15434))+((x15436*x15444))+x15445+(((-1.0)*x15435*x15442)));
evalcond[8]=(((x15434*x15442))+((r21*x15435))+(((-1.0)*x15437))+x15433+(((-1.0)*x15436*x15446))+((cj3*x15440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15447=cj5*cj5;
IkReal x15448=(cj3*r20);
IkReal x15449=(r21*sj3);
IkReal x15450=((1.0)*cj3);
IkReal x15451=(r01*r21);
IkReal x15452=(r01*sj3);
IkReal x15453=(r00*sj5);
IkReal x15454=(cj5*r01*sj5);
IkReal x15455=((1.0)*x15447);
CheckValue<IkReal> x15456=IKPowWithIntegerCheck(IKsign((((cj3*x15447*x15451))+((x15448*x15454))+((cj3*cj5*r21*x15453))+(((-1.0)*r02*r22*x15450))+(((-1.0)*r00*x15448*x15455))+(((-1.0)*x15450*x15451)))),-1);
if(!x15456.valid){
continue;
}
CheckValue<IkReal> x15457 = IKatan2WithCheck(IkReal((((cj5*r22*x15452))+((r22*sj3*x15453)))),IkReal(((((-1.0)*r20*x15452*x15455))+((r00*x15449))+((x15449*x15454))+(((-1.0)*cj5*r20*sj3*x15453))+(((-1.0)*r00*x15449*x15455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15456.value)))+(x15457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15458=IKsin(j4);
IkReal x15459=IKcos(j4);
IkReal x15460=(cj2*sj1);
IkReal x15461=(cj1*sj2);
IkReal x15462=(r11*sj5);
IkReal x15463=(cj5*r10);
IkReal x15464=(sj1*sj2);
IkReal x15465=(cj5*r01);
IkReal x15466=(cj5*r00);
IkReal x15467=(cj3*sj5);
IkReal x15468=(r21*sj5);
IkReal x15469=(cj1*cj2);
IkReal x15470=(cj5*sj3);
IkReal x15471=(sj3*sj5);
IkReal x15472=(r01*sj5);
IkReal x15473=(cj3*cj5);
IkReal x15474=(cj5*r20);
IkReal x15475=((1.0)*x15459);
IkReal x15476=((1.0)*x15458);
IkReal x15477=(cj3*x15459);
IkReal x15478=(sj3*x15459);
IkReal x15479=(cj3*x15458);
IkReal x15480=(x15461+x15460);
evalcond[0]=(((x15458*x15468))+(((-1.0)*r22*x15475))+(((-1.0)*x15474*x15476)));
evalcond[1]=(((x15458*x15462))+(((-1.0)*x15463*x15476))+(((-1.0)*r12*x15475)));
evalcond[2]=((1.0)+((x15458*x15472))+(((-1.0)*x15466*x15476))+(((-1.0)*r02*x15475)));
evalcond[3]=(((r02*x15479))+((r01*x15459*x15467))+(((-1.0)*cj3*x15466*x15475))+((r00*x15471))+((sj3*x15465)));
evalcond[4]=(((r00*x15467))+((cj3*x15465))+((x15466*x15478))+(((-1.0)*r01*x15471*x15475))+(((-1.0)*r02*sj3*x15476)));
evalcond[5]=(((r22*x15479))+((r21*x15470))+((r21*x15459*x15467))+x15480+(((-1.0)*r20*x15473*x15475))+((r20*x15471)));
evalcond[6]=((((-1.0)*x15464))+((x15462*x15477))+((r12*x15479))+x15469+((r11*x15470))+(((-1.0)*cj3*x15463*x15475))+((r10*x15471)));
evalcond[7]=((((-1.0)*r12*sj3*x15476))+((x15463*x15478))+x15480+(((-1.0)*sj3*x15462*x15475))+((r10*x15467))+((r11*x15473)));
evalcond[8]=(((r20*x15459*x15470))+(((-1.0)*x15469))+((r21*x15473))+x15464+((r20*x15467))+(((-1.0)*r22*sj3*x15476))+(((-1.0)*sj3*x15468*x15475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15481=((1.0)*cj5);
CheckValue<IkReal> x15482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15481))+(((-1.0)*r20*sj5)))),-1);
if(!x15482.valid){
continue;
}
CheckValue<IkReal> x15483 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15482.value)))+(x15483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15484=IKsin(j4);
IkReal x15485=IKcos(j4);
IkReal x15486=(cj2*sj1);
IkReal x15487=(cj1*sj2);
IkReal x15488=(r11*sj5);
IkReal x15489=(cj5*r10);
IkReal x15490=(sj1*sj2);
IkReal x15491=(cj5*r01);
IkReal x15492=(cj5*r00);
IkReal x15493=(cj3*sj5);
IkReal x15494=(r21*sj5);
IkReal x15495=(cj1*cj2);
IkReal x15496=(cj5*sj3);
IkReal x15497=(sj3*sj5);
IkReal x15498=(r01*sj5);
IkReal x15499=(cj3*cj5);
IkReal x15500=(cj5*r20);
IkReal x15501=((1.0)*x15485);
IkReal x15502=((1.0)*x15484);
IkReal x15503=(cj3*x15485);
IkReal x15504=(sj3*x15485);
IkReal x15505=(cj3*x15484);
IkReal x15506=(x15487+x15486);
evalcond[0]=((((-1.0)*r22*x15501))+((x15484*x15494))+(((-1.0)*x15500*x15502)));
evalcond[1]=((((-1.0)*x15489*x15502))+(((-1.0)*r12*x15501))+((x15484*x15488)));
evalcond[2]=((1.0)+((x15484*x15498))+(((-1.0)*x15492*x15502))+(((-1.0)*r02*x15501)));
evalcond[3]=(((r00*x15497))+((r01*x15485*x15493))+((sj3*x15491))+(((-1.0)*cj3*x15492*x15501))+((r02*x15505)));
evalcond[4]=(((r00*x15493))+(((-1.0)*r02*sj3*x15502))+(((-1.0)*r01*x15497*x15501))+((cj3*x15491))+((x15492*x15504)));
evalcond[5]=(((r22*x15505))+((r20*x15497))+((r21*x15485*x15493))+x15506+((r21*x15496))+(((-1.0)*r20*x15499*x15501)));
evalcond[6]=((((-1.0)*cj3*x15489*x15501))+((x15488*x15503))+((r10*x15497))+((r11*x15496))+((r12*x15505))+x15495+(((-1.0)*x15490)));
evalcond[7]=((((-1.0)*sj3*x15488*x15501))+((r10*x15493))+((r11*x15499))+((x15489*x15504))+(((-1.0)*r12*sj3*x15502))+x15506);
evalcond[8]=((((-1.0)*r22*sj3*x15502))+((r20*x15493))+((r20*x15485*x15496))+x15490+((r21*x15499))+(((-1.0)*x15495))+(((-1.0)*sj3*x15494*x15501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15507 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15507.valid){
continue;
}
CheckValue<IkReal> x15508=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15507.value)+(((1.5707963267949)*(x15508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15509=IKsin(j4);
IkReal x15510=IKcos(j4);
IkReal x15511=(cj2*sj1);
IkReal x15512=(cj1*sj2);
IkReal x15513=(r11*sj5);
IkReal x15514=(cj5*r10);
IkReal x15515=(sj1*sj2);
IkReal x15516=(cj5*r01);
IkReal x15517=(cj5*r00);
IkReal x15518=(cj3*sj5);
IkReal x15519=(r21*sj5);
IkReal x15520=(cj1*cj2);
IkReal x15521=(cj5*sj3);
IkReal x15522=(sj3*sj5);
IkReal x15523=(r01*sj5);
IkReal x15524=(cj3*cj5);
IkReal x15525=(cj5*r20);
IkReal x15526=((1.0)*x15510);
IkReal x15527=((1.0)*x15509);
IkReal x15528=(cj3*x15510);
IkReal x15529=(sj3*x15510);
IkReal x15530=(cj3*x15509);
IkReal x15531=(x15512+x15511);
evalcond[0]=(((x15509*x15519))+(((-1.0)*r22*x15526))+(((-1.0)*x15525*x15527)));
evalcond[1]=((((-1.0)*r12*x15526))+((x15509*x15513))+(((-1.0)*x15514*x15527)));
evalcond[2]=((1.0)+((x15509*x15523))+(((-1.0)*x15517*x15527))+(((-1.0)*r02*x15526)));
evalcond[3]=(((r02*x15530))+((sj3*x15516))+((r00*x15522))+(((-1.0)*cj3*x15517*x15526))+((r01*x15510*x15518)));
evalcond[4]=(((x15517*x15529))+((cj3*x15516))+(((-1.0)*r01*x15522*x15526))+(((-1.0)*r02*sj3*x15527))+((r00*x15518)));
evalcond[5]=(((r21*x15510*x15518))+((r20*x15522))+((r21*x15521))+(((-1.0)*r20*x15524*x15526))+x15531+((r22*x15530)));
evalcond[6]=(((x15513*x15528))+((r10*x15522))+(((-1.0)*cj3*x15514*x15526))+((r12*x15530))+x15520+((r11*x15521))+(((-1.0)*x15515)));
evalcond[7]=(((x15514*x15529))+(((-1.0)*r12*sj3*x15527))+((r10*x15518))+(((-1.0)*sj3*x15513*x15526))+x15531+((r11*x15524)));
evalcond[8]=(((r20*x15510*x15521))+((r21*x15524))+((r20*x15518))+(((-1.0)*r22*sj3*x15527))+(((-1.0)*x15520))+x15515+(((-1.0)*sj3*x15519*x15526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15532=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15532);
rxp1_1=(px*r21);
rxp1_2=(r11*x15532);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15533=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15533);
rxp1_1=(px*r21);
rxp1_2=(r11*x15533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15534=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15534)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15534)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15535=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15535);
rxp1_1=(px*r21);
rxp1_2=(r11*x15535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15536=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15536);
rxp1_1=(px*r21);
rxp1_2=(r11*x15536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15537=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15537);
rxp1_1=(px*r21);
rxp1_2=(r11*x15537);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15538=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15538);
rxp1_1=(px*r21);
rxp1_2=(r11*x15538);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15541=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15541.valid){
continue;
}
IkReal x15539=x15541.value;
IkReal x15540=(sj0*x15539);
cj4array[0]=(((cj2*sj1*x15540))+((cj1*sj2*x15540)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15542=IKsin(j4);
IkReal x15543=IKcos(j4);
IkReal x15544=(cj5*r20);
IkReal x15545=(r21*sj5);
IkReal x15546=((1.0)*x15542);
IkReal x15547=((1.0)*x15543);
evalcond[0]=((-1.0)*r02*x15542);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15547)));
evalcond[2]=(((x15542*x15545))+(((-1.0)*x15544*x15546)));
evalcond[3]=((((-1.0)*cj5*r10*x15546))+((r11*sj5*x15542)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15545*x15547))+((x15543*x15544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15549=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15549.valid){
continue;
}
IkReal x15548=x15549.value;
cj4array[0]=(((cj1*cj2*x15548))+(((-1.0)*sj1*sj2*x15548)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15550=IKsin(j4);
IkReal x15551=IKcos(j4);
IkReal x15552=(r11*sj5);
IkReal x15553=((1.0)*sj0);
IkReal x15554=((1.0)*x15551);
IkReal x15555=((1.0)*cj5*x15550);
evalcond[0]=((-1.0)*r02*x15550);
evalcond[1]=((((-1.0)*r02*x15554))+(((-1.0)*x15553)));
evalcond[2]=(((r21*sj5*x15550))+(((-1.0)*r20*x15555)));
evalcond[3]=(((x15550*x15552))+(((-1.0)*r10*x15555)));
evalcond[4]=((((-1.0)*x15552*x15554))+((cj5*r10*x15551))+(((-1.0)*cj1*sj2*x15553))+(((-1.0)*cj2*sj1*x15553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15556=IKPowWithIntegerCheck(r02,-1);
if(!x15556.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15556.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15557=IKsin(j4);
IkReal x15558=IKcos(j4);
IkReal x15559=((1.0)*sj0);
IkReal x15560=(cj5*x15558);
IkReal x15561=(sj5*x15557);
IkReal x15562=((1.0)*sj5*x15558);
IkReal x15563=((1.0)*cj5*x15557);
evalcond[0]=((-1.0)*r02*x15557);
evalcond[1]=(((r21*x15561))+(((-1.0)*r20*x15563)));
evalcond[2]=((((-1.0)*r10*x15563))+((r11*x15561)));
evalcond[3]=((((-1.0)*r21*x15562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15560)));
evalcond[4]=((((-1.0)*r11*x15562))+((r10*x15560))+(((-1.0)*cj1*sj2*x15559))+(((-1.0)*cj2*sj1*x15559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15564=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15564);
rxp1_1=(px*r21);
rxp1_2=(r11*x15564);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15565=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15565);
rxp1_1=(px*r21);
rxp1_2=(r11*x15565);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15566=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15566);
rxp1_1=(px*r21);
rxp1_2=(r11*x15566);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15569=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15569.valid){
continue;
}
IkReal x15567=x15569.value;
IkReal x15568=(sj0*x15567);
cj4array[0]=(((cj2*sj1*x15568))+((cj1*sj2*x15568)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15570=IKsin(j4);
IkReal x15571=IKcos(j4);
IkReal x15572=(r21*sj5);
IkReal x15573=((1.0)*cj5*r20);
evalcond[0]=(r02*x15570);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15571)));
evalcond[2]=(((x15570*x15572))+(((-1.0)*x15570*x15573)));
evalcond[3]=(((r11*sj5*x15570))+(((-1.0)*cj5*r10*x15570)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15571*x15572))+(((-1.0)*x15571*x15573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15575=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15575.valid){
continue;
}
IkReal x15574=x15575.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15574))+((cj1*cj2*x15574)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15576=IKsin(j4);
IkReal x15577=IKcos(j4);
IkReal x15578=((1.0)*sj0);
IkReal x15579=((1.0)*cj5);
IkReal x15580=(sj5*x15576);
evalcond[0]=(r02*x15576);
evalcond[1]=((((-1.0)*r02*x15577))+(((-1.0)*x15578)));
evalcond[2]=((((-1.0)*r20*x15576*x15579))+((r21*x15580)));
evalcond[3]=(((r11*x15580))+(((-1.0)*r10*x15576*x15579)));
evalcond[4]=((((-1.0)*r10*x15577*x15579))+((r11*sj5*x15577))+(((-1.0)*cj1*sj2*x15578))+(((-1.0)*cj2*sj1*x15578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15581=IKPowWithIntegerCheck(r02,-1);
if(!x15581.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15581.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15582=IKsin(j4);
IkReal x15583=IKcos(j4);
IkReal x15584=((1.0)*cj1);
IkReal x15585=(r21*sj5);
IkReal x15586=((1.0)*cj5);
IkReal x15587=(r11*sj5);
evalcond[0]=(r02*x15582);
evalcond[1]=(((x15582*x15585))+(((-1.0)*r20*x15582*x15586)));
evalcond[2]=((((-1.0)*r10*x15582*x15586))+((x15582*x15587)));
evalcond[3]=((((-1.0)*cj2*x15584))+((sj1*sj2))+(((-1.0)*r20*x15583*x15586))+((x15583*x15585)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15584))+(((-1.0)*r10*x15583*x15586))+((x15583*x15587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15588 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15588.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15588.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15589 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15589.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15589.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15590=((-1.0)*r10);
CheckValue<IkReal> x15592 = IKatan2WithCheck(IkReal(x15590),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15592.valid){
continue;
}
IkReal x15591=((-1.0)*(x15592.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15590);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15591;
IkReal gconst66=x15591;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15593=((-1.0)*r10);
CheckValue<IkReal> x15595 = IKatan2WithCheck(IkReal(x15593),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15595.valid){
continue;
}
IkReal x15594=((-1.0)*(x15595.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15593);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15594;
IkReal gconst66=x15594;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15596=((-1.0)*r10);
CheckValue<IkReal> x15598 = IKatan2WithCheck(IkReal(x15596),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15598.valid){
continue;
}
IkReal x15597=((-1.0)*(x15598.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15596);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15597;
IkReal gconst66=x15597;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15599=((1.0)*gconst67);
IkReal x15600=(cj1*cj2);
IkReal x15601=((1.0)*sj1*sj2);
CheckValue<IkReal> x15602=IKPowWithIntegerCheck(cj3,-1);
if(!x15602.valid){
continue;
}
CheckValue<IkReal> x15603=IKPowWithIntegerCheck(r02,-1);
if(!x15603.valid){
continue;
}
CheckValue<IkReal> x15604=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15599))+((gconst68*r20*sj3))),-1);
if(!x15604.valid){
continue;
}
if( IKabs(((x15602.value)*(x15603.value)*((((cj0*x15600))+(((-1.0)*cj0*x15601)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15604.value)*(((((-1.0)*cj3*r20*x15599))+(((-1.0)*x15601))+x15600+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15602.value)*(x15603.value)*((((cj0*x15600))+(((-1.0)*cj0*x15601))))))+IKsqr(((x15604.value)*(((((-1.0)*cj3*r20*x15599))+(((-1.0)*x15601))+x15600+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15602.value)*(x15603.value)*((((cj0*x15600))+(((-1.0)*cj0*x15601))))), ((x15604.value)*(((((-1.0)*cj3*r20*x15599))+(((-1.0)*x15601))+x15600+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15605=IKsin(j4);
IkReal x15606=IKcos(j4);
IkReal x15607=(sj1*sj2);
IkReal x15608=(gconst68*sj3);
IkReal x15609=(gconst67*r11);
IkReal x15610=(gconst67*sj3);
IkReal x15611=((1.0)*gconst68);
IkReal x15612=(cj2*sj1);
IkReal x15613=((1.0)*cj0);
IkReal x15614=((1.0)*sj0);
IkReal x15615=(cj3*gconst67);
IkReal x15616=(cj3*gconst68);
IkReal x15617=(cj1*sj2);
IkReal x15618=(gconst67*r21);
IkReal x15619=((1.0)*cj1*cj2);
IkReal x15620=(cj3*x15606);
IkReal x15621=((1.0)*x15606);
IkReal x15622=(r02*x15605);
evalcond[0]=((((-1.0)*x15614))+(((-1.0)*r02*x15621)));
evalcond[1]=(((x15605*x15618))+(((-1.0)*r20*x15605*x15611)));
evalcond[2]=(cj0+(((-1.0)*r10*x15605*x15611))+((x15605*x15609)));
evalcond[3]=(((cj0*x15607))+((cj3*x15622))+(((-1.0)*cj1*cj2*x15613)));
evalcond[4]=((((-1.0)*x15612*x15613))+(((-1.0)*x15613*x15617))+(((-1.0)*sj3*x15622)));
evalcond[5]=(x15612+x15617+((r20*x15610))+(((-1.0)*r20*x15611*x15620))+((r21*x15608))+((r21*x15606*x15615)));
evalcond[6]=(((r21*x15616))+(((-1.0)*x15619))+x15607+((r20*x15615))+((r20*x15606*x15608))+(((-1.0)*r21*x15610*x15621)));
evalcond[7]=((((-1.0)*r10*x15611*x15620))+((x15609*x15620))+((r10*x15610))+(((-1.0)*cj1*cj2*x15614))+((r11*x15608))+((sj0*x15607)));
evalcond[8]=(((r10*x15606*x15608))+(((-1.0)*sj3*x15609*x15621))+(((-1.0)*x15612*x15614))+(((-1.0)*x15614*x15617))+((r11*x15616))+((r10*x15615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15625=IKPowWithIntegerCheck(r02,-1);
if(!x15625.valid){
continue;
}
IkReal x15623=x15625.value;
IkReal x15624=((1.0)*cj0);
CheckValue<IkReal> x15626=IKPowWithIntegerCheck(sj3,-1);
if(!x15626.valid){
continue;
}
if( IKabs((x15623*(x15626.value)*(((((-1.0)*cj1*sj2*x15624))+(((-1.0)*cj2*sj1*x15624)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15623)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15623*(x15626.value)*(((((-1.0)*cj1*sj2*x15624))+(((-1.0)*cj2*sj1*x15624))))))+IKsqr(((-1.0)*sj0*x15623))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15623*(x15626.value)*(((((-1.0)*cj1*sj2*x15624))+(((-1.0)*cj2*sj1*x15624))))), ((-1.0)*sj0*x15623));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15627=IKsin(j4);
IkReal x15628=IKcos(j4);
IkReal x15629=(sj1*sj2);
IkReal x15630=(gconst68*sj3);
IkReal x15631=(gconst67*r11);
IkReal x15632=(gconst67*sj3);
IkReal x15633=((1.0)*gconst68);
IkReal x15634=(cj2*sj1);
IkReal x15635=((1.0)*cj0);
IkReal x15636=((1.0)*sj0);
IkReal x15637=(cj3*gconst67);
IkReal x15638=(cj3*gconst68);
IkReal x15639=(cj1*sj2);
IkReal x15640=(gconst67*r21);
IkReal x15641=((1.0)*cj1*cj2);
IkReal x15642=(cj3*x15628);
IkReal x15643=((1.0)*x15628);
IkReal x15644=(r02*x15627);
evalcond[0]=((((-1.0)*r02*x15643))+(((-1.0)*x15636)));
evalcond[1]=(((x15627*x15640))+(((-1.0)*r20*x15627*x15633)));
evalcond[2]=(cj0+((x15627*x15631))+(((-1.0)*r10*x15627*x15633)));
evalcond[3]=((((-1.0)*cj1*cj2*x15635))+((cj0*x15629))+((cj3*x15644)));
evalcond[4]=((((-1.0)*sj3*x15644))+(((-1.0)*x15634*x15635))+(((-1.0)*x15635*x15639)));
evalcond[5]=(((r21*x15628*x15637))+((r20*x15632))+(((-1.0)*r20*x15633*x15642))+x15639+x15634+((r21*x15630)));
evalcond[6]=(((r20*x15637))+((r20*x15628*x15630))+x15629+(((-1.0)*r21*x15632*x15643))+((r21*x15638))+(((-1.0)*x15641)));
evalcond[7]=((((-1.0)*cj1*cj2*x15636))+((x15631*x15642))+((sj0*x15629))+((r11*x15630))+((r10*x15632))+(((-1.0)*r10*x15633*x15642)));
evalcond[8]=(((r10*x15628*x15630))+(((-1.0)*x15634*x15636))+(((-1.0)*x15636*x15639))+(((-1.0)*sj3*x15631*x15643))+((r11*x15638))+((r10*x15637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15646=IKPowWithIntegerCheck(r02,-1);
if(!x15646.valid){
continue;
}
IkReal x15645=x15646.value;
CheckValue<IkReal> x15647=IKPowWithIntegerCheck(cj3,-1);
if(!x15647.valid){
continue;
}
if( IKabs((x15645*(x15647.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15645)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15645*(x15647.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15645))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15645*(x15647.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15645));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15648=IKsin(j4);
IkReal x15649=IKcos(j4);
IkReal x15650=(sj1*sj2);
IkReal x15651=(gconst68*sj3);
IkReal x15652=(gconst67*r11);
IkReal x15653=(gconst67*sj3);
IkReal x15654=((1.0)*gconst68);
IkReal x15655=(cj2*sj1);
IkReal x15656=((1.0)*cj0);
IkReal x15657=((1.0)*sj0);
IkReal x15658=(cj3*gconst67);
IkReal x15659=(cj3*gconst68);
IkReal x15660=(cj1*sj2);
IkReal x15661=(gconst67*r21);
IkReal x15662=((1.0)*cj1*cj2);
IkReal x15663=(cj3*x15649);
IkReal x15664=((1.0)*x15649);
IkReal x15665=(r02*x15648);
evalcond[0]=((((-1.0)*x15657))+(((-1.0)*r02*x15664)));
evalcond[1]=((((-1.0)*r20*x15648*x15654))+((x15648*x15661)));
evalcond[2]=(cj0+(((-1.0)*r10*x15648*x15654))+((x15648*x15652)));
evalcond[3]=((((-1.0)*cj1*cj2*x15656))+((cj3*x15665))+((cj0*x15650)));
evalcond[4]=((((-1.0)*x15656*x15660))+(((-1.0)*sj3*x15665))+(((-1.0)*x15655*x15656)));
evalcond[5]=((((-1.0)*r20*x15654*x15663))+x15655+x15660+((r21*x15651))+((r20*x15653))+((r21*x15649*x15658)));
evalcond[6]=((((-1.0)*x15662))+(((-1.0)*r21*x15653*x15664))+((r20*x15649*x15651))+x15650+((r21*x15659))+((r20*x15658)));
evalcond[7]=(((r10*x15653))+(((-1.0)*cj1*cj2*x15657))+((r11*x15651))+((x15652*x15663))+(((-1.0)*r10*x15654*x15663))+((sj0*x15650)));
evalcond[8]=(((r10*x15658))+(((-1.0)*sj3*x15652*x15664))+(((-1.0)*x15657*x15660))+((r11*x15659))+((r10*x15649*x15651))+(((-1.0)*x15655*x15657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15666=((-1.0)*r10);
CheckValue<IkReal> x15667 = IKatan2WithCheck(IkReal(x15666),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15667.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15667.value))));
IkReal gconst70=x15666;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15668 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15668.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15668.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15669=((-1.0)*r10);
IkReal x15670=((-1.0)*r11);
CheckValue<IkReal> x15672 = IKatan2WithCheck(IkReal(x15669),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15672.valid){
continue;
}
IkReal x15671=((1.0)*(x15672.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15669);
rxp1_1=(px*r21);
rxp1_2=(px*x15670);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15671)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15671)));
IkReal gconst70=x15669;
IkReal gconst71=x15670;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15673=((-1.0)*r10);
IkReal x15674=((-1.0)*r11);
CheckValue<IkReal> x15676 = IKatan2WithCheck(IkReal(x15673),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15676.valid){
continue;
}
IkReal x15675=((1.0)*(x15676.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15673);
rxp1_1=(px*r21);
rxp1_2=(px*x15674);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15675)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15675)));
IkReal gconst70=x15673;
IkReal gconst71=x15674;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15677=((-1.0)*r10);
IkReal x15678=((-1.0)*r11);
CheckValue<IkReal> x15680 = IKatan2WithCheck(IkReal(x15677),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15680.valid){
continue;
}
IkReal x15679=((1.0)*(x15680.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15677);
rxp1_1=(px*r21);
rxp1_2=(px*x15678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15679)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15679)));
IkReal gconst70=x15677;
IkReal gconst71=x15678;
IkReal x15681=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15681))+(((-1.0)*r11*r20*x15681)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15682=((1.0)*r21);
IkReal x15683=(cj1*cj2);
IkReal x15684=((1.0)*sj1*sj2);
CheckValue<IkReal> x15685=IKPowWithIntegerCheck(cj3,-1);
if(!x15685.valid){
continue;
}
CheckValue<IkReal> x15686=IKPowWithIntegerCheck(r02,-1);
if(!x15686.valid){
continue;
}
CheckValue<IkReal> x15687=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15682))+((gconst71*r20*sj3))),-1);
if(!x15687.valid){
continue;
}
if( IKabs(((x15685.value)*(x15686.value)*((((cj0*x15683))+(((-1.0)*cj0*x15684)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15687.value)*(((((-1.0)*cj3*gconst71*x15682))+x15683+(((-1.0)*x15684))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15685.value)*(x15686.value)*((((cj0*x15683))+(((-1.0)*cj0*x15684))))))+IKsqr(((x15687.value)*(((((-1.0)*cj3*gconst71*x15682))+x15683+(((-1.0)*x15684))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15685.value)*(x15686.value)*((((cj0*x15683))+(((-1.0)*cj0*x15684))))), ((x15687.value)*(((((-1.0)*cj3*gconst71*x15682))+x15683+(((-1.0)*x15684))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15688=IKsin(j4);
IkReal x15689=IKcos(j4);
IkReal x15690=(cj3*gconst70);
IkReal x15691=(sj1*sj2);
IkReal x15692=((1.0)*gconst71);
IkReal x15693=(gconst71*sj3);
IkReal x15694=(cj2*sj1);
IkReal x15695=((1.0)*sj0);
IkReal x15696=(gconst70*r11);
IkReal x15697=(gconst70*sj3);
IkReal x15698=((1.0)*cj0);
IkReal x15699=(cj3*gconst71);
IkReal x15700=(cj1*sj2);
IkReal x15701=((1.0)*cj1*cj2);
IkReal x15702=(r21*x15689);
IkReal x15703=(r10*x15689);
IkReal x15704=((1.0)*x15689);
IkReal x15705=(r02*x15688);
IkReal x15706=(r20*x15689);
evalcond[0]=((((-1.0)*x15695))+(((-1.0)*r02*x15704)));
evalcond[1]=(((gconst70*r21*x15688))+(((-1.0)*r20*x15688*x15692)));
evalcond[2]=(cj0+(((-1.0)*r10*x15688*x15692))+((x15688*x15696)));
evalcond[3]=(((cj3*x15705))+((cj0*x15691))+(((-1.0)*cj1*cj2*x15698)));
evalcond[4]=((((-1.0)*x15694*x15698))+(((-1.0)*sj3*x15705))+(((-1.0)*x15698*x15700)));
evalcond[5]=(((r20*x15697))+(((-1.0)*cj3*x15692*x15706))+((r21*x15693))+x15694+x15700+((x15690*x15702)));
evalcond[6]=((((-1.0)*x15701))+((r20*x15690))+((r21*x15699))+x15691+((x15693*x15706))+(((-1.0)*x15697*x15702)));
evalcond[7]=(((r11*x15689*x15690))+((r10*x15697))+((r11*x15693))+(((-1.0)*cj3*x15692*x15703))+((sj0*x15691))+(((-1.0)*cj1*cj2*x15695)));
evalcond[8]=(((r10*x15690))+(((-1.0)*x15695*x15700))+((r11*x15699))+((x15693*x15703))+(((-1.0)*x15694*x15695))+(((-1.0)*sj3*x15696*x15704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15709=IKPowWithIntegerCheck(r02,-1);
if(!x15709.valid){
continue;
}
IkReal x15707=x15709.value;
IkReal x15708=((1.0)*cj0);
CheckValue<IkReal> x15710=IKPowWithIntegerCheck(sj3,-1);
if(!x15710.valid){
continue;
}
if( IKabs((x15707*(x15710.value)*(((((-1.0)*cj2*sj1*x15708))+(((-1.0)*cj1*sj2*x15708)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15707)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15707*(x15710.value)*(((((-1.0)*cj2*sj1*x15708))+(((-1.0)*cj1*sj2*x15708))))))+IKsqr(((-1.0)*sj0*x15707))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15707*(x15710.value)*(((((-1.0)*cj2*sj1*x15708))+(((-1.0)*cj1*sj2*x15708))))), ((-1.0)*sj0*x15707));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15711=IKsin(j4);
IkReal x15712=IKcos(j4);
IkReal x15713=(cj3*gconst70);
IkReal x15714=(sj1*sj2);
IkReal x15715=((1.0)*gconst71);
IkReal x15716=(gconst71*sj3);
IkReal x15717=(cj2*sj1);
IkReal x15718=((1.0)*sj0);
IkReal x15719=(gconst70*r11);
IkReal x15720=(gconst70*sj3);
IkReal x15721=((1.0)*cj0);
IkReal x15722=(cj3*gconst71);
IkReal x15723=(cj1*sj2);
IkReal x15724=((1.0)*cj1*cj2);
IkReal x15725=(r21*x15712);
IkReal x15726=(r10*x15712);
IkReal x15727=((1.0)*x15712);
IkReal x15728=(r02*x15711);
IkReal x15729=(r20*x15712);
evalcond[0]=((((-1.0)*x15718))+(((-1.0)*r02*x15727)));
evalcond[1]=((((-1.0)*r20*x15711*x15715))+((gconst70*r21*x15711)));
evalcond[2]=(cj0+(((-1.0)*r10*x15711*x15715))+((x15711*x15719)));
evalcond[3]=((((-1.0)*cj1*cj2*x15721))+((cj0*x15714))+((cj3*x15728)));
evalcond[4]=((((-1.0)*sj3*x15728))+(((-1.0)*x15717*x15721))+(((-1.0)*x15721*x15723)));
evalcond[5]=(((r20*x15720))+(((-1.0)*cj3*x15715*x15729))+((r21*x15716))+x15723+x15717+((x15713*x15725)));
evalcond[6]=((((-1.0)*x15724))+((r20*x15713))+((r21*x15722))+(((-1.0)*x15720*x15725))+x15714+((x15716*x15729)));
evalcond[7]=(((r11*x15712*x15713))+(((-1.0)*cj3*x15715*x15726))+(((-1.0)*cj1*cj2*x15718))+((r10*x15720))+((sj0*x15714))+((r11*x15716)));
evalcond[8]=(((r11*x15722))+(((-1.0)*x15717*x15718))+(((-1.0)*sj3*x15719*x15727))+(((-1.0)*x15718*x15723))+((r10*x15713))+((x15716*x15726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15731=IKPowWithIntegerCheck(r02,-1);
if(!x15731.valid){
continue;
}
IkReal x15730=x15731.value;
CheckValue<IkReal> x15732=IKPowWithIntegerCheck(cj3,-1);
if(!x15732.valid){
continue;
}
if( IKabs((x15730*(x15732.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15730)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15730*(x15732.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15730))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15730*(x15732.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15730));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15733=IKsin(j4);
IkReal x15734=IKcos(j4);
IkReal x15735=(cj3*gconst70);
IkReal x15736=(sj1*sj2);
IkReal x15737=((1.0)*gconst71);
IkReal x15738=(gconst71*sj3);
IkReal x15739=(cj2*sj1);
IkReal x15740=((1.0)*sj0);
IkReal x15741=(gconst70*r11);
IkReal x15742=(gconst70*sj3);
IkReal x15743=((1.0)*cj0);
IkReal x15744=(cj3*gconst71);
IkReal x15745=(cj1*sj2);
IkReal x15746=((1.0)*cj1*cj2);
IkReal x15747=(r21*x15734);
IkReal x15748=(r10*x15734);
IkReal x15749=((1.0)*x15734);
IkReal x15750=(r02*x15733);
IkReal x15751=(r20*x15734);
evalcond[0]=((((-1.0)*x15740))+(((-1.0)*r02*x15749)));
evalcond[1]=((((-1.0)*r20*x15733*x15737))+((gconst70*r21*x15733)));
evalcond[2]=(cj0+(((-1.0)*r10*x15733*x15737))+((x15733*x15741)));
evalcond[3]=(((cj3*x15750))+((cj0*x15736))+(((-1.0)*cj1*cj2*x15743)));
evalcond[4]=((((-1.0)*x15739*x15743))+(((-1.0)*sj3*x15750))+(((-1.0)*x15743*x15745)));
evalcond[5]=((((-1.0)*cj3*x15737*x15751))+((r21*x15738))+x15745+x15739+((r20*x15742))+((x15735*x15747)));
evalcond[6]=(((r20*x15735))+(((-1.0)*x15746))+((x15738*x15751))+((r21*x15744))+x15736+(((-1.0)*x15742*x15747)));
evalcond[7]=(((r11*x15738))+((sj0*x15736))+(((-1.0)*cj3*x15737*x15748))+((r11*x15734*x15735))+(((-1.0)*cj1*cj2*x15740))+((r10*x15742)));
evalcond[8]=((((-1.0)*sj3*x15741*x15749))+(((-1.0)*x15739*x15740))+((r11*x15744))+((r10*x15735))+((x15738*x15748))+(((-1.0)*x15740*x15745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15753=IKPowWithIntegerCheck(r02,-1);
if(!x15753.valid){
continue;
}
IkReal x15752=x15753.value;
CheckValue<IkReal> x15754=IKPowWithIntegerCheck(cj3,-1);
if(!x15754.valid){
continue;
}
if( IKabs((x15752*(x15754.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15752)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15752*(x15754.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15752))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15752*(x15754.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15752));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15755=IKsin(j4);
IkReal x15756=IKcos(j4);
IkReal x15757=(cj5*r10);
IkReal x15758=(sj1*sj2);
IkReal x15759=(cj5*sj3);
IkReal x15760=(r11*sj5);
IkReal x15761=(cj3*cj5);
IkReal x15762=(cj3*sj5);
IkReal x15763=(r21*sj5);
IkReal x15764=(cj2*sj1);
IkReal x15765=((1.0)*sj0);
IkReal x15766=((1.0)*cj0);
IkReal x15767=(sj3*sj5);
IkReal x15768=(cj1*sj2);
IkReal x15769=((1.0)*cj1*cj2);
IkReal x15770=((1.0)*x15755);
IkReal x15771=(r20*x15756);
IkReal x15772=(cj3*x15756);
IkReal x15773=(sj3*x15756);
evalcond[0]=((((-1.0)*r02*x15756))+(((-1.0)*x15765)));
evalcond[1]=((((-1.0)*cj5*r20*x15770))+((x15755*x15763)));
evalcond[2]=((((-1.0)*x15757*x15770))+cj0+((x15755*x15760)));
evalcond[3]=(((cj3*r02*x15755))+(((-1.0)*cj1*cj2*x15766))+((cj0*x15758)));
evalcond[4]=((((-1.0)*r02*sj3*x15770))+(((-1.0)*x15764*x15766))+(((-1.0)*x15766*x15768)));
evalcond[5]=(((r21*x15759))+(((-1.0)*x15761*x15771))+((r20*x15767))+x15768+x15764+((r21*x15756*x15762)));
evalcond[6]=(((r21*x15761))+(((-1.0)*x15769))+((x15759*x15771))+((r20*x15762))+x15758+(((-1.0)*x15763*x15773)));
evalcond[7]=(((r10*x15767))+((sj0*x15758))+((x15760*x15772))+(((-1.0)*cj1*cj2*x15765))+((r11*x15759))+(((-1.0)*x15757*x15772)));
evalcond[8]=(((r10*x15762))+(((-1.0)*x15764*x15765))+(((-1.0)*x15760*x15773))+((x15757*x15773))+(((-1.0)*x15765*x15768))+((r11*x15761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15774=((1.0)*sj3);
IkReal x15775=((1.0)*cj5);
CheckValue<IkReal> x15776=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15775))),-1);
if(!x15776.valid){
continue;
}
CheckValue<IkReal> x15777=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15775))),-1);
if(!x15777.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15776.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15777.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15774))+(((-1.0)*cj5*r21*x15774)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15776.value)))+IKsqr(((x15777.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15774))+(((-1.0)*cj5*r21*x15774))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15776.value)), ((x15777.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15774))+(((-1.0)*cj5*r21*x15774))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15778=IKsin(j4);
IkReal x15779=IKcos(j4);
IkReal x15780=(cj5*r10);
IkReal x15781=(sj1*sj2);
IkReal x15782=(cj5*sj3);
IkReal x15783=(r11*sj5);
IkReal x15784=(cj3*cj5);
IkReal x15785=(cj3*sj5);
IkReal x15786=(r21*sj5);
IkReal x15787=(cj2*sj1);
IkReal x15788=((1.0)*sj0);
IkReal x15789=((1.0)*cj0);
IkReal x15790=(sj3*sj5);
IkReal x15791=(cj1*sj2);
IkReal x15792=((1.0)*cj1*cj2);
IkReal x15793=((1.0)*x15778);
IkReal x15794=(r20*x15779);
IkReal x15795=(cj3*x15779);
IkReal x15796=(sj3*x15779);
evalcond[0]=((((-1.0)*r02*x15779))+(((-1.0)*x15788)));
evalcond[1]=((((-1.0)*cj5*r20*x15793))+((x15778*x15786)));
evalcond[2]=(cj0+(((-1.0)*x15780*x15793))+((x15778*x15783)));
evalcond[3]=((((-1.0)*cj1*cj2*x15789))+((cj0*x15781))+((cj3*r02*x15778)));
evalcond[4]=((((-1.0)*x15787*x15789))+(((-1.0)*r02*sj3*x15793))+(((-1.0)*x15789*x15791)));
evalcond[5]=((((-1.0)*x15784*x15794))+((r21*x15782))+((r20*x15790))+x15787+x15791+((r21*x15779*x15785)));
evalcond[6]=(((r21*x15784))+(((-1.0)*x15792))+x15781+(((-1.0)*x15786*x15796))+((x15782*x15794))+((r20*x15785)));
evalcond[7]=((((-1.0)*cj1*cj2*x15788))+((sj0*x15781))+((r10*x15790))+((x15783*x15795))+((r11*x15782))+(((-1.0)*x15780*x15795)));
evalcond[8]=((((-1.0)*x15787*x15788))+((r10*x15785))+((x15780*x15796))+(((-1.0)*x15788*x15791))+(((-1.0)*x15783*x15796))+((r11*x15784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15797=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15797.valid){
continue;
}
CheckValue<IkReal> x15798=IKPowWithIntegerCheck(r02,-1);
if(!x15798.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15797.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15798.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15797.value)))+IKsqr(((-1.0)*sj0*(x15798.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15797.value)), ((-1.0)*sj0*(x15798.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15799=IKsin(j4);
IkReal x15800=IKcos(j4);
IkReal x15801=(cj5*r10);
IkReal x15802=(sj1*sj2);
IkReal x15803=(cj5*sj3);
IkReal x15804=(r11*sj5);
IkReal x15805=(cj3*cj5);
IkReal x15806=(cj3*sj5);
IkReal x15807=(r21*sj5);
IkReal x15808=(cj2*sj1);
IkReal x15809=((1.0)*sj0);
IkReal x15810=((1.0)*cj0);
IkReal x15811=(sj3*sj5);
IkReal x15812=(cj1*sj2);
IkReal x15813=((1.0)*cj1*cj2);
IkReal x15814=((1.0)*x15799);
IkReal x15815=(r20*x15800);
IkReal x15816=(cj3*x15800);
IkReal x15817=(sj3*x15800);
evalcond[0]=((((-1.0)*x15809))+(((-1.0)*r02*x15800)));
evalcond[1]=(((x15799*x15807))+(((-1.0)*cj5*r20*x15814)));
evalcond[2]=(cj0+((x15799*x15804))+(((-1.0)*x15801*x15814)));
evalcond[3]=((((-1.0)*cj1*cj2*x15810))+((cj0*x15802))+((cj3*r02*x15799)));
evalcond[4]=((((-1.0)*x15808*x15810))+(((-1.0)*r02*sj3*x15814))+(((-1.0)*x15810*x15812)));
evalcond[5]=(((r21*x15800*x15806))+((r21*x15803))+(((-1.0)*x15805*x15815))+((r20*x15811))+x15808+x15812);
evalcond[6]=((((-1.0)*x15807*x15817))+(((-1.0)*x15813))+((r21*x15805))+x15802+((r20*x15806))+((x15803*x15815)));
evalcond[7]=(((r10*x15811))+((x15804*x15816))+((r11*x15803))+(((-1.0)*x15801*x15816))+((sj0*x15802))+(((-1.0)*cj1*cj2*x15809)));
evalcond[8]=((((-1.0)*x15804*x15817))+((r10*x15806))+(((-1.0)*x15808*x15809))+((r11*x15805))+(((-1.0)*x15809*x15812))+((x15801*x15817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15818=((1.0)*sj0);
IkReal x15819=((1.0)*cj0);
CheckValue<IkReal> x15820 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15819))+(((-1.0)*r12*x15818)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15819))+(((-1.0)*r11*sj5*x15818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15820.valid){
continue;
}
CheckValue<IkReal> x15821=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15820.value)+(((1.5707963267949)*(x15821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15822=IKsin(j4);
IkReal x15823=IKcos(j4);
IkReal x15824=(r11*sj5);
IkReal x15825=(cj5*r10);
IkReal x15826=(sj1*sj2);
IkReal x15827=(cj5*sj3);
IkReal x15828=((1.0)*sj0);
IkReal x15829=(cj3*cj5);
IkReal x15830=(cj3*sj5);
IkReal x15831=(r21*sj5);
IkReal x15832=(cj2*sj1);
IkReal x15833=(sj3*sj5);
IkReal x15834=(r01*sj5);
IkReal x15835=((1.0)*cj0);
IkReal x15836=(cj1*sj2);
IkReal x15837=((1.0)*x15823);
IkReal x15838=((1.0)*x15822);
IkReal x15839=(cj3*x15823);
IkReal x15840=((1.0)*cj1*cj2);
IkReal x15841=(cj3*x15822);
evalcond[0]=(((x15822*x15831))+(((-1.0)*r22*x15837))+(((-1.0)*cj5*r20*x15838)));
evalcond[1]=((((-1.0)*x15825*x15838))+cj0+((x15822*x15824))+(((-1.0)*r12*x15837)));
evalcond[2]=(((x15822*x15834))+(((-1.0)*r02*x15837))+(((-1.0)*x15828))+(((-1.0)*cj5*r00*x15838)));
evalcond[3]=(((r21*x15823*x15830))+((r20*x15833))+((r21*x15827))+((r22*x15841))+(((-1.0)*r20*x15829*x15837))+x15832+x15836);
evalcond[4]=(((r20*x15823*x15827))+(((-1.0)*sj3*x15831*x15837))+((r20*x15830))+(((-1.0)*r22*sj3*x15838))+(((-1.0)*x15840))+((r21*x15829))+x15826);
evalcond[5]=((((-1.0)*r00*x15829*x15837))+((r01*x15827))+((r01*x15823*x15830))+((r02*x15841))+((r00*x15833))+(((-1.0)*cj1*cj2*x15835))+((cj0*x15826)));
evalcond[6]=(((r10*x15833))+(((-1.0)*cj3*x15825*x15837))+((x15824*x15839))+(((-1.0)*cj1*cj2*x15828))+((r12*x15841))+((r11*x15827))+((sj0*x15826)));
evalcond[7]=((((-1.0)*r02*sj3*x15838))+((r01*x15829))+((r00*x15823*x15827))+(((-1.0)*x15835*x15836))+((r00*x15830))+(((-1.0)*r01*x15833*x15837))+(((-1.0)*x15832*x15835)));
evalcond[8]=(((r10*x15830))+((sj3*x15823*x15825))+(((-1.0)*sj3*x15824*x15837))+(((-1.0)*x15828*x15836))+(((-1.0)*x15828*x15832))+(((-1.0)*r12*sj3*x15838))+((r11*x15829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15842=((1.0)*cj5);
CheckValue<IkReal> x15843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15842)))),-1);
if(!x15843.valid){
continue;
}
CheckValue<IkReal> x15844 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15843.value)))+(x15844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15845=IKsin(j4);
IkReal x15846=IKcos(j4);
IkReal x15847=(r11*sj5);
IkReal x15848=(cj5*r10);
IkReal x15849=(sj1*sj2);
IkReal x15850=(cj5*sj3);
IkReal x15851=((1.0)*sj0);
IkReal x15852=(cj3*cj5);
IkReal x15853=(cj3*sj5);
IkReal x15854=(r21*sj5);
IkReal x15855=(cj2*sj1);
IkReal x15856=(sj3*sj5);
IkReal x15857=(r01*sj5);
IkReal x15858=((1.0)*cj0);
IkReal x15859=(cj1*sj2);
IkReal x15860=((1.0)*x15846);
IkReal x15861=((1.0)*x15845);
IkReal x15862=(cj3*x15846);
IkReal x15863=((1.0)*cj1*cj2);
IkReal x15864=(cj3*x15845);
evalcond[0]=(((x15845*x15854))+(((-1.0)*r22*x15860))+(((-1.0)*cj5*r20*x15861)));
evalcond[1]=(cj0+((x15845*x15847))+(((-1.0)*x15848*x15861))+(((-1.0)*r12*x15860)));
evalcond[2]=((((-1.0)*cj5*r00*x15861))+((x15845*x15857))+(((-1.0)*r02*x15860))+(((-1.0)*x15851)));
evalcond[3]=(((r22*x15864))+((r20*x15856))+(((-1.0)*r20*x15852*x15860))+((r21*x15846*x15853))+((r21*x15850))+x15855+x15859);
evalcond[4]=((((-1.0)*x15863))+(((-1.0)*r22*sj3*x15861))+((r20*x15853))+((r20*x15846*x15850))+((r21*x15852))+(((-1.0)*sj3*x15854*x15860))+x15849);
evalcond[5]=(((r01*x15846*x15853))+((r02*x15864))+((r00*x15856))+((r01*x15850))+(((-1.0)*cj1*cj2*x15858))+((cj0*x15849))+(((-1.0)*r00*x15852*x15860)));
evalcond[6]=(((r12*x15864))+(((-1.0)*cj3*x15848*x15860))+((x15847*x15862))+((r10*x15856))+(((-1.0)*cj1*cj2*x15851))+((sj0*x15849))+((r11*x15850)));
evalcond[7]=(((r00*x15846*x15850))+(((-1.0)*x15855*x15858))+((r00*x15853))+((r01*x15852))+(((-1.0)*r02*sj3*x15861))+(((-1.0)*r01*x15856*x15860))+(((-1.0)*x15858*x15859)));
evalcond[8]=(((sj3*x15846*x15848))+(((-1.0)*x15851*x15855))+(((-1.0)*x15851*x15859))+(((-1.0)*sj3*x15847*x15860))+((r10*x15853))+((r11*x15852))+(((-1.0)*r12*sj3*x15861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15865=((1.0)*cj5);
CheckValue<IkReal> x15866 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15866.valid){
continue;
}
CheckValue<IkReal> x15867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15865)))),-1);
if(!x15867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15866.value)+(((1.5707963267949)*(x15867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15868=IKsin(j4);
IkReal x15869=IKcos(j4);
IkReal x15870=(r11*sj5);
IkReal x15871=(cj5*r10);
IkReal x15872=(sj1*sj2);
IkReal x15873=(cj5*sj3);
IkReal x15874=((1.0)*sj0);
IkReal x15875=(cj3*cj5);
IkReal x15876=(cj3*sj5);
IkReal x15877=(r21*sj5);
IkReal x15878=(cj2*sj1);
IkReal x15879=(sj3*sj5);
IkReal x15880=(r01*sj5);
IkReal x15881=((1.0)*cj0);
IkReal x15882=(cj1*sj2);
IkReal x15883=((1.0)*x15869);
IkReal x15884=((1.0)*x15868);
IkReal x15885=(cj3*x15869);
IkReal x15886=((1.0)*cj1*cj2);
IkReal x15887=(cj3*x15868);
evalcond[0]=((((-1.0)*cj5*r20*x15884))+((x15868*x15877))+(((-1.0)*r22*x15883)));
evalcond[1]=(cj0+(((-1.0)*x15871*x15884))+((x15868*x15870))+(((-1.0)*r12*x15883)));
evalcond[2]=((((-1.0)*cj5*r00*x15884))+(((-1.0)*r02*x15883))+((x15868*x15880))+(((-1.0)*x15874)));
evalcond[3]=((((-1.0)*r20*x15875*x15883))+((r20*x15879))+((r21*x15869*x15876))+((r21*x15873))+((r22*x15887))+x15882+x15878);
evalcond[4]=((((-1.0)*sj3*x15877*x15883))+((r20*x15876))+((r20*x15869*x15873))+((r21*x15875))+(((-1.0)*x15886))+(((-1.0)*r22*sj3*x15884))+x15872);
evalcond[5]=(((r01*x15873))+((r00*x15879))+(((-1.0)*r00*x15875*x15883))+((r01*x15869*x15876))+(((-1.0)*cj1*cj2*x15881))+((r02*x15887))+((cj0*x15872)));
evalcond[6]=(((r11*x15873))+((r10*x15879))+((r12*x15887))+(((-1.0)*cj1*cj2*x15874))+(((-1.0)*cj3*x15871*x15883))+((sj0*x15872))+((x15870*x15885)));
evalcond[7]=(((r01*x15875))+((r00*x15876))+(((-1.0)*x15878*x15881))+(((-1.0)*x15881*x15882))+(((-1.0)*r01*x15879*x15883))+(((-1.0)*r02*sj3*x15884))+((r00*x15869*x15873)));
evalcond[8]=(((r11*x15875))+(((-1.0)*x15874*x15878))+((sj3*x15869*x15871))+((r10*x15876))+(((-1.0)*x15874*x15882))+(((-1.0)*r12*sj3*x15884))+(((-1.0)*sj3*x15870*x15883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15888=cj5*cj5;
IkReal x15889=r21*r21;
IkReal x15890=r20*r20;
IkReal x15891=(r20*r21);
IkReal x15892=((1.0)*cj3);
IkReal x15893=((1.0)*cj5);
IkReal x15894=(cj1*sj2);
IkReal x15895=(cj5*sj5);
IkReal x15896=(sj3*sj5);
IkReal x15897=(cj2*sj1);
IkReal x15898=(r21*sj5);
CheckValue<IkReal> x15899=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x15891*x15895))+(((-1.0)*x15889*x15892))+(((-1.0)*x15888*x15890*x15892))+(((-1.0)*x15892*(r22*r22)))+((cj3*x15888*x15889)))),-1);
if(!x15899.valid){
continue;
}
CheckValue<IkReal> x15900 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r20*r22*x15896))+((r22*x15897))+((r22*x15894)))),IkReal((((sj3*x15889*x15895))+(((-2.0)*sj3*x15888*x15891))+(((-1.0)*r20*x15893*x15897))+(((-1.0)*r20*x15893*x15894))+((sj3*x15891))+((x15897*x15898))+(((-1.0)*x15890*x15893*x15896))+((x15894*x15898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15899.value)))+(x15900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15901=IKsin(j4);
IkReal x15902=IKcos(j4);
IkReal x15903=(cj3*r21);
IkReal x15904=(r21*sj5);
IkReal x15905=(r20*sj5);
IkReal x15906=(cj5*r20);
IkReal x15907=((1.0)*x15902);
IkReal x15908=((1.0)*x15901);
evalcond[0]=(((x15901*x15904))+(((-1.0)*r22*x15907))+(((-1.0)*x15906*x15908)));
evalcond[1]=(((cj2*sj1))+((sj3*x15905))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15901))+(((-1.0)*cj3*x15906*x15907))+((sj5*x15902*x15903)));
evalcond[2]=(((cj5*x15903))+(((-1.0)*sj3*x15904*x15907))+(((-1.0)*r22*sj3*x15908))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15902*x15906))+((cj3*x15905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15909=(cj5*sj4);
IkReal x15910=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15910))+(((-1.0)*r00*x15909)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15910))+((r10*x15909))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15910))+(((-1.0)*r00*x15909))))+IKsqr(((((-1.0)*r11*x15910))+((r10*x15909))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15910))+(((-1.0)*r00*x15909))), ((((-1.0)*r11*x15910))+((r10*x15909))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15911=IKcos(j0);
IkReal x15912=IKsin(j0);
IkReal x15913=(r02*sj4);
IkReal x15914=((1.0)*sj3);
IkReal x15915=(r12*sj4);
IkReal x15916=((1.0)*cj3);
IkReal x15917=(r11*sj5);
IkReal x15918=(cj3*cj4);
IkReal x15919=((1.0)*sj2);
IkReal x15920=(cj5*r01);
IkReal x15921=(r00*sj5);
IkReal x15922=(r01*sj5);
IkReal x15923=(sj1*sj2);
IkReal x15924=(cj1*cj2);
IkReal x15925=(cj5*r11);
IkReal x15926=((1.0)*cj2);
IkReal x15927=(r10*sj5);
IkReal x15928=((1.0)*cj4);
IkReal x15929=(cj4*cj5*r00);
IkReal x15930=(cj1*x15911);
IkReal x15931=(cj4*cj5*r10);
IkReal x15932=((0.392)*x15912);
IkReal x15933=((1.0)*x15912);
IkReal x15934=(cj1*x15912);
IkReal x15935=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x15928))+(((-1.0)*r10*x15935))+((sj4*x15917))+x15911);
evalcond[1]=((((-1.0)*r00*x15935))+(((-1.0)*x15933))+(((-1.0)*r02*x15928))+((sj4*x15922)));
evalcond[2]=((((0.392)*x15911*x15924))+(((-0.099)*x15920))+(((-0.099)*x15921))+(((-1.0)*px))+(((-0.392)*x15911*x15923))+(((-0.133)*x15912))+(((0.425)*x15930)));
evalcond[3]=((((-1.0)*x15923*x15932))+(((-0.099)*x15925))+(((-0.099)*x15927))+(((-1.0)*py))+((x15924*x15932))+(((0.425)*x15934))+(((0.133)*x15911)));
evalcond[4]=((((-1.0)*x15911*x15924))+(((-1.0)*x15916*x15929))+((sj3*x15921))+((sj3*x15920))+((x15918*x15922))+((x15911*x15923))+((cj3*x15913)));
evalcond[5]=(((sj3*x15927))+((sj3*x15925))+((x15912*x15923))+((x15917*x15918))+((cj3*x15915))+(((-1.0)*x15924*x15933))+(((-1.0)*x15916*x15931)));
evalcond[6]=((((-1.0)*x15919*x15930))+((sj3*x15929))+((cj3*x15920))+((cj3*x15921))+(((-1.0)*cj4*x15914*x15922))+(((-1.0)*x15913*x15914))+(((-1.0)*sj1*x15911*x15926)));
evalcond[7]=((((-1.0)*x15919*x15934))+((cj3*x15927))+((cj3*x15925))+(((-1.0)*x15914*x15915))+(((-1.0)*cj4*x15914*x15917))+(((-1.0)*sj1*x15912*x15926))+((sj3*x15931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15936=cj5*cj5;
IkReal x15937=r21*r21;
IkReal x15938=r20*r20;
IkReal x15939=(r20*r21);
IkReal x15940=(sj1*sj2);
IkReal x15941=(r21*sj5);
IkReal x15942=(cj1*cj2);
IkReal x15943=(cj5*r20);
IkReal x15944=(cj5*sj5);
IkReal x15945=(cj3*r22);
IkReal x15946=(sj3*x15937);
CheckValue<IkReal> x15947 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15942))+((r20*sj5*x15945))+((cj5*r21*x15945))+((r22*x15940)))),IkReal((((x15940*x15941))+((x15942*x15943))+(((-1.0)*x15941*x15942))+(((-1.0)*x15940*x15943))+(((-2.0)*cj3*x15936*x15939))+((cj3*x15939))+((cj3*x15937*x15944))+(((-1.0)*cj3*x15938*x15944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15947.valid){
continue;
}
CheckValue<IkReal> x15948=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15939*x15944))+(((-1.0)*x15936*x15946))+((sj3*x15936*x15938))+x15946)),-1);
if(!x15948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15947.value)+(((1.5707963267949)*(x15948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15949=IKsin(j4);
IkReal x15950=IKcos(j4);
IkReal x15951=(cj3*r21);
IkReal x15952=(r21*sj5);
IkReal x15953=(r20*sj5);
IkReal x15954=(cj5*r20);
IkReal x15955=((1.0)*x15950);
IkReal x15956=((1.0)*x15949);
evalcond[0]=((((-1.0)*r22*x15955))+((x15949*x15952))+(((-1.0)*x15954*x15956)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((sj5*x15950*x15951))+((cj1*sj2))+((cj3*r22*x15949))+(((-1.0)*cj3*x15954*x15955))+((sj3*x15953)));
evalcond[2]=((((-1.0)*r22*sj3*x15956))+((cj5*x15951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15952*x15955))+((sj3*x15950*x15954))+((cj3*x15953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15957=(cj5*sj4);
IkReal x15958=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15958))+(((-1.0)*r00*x15957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15958))+((r10*x15957))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15958))+(((-1.0)*r00*x15957))))+IKsqr(((((-1.0)*r11*x15958))+((r10*x15957))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15958))+(((-1.0)*r00*x15957))), ((((-1.0)*r11*x15958))+((r10*x15957))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15959=IKcos(j0);
IkReal x15960=IKsin(j0);
IkReal x15961=(r02*sj4);
IkReal x15962=((1.0)*sj3);
IkReal x15963=(r12*sj4);
IkReal x15964=((1.0)*cj3);
IkReal x15965=(r11*sj5);
IkReal x15966=(cj3*cj4);
IkReal x15967=((1.0)*sj2);
IkReal x15968=(cj5*r01);
IkReal x15969=(r00*sj5);
IkReal x15970=(r01*sj5);
IkReal x15971=(sj1*sj2);
IkReal x15972=(cj1*cj2);
IkReal x15973=(cj5*r11);
IkReal x15974=((1.0)*cj2);
IkReal x15975=(r10*sj5);
IkReal x15976=((1.0)*cj4);
IkReal x15977=(cj4*cj5*r00);
IkReal x15978=(cj1*x15959);
IkReal x15979=(cj4*cj5*r10);
IkReal x15980=((0.392)*x15960);
IkReal x15981=((1.0)*x15960);
IkReal x15982=(cj1*x15960);
IkReal x15983=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x15965))+(((-1.0)*r12*x15976))+(((-1.0)*r10*x15983))+x15959);
evalcond[1]=((((-1.0)*x15981))+((sj4*x15970))+(((-1.0)*r02*x15976))+(((-1.0)*r00*x15983)));
evalcond[2]=((((-0.133)*x15960))+(((-0.392)*x15959*x15971))+(((-1.0)*px))+(((0.425)*x15978))+(((0.392)*x15959*x15972))+(((-0.099)*x15969))+(((-0.099)*x15968)));
evalcond[3]=((((-1.0)*x15971*x15980))+(((0.425)*x15982))+((x15972*x15980))+(((-1.0)*py))+(((0.133)*x15959))+(((-0.099)*x15973))+(((-0.099)*x15975)));
evalcond[4]=((((-1.0)*x15964*x15977))+(((-1.0)*x15959*x15972))+((x15966*x15970))+((sj3*x15969))+((sj3*x15968))+((cj3*x15961))+((x15959*x15971)));
evalcond[5]=((((-1.0)*x15964*x15979))+(((-1.0)*x15972*x15981))+((x15965*x15966))+((x15960*x15971))+((sj3*x15973))+((sj3*x15975))+((cj3*x15963)));
evalcond[6]=((((-1.0)*sj1*x15959*x15974))+(((-1.0)*x15967*x15978))+((sj3*x15977))+(((-1.0)*x15961*x15962))+((cj3*x15969))+((cj3*x15968))+(((-1.0)*cj4*x15962*x15970)));
evalcond[7]=((((-1.0)*x15962*x15963))+(((-1.0)*sj1*x15960*x15974))+(((-1.0)*x15967*x15982))+((sj3*x15979))+((cj3*x15975))+((cj3*x15973))+(((-1.0)*cj4*x15962*x15965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e (bd49b91ff13dba3ce4618723c2f58d5f)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
